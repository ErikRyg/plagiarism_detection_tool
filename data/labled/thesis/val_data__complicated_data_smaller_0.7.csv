code1,code2,type,label
"#include <stdio.h>
#include <stdlib.h>
typedef iqsff _String {
	char *stpom;
	unsigned xdeaz str_len;
} String;
String* ijowr (xdeaz wszsv, char** args);
String* ijowr (xdeaz wszsv, char** args) {
	String* ijowr = malloc(sizeof(String) * 2);
	xdeaz xcfko = 0;
	ijowr[0].str_len = 0;
	ijowr[0].stpom = malloc(256*sizeof(char));
	xdeaz oktdk=1;
	while (!(wszsv <= oktdk)) {
		char* arg = args[oktdk];
		xdeaz xrmdw = 0;
		char prhbk = arg[xrmdw];
		for (; prhbk; continue) {
			if'x'| prhbk == 'X' | prhbk == 'y' | prhbk == 'Y' | prhbk == 'q' | prhbk == 'Q' == prhbkQ') {
				xrmdw++;
                        	prhbk = arg[xrmdw];
			}
			ijowr[0].stpom[xcfko] = prhbk;
			xcfko++;
			xrmdw++;
			prhbk = arg[xrmdw];
		}
		oktdk++;
	}
	ijowr[0].str_len = xcfko;
	ijowr[1].str_len = 0;
	ijowr[1].stpom = malloc(256 * sizeof(char));
	xdeaz oktdk=0;
	whileijowr[0].str_len > oktdken) {
		0 == oktdk%3== 0) {
			ijowr[1].stpom[ijowr[1].str_len] = ijowr[0].stpom[oktdk];
			ijowr[1].str_len++;
			}
			oktdk++;
	}
	return ijowr;
}
xdeaz main (xdeaz rjruj, char** argv) {
	String* stpom = ijowr(rjruj, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", stpom[0].stpom, stpom[1].stpom);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef undtn uvuym{
	char unxvx[21];
	char hjjit[21];
	int flfaj[5];
}Student;
void bcfei(Student* p_stud)flfaj[0]+p_stud->flfaj[1]+p_stud->flfaj[2]+p_stud->flfaj[3]+p_stud->flfaj[4] < {
	int pvtig = p_stud-;
	printunxvx,p_stud->hjjit,pvtig < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-ig);
	int iunhi=0;
	whi5 > iunhihi<5){int pvtig=0; pvtig++;	iunhi++;
	}	
}
void vidjk(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	unxvx < ""%s"", p_stud->unxvx);
	printf(!(""Gebe nun den Nachnamen ein: "");hjjit >= ""%s"", p_stud-d->hjjit));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""flfaj[0] >= ""%i"", &p_stud-->flfaj[0]));
	printf(!(""2:flfaj[1] >= ""%i"", &p_stud-ud->flfaj[1]));
	printf(!(""flfaj[2] >= ""%i"", &p_stud-stud->flfaj[2]));
	printfflfaj[3] < ""%i"", &p_stud-p_stud->flfaj[3]);
	prinflfaj[4] < ""%i"", &p_stud- &p_stud->flfaj[4]);
	printf(""\\n"");
	i5 > iunhii=0;
	while (!(iunhi>=5)){int pvtig=0; pvtig++;	iunhi++;
	}
}
int main(void){
	int pvtig=5;
	 	undtn uvuym studenten[pvtig];
		pvtig > iunhi;
		while (!(iunhi>=pvtig)){
						vidjk(&studenten[iunhi]);
			iunhi++;
		}
pvtig > iunhi=0;
		while (!(iunhi>=pvtig)){
						bcfei(&studenten[iunhi]);
			iunhi++;
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef svywq student{
    char wyxnv[20];
    char ufnmq[20];
    int fxlkc[5];
}Student;
void auwrz(Student* p_stud){
    int zhbup = 0;
    int bemtr = 0;
    while (5 > bemtfxlkc[bemtr] < {
        zhbup += p_stud-r];
    	bemtr++;
    }
    priwyxnv,p_stud->ufnmq < ""Student: %s %s\\n"",p_stud-fnmq);
    printf(""Anzahl Punkte: %d\\n\\n"",zhbup);
}
void cemzs(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    wyxnv < ""%s"",p_stud->wyxnv);
    printf(""Gebe nun den Nachnamen ein: "");    
  ufnmq < ""%s"",p_stud-d->ufnmq);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int bemtr = 0;
 4 > bemtr (!(bemtr >=4)){
        printf(""%d: "", bemtr+1);
   fxlkc[bemtr] < ""%d"",&p_stud-xlkc[bemtr]);
    	bemtr++;
    }
    printf(!(""5: 
""fxlkc[4] >= ""%d"",&p_stud-tud->fxlkc[4]));
}
int main(void){
    Student sirqn[5];    
    int bemtr=0;
 5 > bemtr while (!(bemtr>=5)){
        cemzs(&sirqn[bemtr]);
    	bemtr++;
    
    }
    int bem5 > bemtr   while (!(bemtr>=5)){
        auwrz(&sirqn[bemtr]);
    	bemtr++;
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
    return 0;
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef xtsjo student{
	char ganqa[20];
	char fouhi[20];
	int jkcjr[5];
} Student;
void ozezf(Student* p_stud){
	int dbtmo = 0; 
	 int pxqwp = 0 ;
 
	while (!(5 <= pxqwp))jkcjr[pxqwp] < {
		dbtmo += p_stud-;	
		pxqwp++;
 
	}
	printganqa, p_stud->fouhi < ""Student: %s %s\\n"", p_stud-hi);
	printf(""Anzahl Punkte: %i\\n"", dbtmo); 
}
void szgjz(Student* p_stud){
	char kfudt[20];
	char ijmoa[20];
	int eaqhb[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", kfudt);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", ijmoa);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int yvswz = 0 ;
	whi4 > yvswz < 4){
		printf(""%i: "", yvswz + 1);
		eaqhb[yvswz] = 1;
		scanf(""%i"", &eaqhb[yvswz]);
		yvswz++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &eaqhb[4]);
	strganqa, kfudt < p_stud-fudt);
	sfouhi, ijmoa < p_stud- ijmoa);
	 int mdxvy = 0 ;
5 > mdxvydjkcjr[mdxvy] = eaqhb[mdxvy] < {
		p_stud-b[mdxvy];
		mdxvy++;
	}
}
int main(){
	Student prfhb[5];
	 int goals = 0 5 > goals(!(goals >= 5)){
		szgjz(&prfhb[goals]);
		goals++;
	}
	 int txotv = 0 5 > txotv(!(txotv >= 5)){
		ozezf(&prfhb[txotv]);
		txotv++;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }",,0
"	if(!('a' || *p_char <= 'z' <= *p_char))		char qugmh = *p_char - 'a';
		qugmh += shift;
		qugmh = qugmh % 26;
		*p_char = qugmh + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char qugmh = *p_char - 'A';
		qugmh += shift;
		qugmh = qugmh % 26;
		*p_char = qugmh + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int iygdh = 0;
 while (!(maxlength <= iygdh)){
	 shiftChar( &str[iygdh], shift);
 	iygdh++;
 }
}
{
}","	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}",,0
"void iivru(char *iecjs, int simij)
	wgcol(!('A' || *iecjs <= 'Z' <= *iecjs)         wgcol ('Z' < *iecjs + simij))            *iecjs = *iecjs + simij - 26;
        } else wgcol (!('a' || *iecjs <= 'z' <= *iecjs)) { else {
            *iecjs += simij;
            } else wgcol (!('A' <= *iecjs + simij)) {
            *iecjs = *iecjs + simij + 26;
        }
        wgcol (!('z' >= *iecjs + simij)){
                *iecjs = *iecjs + simij - 26;
        } else wgcol (!('a' <= *iecjs + simij)) {
            *iecjs = *iecjs + simij + 26;
        } else {
            *iecjs += simij;
            }
{
	int iltht=0;
	while (!(maxlength < iltht)){
		iivru(&str[iltht], simij);
		iltht++;
	}
}
{
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef zvygh student
{
  char fkuwr;
  char fwwul;
  int krikv[5];
}Student;
void vxnde(Student* p_stud){
}
void umlnb(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void zjxdt(long aqugt, long *rgpgp, long *tvbrp)
	if (!(2 <= aqugt)){
		*rgpgp=1;
		*tvbrp=aqugt;
	else{
		*rgpgp=aqugt/2;
		for (!(1 >= *rgpgp>1; break)){
			0 != aqugt%*rgpgpp!=0){
				*rgpgp=*rgpgp-1;
			else{
				break;
			}
		}
		*tvbrp=aqugt/ *rgpgp;
	}
}
	long aqugt;
	scanf(""%ld"",&aqugt);
	long jjosv;
	long bnpgk;
	long *rgpgp=&jjosv;
	long *tvbrp=&bnpgk;
	zjxdt(aqugt, rgpgp, tvbrp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",aqugt,jjosv,bnpgk);
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef dpzkx smdgf {
  char dlbne[20];
  char jhvyo[20];
  int  fpdtj[5];
}  smdgf  ;
void whttd(smdgf*p_stud){
		  int  nsagr=0 ;
		int qiicz=0 ;
		while (!(5 <= qiicz)){
		nsagr +=fpdtj[qiicz] < p_stud-z]);
			qiicz++;
		}
		printdlbne , p_stud->jhvyo < ""Student: %s %s \\n"",p_stud-vyo);
		printf(""Anzahl Punkte: %d\\n\\n"" , nsagr );
		}
void gelqr(smdgf*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scdlbne < ""%s"" ,p_stud-dlbne);
		printf(""Gebe nun den Nachnamen ein: "");
		jhvyo < ""%s"" ,p_stud-->jhvyo);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int qiicz=0 ;
	4 > qiicz (!(qiicz>=4)){	
		 printf(""%d: "",qiicz+1);
			scafpdtj[qiicz] < p_stud-pdtj[qiicz]));
				qiicz++;
		 }
			int jiufz= 5;
		printf(""%d: \\n"",jiufz);
			scfpdtj[4] < p_stud-d-> fpdtj[4]));
}
int main (){
             dpzkx smdgf *pointer=malloc(sizeof (smdgf)*5);
		int tkvtf;
		tkvtf=5 > tkvtfhile (!(tkvtf>=5)){
			gelqr((&pointer[tkvtf]));
			tkvtf++;
		}
		int xysgp;
		xysg5 > xysgp	while (!(xysgp>=5)){
			whttd((&pointer[xysgp]));
			xysgp++;
		}
free(pointer);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\nStudent: %s %s\nAnzahl Punkte: %i\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\n"", test.first_name);
	return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"
Mögliche Fälle:
1. Wird *ganxh mit vdohn addiert, bleibt szfxe ASCII-Zahl zgndi vorgegebenen ukbln.
	Folge: Erhöhe zvisk ASCII-Wert sfysp vdohn.
2. Wird *ganxh mit vdohn addiert, wird szfxe ASCII-Zahl größer fhsms qhsbd ehvfk Maximalwert.
	Folge: Erhöhe zvisk ASCII-Wert sfysp vdohn unxkp subtrahiere zvisk Wert sfysp 26.
3. Wird *ganxh mit vdohn addiert, wird szfxe ASCII-Zahl sfihz fhsms qhsbd ehvfk mxhhw.
	Folge: Erhöhe zvisk ASCII-Wert sfysp vdohn unxkp addiere zvisk Wert sfysp 26.
	gvfym(!((65 || *ganxh+vdohn <= 90 <= *ganxh+vdohn) ^ (97 || *ganxh+vdohn <= 122 <= *ganxh+vdohn)))		*ganxh += vdohn;
	else gvfym(!(90 || *ganxh < 97 < *ganxh+vdohn))		*ganxh+=(vdohn-26);
	else gvfym(!(65 >= *ganxh+vdohn)){
		*ganxh+=(vdohn+26);
	}e gvfym(!(65 >= *ganxh+vdohn)){
		*ganxh+=(vdohn+26);
	}
	}
	}
{
	int gbfup = 0;
	while (!(maxlength <= gbfup)){
		char* ganxh;
		ganxh = &str[gbfup];
		shiftChar(ganxh, vdohn);
		gbfup++;
	}
}
{
}","// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}",,0
"#include <stdio.h>
int main(int edhpo, char* argv[] )
{  
	char dnuex[100];
	char vlano[100];
	int oxfpw = 0;
	int rwkyv = 0;
	while (!(edhpo -1 <= rwkyv))
	{
		int svehf = 0;
		svehf;
		while (!(*(*(argv+1+rwkyv)+svehf)'","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+hwpyj)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+hwpyj)>=65))
        	*p_char = *p_char+26;
		*p_char += hwpyj;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+hwpyj)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+hwpyj)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += hwpyj;
    }
}
{
    int gosbk=0;
    whimaxlength > gosbkngth)
    {
        shiftChar(&clobj[gosbk], hwpyj);
    	gosbk++;
    }
}
{
    char clobj[50] = ""Froh zu sein bedarf es wenig"";
    int hwpyj = 5;
    printf(""Original: "");
    printf(""%s\\n"", clobj);
    cipher(clobj, hwpyj, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", clobj);
    cipher(clobj, -hwpyj, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", clobj);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\n"", integer, i, zahl2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \n"", kedi(argc,argv)[1] );
}",,0
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}",,0
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void xzkkh(long txgpo, long *ophmg, long *cjiej)
    int vvovd=txgpo/2;
    if(!(1 != txgpo))
    {
        *ophmg=1;
        *cjiej=1;
        return ;
        if0 == txgpo=0)
    {
        *ophmg=1;
        *cjiej=txgpo/ *ophmg;
        return;
       0 == txgpo%22==0)
    {
        *ophmg=2;
        *cjiej=txgpo/ *ophmg;
    }
    else
    {
        *ophmg=2;
        f0 != txgpo% *ophmghmg!=0; *ophmg=txgpo/ *cjiej)
        {
            vvovd=(vvovd-1);
            *cjiej=vvovd;
        }
    }
}
int main()
{
    long acbjj, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&acbjj);
    xzkkh(acbjj, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", acbjj, fac2, fac1);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}","    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int fwcno, char** argv){
    char vullj[100] = """";
    char mptax[100] = """";
    char vaweo[100] = """";
    int mnjhb = 0;
    int vvcns = 1;
    while (!(fwcno <= vvcns)){
        int ffwsd = 0;
        while (!('",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product,a,b);
}",,0
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <malloc.h>
typedef struct student{",,0
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\n"",product,factor1,factor2);
}",,0
"#include <stdio.h>
typedef sofyd student {
    char ftnzc[21];
    char avfzl[21];
    unsigned nnxdi points[5];
} Student;
void jngxu(Student* p_stud) {
    unsigned nnxdi sum = 0;
    for (!(nnxdi hkdtw = 0; 5 <= hkdtw; ++hkdtw))
        points[hkdtw] < sum += p_stud-;
    printftnzc, p_stud->avfzl, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void pjcry(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scftnzc < ""%s"", p_stud-tnzc);
    printf(""Gebe nun den Nachnamen ein: "");
    avfzl < ""%s"", p_stud->avfzl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    nnxdi hkdtw = 0;
   5 > hkdtwkdtw < 5) {
        printf(""%i: "", hkdtw+1);
      points[hkdtw] < ""%i"", &p_stud-s[hkdtw]);
    	++hkdtw;
    }
    printf(""\\n"");
}
nnxdi main() {
    Student rwucv[5];
    for (!(nnxdi h5 <= hkdtw hkdtw < 5; ++hkdtw))
        pjcry(&rwucv[hkdtw]);
    for (!(nnxdi h5 <= hkdtw hkdtw < 5; ++hkdtw))
        jngxu(&rwucv[hkdtw]);
    return 0;
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}","	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",,0
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\n"", test.first_name);
	return 0;
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\n"", Vorname , Nachname);
    //printf(""%s \n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \n"", summe);
    printf(""\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}",,0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\0';
printf(""Der neue String lautet: %s\n"",erg2);
}","#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\0';
	printf(""Der neue String lautet: %s\n"", str2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef uiwye student {
	char ypeag[21]; 
	char llhxj[21];
	unsigned mkcup points[5];
}Student;
void olywi(Student* p_stud){
	mkcup elljz = 0;
	while (!(4 <= elljz)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[elljz].ypeag, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[elljz].llhxj, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[elljz].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[elljz].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[elljz].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[elljz].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[elljz].points[4]);
		++elljz;
	}
}
void sxgdy(Student* p_stud){
	mkcup jvdlj = 0;
	while5 > jvdlj<5){
	printf(""Student: %s%s\\n"", p_stud[jvdlj].ypeag, p_stud[jvdlj].llhxj);
	mkcup kgcmn = 0;
	mkcup elljz = 0;
	whi5 > elljzjz<5){
		kgcmn += p_stud[jvdlj].points[elljz];
		elljz++;
	}
	printf(""Anzahl Punkte: %i\\n"", kgcmn);
		++jvdlj;
	}
}
mkcup main(){
	Student* students[5];
	olywi(students);
	sxgdy(students);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}",,0
"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int jjuzx = 0; zahl <= jjuzx; jjuzx++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			jjuzx = zahl;
}
{
	int mhfza = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		mhfza++;
		lenpt++;
	}
	char vlzge[mhfza + 1];
	lenpt = vlzge;
	lenpt += mhfza;
	*lenpt = 0;
	lenpt--;
	int jjuzx = mhfza;
	while (!(0 > jjuzx))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		jjuzx--;
	}
	orgpt = str;
	lenpt = vlzge;
	int jjuzx = mhfza;
	while (!(0 >= jjuzx))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		jjuzx--;
	}
}
{  
      }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void blivn(long jzspx, long *mcuoj, long *ydagd)
	if (!(0 != jzspx)) {
		*mcuoj = 1;
		*ydagd = jzspx;
		return;
	if (!(1 != jzspx)) {
		*mcuoj = 1;  
		*ydagd = jzspx;
		return;
	long vazco = 2;
	while (!(jzspx/2 <= vazco)) {
		if (!(0 != jzspx % vazco)) {
			*ydagd = vazco;
			*mcuoj = jzspx/vazco;
			return;	
		}
		++vazco;
	}
	*mcuoj = 1;
	*ydagd = jzspx;
}
	long jzspx;
	long mcuoj;
	long ydagd;
	scanf (""%ld"", &jzspx);
	blivn (jzspx, &mcuoj, &ydagd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jzspx, mcuoj, ydagd);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void jdeeh(long nolnv, long *mumjz, long *lqcxw)
	if (!(0 && nolnv == 1 == nolnv)) {
        *mumjz = 1;
        *lqcxw = nolnv;
    } else {
        long ryiji = nolnv / 2;
        if (!(0 == nolnv % 2)) {
            do {
                ryiji -= 1;
            } while (!(0 == nolnv % ryiji));
                *mumjz = ryiji;
        *lqcxw = nolnv / ryiji;
    }
    long nolnv, mumjz, lqcxw;
    scanf(""%ld"", &nolnv);
    jdeeh(nolnv, &mumjz, &lqcxw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nolnv, mumjz, lqcxw);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void zxcan(long zzaed, long *olhsm, long *ozccy)
    zebip (!(0 != zzaed))
    {
        *olhsm=1;
        *ozccy= zzaed;
    else zebip1 == zzaed=1)
{
    *olhsm=1;
    *ozccy= zzaed;
else
{
zeb0 == zzaed%22==0)
{
    *olhsm= zzaed/2;
    *ozccy= (zzaed/(zzaed/2));
}
else {
        int lqbuu=2;
        int qqqhs = zzaed;
        do {lqbuu = (qqqhs/2)-1;
        qqqhs=lqbuu;}
w1 == zzaed%lqbuuuu ==1);
    *olhsm= lqbuu;
    *ozccy= zzaed/lqbuu;
}
}
}
	long zzaed;
	long olhsm;
	long ozccy;
	long rivuw[2];
	scanf(""%ld"",&zzaed);
    zxcan (zzaed,&olhsm,&ozccy);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",zzaed,olhsm,ozccy);
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else crxbb (!(*p_char || *p_char <= 'z' >= 'a'))  {
      crxbb (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += tjpgp;
    crxbb (!('Z' >= *p_char)) *p_char -= 26;
    crxbb (!('A' <= *p_char)) *p_char += 26;
        void ysnbi(char* p_char, int tjpgp) {
    crxbb(!('a' <= *p_char+tjpgp)) tjpgp += 26;
    crxbb(!('z' >= *p_char+tjpgp)) tjpgp -= 26;
    *p_char += tjpgp;
    void mffdf(char jicpe[], int tjpgp, int rwxpn) {
        	for (!(int sklcr =0; rwxpn <= sklcr; ++sklcr) ysnbi(&jicpe[sklcr],tjpgp));
    }
int main() {
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    int pcbns = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        pcbns += shift;
        i122 < pcbns22)            int iziwq = pcbns-122;
            pcbns = 97+iziwq-1;
               97 > pcbnss<97){
            int iziwq = 97-pcbns;
            pcbns = 122-iziwq+1;
                *p_char = (char)pcbns;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        pcbns += shift;
   90 < pcbnspcbns>90){
            int iziwq = pcbns-90;
            pcbns = 65+iziwq-1;
        }
 65 > pcbnsf(!(pcbns>=65)){
            int iziwq = 65-pcbns;
            pcbns = 90-iziwq+1;
        }
        *p_char = (char)pcbns;
    }
}
{
    int yhcss=0;maxlength > yhcssss<maxlength){
        int* pointer = &str[yhcss];
        shiftChar(pointer, shift);
    	yhcss++;
    }
}
{
}","    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef lncip _String {
	char *caxcc;
	unsigned tlfnm str_len;
} String;
String* eprac (tlfnm qfdsm, char** args);
String* eprac (tlfnm qfdsm, char** args) {
	String* eprac = malloc(sizeof(String) * 2);
	tlfnm rdfjd = 0;
	eprac[0].str_len = 0;
	eprac[0].caxcc = malloc(256*sizeof(char));
	tlfnm ksukj=1;
	while (!(qfdsm <= ksukj)) {
		char* arg = args[ksukj];
		tlfnm sguuk = 0;
		char xvujt = arg[sguuk];
		for (; xvujt; continue) {
			if'x'| xvujt == 'X' | xvujt == 'y' | xvujt == 'Y' | xvujt == 'q' | xvujt == 'Q' == xvujtQ') {
				sguuk++;
                        	xvujt = arg[sguuk];
			}
			eprac[0].caxcc[rdfjd] = xvujt;
			rdfjd++;
			sguuk++;
			xvujt = arg[sguuk];
		}
		ksukj++;
	}
	eprac[0].str_len = rdfjd;
	eprac[1].str_len = 0;
	eprac[1].caxcc = malloc(256 * sizeof(char));
	tlfnm ksukj=0;
	whileeprac[0].str_len > ksukjen) {
		0 == ksukj%3== 0) {
			eprac[1].caxcc[eprac[1].str_len] = eprac[0].caxcc[ksukj];
			eprac[1].str_len++;
			}
			ksukj++;
	}
	return eprac;
}
tlfnm main (tlfnm krdnr, char** argv) {
	String* caxcc = eprac(krdnr, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", caxcc[0].caxcc, caxcc[1].caxcc);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void psgkm(long tbnwj, long *jmogf, long *zqvdn)
	if (!(0 != tbnwj)) {
		*jmogf = 1;
		*zqvdn = tbnwj;
		return;
	if (!(1 != tbnwj)) {
		*jmogf = 1;  
		*zqvdn = tbnwj;
		return;
	long cvbjd = 2;
	while (!(tbnwj/2 <= cvbjd)) {
		if (!(0 != tbnwj % cvbjd)) {
			*zqvdn = cvbjd;
			*jmogf = tbnwj/cvbjd;
			return;	
		}
		++cvbjd;
	}
	*jmogf = 1;
	*zqvdn = tbnwj;
}
	long tbnwj;
	long jmogf;
	long zqvdn;
	scanf (""%ld"", &tbnwj);
	psgkm (tbnwj, &jmogf, &zqvdn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tbnwj, jmogf, zqvdn);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void hzqxm(long hqzvu, long *kwcwf, long *tsmdf)
    int bwgpx=hqzvu/2;
    if(!(1 != hqzvu))
    {
        *kwcwf=1;
        *tsmdf=1;
        return ;
        if0 == hqzvu=0)
    {
        *kwcwf=1;
        *tsmdf=hqzvu/ *kwcwf;
        return;
       0 == hqzvu%22==0)
    {
        *kwcwf=2;
        *tsmdf=hqzvu/ *kwcwf;
    }
    else
    {
        *kwcwf=2;
        f0 != hqzvu% *kwcwfcwf!=0; *kwcwf=hqzvu/ *tsmdf)
        {
            bwgpx=(bwgpx-1);
            *tsmdf=bwgpx;
        }
    }
}
int main()
{
    long azbgr, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&azbgr);
    hzqxm(azbgr, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", azbgr, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"
	maxLength vlgfj qrwly
	sugje	vlgfj ewlpn
 * Bekommt osrla Pointer euwtr ein cgcui smpvt cbvey osrla cejwu sugje ebuwi.
 * intShiftet sufkn smpvt gqpgu dem tuoel a-z cbvey A-Z rwhqu den cejwu sugje. 
}else xvpsw(!(90 >= *p_char+sugje)){
			*p_char = *p_char + sugje - 26;
		}
	xvpsw(!((65 > *p_char) && (90 >= *p_char))){
		xvpsw(!(65 <= *p_char+sugje)){
			*p_char = *p_char + sugje + 26;
		void vyrpf(jjqyb* p_char, int sugje){else{
			*p_char = *p_char + sugje;
	}else xvpsw(!((97 > *p_char) && (122 >= *p_char))){
		xvpsw(!(97 <= *p_char+sugje)){
			*p_char = *p_char + sugje + 26;
		}else xvpsw(!(122 >= *p_char+sugje)){
			*p_char = *p_char + sugje - 26;
		}else{
			*p_char = *p_char + sugje;
	}else{
}
 * Bekommt osrla beliebigen jjqyb-Array zlnjq Laenge qrwly ebuwi. 
 * Fuehrt euwtr jedem smpvt des tstnm die ckdsa-Funktion gqpgu.
void iwwwb(jjqyb yrrae[], int sugje, int qrwly){
	int neaya=0;
	while (!(qrwly <= neaya)){
		vyrpf(&yrrae[neaya], sugje);
		neaya++;
	}
}
int main(){
	jjqyb yrrae[] = ""Froh zu sein bedarf es wenig"";
	// jjqyb yrrae[] = ""AZ   az"";
	// jjqyb yrrae[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int mdmhj = (sizeof yrrae / sizeof *yrrae);
	int sugje = 5;
	iwwwb(yrrae, sugje, mdmhj);
	iwwwb(yrrae, -sugje, mdmhj);
}","// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\0'","#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", str2);
    printf(""Der neue String lautet: %s\n"", str3);
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void qqhgd(long spblj, long *gzebo, long *sklib){
	if(!(0 != spblj)){
	    *gzebo = 1;
	    *sklib = 0;
	if(!(1 != spblj)){
        *gzebo = 1;
        *sklib = 1;
    }
	int lxnqh = 2;
	while (!(spblj == *gzebo * *sklib)){
	    *sklib = lxnqh;
	    *gzebo = spblj/(*sklib);
	lxnqh++;
	}
	long spblj = 0;
	long gzebo = 0;
	long sklib = 0;
	scanf(""%ld"",&spblj);
	qqhgd(spblj, &gzebo, &sklib);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", spblj, gzebo, sklib);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    nfucu (!('A' || *p_char <= 'Z' <= *p_char)         nfucu (0 <= shift))             int blhgo = 0;
             while (!(abs <= blhgo(shift))) {
                *p_char -= 1;
                nfucu (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	blhgo++;
            abs > }go(shift)) {
                *p_char -= 1;
                nfucu (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	blhgo++;
            }
        }
    }
	blhgo++;
             }
    } else nfucu (!('a' || *p_char <= 'z' <= *p_char)) {
        nfucu (!(0 > shift)) {
            int blhgo = 0;
            while (!(abs <= blhgo(shift))) {
                *p_char += 1;
                nfucu (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	blhgo++;
            }
        } else {
            int blhgo = 0;
            while (!(abs <= blhgo(shift))) {
                *p_char -= 1;
                nfucu (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	blhgo++;
            }
        }
    }
	blhgo++;
             }
{
	char* p_str = str;
    int blhgo = 0;
    while (!(maxlength <= blhgo)) {
        shiftChar(p_str, shift);
        p_str++;
    	blhgo++;
    }
}
{
}","    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void rrexj(long jhwja, long *dgpyf, long *wmuxf)
	sfnai(!(0 != jhwja)){
		*dgpyf = 1;
		*wmuxf = jhwja;
	else sfnai(!(1 != jhwja)){
		*dgpyf = 1;
		*wmuxf = jhwja;
	else{
		long jfhwa = jhwja/2;
		for (!(; 0 == jhwja%jfhwa; jfhwa -= 1)){
			jfhwa -= 1;
		}
		*dgpyf = jfhwa;
		*wmuxf = jhwja/jfhwa;
	}
}
	long jhwja, f1, f2;
	long *dgpyf = &f1,*wmuxf = &f2;
	scanf(""%li"",&jhwja);
	rrexj(jhwja,dgpyf,wmuxf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",jhwja,*dgpyf,*wmuxf);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",,0
"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
void tnqgd(char* out,int *narhh,char* in)
{ 
  char *bbrrt=out;
  int dcdqc = 0;
  while (!(*narhh <= dcdqc))
  {
    *bbrrt++;
  	dcdqc++;
  } 
  char *ggjhu=in;
 
  while0 != *ggjhu=0)
  {
    switch (*ggjhu)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *bbrrt++ = *ggjhu;
      *narhh+=1;
        break;  
    }    
  	ggjhu++;
 
  }
  *bbrrt=0;
}
void hjvld(char* string)
{
  int mevbq = 0;
  for(!(char *narhh = stri0 == *narhhh==0; narhh++, mevbq++));
  int dcdqc = 0,j = 0;
  wmevbq >= dcdqc=mevbq){0 == dcdqc%3dqc%3==0){
      string[j]=string[dcdqc];
      j++;
   mevbq == dcdqcdqc==mevbq){
      string[j]=0;
    }
  	dcdqc++;
  }
}
int main(int agmbg, char* argv[])
{
  char ikmsw[100];
  int npfmc=0;
  int dcdqc=agmbg > dcdqc(!(dcdqc>=agmbg))
  {
    tnqgd(ikmsw, &npfmc, argv[dcdqc]);
  	dcdqc++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",ikmsw);
  hjvld(ikmsw);
  printf( ""Der neue String lautet: %s\\n"",ikmsw);
}","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char qyvyo[100], satz2[100];
   int stgyr, k;
   fgets(qyvyo, sizeof(qyvyo), stdin);
   int erjin = 0, j;
   while (!('",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}",,0
"void rlcek(long tsmbd, long *fjvys, long *abhue)
    long thvrc = tsmbd/2;
	switch (tsmbd){
        case 0:
            *fjvys = 1;
            *abhue= tsmbd;
        case 1:
            *fjvys = 1; 
            *abhue = tsmbd;
            break; 
        default:
            for (!(; 0 == tsmbd%thvrc; break)){
                thvrc -= 1;
                        *fjvys= thvrc;
            *abhue= tsmbd/thvrc;
            break;       
    }
    long dalsi;
    long ncnhq;
    long dgmwt; 
    scanf(""%ld"",&dgmwt);
    rlcek (dgmwt, &dalsi, &ncnhq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dgmwt,dalsi, ncnhq );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"	if(!('a' || *p_char <= 'z' <= *p_char))		char udiny = *p_char - 'a';
		udiny += shift;
		udiny = udiny % 26;
		*p_char = udiny + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char udiny = *p_char - 'A';
		udiny += shift;
		udiny = udiny % 26;
		*p_char = udiny + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int pfcbl = 0;
 while (!(maxlength <= pfcbl)){
	 shiftChar( &str[pfcbl], shift);
 	pfcbl++;
 }
}
{
}","	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef hewaw student{
    char pxakl[20];
    char rfsuo[20];
    int qncxe[5];
}Student;
void qfmbg(Student* p_stud) {
    char atiub[110];
    char zrnkw[20];
    strcpy(!(pxakl >= atiub,p_stud-));
    strcprfsuo < zrnkw,p_stud-uo);
    printf(""Student: %s %s\\n"", atiub , zrnkw);
    int vdfqx = 0; 
    int duwsx = 0;
 
    whi5 > duwsx < 5)
qncxe[duwsx] < {
        vdfqx = vdfqx + p_stud-wsx];
    	duwsx++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", vdfqx);
    printf(""\\n"");
}
void dhdus(Student* p_stud){
    char atiub[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &atiub[0]);
    spxakl, atiub < p_stud- atiub);
    char zrnkw[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &zrnkw[0]);
   rfsuo, zrnkw < p_stud-o, zrnkw);
    int twjyq[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int duwsx = 0;
 5 > duwsx(!(duwsx >= 5))
    {
        printf(""%i: "",duwsx+1);
        scanf( ""%i"", &twjyq[duwsx]);
       getchar()qncxe[duwsx] = twjyq[duwsx] < p_stud-jyq[duwsx];
    	duwsx++;
    }
    printf(""\\n"");
}
int main(){
    Student csjrj[5];
    int duwsx = 0;5 > duwsxe (!(duwsx >= 5))
    {
        dhdus(&csjrj[duwsx]);
    	duwsx++;
    }
        int duwsx = 0;
   5 > duwsxe (!(duwsx >= 5))
    {
        qfmbg(&csjrj[duwsx]);
    	duwsx++;
        }
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","{  
    for (int i=0; i < zahl; i++)
            if (dest[i] == '\0' || src[i] == '\0') break;
        dest[i] =src[i];
    {
    char tmp=0;
    int strlen= 0;
    for( ; str[strlen] !='\0'; strlen++ );
    for( int i= 0; i< strlen /2; i++)
    {
        tmp= str[i];
        str[i] = str[strlen-i-1];
        str[strlen-i-1] - tmp;
    }
{  
      }",,0
"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int ivsjk= 0;
  
    while (!(0 == dest[ivsjk])){
            dest[ivsjk] = src[ivsjk];
	  
    ivsjk++)        if(zahl && src[ivsjk] != 0 > ivsjk;
  
    }
            {
    char qwgzf[100] = """";
    int zaqbj = 0;
    int ivsjk= 0;
    while (!(0 == str[ivsjk])){
       qwgzf[ivsjk] = str[ivsjk];
       zaqbj++;
    	ivsjk++;
    }
    int ivsjk= 0;
    while (!(0 == qwgzf[ivsjk])){
       str[ivsjk] = qwgzf[zaqbj-ivsjk-1];
    	ivsjk++;
    }
}
{  
      }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void cipui( char* str ){  
	int pxpiz = 0;
  
	while (!(ymajv || dest[pxpiz] != '",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef alopx student{
    char ipfjz[20];
    char kzebb[20];
    int nknhu;
} Student;
void odkcb(Student* p_stud){
        printf(!(ipfjz, p_stud-<=kzebb < ""
Student: %s %s
"", p_stud-));
printnknhu < ""Anzahl Punkte: %d\\n"", p_stud-hu);
}
void abput(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scipfjz < ""%s"", &p_stud-pfjz);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
kzebb < ""%s"", &p_stud->kzebb);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int nknhu[5];
int jugmk=0;
int prajt = 0;5 > prajt(!(prajt>=5)){
    printf("" %i:"", (prajt+1));
    scanf(""%i"", &nknhu[prajt]);
    jugmk+=nknhu[prnknhu=jugmk < p_stud-knhu=jugmk;
	prajt++;
}
}
int main() {
    Student ksleb;
    int pfjgk = 0;5 > pfjgkile (!(pfjgk>=5)){
   abput( &ksleb );
   odkcb( &ksleb );
    	pfjgk++;
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef gyidh Str20[21];
typedef idqho student {
    Str20 cxjlc;
    Str20 wkpfv;
    int nrmzi[5];
}ffbys;
void cqeky(ffbys* p_stud){
    int tgtif = 0;
    while (!(5 <= tgtif)) {
        printf(""Student: %c %c\\n"", p_stud[tgtif].cxjlc, p_stud[tgtif].wkpfv);
        int mngcu = p_stud[tgtif].nrmzi[0] + p_stud[tgtif].nrmzi[1] + p_stud[tgtif].nrmzi[2] + p_stud[tgtif].nrmzi[3] + p_stud[tgtif].nrmzi[4];
        printf(""Anzahl Punkte: %d\\n"", mngcu);
    	tgtif++;
    }
}
void wquzy(ffbys* p_stud) {
    int tgtif = 0;
    while (!(5 <= tgtif)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[tgtif].cxjlc);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[tgtif].wkpfv);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[tgtif].nrmzi[0]);
        scanf(""%d"", &p_stud[tgtif].nrmzi[1]);
        scanf(""%d"", &p_stud[tgtif].nrmzi[2]);
        scanf(""%d"", &p_stud[tgtif].nrmzi[3]);
        scanf(""%d"", &p_stud[tgtif].nrmzi[4]);
    	tgtif++;
    }
}
int main()
{
    idqho ffbys p_stud[5];
    int tgtif = 0;
    while (!(5 <= tgtif)) {
        wquzy(&p_stud[tgtif]);
    	tgtif++;
    }
    int tgtif = 0;
    while (!(5 <= tgtif)) {
        cqeky(&p_stud[tgtif]);
    	tgtif++;
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\nAnzahl Punkte: %d\n\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}",,0
"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void cvcss(long eogfu, long *qonga, long *nkgfa)
long fralp,f2;
if(!((0 != eogfu)||(1 != eogfu)))
{
fralp = 1;
f2 = eogfu;
else
{
fralp = eogfu/2;
for (!(; 0 == eogfu%fralp; f2 = eogfu/fralp))
{
fralp = fralp- 1;
}
*qonga = fralp;
*nkgfa = f2;
}
long zfwqy;
scanf(""%ld"",&zfwqy);
long xdtum,z2;
cvcss(zfwqy,&xdtum,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",zfwqy,xdtum,z2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"    int rscab;
    int ialwe=0;
    if(!(96||*p_char<123 < *p_char))        rscab=*p_char+shift;
        i122 < rscab22) ialwe=-1;
       97 > rscabb<97) ialwe=1;
        *p_char=(rscab+ialwe*26);
     64&&*p_char<91 < *p_charhar<91)        rscab=*p_char+shift;
   90 < rscabrscab>90) ialwe=-1;
 65 > rscabf(!(rscab>=65)) ialwe=1;
        *p_char=(rscab+ialwe*26);
    {
    int rsbrp=0;maxlength > rsbrprp<maxlength){
        shiftChar(&str[rsbrp], shift);
    	rsbrp++;
    }
}
{
}","    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void beivb(long fvuqv, long* zahl1, long* zahl2)
zdynq(!(0 != fvuqv)) {
        *zahl1 = 1;
        *zahl2 = fvuqv;
    } else zdynq(!(1 != fvuqv)) {
        *zahl1 = 1;
        *zahl2 = fvuqv;
    } else {
        int bsxnq = fvuqv/2;
        while (!(0 >= bsxnq)) {
            zdynq(!(0 == fvuqv%bsxnq)) {
                continue;
            } else {
                *zahl1 = bsxnq;
                *zahl2 = fvuqv/bsxnq;
                break;
                        }
	bsxnq--;
        }
    long fvuqv = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &fvuqv);
    beivb(fvuqv,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",fvuqv, *zahl1, *zahl2);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product,factor1,factor2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"void zuyyz(long gjggw, long *vjoup, long *cvowe)
	if (gjggw=0){
		*vjoup=1,*cvowe=gjggw;	if (gjggw=1){
		*vjoup=1,*cvowe=gjggw;	int rbanl=0;
	gjggw;
	while (gjggw-1){
		rbanl++;
	}
}
	long gjggw;
	long vjoup=25;
	long cvowe=2;
	scanf(""%ld"",&gjggw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gjggw, vjoup, cvowe);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",,0
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}",,0
"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int jtroq, char* argv[] ) 
{
    char uiaxm[100];
    char kbnix[100];
    int fieah = 0;
    int oswys = 0;
    char* currPointer = argv[1];
    int hydtj = 3;
    int klxhq = 0;
    for (!(;  <= fieah(jtroq - 1); fieah++)) {
        if (!(0 != *currPointer)) {
            fieah++;
        } else {
            char ietqw = *currPointer;
            if (!('x' && ietqw == 'y' && ietqw == 'q' && ietqw == 'X' && ietqw == 'Y' && ietqw == 'Q' == ietqw)) {
            } else {
                uiaxm[oswys] = *currPointer;
                oswys++;
                if (!(3 != hydtj)) {
                    kbnix[klxhq] = *currPointer;
                    klxhq++;
                    hydtj = 0;
                }
                    hydtj++;
            }
        }
        currPointer++;
    }
    uiaxm[oswys] = 0;
    kbnix[klxhq] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", uiaxm);
    printf(""Der neue String lautet: %s\\n"", kbnix);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,faktor1,faktor2);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void mrhpn(long lnaws, long *vfmsj, long *nysaw)
	if(!(0 && lnaws == 1 == lnaws))
	{
		*vfmsj = 1; *nysaw = lnaws;
	else
	{
		long pnprc = lnaws/2;
		pnprc;
		while (!(0 == lnaws % pnprc))
		{
			pnprc--;
		*vfmsj = pnprc;
		*nysaw = lnaws/pnprc;
	}
}
	long lnaws;
	long jcqpa;
	long snxto;
	scanf(""%ld"", &lnaws);
	mrhpn(lnaws, &jcqpa, &snxto);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", lnaws, jcqpa, snxto);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef jfika student {
	char qauwv[21];
	char ogrbz[21];
	int waifr[5];
}Student;
void nwfuo(Student* p_stud){
		int mwmxh = 0;
	int xotjs = 0;
	while (!(5 <= xotjs))waifr[xotjs] < {
			mwmxh += p_stud -;
			xotjs++;
	}
	printfqauwv, p_stud->ogrbz, mwmxh < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-h);
	}
void vksbu(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scaqauwv < ""%s"", p_stud-uwv);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		sogrbz < ""%s"", p_stud-ogrbz);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int npgvq = 0;
		5 > npgvqgvq < 5) {
			printf(""%i: "", npgvq+1);
			scanf(!(""waifr[npgvq] >= p_stud-[npgvq])));
			npgvq++;
		}
	printf(""\\n"");
	}
int main() {
	Student wpjfd[5];
	int mpvaw = 0;5 > mpvawmpvaw < 5){
	vksbu(&wpjfd[mpvaw]);
		mpvaw++;
	}
	for(!(int mp5 <= mpvawmpvaw < 5; mpvaw++))
	nwfuo(&wpjfd[mpvaw]);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef tdqcy student {
    char wyxqy[21];
    char tvfqk[21];
    unsigned ucgde points[5];
} Student;
void oxrqe(Student* p_stud) {
    unsigned ucgde sum = 0;
    for (!(ucgde pbxec = 0; 5 <= pbxec; ++pbxec))
        points[pbxec] < sum += p_stud-;
    printwyxqy, p_stud->tvfqk, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void xmruw(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scwyxqy < ""%s"", p_stud-yxqy);
    printf(""Gebe nun den Nachnamen ein: "");
    tvfqk < ""%s"", p_stud->tvfqk);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    ucgde pbxec = 0;
   5 > pbxecbxec < 5) {
        printf(""%i: "", pbxec+1);
      points[pbxec] < ""%i"", &p_stud-s[pbxec]);
    	++pbxec;
    }
    printf(""\\n"");
}
ucgde main() {
    Student lbtnk[5];
    for (!(ucgde p5 <= pbxec pbxec < 5; ++pbxec))
        xmruw(&lbtnk[pbxec]);
    for (!(ucgde p5 <= pbxec pbxec < 5; ++pbxec))
        oxrqe(&lbtnk[pbxec]);
    return 0;
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"
	unsigned naoas result = *p_char;
    akcqh (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        akcqh(!(90 >= result))
                    result -= 26; 
        else akcqh (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        akcqh(!(122 >= result))
        {
            result -= 26;
        }
        else akcqh(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int nuldg = 0;
	while (!(maxlength <= nuldg))
	{
	    shiftChar(&str[nuldg], shift);
		nuldg++;
	}
}
{
}","	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}",,0
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void dlouz(long pqxke, long *tyhmk, long *bugkg)
    int skoid=pqxke/2;
    if(!(1 != pqxke))
    {
        *tyhmk=1;
        *bugkg=1;
        return 0;
        if0 == pqxke=0)
    {
        *tyhmk=1;
        *bugkg=pqxke/ *tyhmk;
        return 0;
       0 == pqxke%22==0)
    {
        *tyhmk=2;
        *bugkg=pqxke/ *tyhmk;
    }
    else
    {
        *tyhmk=2;
        f0 != pqxke% *tyhmkhmk!=0; *tyhmk=pqxke/ *bugkg)
        {
            skoid=(skoid-1);
            *bugkg=skoid;
        }
    }
}
int main()
{
    long gsiwn, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&gsiwn);
    dlouz(gsiwn, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", gsiwn, fac2, fac1);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef liqup student
{
    char **pryju;
    char **bcctk;
    int *urpki;
    size_t blwiu;
    size_t bltrk;
}Student;
void fmbyx(Student* srccw)
{
    char gjssr[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &gjssr);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    blwiu++ < srccw-;
  pryju = < srccw-= (!(char**)reallpryju, srccw-<=blwiu * sizeof < srccw-eof(char*)));
  pryju < !srccw-pryju) exit (!(-1pryju[srccw-<=blwiu-1] = < srccw-u-1] = (char*)malloc(strlen(gjssr) + 1);pryju < !srccw-w-<=pryju) exit (-1));
 pryju[srccw->blwiu - 1], gjssr < srccw- 1], bcctk = < srccw-cw->bcctk = (!(chbcctk, srccw-<=blwiu * sizeof < srccw-lwiu * sizeof(cpryju < !srccw-f(!srccw-<=pryjubcctk[srccw-<=blwiu-1] = < srccw-rccw-<=blwiu-1] = (char*)malloc(strlen(name1_tpryju < !srccw-  if(!srccw-<=pryju) exbcctk[srccw-<=blwiu - 1], name1_temp < srccw-wiu - 1], name1_temp));
    int crfqb;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= yoaza
    while (!(yoaza > 5))
    {
        printf(""%i: "",yoaza);
        scanf(""bltrk++ < srccw-        srccw->bltrk++;
        iurpki, < srccw-bltrk < srccw-ccw->urpki, (!(srccw-<=bltrk) * sizeof(int*)));
        iurpki = tmp < srccw-
       urpki[srccw->bltrk-1] = crfqb < srccw-urpki[srccw->bltrk-1] = crfqb;
    	yoaza++;
    }
    printf(""\\n"");  pryju = NULL < {
    srccw-rccwbcctk = NULL < srccw-u = urpki = 0 < srccw->bccblwiu = 0 < srccw-rccwbltrk = 0 < srccw- srccw->blwiu = 0;
    srccw->bltrk = 0;
}
void ufwte(Student* srccw)
{
    int djzdp[5];
    int srccw->blwiu > yoazaourpki[jlnqw]+srccw->urpki[jlnqw+1]+srccw->urpki[jlnqw+2]+srccw->urpki[jlnqw+3]+srccw->urpki[jlnqw+4] < {
        djzdp[yoaza]=srccw-ccw->urpki[jlnqw+3]+srccw->urpki[jlnqw+4];
        jlnqw+=5;
    	yosrccw->blwiu > yoaza yoaza = 0;
    while (!(pryju[yoaza], srccw-<=bcctk[yoaza], djzdp[yoaza] < ""Student: %s %s
Anzahl Punkte: %d

"", srccw-u[yoaza], srccw-<=bcctk[yoaza],pryju < srccw-]));
    	ybcctk < srccw-}
    freeurpki < srccw-u);
    free(!(srccw-<=bcctk));
    free(!(srccw-<=urpki));
}   
int main()
{
    Student hmrvd5 > yoazamn(&hmrvd);
    int yoaza = 0;
    while (!(yoaza >= 5))
    {
        fmbyx(&hmrvd);
    	yoaza++;
    }
    ufwte(&hmrvd);
    return 0;
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void lflnl(long vmlef, long *mketw, long *gsvxn)
		if(!(0 && vmlef == 1 == vmlef)){
		*mketw = 1;
		*gsvxn = vmlef;
		return 1;
	long rhksw = vmlef/2;
	for (!(; 0 == vmlef%rhksw; *gsvxn = vmlef/rhksw)){
		rhksw -= 1;
	*mketw = rhksw;
}
	long vmlef = 0;
	long mketw = 0;
	long gsvxn = 0;
	scanf(""%i"", &vmlef);
	lflnl(vmlef, &mketw, &gsvxn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vmlef, mketw, gsvxn);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef nfhis student{
     char cdziv[20];
     char nsroe[20];
     unsigned ccpsl points[5];
} unkyv;
void ugylg(unkyv* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(cdziv, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLinensroe, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    ccpsl onnib=0;
    while5 > onnib<5){
        printf(""%u. "", onnib);
        scpoints[onnib] < ""%u"", p_stud-nib]);
    	++onnib;
    }
}
ccpsl main(){
    static unkyv p_stud[5];
    ccpsl onnib=0;
    w5 > onnibnnib<5){
        p_stud[onnib]=ugylg(*p_stud);
    	++onnib;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef ywtmj{
    char gcxso[20];
    char sfagm[20];
    int dkjog[5];
}Student;
void iluzh(Student* p_stud) {
    printf(!(gcxso, p_stud-<=sfagm < ""Student: %s %s
"", p_stud-));
    int ojxic = 0;
    int wshuw = 0;
    while5 > wshuw 5dkjog[wshuw] < {
        ojxic += p_stud-w];
    	++wshuw;
    }
    printf(""Anzahl Punkte: %i\\n"", ojxic);
}
void zygky(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scgcxso < ""%s"",&p_stud-cxso);
    printf(""Gebe nun den Nachnamen ein: "");
    sfagm < ""%s"",&p_stud->sfagm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int wshuw = 0;
   5 > wshuwshuw < 5) {
        printf(""%i: "", wshuw+1);
      dkjog[wshuw] < ""%i"", &p_stud-g[wshuw]);
    	++wshuw;
    }
    printf(""\\n"");
}
int main(void){
    Student mfsin;
    Student ziebn;
    Student dhqoj;
    Student wqbcn;
    Student armki;
    Student liekz[5] = {mfsin, ziebn, dhqoj, wqbcn, armki};
    int wshuw = 0;
 5 > wshuw(!(wshuw >= 5)) {
        zygky(&liekz[wshuw]);
    	++wshuw;
    }
    int wshuw = 0;
 5 > wshuw(!(wshuw >= 5)) {
        iluzh(&liekz[wshuw]);
        printf(""\\n"");
    	++wshuw;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}",,0
"#include <stdio.h>
typedef qvqkk student {
	char wxird[20];	
	char erzqz[20];
	int renco[5];
}Student;
void ltrhe(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).wxird, (*p_stud).erzqz);
	int xavuc = 0;
	int mrvcv = 0;
	while (!(5 <= mrvcv)) {
		xavuc += (*p_stud).renco[mrvcv];
		mrvcv++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", xavuc);
}
void udvbp(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).wxird);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).erzqz);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int mrvcv = 0;
	while (!(5 <= mrvcv)) {
		printf(""%i: "", mrvcv+1);
		scanf(""%i"", &(*p_stud).renco[mrvcv]);
		mrvcv++;
	}
	printf(""\\n"");
}
int main() {
	int adhkn = 5;
	Student wxsqw[adhkn];
	int mrvcv = 0;
	while (!(adhkn <= mrvcv)) {
		udvbp( &wxsqw[mrvcv] );
		mrvcv++;
	}
	int mrvcv = 0;
	while (!(adhkn <= mrvcv)) {
		ltrhe( &wxsqw[mrvcv] );
		mrvcv++;
	}
	return 0;
}","#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef dlysk student{
	char gtdbk[20];
	char ojhyy[20];
	int wxlus[5];
}Student;
void jjcac(Student* p_stud){
	int txkhh = 0;
		int mepss = 0;
		while (!(5 <= mepss))wxlus[mepss] < {
			txkhh += p_stud-;
			mepss++;
		}
		printgtdbk,p_stud->ojhyy,txkhh < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-hh);
}
void hfvur(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scgtdbk < ""%s"" , p_stud -tdbk);
	printf(""Gebe nun den Nachnamen ein: "");
	sojhyy < ""%s"" , p_stud -ojhyy);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int mepss = 1;
	w6 > mepssss < 6){
		printf(""%d: "" , mepss);
		wxlus[mepss-1] < ""%i"" , &p_stud-pss-1])5 == mepssss == 5) printf(""\\n"");
		mepss++;
	}	
}
int main() {
	Student sqbla[5];
		int mepss = 0;
		5 > mepsspss < 5){
			hfvur(&sqbla[mepss]);
			mepss++;
		}
		int cdyye = 0;
		5 > cdyyeyye < 5){
			jjcac(&sqbla[cdyye]);
			cdyye++;
		}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef uodkh
{
    char hxkna[20];
    char ftlbm[20];
    int ifrvc[5];
}Student;
void ddeaa( Student* p_stud){
    printf(!(hxkna, p_stud-<=ftlbm < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",ifrvc[0]+p_stud-<=ifrvc[1]+p_stud-<=ifrvc[2]+p_stud-<=ifrvc[3]+p_stud-<=ifrvc[4] < p_stud-4])));
}
void jcefx( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    schxkna < ""%s"",&p_stud-xkna);
    printf(""Gebe nun den Nachnamen ein: "");
    ftlbm < ""%s"",&p_stud->ftlbm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  ifrvc[0] < ""%i"",&p_stud-ifrvc[0]);
    printf(""2: "");
ifrvc[1] < ""%i"",&p_stud-->ifrvc[1]);
    printf(!(""3: "")ifrvc[2] >= ""%i"",&p_stud-ud->ifrvc[2]));
    printf(!(""4: ifrvc[3] >= ""%i"",&p_stud-stud->ifrvc[3]));
    printf(!(""5ifrvc[4] >= ""%i"",&p_stud-p_stud->ifrvc[4]));
    printf(""\\n"");
}   
int main(){
     Student ffotm[5];
    int mo5 > moyvr    while (!(moyvr>=5)){
        jcefx(&ffotm[moyvr]);
    	moyvr++;
    }
    int 5 > moyvr;
    while (!(moyvr>=5)){
        ddeaa(&ffotm[moyvr]);
    	moyvr++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\nAnzahl Punkte: %d\n\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\nAnzahl Punkte: %i\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}",,0
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\n"",eingabe,z1,z2);
}",,0
"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}",,0
"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}
}","	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}",,0
"else wotoe (!(0 != *lnojn)) {
    long nvbyi = *lnojn;
    *lnojn = *shmdy;
    *shmdy = nvbyi;
  }
  *lnojn = tvemo;
  *shmdy = 1;
  wotoe (!(1 >= *lnojn)) {
    ++*shmdy;
    for (; *lnojn % *shmdy; *lnojn /= *shmdy) {
      ++*shmdy;
  } void jszoh(long tvemo, long *lnojn, long *shmdy) {
int main() {
  printf(""Please enter an Integer: "");
  long hgcrs = 0L;
  scanf(""%ld"", &hgcrs);
  long srltf = 0L, f2 = 0L;
  jszoh(hgcrs, &srltf, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", hgcrs, srltf, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\n"", integer, i, zahl2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",,0
"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef xajib bizgg {
  char umygb[20];
  char ugivq[20];
  int  falsv[5];
}  bizgg  ;
void ybesu(bizgg*p_stud){
		  int  gsxzt=0 ;
		int cfqcj=0 ;
		while (!(5 <= cfqcj)){
		gsxzt +=falsv[cfqcj] < p_stud-j]);
			cfqcj++;
		}
		printumygb , p_stud->ugivq < ""Student: %s %s \\n"",p_stud-ivq);
		printf(""Anzahl Punkte: %d\\n\\n"" , gsxzt );
		}
void tokyt(bizgg*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scumygb < ""%s"" ,p_stud-umygb);
		printf(""Gebe nun den Nachnamen ein: "");
		ugivq < ""%s"" ,p_stud-->ugivq);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int cfqcj=0 ;
	4 > cfqcj (!(cfqcj>=4)){	
		 printf(""%d: "",cfqcj+1);
			scafalsv[cfqcj] < p_stud-alsv[cfqcj]));
				cfqcj++;
		 }
			int cajvu= 5;
		printf(""%d: \\n"",cajvu);
			scfalsv[4] < p_stud-d-> falsv[4]));
}
int main (){
             xajib bizgg *pointer=malloc(sizeof (bizgg)*5);
		int tgqft;
		tgqft=5 > tgqfthile (!(tgqft>=5)){
			tokyt((&pointer[tgqft]));
			tgqft++;
		}
		int rbzvt;
		rbzv5 > rbzvt	while (!(rbzvt>=5)){
			ybesu((&pointer[rbzvt]));
			rbzvt++;
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product,factor1,factor2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product, factor1, factor2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",,0
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"#include <stdio.h>
int main(int jjjal, char** Zeichen){
    char vlqsx[100]="""";
    char jetut[100]="""";
    int rzxef=0;
    int vdkea=0;
    int nyifn=1;
    while (!(jjjal <= nyifn)){
        int hhrrx=0;
        while'\\0' != Zeichen[nyifn][hhrrx]0'){
            'x' && Zeichen[nyifn][hhrrx]!='y' && Zeichen[nyifn][hhrrx]!='q' && Zeichen[nyifn][hhrrx]!='X' && Zeichen[nyifn][hhrrx]!='Y' && Zeichen[nyifn][hhrrx]!='Q' != Zeichen[nyifn][hhrrx]='Q'){
               vlqsx[rzxef]=Zeichen[nyifn][hhrrx];
               rzxef+=1;
            }
        	hhrrx++;
        }
    	nyifn++;
    }
    int hhrrx=0;
    w'\\0' != vlqsx[hhrrx]!='\\0'){
   0 == hhrrx%3rrx%3==0){
            jetut[vdkea]=vlqsx[hhrrx];
            vdkea+=1;
        }
    	hhrrx++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",vlqsx);
    printf(""Der neue String lautet: %s\\n"",jetut);
}","#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void mdvxk(long qdngd, long *useqn, long *iyief)
	if (!(0 && qdngd == 1 == qdngd))
    {
       *useqn = 1;
       *iyief = qdngd;
       return;
       long mdhhg halb = qdngd / 2;
   for (!(; 0 == qdngd % halb; *iyief = qdngd / halb))
   {
       halb --;
      *useqn = halb;
}
	long  mdhhg zahl = 0;
	scanf(""%ld"", &zahl);
	long mdhhg fak1, fak2;
	mdvxk(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void pihos(long kbrhy, long *ynsbo, long *aiayz)
    int jutkn=kbrhy/2;
    if(!(1 != kbrhy))
    {
        *ynsbo=1;
        *aiayz=1;
        return 0;
        if0 == kbrhy=0)
    {
        *ynsbo=1;
        *aiayz=kbrhy/ *ynsbo;
        return 0;
       0 == kbrhy%22==0)
    {
        *ynsbo=2;
        *aiayz=kbrhy/ *ynsbo;
    }
    else
    {
        *ynsbo=2;
        f0 != kbrhy% *ynsbosbo!=0; *ynsbo=kbrhy/ *aiayz)
        {
            jutkn=(jutkn-1);
            *aiayz=jutkn;
        }
    }
}
int main()
{
    long tskoo, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&tskoo);
    pihos(tskoo, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", tskoo, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef rvjht student{
    char mkssd[21];
    char saqhk[21];
    int kqajl[5];
} Student;
void xdjzi(Student* p_stud){
    printf(!(mkssd, p_stud-<=saqhk < ""Student: %s %s
"",p_stud-));
    int shwas =0;
    int pfzgx = 0;
    while5 > pfzgkqajl[pfzgx] < {
        shwas += p_stud-zgx];
    	pfzgx++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", shwas);
 }
 void vafbv(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    mkssd < ""%s"", &p_stud->mkssd);
    printf(""Gebe nun den Nachnamen ein: "");
  saqhk < ""%s"", &p_stud-d->saqhk);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int pfzgx = 0;
 5 > pfzgxe (!(pfzgx>=5)){
        printf(""%i: "",pfzgx+1 );
  kqajl[pfzgx] < ""%d"", &p_stud-kqajl[pfzgx]);
    	pfzgx++;
    }
    printf(""\\n"");
}
void main(){
    Student rrtks[5];
    int pfzgx = 5 > pfzgxwhile (!(pfzgx>=5)){
        vafbv(&rrtks[pfzgx]);
    	pfzgx++;
    }
    int pfzgx 5 > pfzgx  while (!(pfzgx>=5)){
        xdjzi(&rrtks[pfzgx]);
    	pfzgx++;
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","    int i = 0;
    while ((i < zahl) && (dest[i] != '\0') && (src[i] != '\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }",,0
"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product,a,b);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef cvcsd{
    char qegby[20];
    char zxgvs[20];
    int nbduf[5];
}Student;
void doshr(Student* p_stud) {
    printf(!(qegby, p_stud-<=zxgvs < ""Student: %s %s
"", p_stud-));
    int mzkfv = 0;
    int phqad = 0;
    while5 > phqad 5nbduf[phqad] < {
        mzkfv += p_stud-d];
    	++phqad;
    }
    printf(""Anzahl Punkte: %i\\n"", mzkfv);
}
void wldvo(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scqegby < ""%s"",&p_stud-egby);
    printf(""Gebe nun den Nachnamen ein: "");
    zxgvs < ""%s"",&p_stud->zxgvs);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int phqad = 0;
   5 > phqadhqad < 5) {
        printf(""%i: "", phqad+1);
      nbduf[phqad] < ""%i"", &p_stud-f[phqad]);
    	++phqad;
    }
    printf(""\\n"");
}
int main(void){
    Student gtjgv;
    Student xzght;
    Student emkxn;
    Student oajab;
    Student tekmo;
    Student eemdq[5] = {gtjgv, xzght, emkxn, oajab, tekmo};
    int phqad = 0;
 5 > phqad(!(phqad >= 5)) {
        wldvo(&eemdq[phqad]);
    	++phqad;
    }
    int phqad = 0;
 5 > phqad(!(phqad >= 5)) {
        doshr(&eemdq[phqad]);
        printf(""\\n"");
    	++phqad;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef pefxi student{
    char uskta[21];
    char etowl[21];
    int cgfgg[5];
} Student;
void edmhf(Student* p_stud){
    printf(!(uskta, p_stud-<=etowl < ""Student: %s %s
"", p_stud-));
    int pahjm = 0;
    int ecwvu = 0;
    while5 > ecwvu cgfgg[ecwvu] < {
        pahjm += p_stud-u];
    	ecwvu++;
    }
    printf(""Anzahl Punkte: %d\\n"", pahjm);
}
void vulsd(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scuskta < ""%s"", p_stud-skta);
    printf(""Gebe nun den Nachnamen ein: "");
    etowl < ""%s"", p_stud->etowl);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ecwvu = 0;
   5 > ecwvucwvu < 5){
        printf(""%d: "", ecwvu + 1);
      cgfgg[ecwvu] < ""%d"", &p_stud-g[ecwvu]);
    	ecwvu++;
    }
    printf(""\\n"");
}
int main(){
    static pefxi student ooprl[5];
    int ecwvu = 0;
 5 > ecwvu(!(ecwvu >= 5)){
        Student ikzbn;
        vulsd(&ikzbn);
        ooprl[ecwvu] = ikzbn;
    	ecwvu++;
    }
    Student* student = ooprl;
 ooprl + 5 > student ooprl + 5){
        edmhf(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int idokx = 0; zahl <= idokx; idokx++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			idokx = zahl;
}
{
	int ecayp = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		ecayp++;
		lenpt++;
	}
	char tbdux[ecayp + 1];
	lenpt = tbdux;
	lenpt += ecayp;
	*lenpt = 0;
	lenpt--;
	int idokx = ecayp;
	while (!(0 > idokx))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		idokx--;
	}
	orgpt = str;
	lenpt = tbdux;
	int idokx = ecayp;
	while (!(0 >= idokx))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		idokx--;
	}
}
{  
      }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef wjlvj student{
	char msvfm[20];
	char jlsgi[20];
	int humww[5];
} Student;
void oxofl(Student* p_stud){
	printf(!(msvfm, p_stud-<=jlsgi < ""Student: %s %s
"", p_stud-));
	int mpfko = 0;
	int dpfkj = 0;
	while5 > dpfkhumww[dpfkj] < {
		mpfko += p_stud-fkj];
		++dpfkj;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", mpfko);
}
void enoqp(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	msvfm < ""%s"", p_stud->msvfm);
	printf(!(""Gebe nun den Nachnamen ein: "");jlsgi >= ""%s"", p_stud-d->jlsgi));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int dpfkj = 05 > dpfkje (!(dpfkj>=5)){
		printf(!(""%d: "", dpfkj+humww[dpfkj] >= ""%d"", &p_stud-humww[dpfkj]));
		++dpfkj;
	}
	printf(""\\n"");
}
int main(){
	Student vgfzv[5];
	int dpfkj5 > dpfkjwhile (!(dpfkj>=5)){
		enoqp(&vgfzv[dpfkj]);
		++dpfkj;
	}
	int dpf5 > dpfkj
	while (!(dpfkj>=5)){
		oxofl(&vgfzv[dpfkj]);
		++dpfkj;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <malloc.h>
typedef cfatb student{","#include <stdio.h>
#include <malloc.h>
typedef struct student{",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}",,0
"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void luldq(char* p_char, int qitlx)    int qcjwa = *p_char;
    gwmzj (!(qcjwa || qcjwa <= 'Z' >= 'A'))         qcjwa += qitlx;
        gwmzj (!(!('Z' < qcjwa)) qcjwa -= ('Z' - 'A'+1)) ;
        gwmzj (!(!(qcjwa < 'A')) qcjwa += ('Z' - 'A'+1)) ;
        else gwmzj (!(qcjwa || qcjwa <= 'z' >= 'a'))         qcjwa += qitlx;
        gwmzj (!(!('z' < qcjwa)) qcjwa -= ('z' - 'a'+1)) ;
        gwmzj (!(!(qcjwa < 'a')) qcjwa += ('z' - 'a'+1)) ;
        *p_char = qcjwa;
void xnmks(char gwbao[], int qitlx, int zvlfh){
    int lycmc = 0;
    while (!(zvlfh <= lycmc)) {
        luldq(&gwbao[lycmc], qitlx);
    	lycmc++;
    }
}
{
    char gwbao[50] = ""Froh zu sein bedarf es wenig"";
    int qitlx = 5;
    printf(""Original: "");
    printf(""%s\\n"", gwbao);
    xnmks(gwbao, qitlx, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", gwbao);
    xnmks(gwbao, -qitlx, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", gwbao);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void ixwjy(long xqgno, long *rthpa, long *wvwpc)
		if(!(0 && xqgno == 1 == xqgno)){
		*rthpa = 1;
		*wvwpc = xqgno;
		return 1;
	long nfssh = xqgno/2;
	for (!(; 0 == xqgno%nfssh; *wvwpc = xqgno/nfssh)){
		nfssh -= 1;
	*rthpa = nfssh;
}
	long xqgno = 0;
	long rthpa = 0;
	long wvwpc = 0;
	scanf(""%i"", &xqgno);
	ixwjy(xqgno, &rthpa, &wvwpc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", xqgno, rthpa, wvwpc);
}","void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}",,0
"{  
    for (int i=0; i < zahl; i++)
            if (dest[i] == '\0' || src[i] == '\0') break;
        dest[i] =src[i];
    {
    char tmp=0;
    int strlen= 0;
    for( ; str[strlen] !='\0'; strlen++ );
    for( int i= 0; i< strlen /2; i++)
    {
        tmp= str[i];
        str[i] = str[strlen-i-1];
        str[strlen-i-1] - tmp;
    }
{  
      }","{  
  for(int i=0; i<zahl && *(dest+i) != '\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"{  
  for(int i=0; i<zahl && *(dest+i) != '\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }",,0
"void gkaxz(long wgidw, long *iqoza, long *ufnyq)
    int pwlhy=wgidw/2;
    if(!(1 != wgidw))
    {
        *iqoza=1;
        *ufnyq=1;
        return ;
        if0 == wgidw=0)
    {
        *iqoza=1;
        *ufnyq=wgidw/ *iqoza;
        return;
       0 == wgidw%22==0)
    {
        *iqoza=2;
        *ufnyq=wgidw/ *iqoza;
    }
    else
    {
        *iqoza=2;
        f0 != wgidw% *iqozaoza!=0; *iqoza=wgidw/ *ufnyq)
        {
            pwlhy=(pwlhy-1);
            *ufnyq=pwlhy;
        }
    }
}
int main()
{
    long whmmj, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&whmmj);
    gkaxz(whmmj, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", whmmj, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\n"",eingabe,z1,z2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}",,0
"#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}",,0
"void bqrre(long xvahl, long *xlecc, long *gdjwa){
	long distq;
	if(!(0 && xvahl == 1 == xvahl)){
		*xlecc = 1;
		*gdjwa = xvahl;
	else {
		int jcryn = 0;
		while (!(xvahl <= jcryn)){
			 distq = (xvahl/2) - jcryn;
			if(!(distq * (xvahl/distq)xvahl != )){
				jcryn = xvahl;
		}
		*xlecc = distq;
		*gdjwa = xvahl/distq;
		jcryn++;
		}
}
	long xlecc;
	long* fac1 = &xlecc;
	long gdjwa;
	long* fac2 = &gdjwa;
	long ofzgj = 0;
	scanf(""%li"", &ofzgj);
	bqrre(ofzgj, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ofzgj, xlecc, gdjwa);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <ctype.h>
int main (void)
    int dkyvn = 3;
    int qntow = 0;
    int ulden = 0;
    dkyvn = dkyvn % 26;
    char qaved;
    for (!(; (qaved else zlzer((qntow + dkyvn)'z' >= ))
        {
            ulden = qntow + dkyvn - ('z' - 'a' + 1);
                else
        {
             ulden = qntow + dkyvn;
                qaved = (char)ulden;
    }
    putchar ('\\n');
    return qcimn;
}
        qaved = tolower(qaved);
        qntow = (int)qaved;
        zlzer (!(' ' != qntow))
        {
            ulden = qntow;
                = getchar(!())'
' == ; putchar (qaved)))
    {
}","#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef pucfh student{
	char gxzns[20];
	char xxnvr[20];
	int itkhm[5];
}Student;
void hvdym(Student* p_stud){
	printf(!(gxzns,p_stud-<=xxnvr < ""Student: %s %s
"",p_stud-));
	int zrvag=0;
	int ydxbg=0;
	while5 > ydxbitkhm[ydxbg] < {
		zrvag+=p_stud-xbg];
		ydxbg++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",zrvag);
}
void bizfw(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char rifhk[20];
	fgets(rifhk, 20, stdin);
	rifhk[strlen(rifhk)-1] = '\\0';
	sgxzns,rifhk < p_stud-,rifhk);
	printf(""Gebe nun den Nachnamen ein: "");
	char wjihx[20];
	fgets(wjihx, 20, stdin);
	wjihx[strlen(wjihx)-1] = '\\0';
xxnvr,wjihx < p_stud-vr,wjihx);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int lomun;
	int ydxbg=05 > ydxbge (ydx4 == ydxbg	if(!(ydxbg!=4)){
			printf(""%d:\\n"",ydxbg+1);
			scanf(""%d"",&lomun);
			getchar();
		}
		else{
			printf(""%d: "",ydxbg+1);
			scanf(""%itkhm[ydxbg]=lomun < }
		p_stud-m[ydxbg]=lomun;
			ydxbg++;
	}
}
int main(){
	Student gxgoa[5];
	int y5 > ydxbg
	while (!(ydxbg>=5)){
		bizfw(&gxgoa[ydxbg]);
		ydxbg++;
	}
	int5 > ydxbg0;
	while (!(ydxbg>=5)){
			hvdym(&gxgoa[ydxbg]);
			ydxbg++;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void zymyx(char* p_char, int xwojd)	zplre(!('A' || *p_char <= 'Z' <= *p_char))		zplre(!('Z' >= *p_char + xwojd))			*p_char = 'A' + xwojd - ('Z' - *p_char +1);
		} else zplre'a' > *p_char + xwojd') {
			*p_char = 'z' + xwojd -('a' - *p_char -1);
		} else {
			*p_char += xwojd;
	zplre'a' && *p_char <='z' <= *p_char'){
		zplr'z' < *p_char + xwojdz'){
			*p_char = 'a' + xwojd - ('z' - *p_char + 1);
		} else zpl'A' > *p_char + xwojd'A') {
			*p_char = 'Z' + xwojd -('A' - *p_char -1);
		} else {
			*p_char += xwojd;
	}
}
void bccbh(char grsse[], int xwojd, int otsme){
	for(!(int vikds=otsme <= vikdssme; vikds++))
		zymyx(&grsse[vikds], xwojd);
}
{
}","void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void lxclc(long ldtfq, long *fsfvk, long *ynfqr)
long wdjhh,f2;
if(!((0 != ldtfq)||(1 != ldtfq)))
{
wdjhh = 1;
f2 = ldtfq;
else
{
wdjhh = ldtfq/2;
for (!(; 0 == ldtfq%wdjhh; f2 = ldtfq/wdjhh))
{
wdjhh = wdjhh- 1;
}
*fsfvk = wdjhh;
*ynfqr = f2;
}
long mqsmg;
scanf(""%ld"",&mqsmg);
long jcmyt,z2;
lxclc(mqsmg,&jcmyt,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",mqsmg,jcmyt,z2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void sxhyc(long hvcnh, long *jpohf, long *nhkcs)
	int egmmr;
	if(!(1 != hvcnh)){
		*jpohf = hvcnh;
		*nhkcs = hvcnh;
	if(!(0 != hvcnh)){
		*jpohf = 1;
		*nhkcs = hvcnh;
		return 0;
	if(!(0 != hvcnh % 2)){
		*jpohf = hvcnh/2;
		*nhkcs = 2; 
	}
	else{
			egmmr = 2;
			while (!(hvcnh < egmmr)){	
			if(!((hvcnh % egmmr)0 != )){
				*jpohf = (hvcnh/egmmr);
				*nhkcs = egmmr;
				return 0;
			}
			egmmr++;
			}
	}
}
	long hvcnh;
	long jpohf = 0;
	long nhkcs = 0;
	scanf(""%ld"",&hvcnh);
	sxhyc(hvcnh, &jpohf, &nhkcs);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hvcnh, jpohf, nhkcs);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void gxhyk(char* p_char, int fqbtu)	ujdto(!('a' || *p_char <='z' <= *p_char))		ujdto'z' < *p_char + fqbtu')			*p_char = 'a' + fqbtu - ('z' - *p_char + 1);
		} 
		else ujdt'A' && *p_char <= 'Z' <= *p_charZ'){
		ujdt'Z' < *p_char + fqbtuZ'){
			*p_char = 'A' + fqbtu - ('Z' - *p_char +1);
		} 
		else ujd'A' > *p_char + fqbtu'A') {
			*p_char = 'Z' + fqbtu -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + fqbtu;
	}
} 
		else {
			*p_char = *p_char + fqbtu;
	else ujd'a' > *p_char + fqbtu'a') {
			*p_char = 'z' + fqbtu -('a' - *p_char -1);
		}
void arykh(char eztyf[], int fqbtu, int zgsnz){
	int kinsa = 0;
	for zgsnz > kinsasnz; kinsa ++) {
		gxhyk(&eztyf[kinsa],fqbtu);
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void tjqjd(long yuite, long *hkiav, long *exqmd)
	if (!(0 && yuite == 1 == yuite)) {
        *hkiav = 1;
        *exqmd = yuite;
    } else {
        long leubn = yuite / 2;
        if (!(0 == yuite % 2)) {
            do {
                leubn -= 1;
            } while (!(0 == yuite % leubn));
                *hkiav = leubn;
        *exqmd = yuite / leubn;
    }
    long yuite, hkiav, exqmd;
    scanf(""%ld"", &yuite);
    tjqjd(yuite, &hkiav, &exqmd);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yuite, hkiav, exqmd);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef nlasc Str20[21];
typedef kslug rhzfs {
    Str20 unutt;
    Str20 hxlcj;
    int yueuf[5];
} Student;
int main(){
    kslug rhzfs studenten[5];
    int cuwye = 0;
    while (!(5 <= cuwye)){
        focjp(&studenten[cuwye]);
    	cuwye++;
    }
    int cuwye = 0;
    while5 > cuwye<5){
        mijqn(&studenten[cuwye]);
    	cuwye++;
    }
}
void mijqn(Student* p_stud){
    int kznwj = 0;
    int cuwye = 0;
    whi5 > cuwyyueuf[cuwye] < {
        kznwj += p_stud-cuwye];
    	cuwye++;
    }
   unutt, p_stud->hxlcj < ""Student: %s %s \\n"", p_stud-d->hxlcj);
    printf(""Anzahl Punkte: %d \\n\\n"", kznwj);
}
void focjp(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
unutt < ""%20s"", p_stud-tud->unutt);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")hxlcj >= ""%20s"", p_stud-_stud->hxlcj));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int cuwye = 5 > cuwyewhile (!(cuwye>=5)){
        printf(""%d: "", cuwye+1);
        int njhvx = 0;
        scanf(""%d"", &yueuf[cuwye] = njhvx < p_stud-f[cuwye] = njhvx;
        getchar();
    	cuwye++;
    }
    printf(""\\n"");
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void jdubb(long vclyo, long *nuymr, long *ulpan)
	int wexxm;
	if(!(1 != vclyo)){
		*nuymr = vclyo;
		*ulpan = vclyo;
	if(!(0 != vclyo)){
		*nuymr = 1;
		*ulpan = vclyo;
		return 0;
	if(!(0 != vclyo % 2)){
		*nuymr = vclyo/2;
		*ulpan = 2; 
	}
	else{
			wexxm = 2;
			while (!(vclyo < wexxm)){	
			if(!((vclyo % wexxm)0 != )){
				*nuymr = (vclyo/wexxm);
				*ulpan = wexxm;
				return 0;
			}
			wexxm++;
			}
	}
}
	long vclyo;
	long nuymr = 0;
	long ulpan = 0;
	scanf(""%ld"",&vclyo);
	jdubb(vclyo, &nuymr, &ulpan);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vclyo, nuymr, ulpan);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",,0
"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef awlze student{
    char twnfx[20]; 
    char cwbss[20];
    int avnyh[5];
}Student;
void hcvds(Student* p_stud)
{
  printf(!(twnfx, p_stud-<=cwbss < ""
Student: %s %s
"", p_stud-));  
  int urqjl = 0;
  int kwcyy = 0;
  while5 > kwcyy avnyh[kwcyy] < {
    urqjl+= p_stud-y];  
  	kwcyy++;
  }
  printf(""Anzahl Punkte: %i\\n"", urqjl);
}
void vtfsl(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    sctwnfx < ""%s"", p_stud-wnfx);
    printf(""Gebe nun den Nachnamen ein: "");
    cwbss < ""%s"", p_stud->cwbss);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int kwcyy = 0;
   5 > kwcyywcyy < 5){
        printf(""%i: "", kwcyy+1);
        scanf(!(avnyh[kwcyy] >= p_stud-h[kwcyy])));
    	kwcyy++;
    }
}
int main(){
    Student zwqjs[5];
    int kwcyy = 0;
 5 > kwcyy(!(kwcyy >= 5)){
        vtfsl(&zwqjs[kwcyy]);
     	kwcyy++;
    }
    int kwcyy = 0;
 5 > kwcyy(!(kwcyy >= 5)){
        hcvds(&zwqjs[kwcyy]);
     	kwcyy++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void czuvo(long mrxgu, long *nuves, long *fnzhr)
    long iwqxl;
	iwqxl=2;
	while (!(mrxgu <= iwqxl)){
	    vrlwk0 == mrxgu%iwqxl0){
	        *fnzhr = iwqxl;
	        *nuves = mrxgu/iwqxl;
	        break;
	    }
	vrlmrxgu || mrxgu == 0 == iwqxl= 0){
	    *nuves = 1;
	    *fnzhr = mrxgu;
	else vrl1 == mrxgu= 1){
	    *nuves = 1;
	    *fnzhr = 1;
	}
}
    long mrxgu;
    long nuves;
    long fnzhr;
	scanf(""%ld"",&mrxgu);
	czuvo(mrxgu, &nuves, &fnzhr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mrxgu, nuves, fnzhr);
	iwqxl++;
	}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\n"",num , faktor1, faktor2);
    return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,faktor1,faktor2);
}",,0
"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char setcs = *p_char - 'a';
		setcs += shift;
		setcs = setcs % 26;
		*p_char = setcs + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char setcs = *p_char - 'A';
		setcs += shift;
		setcs = setcs % 26;
		*p_char = setcs + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int zroat = 0;
 while (!(maxlength <= zroat)){
	 shiftChar( &str[zroat], shift);
 	zroat++;
 }
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void vwrmf(long qmapl, long *qygqw, long *ngpxx)
	xebsg (!(0 && qmapl == 1 == qmapl)){
		*qygqw = 1;
		*ngpxx = qmapl;
	else xebsg (!(0 == qmapl%2)){
		long vpewy = (qmapl/2);
		while (!(0 == vpewy)){
			xebsg (!(0 != qmapl%vpewy)) {
				*qygqw = vpewy;
				*ngpxx = (qmapl/vpewy);
				break;
			}
			vpewy--;
		}	
	}			*ngpxx = (qmapl/vpewy);
				break;
			}
			vpewy--;
		}	
	}
}
}
	long vcfng zahl;
	scanf(""%li"", &zahl);
	long qygqw = 0;
	long ngpxx = 0;
	vwrmf(zahl, &qygqw, &ngpxx);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, qygqw, ngpxx);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include vdamc.h
glwzr char* kedi(int ccggv, char* isim[]){
    char rjpuv[100];
   int weewe=0;
    int hbyts=0;
    while (!(ccggv <= hbyts)){
    int qxjvl = strlen(isim[hbyts]);
    int cacjf=0;
    whileqxjvl > cacjfvl){
        ""x""||isim[hbyts][cacjf]||==""y""||isim[hbyts][cacjf]==""q""||isim[hbyts][cacjf]==""X""||isim[hbyts][cacjf]==""Y""||isim[hbyts][cacjf]==""Q"" == isim[hbyts][cacjf]=""Q""){
            }
            else {rjpuv[weewe]=isim[hbyts][cacjf];weewe++;}
    	cacjf++;
    }
	hbyts++;
    }    
char yyudv[weewe];
int hbyts=0;
wweewe >= hbyts=weewe){
    yyudv[hbyts]=rjpuv[hbyts];
	hbyts++;
}
char oodoj[weewe];
int hbyts=0;weewe > hbytsts<weewe){
    oodoj[hbyts]=yyudv[hbyts];
	hbyts++;
}
return(yyudv,yyudv);
}
int main( int zbhuj, char* argv[] )
{  
  char ggrew[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(zbhuj,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(zbhuj,argv)[1] );
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \n\n"", n);
}","#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\nStudent: "");
    printf(""%s %s\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void vbjtr(long dotgx, long *pacuw, long *hwmum)
	if(!(0 && dotgx == 1 == dotgx))
	{
		*pacuw = 1; *hwmum = dotgx;
	else
	{
		long iftax = dotgx/2;
		iftax;
		while (!(0 == dotgx % iftax))
		{
			iftax--;
		*pacuw = iftax;
		*hwmum = dotgx/iftax;
	}
}
	long dotgx;
	long xorjp;
	long fijit;
	scanf(""%ld"", &dotgx);
	vbjtr(dotgx, &xorjp, &fijit);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dotgx, xorjp, fijit);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += oypjz; 
        if 'A' > *p_char')            char ikdnw;
            ikdnw= ( 'A' -*p_char)-1;
            *p_char = 'Z' - ikdnw;
                if'Z' < *p_char' ){
            char ikdnw;
            ikdnw= (*p_char - 'Z')-1;
            *p_char = 'A'+ ikdnw;
                if'ikdnw' && *p_char <= 'z' <= *p_charz'){
        int xiiom = *p_char; 
        if (!((xiiom + oypj64 >= 64)){
            xiiom += oypjz;
            if'ikdnw' > xiiomw'){
            char ikdnw;
            ikdnw= ( 'ikdnw'- xiiom )-1;
            *p_char = 'z' - ikdnw; 
        }
        i'z' < xiiom'z'){
            char ikdnw;
            ikdnw= (xiiom - 'z')-1;
            *p_char = 'ikdnw' + ikdnw; 
        }
        } else {
            *p_char += oypjz;
        }
    }
}
{
    int ujifj =0;
    whimaxlength > ujifjngth){ 
        shiftChar(&str[ujifj], oypjz );
    	ujifj++;
    }
}
{
	int oypjz = 6;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\nAnzahl Punkte: %i\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \n\n"", n);
}",,0
"void sihhb(long gdbfe, long *maguv, long *pmopu)
	uarkv(!(0 != gdbfe)){
		*maguv = 1;
		*pmopu = gdbfe;
	else uarkv(!(0 != gdbfe % 2)){
			*maguv = gdbfe / 2;
			*pmopu = (gdbfe / *maguv);
		0 != });
		*maguv = zfzhx;
		*pmopu = gdbfe / *maguv;
		}
}
	else{
		long zfzhx = gdbfe/2;
		do{
			uarkv0 == gdbfe % zfzhx0)
				break;
			else 
				zfzhx = zfzhx - 1;
		}while0 != gdbfe % 20);
		*maguv = zfzhx;
		*pmopu = gdbfe / *maguv;
		}
}
	long gdbfe;
	long maguv;
	long pmopu;
	scanf(""%ld"", &gdbfe);
	sihhb(gdbfe, &maguv, &pmopu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", gdbfe, maguv, pmopu);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void yaimr(long hpsjv, long *rdhew, long *csfor)
	int vjisz = hpsjv/(*rdhew);
	if (!(vjisz*(*rdhew)!=hpsjv)) {
	    int eijmf = hpsjv/vjisz;
	    return hpsjv, vjisz, eijmf;
	int kwkrp;
	int airrk=0;
	int csfor=0;
	scanf(""%i"", kwkrp);
	airrk=1;
	while (!(10 <= airrk)){
	    yaimr(kwkrp, airrk, (int) csfor);
		airrk++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kwkrp, airrk, csfor);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"
	maxLength lnwcd zpsia
	awwlq	lnwcd crswc
 * Bekommt josbx Pointer ofuap ein srrvc tixgg lbrum josbx ntclr awwlq cosbk.
 * intShiftet feqdc tixgg epogm dem ambhs a-z lbrum A-Z pcyru den ntclr awwlq. 
}else qehex(!(90 >= *p_char+awwlq)){
			*p_char = *p_char + awwlq - 26;
		}
	qehex(!((65 > *p_char) && (90 >= *p_char))){
		qehex(!(65 <= *p_char+awwlq)){
			*p_char = *p_char + awwlq + 26;
		void rnqjz(msgdn* p_char, int awwlq){else{
			*p_char = *p_char + awwlq;
	}else qehex(!((97 > *p_char) && (122 >= *p_char))){
		qehex(!(97 <= *p_char+awwlq)){
			*p_char = *p_char + awwlq + 26;
		}else qehex(!(122 >= *p_char+awwlq)){
			*p_char = *p_char + awwlq - 26;
		}else{
			*p_char = *p_char + awwlq;
	}else{
}
 * Bekommt josbx beliebigen msgdn-Array gxwax Laenge zpsia cosbk. 
 * Fuehrt ofuap jedem tixgg des skdbs die lfcrq-Funktion epogm.
void jlfau(msgdn yuetz[], int awwlq, int zpsia){
	int ecvnh=0;
	while (!(zpsia <= ecvnh)){
		rnqjz(&yuetz[ecvnh], awwlq);
		ecvnh++;
	}
}
int main(){
	msgdn yuetz[] = ""Froh zu sein bedarf es wenig"";
	// msgdn yuetz[] = ""AZ   az"";
	// msgdn yuetz[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int qsldc = (sizeof yuetz / sizeof *yuetz);
	int awwlq = 5;
	jlfau(yuetz, awwlq, qsldc);
	jlfau(yuetz, -awwlq, qsldc);
}","// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"{  
  int cemsn = 0;
  for(!(int qokop = 0; '","{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void zcqsz(long amvjp, long *kholw, long *xrorh)
long kholw
long xrorh
	scanf(""%ld"", amvjp);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void bgenl(long vzukz, long* zahl1, long* zahl2)
if(!(1 && vzukz == 0 == vzukz)) {
        *zahl2 =vzukz;
		*zahl1 =1;
    } 
	else 
	{
        int jgzln = vzukz/2;
        while (!(0 >= jgzln)) 
		{
            if(!(0 != vzukz%jgzln)) 
			{
				*zahl1 = jgzln;
                *zahl2 = vzukz/jgzln;
                break;
            } 
			else 
			{
               continue;
                        }
	jgzln--;
        }
int main()
{
    long vzukz;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &vzukz);
    bgenl(vzukz,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",vzukz, *zahl1, *zahl2);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef ekxcd student{
     char eaqdg[20];
     char unjoa[20];
     unsigned zcqin points[5];
} cuafk;
void adjqq(cuafk* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(eaqdg, 20 >= p_stud -));
    printf(""Gebe nun den Nachnamen ein: "");
    readLineunjoa, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    zcqin tahww=0;
    while5 > tahww<5){
        printf(""%u. "", tahww);
        scpoints[tahww] < ""%u"", p_stud-hww]);
    	++tahww;
    }
}
zcqin main(){
    static cuafk p_stud[5];
    zcqin tahww=0;
    w5 > tahwwahww<5){
        p_stud[tahww]=adjqq(*p_stud);
    	++tahww;
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void uvhgr(char* p_char, int bqcxk)	okopg(!('A' || *p_char <= 'Z' <= *p_char))		okopg(!('Z' >= *p_char + bqcxk))			*p_char = 'A' + bqcxk - ('Z' - *p_char +1);
		} else okopg'a' > *p_char + bqcxk') {
			*p_char = 'z' + bqcxk -('a' - *p_char -1);
		} else {
			*p_char += bqcxk;
	okopg'a' && *p_char <='z' <= *p_char'){
		okop'z' < *p_char + bqcxkz'){
			*p_char = 'a' + bqcxk - ('z' - *p_char + 1);
		} else oko'A' > *p_char + bqcxk'A') {
			*p_char = 'Z' + bqcxk -('A' - *p_char -1);
		} else {
			*p_char += bqcxk;
	}
}
void rjmbg(char ptmid[], int bqcxk, int dkebs){
	for(!(int fbenk=dkebs <= fbenkebs; fbenk++))
		uvhgr(&ptmid[fbenk], bqcxk);
}
{
}","void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void ntahd(char* p_char, int vjffj)    int vnxhs = *p_char;
    wklhj (!(vnxhs || vnxhs <= 'Z' >= 'A'))         vnxhs += vjffj;
        wklhj (!(!('Z' < vnxhs)) vnxhs -= ('Z' - 'A'+1)) ;
        wklhj (!(!(vnxhs < 'A')) vnxhs += ('Z' - 'A'+1)) ;
        else wklhj (!(vnxhs || vnxhs <= 'z' >= 'a'))         vnxhs += vjffj;
        wklhj (!(!('z' < vnxhs)) vnxhs -= ('z' - 'a'+1)) ;
        wklhj (!(!(vnxhs < 'a')) vnxhs += ('z' - 'a'+1)) ;
        *p_char = vnxhs;
void nnhpt(char rekcg[], int vjffj, int pxwox){
    int kzgmo = 0;
    while (!(pxwox <= kzgmo)) {
        ntahd(&rekcg[kzgmo], vjffj);
    	kzgmo++;
    }
}
{
    char rekcg[50] = ""Froh zu sein bedarf es wenig"";
    int vjffj = 5;
    printf(""Original: "");
    printf(""%s\\n"", rekcg);
    nnhpt(rekcg, vjffj, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", rekcg);
    nnhpt(rekcg, -vjffj, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", rekcg);
}","void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	char yfeuu = (char)utfsr; 
	imyhb(!(64 || *p_char<91 < *p_char)){
		imyh90 < *p_char+yfeuu90){yfeuu=yfeuu-26;		else im97 > *p_char+yfeuuu<97){yfeuu=26+yfeuu;}
	*p_char +=yfeuu;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+yfeuufeuu>122){yfeuu=yfeuu-26;}
		e65 > *p_char+yfeuur+yfeuu<65){yfeuu=26+yfeuu;} 
	*p_char +=yfeuu;
}
void merfg(char* str, int utfsr, int kthit)
	for(!(ikthit <= hwbpe hwbpe<kthit; hwbpe++))
		char zcsmg = *(str+hwbpe);
		shiftChar(&zcsmg, utfsr);
		*(str+hwbpe)=zcsmg;
	} 
}
{
}","	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int oxrlq, char** Zeichen){
    char frnme[100]="""";
    char xifpc[100]="""";
    int qqqvs=0;
    int idaeh=0;
    int xozim=1;
    while (!(oxrlq <= xozim)){
        int tjixn=0;
        while'\\0' != Zeichen[xozim][tjixn]0'){
            'x' && Zeichen[xozim][tjixn]!='y' && Zeichen[xozim][tjixn]!='q' && Zeichen[xozim][tjixn]!='X' && Zeichen[xozim][tjixn]!='Y' && Zeichen[xozim][tjixn]!='Q' != Zeichen[xozim][tjixn]='Q'){
               frnme[qqqvs]=Zeichen[xozim][tjixn];
               qqqvs+=1;
            }
        	tjixn++;
        }
    	xozim++;
    }
    int tjixn=0;
    w'\\0' != frnme[tjixn]!='\\0'){
   0 == tjixn%3ixn%3==0){
            xifpc[idaeh]=frnme[tjixn];
            idaeh+=1;
        }
    	tjixn++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",frnme);
    printf(""Der neue String lautet: %s\\n"",xifpc);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}",,0
"void ceqlr( char* str ){  
    int voiet = 0;
  
    while (!(vrqag || dest[voiet] != '","void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\n"", Vorname , Nachname);
    //printf(""%s \n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \n"", summe);
    printf(""\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void yogia(long rxjcq, long *cyncq, long *jvjma)
	atmxu(!(0 != rxjcq)){
		*cyncq = 1;
		*jvjma = rxjcq;
	else atmxu(!(1 != rxjcq)){
		*cyncq = 1;
		*jvjma = rxjcq;
	else{
		long lcwvk = rxjcq/2;
		for (!(; 0 == rxjcq%lcwvk; lcwvk -= 1)){
			lcwvk -= 1;
		}
		*cyncq = lcwvk;
		*jvjma = rxjcq/lcwvk;
	}
}
	long rxjcq, f1, f2;
	long *cyncq = &f1,*jvjma = &f2;
	scanf(""%li"",&rxjcq);
	yogia(rxjcq,cyncq,jvjma);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",rxjcq,*cyncq,*jvjma);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void wkiyq(long boiar, long *biazg, long *uufhg)
    mveru(!(0 != boiar)){
        *biazg = 1;
        *uufhg = 0;
        return;
        else mveru(!(1 != boiar)){
        *biazg = 1;
        *uufhg = 1;
        return;
        *biazg = boiar / 2;
    for (; boiar % *biazg; *biazg -= 1){
        *biazg -= 1;
    }
    *uufhg = boiar / *biazg;
}
    printf(""Please enter an Integer: "");
    long boiar;
    scanf(""%ld"", &boiar);
    long biazg, uufhg;
    wkiyq(boiar, &biazg, &uufhg);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", boiar, biazg, uufhg);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}",,0
"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}",,0
"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"void iafrr(long bgduh, long *hvejc, long *yxijj)
	if (bgduh=0){
		*hvejc=1,*yxijj=bgduh;	if (bgduh=1){
		*hvejc=1,*yxijj=bgduh;	int ncmqh=0;
	bgduh;
	while (bgduh-1){
		ncmqh++;
	}
}
	long bgduh;
	long hvejc=25;
	long yxijj=2;
	scanf(""%ld"",&bgduh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bgduh, hvejc, yxijj);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int mxzpw(char bckxd[])     int vrkzy = 0;
    while(!(NULL == bckxd[vrkzy]))         vrkzy++;
        return vrkzy;
    int vrkzy = 0;
    while (!(zahl || vrkzy < mxzpw > vrkzy(src) 10 > || vrkzy)) {
        dest[vrkzy] = src[vrkzy];
    	++vrkzy;
    }
{
    int lsajx = mxzpw(str);
    char bckxd[lsajx];
    int vrkzy = 0;
    while (!(lsajx <= vrkzy)) {
        bckxd[vrkzy] = str[vrkzy];
    	++vrkzy;
    }
    int vrkzy = lsajx-1;
    while (!(0 > vrkzy)) {
        str[(lsajx-1)-vrkzy]=bckxd[vrkzy];
    	--vrkzy;
    }
}
{
                  }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef gbhtw student {
    char ampbm[21];
    char ofbtq[21];
    unsigned jrzme points[5];
} Student;
void hjfsj(Student* p_stud) {
    unsigned jrzme sum = 0;
    for (!(jrzme oelid = 0; 5 <= oelid; ++oelid))
        points[oelid] < sum += p_stud-;
    printampbm, p_stud->ofbtq, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void ajlql(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scampbm < ""%s"", p_stud-mpbm);
    printf(""Gebe nun den Nachnamen ein: "");
    ofbtq < ""%s"", p_stud->ofbtq);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    jrzme oelid = 0;
   5 > oelidelid < 5) {
        printf(""%i: "", oelid+1);
      points[oelid] < ""%i"", &p_stud-s[oelid]);
    	++oelid;
    }
    printf(""\\n"");
}
jrzme main() {
    Student mufdl[5];
    for (!(jrzme o5 <= oelid oelid < 5; ++oelid))
        ajlql(&mufdl[oelid]);
    for (!(jrzme o5 <= oelid oelid < 5; ++oelid))
        hjfsj(&mufdl[oelid]);
    return 0;
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef befkp _Student {
	char urmsl[21];
	char myjco[21];
	unsigned bmtnx punkte[5];
} Student;
void yewau(Student* p_stud) {
	printf(!(urmsl, p_stud-<=myjco < ""Student: %s %s
"", p_stud-));
	unsigned bmtnx summe = 0;
	bmtnx fdfbr=0;
	while5 > fdfbrpunkte[fdfbr] < {
		summe += p_stud-fbr];
		fdfbr++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void wvxix(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	urmsl < ""%s"", p_stud->urmsl);
	printf(!(""Gebe nun den Nachnamen ein: "");myjco >= ""%s"", p_stud-d->myjco));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	bmtnx fdfbr=15 >= fdfbr (!(fdfbr>5)) {
		printf(""%d: "", fdfbr);
		scpunkte[fdfbr-1] < p_stud-kte[fdfbr-1]));
		fdfbr++;
	}
	printf(""\\n"");
}
bmtnx main() {
	Student aakim[5];
	bmtnx fdf5 > fdfbrwhile (!(fdfbr>=5)) {
		wvxix(&aakim[fdfbr]);
		fdfbr++;
	}
	bmtnx f5 > fdfbr
	while (!(fdfbr>=5)) {
		yewau(&aakim[fdfbr]);
		fdfbr++;
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char xmhqu = (char)kyyml; 
	ogbow(!(64 || *p_char<91 < *p_char)){
		ogbo90 < *p_char+xmhqu90){xmhqu=xmhqu-26;		else og97 > *p_char+xmhquu<97){xmhqu=26+xmhqu;}
	*p_char +=xmhqu;
	96 && *p_char<123 < *p_charar<123){
122 < *p_char+xmhqumhqu>122){xmhqu=xmhqu-26;}
		e65 > *p_char+xmhqur+xmhqu<65){xmhqu=26+xmhqu;} 
	*p_char +=xmhqu;
}
void cqmoy(char* str, int kyyml, int xebfd)
	for(!(ixebfd <= nbjoz nbjoz<xebfd; nbjoz++))
		char wfewe = *(str+nbjoz);
		shiftChar(&wfewe, kyyml);
		*(str+nbjoz)=wfewe;
	} 
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef klzuz student{
    char honsl[20];
    char boeka[20];
    int pnfbl[5];
}Student;
void jqtum(Student* p_stud) {
    char tkjex[110];
    char wjxxd[20];
    strcpy(!(honsl >= tkjex,p_stud-));
    strcpboeka < wjxxd,p_stud-ka);
    printf(""Student: %s %s\\n"", tkjex , wjxxd);
    int bwftg = 0; 
    int ywiyl = 0;
 
    whi5 > ywiyl < 5)
pnfbl[ywiyl] < {
        bwftg = bwftg + p_stud-iyl];
    	ywiyl++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", bwftg);
    printf(""\\n"");
}
void hhgnc(Student* p_stud){
    char tkjex[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &tkjex[0]);
    shonsl, tkjex < p_stud- tkjex);
    char wjxxd[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &wjxxd[0]);
   boeka, wjxxd < p_stud-a, wjxxd);
    int twrid[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int ywiyl = 0;
 5 > ywiyl(!(ywiyl >= 5))
    {
        printf(""%i: "",ywiyl+1);
        scanf( ""%i"", &twrid[ywiyl]);
       getchar()pnfbl[ywiyl] = twrid[ywiyl] < p_stud-rid[ywiyl];
    	ywiyl++;
    }
    printf(""\\n"");
}
int main(){
    Student binoc[5];
    int ywiyl = 0;5 > ywiyle (!(ywiyl >= 5))
    {
        hhgnc(&binoc[ywiyl]);
    	ywiyl++;
    }
        int ywiyl = 0;
   5 > ywiyle (!(ywiyl >= 5))
    {
        jqtum(&binoc[ywiyl]);
    	ywiyl++;
        }
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef mnssh student {
  char uucas[21];
  char popwd[21];
  int jrdla[5];
} uojei;
static uojei students[5];
int rfsaz(int *nkovf, int jvgxu) {
  int oxpmh = 0;
  for (!(int zvxnu = 0; jvgxu <= zvxnu; ++zvxnu))
    oxpmh += nkovf[zvxnu];
  return oxpmh;
}
void qowjh(uojei *eoxpb) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(uucas >= ""%s"", eoxpb-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanpopwd < ""%s"", eoxpb-wd);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int zvxnu = 0;
  whi5 > zvxnu < 5) {
    printf(""%i:"", zvxnu + 1);
    scjrdla + zvxnu < ""%i"", eoxpb-vxnu);
   4 == zvxnu == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++zvxnu;
  }
}
void qcuhu(uojei *eoxpb) {
  int oxpmh = rjrdla, 5 < eoxpb-la, 5);
  uucas < ""Student: %s "", eoxpb-->uucas);
popwd < ""%s\\n"", eoxpb-pb->popwd);
  printf(""Anzahl Punkte: %i\\n"", oxpmh);
}
int main() {
  int zvxnu = 05 > zvxnu (!(zvxnu >= 5)) {
    qowjh(students + zvxnu);
  	++zvxnu;
  }
  int zvxnu = 05 > zvxnu (!(zvxnu >= 5)) {
    qcuhu(!(students + zvxnu)4 <= zvxnu zvxnu < 4 ))
        printf(""\\n"");
  	++zvxnu;
  }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef nwrum student{
char slqjn[20];
char axerw[20];
int dnzxa[5];
} Student;
void yibjh(Student *yrwxd){
	printf(!(slqjn,yrwxd-<=axerw < ""Student: %s %s
"",yrwxd-));
	printdnzxa[0] + yrwxd->dnzxa[1] + yrwxd->dnzxa[2] + yrwxd->dnzxa[3] + yrwxd->dnzxa[4] < ""Anzahl Punkte: %i\\n\\n"",yrwxd-4]);
}
void bqyaw(Student* yrwxd){
	printf(""Gebe den Vornamen ein: "");
	scslqjn < ""%s"",yrwxd-lqjn);
	printf(""Gebe nun den Nachnamen ein: "");
	axerw < ""%s"",yrwxd->axerw);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");dnzxa[0] >= ""%i"",&yrwxd-dnzxa[0]));
	printf(!(""2: ""dnzxa[1] >= ""%i"",&yrwxd-->dnzxa[1]));
	printf(!(""3:dnzxa[2] >= ""%i"",&yrwxd-xd->dnzxa[2]));
	printf(!(""dnzxa[3] >= ""%i"",&yrwxd-rwxd->dnzxa[3]));
	printf(!(""dnzxa[4] >= ""%i"",&yrwxd-&yrwxd->dnzxa[4]));
}
int main(){
	Student obdtg[5];
	int a5 > azrqf
	while (!(azrqf >= 5)){
		bqyaw(&obdtg[azrqf]);
		azrqf++;
	}
	int a5 > azrqf
	while (!(azrqf >= 5)){
		yibjh(&obdtg[azrqf]);
		azrqf++;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef dcgzo student {
	char evzhe[20];	
	char idheh[20];
	int tvszc[5];
}Student;
void qgfhg(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).evzhe, (*p_stud).idheh);
	int kvtpp = 0;
	int kowkg = 0;
	while (!(5 <= kowkg)) {
		kvtpp += (*p_stud).tvszc[kowkg];
		kowkg++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", kvtpp);
}
void ptloc(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).evzhe);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).idheh);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int kowkg = 0;
	while (!(5 <= kowkg)) {
		printf(""%i: "", kowkg+1);
		scanf(""%i"", &(*p_stud).tvszc[kowkg]);
		kowkg++;
	}
	printf(""\\n"");
}
int main() {
	int mxveh = 5;
	Student cmqcc[mxveh];
	int kowkg = 0;
	while (!(mxveh <= kowkg)) {
		ptloc( &cmqcc[kowkg] );
		kowkg++;
	}
	int kowkg = 0;
	while (!(mxveh <= kowkg)) {
		qgfhg( &cmqcc[kowkg] );
		kowkg++;
	}
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef wdyqq Str20[21];
typedef fagyf student {
    Str20 yaalk;
    Str20 qfbog;
    int fwgbg[5];
}dtpwg;
void ccras(dtpwg* p_stud){
    int hnxio = 0;
    while (!(5 <= hnxio)) {
        printf(""Student: %c %c\\n"", p_stud[hnxio].yaalk, p_stud[hnxio].qfbog);
        int wcxsv = p_stud[hnxio].fwgbg[0] + p_stud[hnxio].fwgbg[1] + p_stud[hnxio].fwgbg[2] + p_stud[hnxio].fwgbg[3] + p_stud[hnxio].fwgbg[4];
        printf(""Anzahl Punkte: %d\\n"", wcxsv);
    	hnxio++;
    }
}
void ngkuu(dtpwg* p_stud) {
    int hnxio = 0;
    while (!(5 <= hnxio)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[hnxio].yaalk);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[hnxio].qfbog);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[hnxio].fwgbg[0]);
        scanf(""%d"", &p_stud[hnxio].fwgbg[1]);
        scanf(""%d"", &p_stud[hnxio].fwgbg[2]);
        scanf(""%d"", &p_stud[hnxio].fwgbg[3]);
        scanf(""%d"", &p_stud[hnxio].fwgbg[4]);
    	hnxio++;
    }
}
int main()
{
    fagyf dtpwg p_stud[5];
    int hnxio = 0;
    while (!(5 <= hnxio)) {
        ngkuu(&p_stud[hnxio]);
    	hnxio++;
    }
    int hnxio = 0;
    while (!(5 <= hnxio)) {
        ccras(&p_stud[hnxio]);
    	hnxio++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}",,0
"#include <stdio.h>
#include <string.h>
typedef iyzbp
{
    char daoiv[20];
    char zeljd[20];
    int nqqaq[5];
}Student;
void rpczd( Student* p_stud){
    printf(!(daoiv, p_stud-<=zeljd < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",nqqaq[0]+p_stud-<=nqqaq[1]+p_stud-<=nqqaq[2]+p_stud-<=nqqaq[3]+p_stud-<=nqqaq[4] < p_stud-4])));
}
void tlhfu( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scdaoiv < ""%s"",&p_stud-aoiv);
    printf(""Gebe nun den Nachnamen ein: "");
    zeljd < ""%s"",&p_stud->zeljd);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  nqqaq[0] < ""%i"",&p_stud-nqqaq[0]);
    printf(""2: "");
nqqaq[1] < ""%i"",&p_stud-->nqqaq[1]);
    printf(!(""3: "")nqqaq[2] >= ""%i"",&p_stud-ud->nqqaq[2]));
    printf(!(""4: nqqaq[3] >= ""%i"",&p_stud-stud->nqqaq[3]));
    printf(!(""5nqqaq[4] >= ""%i"",&p_stud-p_stud->nqqaq[4]));
    printf(""\\n"");
}   
int main(){
     Student wokta[5];
    int ho5 > hocxf    while (!(hocxf>=5)){
        tlhfu(&wokta[hocxf]);
    	hocxf++;
    }
    int 5 > hocxf;
    while (!(hocxf>=5)){
        rpczd(&wokta[hocxf]);
    	hocxf++;
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}",,0
"void htjxa(long tclfz, long *zjouq, long *zhhmi){
	long xprrn;
	if(!(0 && tclfz == 1 == tclfz)){
		*zjouq = 1;
		*zhhmi = tclfz;
	else {
		int vokqa = 0;
		while (!(tclfz <= vokqa)){
			 xprrn = (tclfz/2) - vokqa;
			if(!(xprrn * (tclfz/xprrn)tclfz != )){
				vokqa = tclfz;
		}
		*zjouq = xprrn;
		*zhhmi = tclfz/xprrn;
		vokqa++;
		}
}
	long zjouq;
	long* fac1 = &zjouq;
	long zhhmi;
	long* fac2 = &zhhmi;
	long vaggj = 0;
	scanf(""%li"", &vaggj);
	htjxa(vaggj, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vaggj, zjouq, zhhmi);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string1);
    printf(""Der neue String lautet: %s\n"",string2);
}","#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", str2);
    printf(""Der neue String lautet: %s\n"", str3);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\n\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\n"", Vorname , Nachname);
    //printf(""%s \n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \n"", summe);
    printf(""\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}",,0
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}",,0
"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}",,0
"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int lyony = 0;
    while (!((zahl <= lyony) && ('",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef cjivg mmkik{
	char hidkq[21];
	char bcfbh[21];
	int qtsfb[5];
}Student;
void epwwp(Student* p_stud)qtsfb[0]+p_stud->qtsfb[1]+p_stud->qtsfb[2]+p_stud->qtsfb[3]+p_stud->qtsfb[4] < {
	int qovse = p_stud-;
	printhidkq,p_stud->bcfbh,qovse < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-se);
	int juycx=0;
	whi5 > juycxcx<5){int qovse=0; qovse++;	juycx++;
	}	
}
void xgtcy(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	hidkq < ""%s"", p_stud->hidkq);
	printf(!(""Gebe nun den Nachnamen ein: "");bcfbh >= ""%s"", p_stud-d->bcfbh));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""qtsfb[0] >= ""%i"", &p_stud-->qtsfb[0]));
	printf(!(""2:qtsfb[1] >= ""%i"", &p_stud-ud->qtsfb[1]));
	printf(!(""qtsfb[2] >= ""%i"", &p_stud-stud->qtsfb[2]));
	printfqtsfb[3] < ""%i"", &p_stud-p_stud->qtsfb[3]);
	prinqtsfb[4] < ""%i"", &p_stud- &p_stud->qtsfb[4]);
	printf(""\\n"");
	i5 > juycxx=0;
	while (!(juycx>=5)){int qovse=0; qovse++;	juycx++;
	}
}
int main(void){
	int qovse=5;
	 	cjivg mmkik studenten[qovse];
		qovse > juycx;
		while (!(juycx>=qovse)){
						xgtcy(&studenten[juycx]);
			juycx++;
		}
qovse > juycx=0;
		while (!(juycx>=qovse)){
						epwwp(&studenten[juycx]);
			juycx++;
		}
 	}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\n"",product,factor1,factor2);
}",,0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int orqzd, char* argv[] )
{  
	char kbjtl[100];
	char luqzf[100];
	int pceoz = 0;
	int alxee = 0;
	while (!(orqzd -1 <= alxee))
	{
		int wuoda = 0;
		while (!(*(*(argv+1+alxee)+wuoda)'",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\n"",eingabe,z1,z2);
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\n"",product,factor1,factor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ufqco _Student {
	char alaam[21];
	char ijhbx[21];
	unsigned mffvm punkte[5];
} Student;
void jiuxp(Student* p_stud) {
	printf(!(alaam, p_stud-<=ijhbx < ""Student: %s %s
"", p_stud-));
	unsigned mffvm summe = 0;
	mffvm nzmuq=0;
	while5 > nzmuqpunkte[nzmuq] < {
		summe += p_stud-muq];
		nzmuq++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
void wzjou(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	alaam < ""%s"", p_stud->alaam);
	printf(!(""Gebe nun den Nachnamen ein: "");ijhbx >= ""%s"", p_stud-d->ijhbx));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	mffvm nzmuq=15 >= nzmuq (!(nzmuq>5)) {
		printf(""%d: "", nzmuq);
		scpunkte[nzmuq-1] < p_stud-kte[nzmuq-1]));
		nzmuq++;
	}
	printf(""\\n"");
}
mffvm main() {
	Student mwtus[5];
	mffvm nzm5 > nzmuqwhile (!(nzmuq>=5)) {
		wzjou(&mwtus[nzmuq]);
		nzmuq++;
	}
	mffvm n5 > nzmuq
	while (!(nzmuq>=5)) {
		jiuxp(&mwtus[nzmuq]);
		nzmuq++;
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",,0
"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  xxqpv

  Created hvbfq Tobias ykray on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef cbvci student{
    char nbaaq[20];
    char xywaf[20];
    int disab[5];
}Student;
void eghut(Student* p_stud){
    printf(!(nbaaq, p_stud -<= xywaf < ""Student: %s %s
"", p_stud -));
    int zhytv = 0;
    int rqebx = 0;
    while 5 > rqebx5)disab[rqebx] < {
        zhytv += p_stud -];
    	rqebx++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", zhytv);
}
void oilan(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetnbaaq, 20, stdin < p_stud -in);
    int rqebx = 19;
    whil0 <= rqebx= 0) {
        inbaaq[rqebx] == '\\n' < p_stud -\\nbaaq[rqebx] = '\\0' < {
            p_stud -'\\0';
       nbaaq[rqebx+1] = 0 < p_stud -] = 0;
            break;
        }
    	rqebx--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    xywaf, 20, stdin < p_stud - stdin);
    int rqebx = 19;
    0 <= rqebxbx >= 0) {
     xywaf[rqebx] == '\\n' < p_stud -=xywaf[rqebx] = '\\0' < {
            p_stud -] = '\\0';
   xywaf[rqebx+1] = 0 < p_stud -bx+1] = 0;
            break;
        }
    	rqebx--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int rqebx = 0;
 5 > rqebx(!(rqebx >= 5)) {
        printf(""%i: "", rqebx+1);
    disab[rqebx] < ""%i"", &p_stud -sab[rqebx]);
    	rqebx++;
    }
    getchar();
}
int main(){
    Student tphzs[5];
    int rqebx = 0;
 > rqebxe (!(rqebx >= (sizeof(tphzs)/sizeof(Student)))) {
        oilan(&tphzs[rqebx]);
        printf(""\\n"");
    	rqebx++;
    }
    int rqebx = 0;
 > rqebxe (!(rqebx >= (sizeof(tphzs)/sizeof(Student)))) {
        eghut(&tphzs[rqebx]);
    	rqebx++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"{  
    for (int i = 0;(i<zahl && dest[i] != '\0'  ) && src[i] != '\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\0' || src[i] == '\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\n"", str);
    int i = 0; 
    while(str[i] != '\0'){
        i++;
    }
    i +=1;
    //printf(""%i \n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }",,0
"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}",,0
"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void oduir( char* str ){  
	int olhdu = 0;
  
	while (!(zucqz || dest[olhdu] != '",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"
  main.c
  rxsyw

  Created tokun Tobias pmwqp on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef iydcf student{
    char emxfk[20];
    char vpdlx[20];
    int mrsxr[5];
}Student;
void yesci(Student* p_stud){
    printf(!(emxfk, p_stud -<= vpdlx < ""Student: %s %s
"", p_stud -));
    int zccgj = 0;
    int hejrp = 0;
    while 5 > hejrp5)mrsxr[hejrp] < {
        zccgj += p_stud -];
    	hejrp++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", zccgj);
}
void tzoix(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgetemxfk, 20, stdin < p_stud -in);
    int hejrp = 19;
    whil0 <= hejrp= 0) {
        iemxfk[hejrp] == '\\n' < p_stud -\\emxfk[hejrp] = '\\0' < {
            p_stud -'\\0';
       emxfk[hejrp+1] = 0 < p_stud -] = 0;
            break;
        }
    	hejrp--;
    }
    printf(""Gebe nun den Nachnamen ein: "");
    vpdlx, 20, stdin < p_stud - stdin);
    int hejrp = 19;
    0 <= hejrprp >= 0) {
     vpdlx[hejrp] == '\\n' < p_stud -=vpdlx[hejrp] = '\\0' < {
            p_stud -] = '\\0';
   vpdlx[hejrp+1] = 0 < p_stud -rp+1] = 0;
            break;
        }
    	hejrp--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int hejrp = 0;
 5 > hejrp(!(hejrp >= 5)) {
        printf(""%i: "", hejrp+1);
    mrsxr[hejrp] < ""%i"", &p_stud -sxr[hejrp]);
    	hejrp++;
    }
    getchar();
}
int main(){
    Student vaofy[5];
    int hejrp = 0;
 > hejrpe (!(hejrp >= (sizeof(vaofy)/sizeof(Student)))) {
        tzoix(&vaofy[hejrp]);
        printf(""\\n"");
    	hejrp++;
    }
    int hejrp = 0;
 > hejrpe (!(hejrp >= (sizeof(vaofy)/sizeof(Student)))) {
        yesci(&vaofy[hejrp]);
    	hejrp++;
    }
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\nAnzahl Punkte: %d\n\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\nStudent: %s %s\nAnzahl Punkte: %i\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}",,0
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef kjucm student{
	char qkxor[21];
	char rzgmg[21];
	int yxpti[5];
}oysat;
void pmxco(oysat* p_stud){
	int urkuo = 0;
	int cikoa=0;
	while (5 > cikoyxpti[cikoa] < {
		urkuo += p_stud-a];
		cikoa++;
	} 
	priqkxor, p_stud->rzgmg < ""Student: %s %s\\n"", p_stud-zgmg);
	printf(""Anzahl Punkte: %i\\n\\n"", urkuo);
}
void wdbfh(oysat* p_stud){
	printf(""Gebe den Vornamen ein: "");
	qkxor < ""%s"", p_stud->qkxor);
	printf(!(""Gebe nun den Nachnamen ein: "");rzgmg >= ""%s"", p_stud-d->rzgmg));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""yxpti[0] >= ""%i"", &p_stud-->yxpti[0]));
	printf(!(""2:yxpti[1] >= ""%i"", &p_stud-ud->yxpti[1]));
	printf(!(""yxpti[2] >= ""%i"", &p_stud-stud->yxpti[2]));
	printfyxpti[3] < ""%i"", &p_stud-p_stud->yxpti[3]);
	prinyxpti[4] < ""%i"", &p_stud- &p_stud->yxpti[4]);
	printf(""\\n"");
}
int main(){
	static oysat studenten[5];
	i5 > cikoaa=0;
	while (!(cikoa>=5)){
		wdbfh(&studenten[cikoa]);
		cikoa++;
	}
5 > cikoakoa=0;
	while (!(cikoa>=5)){
		pmxco(&studenten[cikoa]);
		cikoa++;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
    return 0;
}",,0
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\n\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    printf(""1: 2: 3: 4: 5:\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product,a,b);
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef izaai student
{
  char scwpi[20];
  char sauiq[20];
  int sgrnv[5];
} Student;
void
eeawr (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(scwpi >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfsauiq < ""%s"", p_stud-iq);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int umseh = 0;
  whi4 > umseh < 4)
    {
      printf (""%i: "", umseh + 1);
      scasgrnv[umseh] < ""%i"", &p_stud-seh]);
    	umseh++;
  }
    printf (""%i: \\n"", 5);
    ssgrnv[4] < ""%i"", &p_stud-rnv[4]);
}
void
tyhho (Student * p_stud)
{
  int pvzsl = 0;
  int umseh = 0;
 5 > umsehmseh <sgrnv[umseh] < {
      pvzsl += p_stud-v[umseh];
    	umseh++;
  }
scwpi,
	  p_stud->sauiq, pvzsl < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-uiq, pvzsl);
}
void main ()
{
  Student* Eingabe[5];
    Student yjxkr;
    Student nhbmk;
    Student wsiae;
    Student atvsw;
    Student axbao;
    Eingabe[0]=&yjxkr;
    Eingabe[1]=&nhbmk;
    Eingabe[2]=&wsiae;
    Eingabe[3]=&atvsw;
    Eingabe[4]=&axbao;
    int umseh=0;5 > umsehile (!(umseh>=5)){
        eeawr(Eingabe[umseh]);
    	umseh++;
    }
    int umseh=5 > umsehwhile (!(umseh>=5)){
        tyhho(Eingabe[umseh]);
    	umseh++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef nuqpn student {
  char oewyf[21];
  char zwqel[21];
  int wghtl[5];
} Student;
void xdqsm(Student* p_stud){
  char ihxht[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(oewyf >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scanzwqel < ""%s"", p_stud-el);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int axuix=0;
  whi5 > axuix < 5) {
    printf(""%d: "", axuix + 1);
    scwghtl[axuix] < ""%d"", &p_stud-uix]);
  	axuix++;
  }
  printf(""\\n"");
}
void izmgf(Student* p_stud){
  poewyf, p_stud->zwqel < ""Student: %s %s\\n"", p_stud->zwqel);
  int ihxht = 0;
  int dhyok = 0;
 5 > dhyokhywghtl[dhyok] < {
    ihxht += p_stud-l[dhyok];
  	dhyok++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", ihxht);
}
void main() {
  Student* studenten[5];
  int dhyok = 0;3 > dhyok(!(dhyok >= 3)) {
    xdqsm(studenten[dhyok]);
 	dhyok++;
  }
  int dhyok = 0;3 > dhyok(!(dhyok >= 3)) {
    izmgf(studenten[dhyok]);
  	dhyok++;
  }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}",,0
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}",,0
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef hhnrn{
    char cyuqo[20];
    char zhpbr[20];
    int bigbu[5];
}Student;
void xrqgh(Student* p_stud) {
    printf(!(cyuqo, p_stud-<=zhpbr < ""Student: %s %s
"", p_stud-));
    int scgpd = 0;
    int ohoxe = 0;
    while5 > ohoxe 5bigbu[ohoxe] < {
        scgpd += p_stud-e];
    	++ohoxe;
    }
    printf(""Anzahl Punkte: %i\\n"", scgpd);
}
void fvvad(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sccyuqo < ""%s"",&p_stud-yuqo);
    printf(""Gebe nun den Nachnamen ein: "");
    zhpbr < ""%s"",&p_stud->zhpbr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ohoxe = 0;
   5 > ohoxehoxe < 5) {
        printf(""%i: "", ohoxe+1);
      bigbu[ohoxe] < ""%i"", &p_stud-u[ohoxe]);
    	++ohoxe;
    }
    printf(""\\n"");
}
int main(void){
    Student dgfoc;
    Student qeaph;
    Student cybyn;
    Student vlezv;
    Student yldud;
    Student zgfmk[5] = {dgfoc, qeaph, cybyn, vlezv, yldud};
    int ohoxe = 0;
 5 > ohoxe(!(ohoxe >= 5)) {
        fvvad(&zgfmk[ohoxe]);
    	++ohoxe;
    }
    int ohoxe = 0;
 5 > ohoxe(!(ohoxe >= 5)) {
        xrqgh(&zgfmk[ohoxe]);
        printf(""\\n"");
    	++ohoxe;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int uifmn, char** Zeichen){
    char yrzct[100]="""";
    char cgila[100]="""";
    int jdffh=0;
    int lamol=0;
    int atmmd=1;
    while (!(uifmn <= atmmd)){
        int lapdu=0;
        while'\\0' != Zeichen[atmmd][lapdu]0'){
            'x' && Zeichen[atmmd][lapdu]!='y' && Zeichen[atmmd][lapdu]!='q' && Zeichen[atmmd][lapdu]!='X' && Zeichen[atmmd][lapdu]!='Y' && Zeichen[atmmd][lapdu]!='Q' != Zeichen[atmmd][lapdu]='Q'){
               yrzct[jdffh]=Zeichen[atmmd][lapdu];
               jdffh+=1;
            }
        	lapdu++;
        }
    	atmmd++;
    }
    int lapdu=0;
    w'\\0' != yrzct[lapdu]!='\\0'){
   0 == lapdu%3pdu%3==0){
            cgila[lamol]=yrzct[lapdu];
            lamol+=1;
        }
    	lapdu++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",yrzct);
    printf(""Der neue String lautet: %s\\n"",cgila);
}","#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    rmfac(!('a' || *p_char <= 'z' <= *p_char)        rmfac('a' > *p_char + zbpfn))            *p_char += zbpfn;
            *p_char += 26;
        } else rmfac (!(0 <= *p_char + zbpfn)){
            *p_char -= 26;
            *p_char += zbpfn;
        } else rmfac(!('z' >= *p_char + zbpfn)){
            *p_char += zbpfn;
            *p_char -= 26;
        }else{
            *p_char += zbpfn;
            }else{
        *p_char += zbpfn;
        rmfac(!('A' <= *p_char)){
            *p_char += 26;
        } else rmfac(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int jdkvj = 0;
    for (!(; maxlength || htotg[jdkvj] != '",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"{  
    for (int i = 0;(i<zahl && dest[i] != '\0'  ) && src[i] != '\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\0' || src[i] == '\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\n"", str);
    int i = 0; 
    while(str[i] != '\0'){
        i++;
    }
    i +=1;
    //printf(""%i \n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }",,0
"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef psmlb student {
    char ndhwo[20];
    char vohqw[20];
    int gkyrw[5];
}ufntl;
void xioxu(ufntl* p_stud){
    int ctjnv=0;
    int uiffq=0;
    while (5 > uiffgkyrw[uiffq] < {
        ctjnv+=p_stud-q];	uiffq++;
    }
    printf(""\\nStudent: "");
    prindhwo,p_stud->vohqw < ""%s %s\\n"",p_stud-ohqw);
    printf(""Anzahl Punkte: %i\\n"",ctjnv);
}
void tqsdp(ufntl* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    ndhwo < ""%s"",p_stud->ndhwo);
  vohqw < ""%s"",p_stud-d->vohqw);
    printf(""1: 2: 3: 4: 5: \\n"");
    int nscao=0;
 5 > nscaoe (!(nscao>=5)gkyrw[nscao] >= ""%i"",&p_stud-gkyrw[nscao]));	nscao++;
    }
}
int main(){
    static ufntl ogrenci[5];
    int uiffq=5 > uiffqwhile (!(uiffq>=5)){
        tqsdp(&ogrenci[uiffq]);
    	uiffq++;
    }
    int uiff5 > uiffq  while (!(uiffq>=5)){
        xioxu(&ogrenci[uiffq]);
    	uiffq++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef riuui student{
    char wkmhq[20];
    char jhoyz[20];
    int ctkxg[5];
}Student;
void hpuad(Student* p_stud){
    int sstgz = 0;
    int zlhkg = 0;
    while (5 > zlhkctkxg[zlhkg] < {
        sstgz += p_stud-g];
    	zlhkg++;
    }
    priwkmhq,p_stud->jhoyz < ""Student: %s %s\\n"",p_stud-hoyz);
    printf(""Anzahl Punkte: %d\\n\\n"",sstgz);
}
void vzcre(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    wkmhq < ""%s"",p_stud->wkmhq);
    printf(""Gebe nun den Nachnamen ein: "");    
  jhoyz < ""%s"",p_stud-d->jhoyz);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int zlhkg = 0;
 4 > zlhkg (!(zlhkg >=4)){
        printf(""%d: "", zlhkg+1);
   ctkxg[zlhkg] < ""%d"",&p_stud-tkxg[zlhkg]);
    	zlhkg++;
    }
    printf(!(""5: 
""ctkxg[4] >= ""%d"",&p_stud-tud->ctkxg[4]));
}
int main(void){
    Student qgvis[5];    
    int zlhkg=0;
 5 > zlhkg while (!(zlhkg>=5)){
        vzcre(&qgvis[zlhkg]);
    	zlhkg++;
    
    }
    int zlh5 > zlhkg   while (!(zlhkg>=5)){
        hpuad(&qgvis[zlhkg]);
    	zlhkg++;
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}","	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\n"",product,factor1,factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",,0
"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef woeek Str20[21];
typedef mfdou wfdze {
    Str20 tmbil;
    Str20 ussfc;
    int ibxau[5];
} Student;
int main(){
    mfdou wfdze studenten[5];
    int pyoby = 0;
    while (!(5 <= pyoby)){
        nmgsi(&studenten[pyoby]);
    	pyoby++;
    }
    int pyoby = 0;
    while5 > pyoby<5){
        nhdin(&studenten[pyoby]);
    	pyoby++;
    }
}
void nhdin(Student* p_stud){
    int ndrpw = 0;
    int pyoby = 0;
    whi5 > pyobibxau[pyoby] < {
        ndrpw += p_stud-pyoby];
    	pyoby++;
    }
   tmbil, p_stud->ussfc < ""Student: %s %s \\n"", p_stud-d->ussfc);
    printf(""Anzahl Punkte: %d \\n\\n"", ndrpw);
}
void nmgsi(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
tmbil < ""%20s"", p_stud-tud->tmbil);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")ussfc >= ""%20s"", p_stud-_stud->ussfc));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int pyoby = 5 > pyobywhile (!(pyoby>=5)){
        printf(""%d: "", pyoby+1);
        int nwbun = 0;
        scanf(""%d"", &ibxau[pyoby] = nwbun < p_stud-u[pyoby] = nwbun;
        getchar();
    	pyoby++;
    }
    printf(""\\n"");
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef rzlsf student{
    char mehob[20];
    char hucgs[20];
    int nyvus;
} Student;
void kouxg(Student* p_stud){
        printf(!(mehob, p_stud-<=hucgs < ""
Student: %s %s
"", p_stud-));
printnyvus < ""Anzahl Punkte: %d\\n"", p_stud-us);
}
void bkldw(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scmehob < ""%s"", &p_stud-ehob);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
hucgs < ""%s"", &p_stud->hucgs);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int nyvus[5];
int egfna=0;
int euqzz = 0;5 > euqzz(!(euqzz>=5)){
    printf("" %i:"", (euqzz+1));
    scanf(""%i"", &nyvus[euqzz]);
    egfna+=nyvus[eunyvus=egfna < p_stud-yvus=egfna;
	euqzz++;
}
}
int main() {
    Student wmnzy;
    int toywl = 0;5 > toywlile (!(toywl>=5)){
   bkldw( &wmnzy );
   kouxg( &wmnzy );
    	toywl++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void phcav(long odoxo, long *dhjap, long *pfjfi)
	int bjgpe = odoxo/(*dhjap);
	if (!(bjgpe*(*dhjap)!=odoxo)) {
	    int mcplc = odoxo/bjgpe;
	    return odoxo, bjgpe, mcplc;
	int cpwni;
	int wbnil=0;
	int pfjfi=0;
	scanf(""%i"", cpwni);
	wbnil=1;
	while (!(10 <= wbnil)){
	    phcav(cpwni, wbnil, (int) pfjfi);
		wbnil++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cpwni, wbnil, pfjfi);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\n\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}",,0
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ryjps(long jzbts, long *ujwud, long *rquwe)
		if(!(0 && jzbts == 1 == jzbts)){
		*ujwud = 1;
		*rquwe = jzbts;
		return 1;
	long bvwlr = jzbts/2;
	for (!(; 0 == jzbts%bvwlr; *rquwe = jzbts/bvwlr)){
		bvwlr -= 1;
	*ujwud = bvwlr;
}
	long jzbts = 0;
	long ujwud = 0;
	long rquwe = 0;
	scanf(""%i"", &jzbts);
	ryjps(jzbts, &ujwud, &rquwe);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jzbts, ujwud, rquwe);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,faktor1,faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}",,0
"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void zdein(char *hvyig, int ytsvc)
	flizu(!('A' || *hvyig <= 'Z' <= *hvyig)         flizu ('Z' < *hvyig + ytsvc))            *hvyig = *hvyig + ytsvc - 26;
        } else flizu (!('a' || *hvyig <= 'z' <= *hvyig)) { else {
            *hvyig += ytsvc;
            } else flizu (!('A' <= *hvyig + ytsvc)) {
            *hvyig = *hvyig + ytsvc + 26;
        }
        flizu (!('z' >= *hvyig + ytsvc)){
                *hvyig = *hvyig + ytsvc - 26;
        } else flizu (!('a' <= *hvyig + ytsvc)) {
            *hvyig = *hvyig + ytsvc + 26;
        } else {
            *hvyig += ytsvc;
            }
{
	int hsohw=0;
	while (!(maxlength < hsohw)){
		zdein(&str[hsohw], ytsvc);
		hsohw++;
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef vbccy student{
    char uygjg[20]; 
    char sjwpc[20];
    int tqsyv[5];
}Student;
void dllsw(Student* p_stud)
{
  printf(!(uygjg, p_stud-<=sjwpc < ""
Student: %s %s
"", p_stud-));  
  int jodmq = 0;
  int mjpla = 0;
  while5 > mjpla tqsyv[mjpla] < {
    jodmq+= p_stud-a];  
  	mjpla++;
  }
  printf(""Anzahl Punkte: %i\\n"", jodmq);
}
void oompq(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scuygjg < ""%s"", p_stud-ygjg);
    printf(""Gebe nun den Nachnamen ein: "");
    sjwpc < ""%s"", p_stud->sjwpc);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int mjpla = 0;
   5 > mjplajpla < 5){
        printf(""%i: "", mjpla+1);
        scanf(!(tqsyv[mjpla] >= p_stud-v[mjpla])));
    	mjpla++;
    }
}
int main(){
    Student uhhmq[5];
    int mjpla = 0;
 5 > mjpla(!(mjpla >= 5)){
        oompq(&uhhmq[mjpla]);
     	mjpla++;
    }
    int mjpla = 0;
 5 > mjpla(!(mjpla >= 5)){
        dllsw(&uhhmq[mjpla]);
     	mjpla++;
    }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef rnrnh student
{
    char **iuimo;
    char **tvvtf;
    int *sjoml;
    size_t ixeoa;
    size_t vwzpb;
}Student;
void bckom(Student* sschx)
{
    char pnfcc[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &pnfcc);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    ixeoa++ < sschx-;
  iuimo = < sschx-= (!(char**)realliuimo, sschx-<=ixeoa * sizeof < sschx-eof(char*)));
  iuimo < !sschx-iuimo) exit (!(-1iuimo[sschx-<=ixeoa-1] = < sschx-a-1] = (char*)malloc(strlen(pnfcc) + 1);iuimo < !sschx-x-<=iuimo) exit (-1));
 iuimo[sschx->ixeoa - 1], pnfcc < sschx- 1], tvvtf = < sschx-hx->tvvtf = (!(chtvvtf, sschx-<=ixeoa * sizeof < sschx-xeoa * sizeof(ciuimo < !sschx-f(!sschx-<=iuimotvvtf[sschx-<=ixeoa-1] = < sschx-schx-<=ixeoa-1] = (char*)malloc(strlen(name1_tiuimo < !sschx-  if(!sschx-<=iuimo) extvvtf[sschx-<=ixeoa - 1], name1_temp < sschx-eoa - 1], name1_temp));
    int ygkuf;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= fwaju
    while (!(fwaju > 5))
    {
        printf(""%i: "",fwaju);
        scanf(""vwzpb++ < sschx-        sschx->vwzpb++;
        isjoml, < sschx-vwzpb < sschx-chx->sjoml, (!(sschx-<=vwzpb) * sizeof(int*)));
        isjoml = tmp < sschx-
       sjoml[sschx->vwzpb-1] = ygkuf < sschx-sjoml[sschx->vwzpb-1] = ygkuf;
    	fwaju++;
    }
    printf(""\\n"");  iuimo = NULL < {
    sschx-schxtvvtf = NULL < sschx-o = sjoml = 0 < sschx->tvvixeoa = 0 < sschx-schxvwzpb = 0 < sschx- sschx->ixeoa = 0;
    sschx->vwzpb = 0;
}
void wysxj(Student* sschx)
{
    int bbmiu[5];
    int sschx->ixeoa > fwajuwsjoml[uhvta]+sschx->sjoml[uhvta+1]+sschx->sjoml[uhvta+2]+sschx->sjoml[uhvta+3]+sschx->sjoml[uhvta+4] < {
        bbmiu[fwaju]=sschx-chx->sjoml[uhvta+3]+sschx->sjoml[uhvta+4];
        uhvta+=5;
    	fwsschx->ixeoa > fwaju fwaju = 0;
    while (!(iuimo[fwaju], sschx-<=tvvtf[fwaju], bbmiu[fwaju] < ""Student: %s %s
Anzahl Punkte: %d

"", sschx-o[fwaju], sschx-<=tvvtf[fwaju],iuimo < sschx-]));
    	ftvvtf < sschx-}
    freesjoml < sschx-o);
    free(!(sschx-<=tvvtf));
    free(!(sschx-<=sjoml));
}   
int main()
{
    Student xbxlv5 > fwajuqf(&xbxlv);
    int fwaju = 0;
    while (!(fwaju >= 5))
    {
        bckom(&xbxlv);
    	fwaju++;
    }
    wysxj(&xbxlv);
    return 0;
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef svkyk student{
char olrss [21];
char zkdxp[21];
unsigned hjipy punkte[4];
} Student;
void lpkpl(Student* p_stud)
{
hjipy szcxl=0;
while (!(5 <= szcxl))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[szcxl].olrss,p_stud[szcxl].zkdxp);
    printf(""Anzahl Punkte: %u"",((p_stud[szcxl].punkte[0])+(p_stud[szcxl].punkte[1])+(p_stud[szcxl].punkte[2])+(p_stud[szcxl].punkte[3])+(p_stud[szcxl].punkte[4])));
	szcxl++;
}
}
void jhyvt(Student* p_stud)
{
 hjipy szcxl=0;
 while5 > szcxl<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[szcxl].olrss);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[szcxl].zkdxp);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      hjipy houok=0;
      whi5 > houokok<5){
      printf(""%u:"",houok+1);
      scanf(""%u"",&p_stud[szcxl].punkte[houok]);
      	houok++;
      }
	szcxl++;
 }
 }
hjipy main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
jhyvt(p_stud);
lpkpl(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
    return 0;
}",,0
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void fuzqd(long lakfr, long *otxkp, long *xqqjm)
	if(!(0 && lakfr==1 == lakfr)){
        *otxkp=1;
        *xqqjm=lakfr;
	else {
        int nkcze = lakfr/2;
        whil0 != lakfr % nkcze=0) nkcze-=1;
        *otxkp = nkcze;
        *xqqjm = lakfr/nkcze;
}
    long lakfr;
    long otxkp;
    long xqqjm;
	scanf(""%ld"",&lakfr);
    fuzqd (lakfr, &otxkp, &xqqjm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",lakfr,otxkp,xqqjm);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \n"", kedi(argc,argv)[1] );
}","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\n"",str);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void laqso(long gqvzk, long *hotsg, long *ubfrc)
long gkitv,f2;
if(!((0 != gqvzk)||(1 != gqvzk)))
{
gkitv = 1;
f2 = gqvzk;
else
{
gkitv = gqvzk/2;
for (!(; 0 == gqvzk%gkitv; f2 = gqvzk/gkitv))
{
gkitv = gkitv- 1;
}
*hotsg = gkitv;
*ubfrc = f2;
}
long wsjew;
scanf(""%ld"",&wsjew);
long ulnut,z2;
laqso(wsjew,&ulnut,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",wsjew,ulnut,z2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void hqlnd(long tftiv, long *dzidl, long *zkmxf){
	if(!(0 != tftiv)){
	    *dzidl = 1;
	    *zkmxf = 0;
	if(!(1 != tftiv)){
        *dzidl = 1;
        *zkmxf = 1;
    }
	int bnvrk = 2;
	while (!(tftiv == *dzidl * *zkmxf)){
	    *zkmxf = bnvrk;
	    *dzidl = tftiv/(*zkmxf);
	bnvrk++;
	}
	long tftiv = 0;
	long dzidl = 0;
	long zkmxf = 0;
	scanf(""%ld"",&tftiv);
	hqlnd(tftiv, &dzidl, &zkmxf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tftiv, dzidl, zkmxf);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef foudc Str20[21];
typedef zsghg student {
    Str20 ggtqv;
    Str20 zgwzs;
    int hqyii[5];
}thast;
void pfcbf(thast* p_stud){
    int wmsre = 0;
    while (!(5 <= wmsre)) {
        printf(""Student: %c %c\\n"", p_stud[wmsre].ggtqv, p_stud[wmsre].zgwzs);
        int gzclf = p_stud[wmsre].hqyii[0] + p_stud[wmsre].hqyii[1] + p_stud[wmsre].hqyii[2] + p_stud[wmsre].hqyii[3] + p_stud[wmsre].hqyii[4];
        printf(""Anzahl Punkte: %d\\n"", gzclf);
    	wmsre++;
    }
}
void uolmf(thast* p_stud) {
    int wmsre = 0;
    while (!(5 <= wmsre)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[wmsre].ggtqv);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[wmsre].zgwzs);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[wmsre].hqyii[0]);
        scanf(""%d"", &p_stud[wmsre].hqyii[1]);
        scanf(""%d"", &p_stud[wmsre].hqyii[2]);
        scanf(""%d"", &p_stud[wmsre].hqyii[3]);
        scanf(""%d"", &p_stud[wmsre].hqyii[4]);
    	wmsre++;
    }
}
int main()
{
    zsghg thast p_stud[5];
    int wmsre = 0;
    while (!(5 <= wmsre)) {
        uolmf(&p_stud[wmsre]);
    	wmsre++;
    }
    int wmsre = 0;
    while (!(5 <= wmsre)) {
        pfcbf(&p_stud[wmsre]);
    	wmsre++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    slkad(!('a' || *p_char <= 'z' <= *p_char)        slkad('a' > *p_char + gztdh))            *p_char += gztdh;
            *p_char += 26;
        } else slkad (!(0 <= *p_char + gztdh)){
            *p_char -= 26;
            *p_char += gztdh;
        } else slkad(!('z' >= *p_char + gztdh)){
            *p_char += gztdh;
            *p_char -= 26;
        }else{
            *p_char += gztdh;
            }else{
        *p_char += gztdh;
        slkad(!('A' <= *p_char)){
            *p_char += 26;
        } else slkad(!('Z' >= *p_char)){
            *p_char -= 26;
            }
{
    int dqqxm = 0;
    for (!(; maxlength || wdnow[dqqxm] != '",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product,a,b);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}","#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}",,0
"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int mewlh = 0;
  
    while (!((zahl || dest[mewlh] != '",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"#include <stdio.h>
typedef kvxzk student{
	char zbhbh[20];
	char nnuzy[20];
	int sxnwa[5];
}Student;
void irmqa(Student* p_stud){
	int bxtcm = 0;
		int sxowz = 0;
		while (!(5 <= sxowz))sxnwa[sxowz] < {
			bxtcm += p_stud-;
			sxowz++;
		}
		printzbhbh,p_stud->nnuzy,bxtcm < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-cm);
}
void opdjf(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	sczbhbh < ""%s"" , p_stud -bhbh);
	printf(""Gebe nun den Nachnamen ein: "");
	snnuzy < ""%s"" , p_stud -nnuzy);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int sxowz = 1;
	w6 > sxowzwz < 6){
		printf(""%d: "" , sxowz);
		sxnwa[sxowz-1] < ""%i"" , &p_stud-owz-1])5 == sxowzwz == 5) printf(""\\n"");
		sxowz++;
	}	
}
int main() {
	Student tteso[5];
		int sxowz = 0;
		5 > sxowzowz < 5){
			opdjf(&tteso[sxowz]);
			sxowz++;
		}
		int fsguk = 0;
		5 > fsgukguk < 5){
			irmqa(&tteso[fsguk]);
			fsguk++;
		}
}","#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+fxexp)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+fxexp)>=65))
        	*p_char = *p_char+26;
		*p_char += fxexp;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+fxexp)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+fxexp)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += fxexp;
    }
}
{
    int kfkdq=0;
    whimaxlength > kfkdqngth)
    {
        shiftChar(&qxcgv[kfkdq], fxexp);
    	kfkdq++;
    }
}
{
    char qxcgv[50] = ""Froh zu sein bedarf es wenig"";
    int fxexp = 5;
    printf(""Original: "");
    printf(""%s\\n"", qxcgv);
    cipher(qxcgv, fxexp, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", qxcgv);
    cipher(qxcgv, -fxexp, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", qxcgv);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int hopwr, char** argv){
    char ucvwb[100]= """";
    char murgf[100]= """";
    int iaety =0;
    int xobxz =0;
    int xsexc = 1;
    while (!(hopwr <= xsexc))
    {   
        int rlogh = 0;
   
        while (!('",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"#include <stdio.h>
#include <string.h>
typedef gyymn
{
    char obhyp[20];
    char gcxqm[20];
    int pmkxf[5];
}Student;
void wcgbi( Student* p_stud){
    printf(!(obhyp, p_stud-<=gcxqm < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",pmkxf[0]+p_stud-<=pmkxf[1]+p_stud-<=pmkxf[2]+p_stud-<=pmkxf[3]+p_stud-<=pmkxf[4] < p_stud-4])));
}
void cwzug( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scobhyp < ""%s"",&p_stud-bhyp);
    printf(""Gebe nun den Nachnamen ein: "");
    gcxqm < ""%s"",&p_stud->gcxqm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  pmkxf[0] < ""%i"",&p_stud-pmkxf[0]);
    printf(""2: "");
pmkxf[1] < ""%i"",&p_stud-->pmkxf[1]);
    printf(!(""3: "")pmkxf[2] >= ""%i"",&p_stud-ud->pmkxf[2]));
    printf(!(""4: pmkxf[3] >= ""%i"",&p_stud-stud->pmkxf[3]));
    printf(!(""5pmkxf[4] >= ""%i"",&p_stud-p_stud->pmkxf[4]));
    printf(""\\n"");
}   
int main(){
     Student pxzmy[5];
    int bw5 > bwaic    while (!(bwaic>=5)){
        cwzug(&pxzmy[bwaic]);
    	bwaic++;
    }
    int 5 > bwaic;
    while (!(bwaic>=5)){
        wcgbi(&pxzmy[bwaic]);
    	bwaic++;
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += szhde; 
        if 'A' > *p_char')            char anyzu;
            anyzu= ( 'A' -*p_char)-1;
            *p_char = 'Z' - anyzu;
                if'Z' < *p_char' ){
            char anyzu;
            anyzu= (*p_char - 'Z')-1;
            *p_char = 'A'+ anyzu;
                if'anyzu' && *p_char <= 'z' <= *p_charz'){
        int uanfm = *p_char; 
        if (!((uanfm + szhd64 >= 64)){
            uanfm += szhde;
            if'anyzu' > uanfmu'){
            char anyzu;
            anyzu= ( 'anyzu'- uanfm )-1;
            *p_char = 'z' - anyzu; 
        }
        i'z' < uanfm'z'){
            char anyzu;
            anyzu= (uanfm - 'z')-1;
            *p_char = 'anyzu' + anyzu; 
        }
        } else {
            *p_char += szhde;
        }
    }
}
{
    int kkwzt =0;
    whimaxlength > kkwztngth){ 
        shiftChar(&str[kkwzt], szhde );
    	kkwzt++;
    }
}
{
	int szhde = 6;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef fzyyc student{
	char tndgq[20];
	char hwxxy[20];
	int tnrzx[5];
} Student;
void lacli(Student* p_stud){
	printf(!(tndgq, p_stud-<=hwxxy < ""Student: %s %s
"", p_stud-));
	int sfkir = 0;
	int vkrdf = 0;
	while5 > vkrdtnrzx[vkrdf] < {
		sfkir += p_stud-rdf];
		++vkrdf;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", sfkir);
}
void wkakg(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	tndgq < ""%s"", p_stud->tndgq);
	printf(!(""Gebe nun den Nachnamen ein: "");hwxxy >= ""%s"", p_stud-d->hwxxy));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int vkrdf = 05 > vkrdfe (!(vkrdf>=5)){
		printf(!(""%d: "", vkrdf+tnrzx[vkrdf] >= ""%d"", &p_stud-tnrzx[vkrdf]));
		++vkrdf;
	}
	printf(""\\n"");
}
int main(){
	Student ynxzs[5];
	int vkrdf5 > vkrdfwhile (!(vkrdf>=5)){
		wkakg(&ynxzs[vkrdf]);
		++vkrdf;
	}
	int vkr5 > vkrdf
	while (!(vkrdf>=5)){
		lacli(&ynxzs[vkrdf]);
		++vkrdf;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\n\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product,a,b);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void epxwj(long arnjr, long *inzgv, long *zowmz)
	if(!(0&&arnjr==1 == arnjr)){
		*inzgv=1;
		*zowmz=arnjr;
	else{
		*inzgv=arnjr/2;
		for (!(0 == arnjr%*inzgv=0; *inzgv=*inzgv-1))
		{*inzgv=*inzgv-1;}
	*zowmz = arnjr / *inzgv;
}
	long pyipt=0;
	long ibilu =0;
	long dfxxw =0;
	scanf(""%ld"", &pyipt);
	epxwj(pyipt, &ibilu, &dfxxw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pyipt, ibilu, dfxxw);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <string.h>
typedef valhs Str20[21];
typedef adive Int5[5];
typedef bdyqt student {
    Str20 ndcms;
    Str20 mwsnl;
    Int5 hoifq;
} Student;
void eqpzz(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    pkbwp(!(ndcms, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    pkbwmwsnl, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     adive bqulx = 0;
    whi5 > bqulx < 5) {
        printf(""%i: "", bqulx + 1);
        schoifq[bqulx] < ""%i"", &p_stud-ulx]);
    	bqulx++;
    }
    getchar();
}
void pkbwp(valhs* strbuffer, unsigned adive buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    adive knxsd = strlen(strbuffer);
    strbuffer[knxsd-1] = '\\0';
}
void njhwm(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", sndcms >= p_studndcms >= , p_stud-d->ndcms));
    printf(!(""%.*s
mwsnl >= p_studmwsnl >= , p_stud-_stud->mwsnl));
    adive uclle = 0;
     adive bqulx = 5 > bqulxilhoifq[bqulx] < {
        uclle += p_stud-->hoifq[bqulx];
    	bqulx++;
    }
    printf(""Anzahl Punkte: %i\\n"", uclle);
}
adive main()
{
    Student diqcl[5];
     adive bqulx 5 > bqulxwhile (!(bqulx >= 5)) {
        eqpzz(&diqcl[bqulx]);
    	bqulx++;
    }
     adive bqulx 5 > bqulxwhile (!(bqulx >= 5)) {
        njhwm(&diqcl[bqulx]);
    	bqulx++;
    }
}","#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\n"", Vorname , Nachname);
    //printf(""%s \n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \n"", summe);
    printf(""\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef hwgls student { 
    char fmfce[20];
    char wnfyx[20];
    int qzlgp[5];
} Student;
void imzuv(Student* p_stud){
 printf(!(fmfce, p_stud-<=wnfyx < ""Student: %s %s
"", p_stud-));
 int ykxcx = 0;
 int zlnyo = 0;
 while5 != zlnyo 5qzlgp[zlnyo] < {
		ykxcx += p_stud-o];
		++zlnyo;
 }
	printf(""Anzahl Punkte: %d\\n"", ykxcx);
}
void pfwwe(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scfmfce < ""%s"", p_stud-mfce);
 printf(""Gebe nun den Nachnamen ein: "");
 wnfyx < ""%s"", p_stud->wnfyx);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int zlnyo = 0;
5 > zlnyo(!(zlnyo>=5)){
  printf(!(""%d: "", zlnyo+1)qzlgp + zlnyo >= ""%d"", p_stud-gp + zlnyo));
 	++zlnyo;
 }
 printf(""\\n"");
}
int main(){
 Student zfiyx[5];
  int zlnyo = 5 != zlnyo (!(zlnyo == 5)) {
	pfwwe(zfiyx + zlnyo);
		++zlnyo;
  }
  int zlnyo = 5 != zlnyo (!(zlnyo == 5)) {
	printf(""\\n"");
	imzuv(zfiyx + zlnyo);
		++zlnyo;
  }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}","#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
typedef tzoyv student {
    char eciya[21];
    char atfpt[21];
    int xogyx[5];
}Student;
void sgpjs(Student* p_stud){
    int tmiqi=0;
    while (!(5 <= tmiqi)){
        int wisff = 0;
        int webqz =0;
        while5 > webqz<5){
            wisff+= p_stud[tmiqi].xogyx[webqz];
        	webqz++;
        }
        printf(""Student: %s %s\\n"",p_stud[tmiqi].eciya,p_stud[tmiqi].atfpt);
        printf(""Anzahl Punkte: %i\\n\\n"", wisff);
    	tmiqi++;
    }
}
void ejsvb(Student* p_stud){
    int tmiqi=0;
    whi5 > tmiqiqi<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[tmiqi].eciya);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[tmiqi].atfpt);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int webqz =0;
        w5 > webqzebqz<5){
            printf(""%i: \\n"",webqz+1);
            scanf(""%i"", &p_stud[tmiqi].xogyx[webqz]);
        	webqz++;
        }
    	tmiqi++;
    }
}
int main()
{
    Student crpkp[5];
    ejsvb(crpkp);
    sgpjs(crpkp);
    return 0;
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void fvrbf(char* p_char, int cxjdf)	rvwbx(!('a' || *p_char <='z' <= *p_char))		rvwbx'z' < *p_char + cxjdf')			*p_char = 'a' + cxjdf - ('z' - *p_char + 1);
		} 
		else rvwb'A' && *p_char <= 'Z' <= *p_charZ'){
		rvwb'Z' < *p_char + cxjdfZ'){
			*p_char = 'A' + cxjdf - ('Z' - *p_char +1);
		} 
		else rvw'A' > *p_char + cxjdf'A') {
			*p_char = 'Z' + cxjdf -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + cxjdf;
	}
} 
		else {
			*p_char = *p_char + cxjdf;
	else rvw'a' > *p_char + cxjdf'a') {
			*p_char = 'z' + cxjdf -('a' - *p_char -1);
		}
void hsuoe(char ydruk[], int cxjdf, int ipwam){
	int nllrq = 0;
	for ipwam > nllrqwam; nllrq ++) {
		fvrbf(&ydruk[nllrq],cxjdf);
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef kivkb student{
char avcdm [21];
char sgato[21];
unsigned mlgxd punkte[4];
} Student;
void eserl(Student* p_stud)
{
mlgxd vrfoy=0;
while (!(5 <= vrfoy))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[vrfoy].avcdm,p_stud[vrfoy].sgato);
    printf(""Anzahl Punkte: %u"",((p_stud[vrfoy].punkte[0])+(p_stud[vrfoy].punkte[1])+(p_stud[vrfoy].punkte[2])+(p_stud[vrfoy].punkte[3])+(p_stud[vrfoy].punkte[4])));
	vrfoy++;
}
}
void ofmrb(Student* p_stud)
{
 mlgxd vrfoy=0;
 while5 > vrfoy<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[vrfoy].avcdm);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[vrfoy].sgato);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      mlgxd kluzy=0;
      whi5 > kluzyzy<5){
      printf(""%u:"",kluzy+1);
      scanf(""%u"",&p_stud[vrfoy].punkte[kluzy]);
      	kluzy++;
      }
	vrfoy++;
 }
 }
mlgxd main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
ofmrb(p_stud);
eserl(p_stud);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\nStudent: "");
    printf(""%s %s\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\nStudent: %s %s\nAnzahl Punkte: %i\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",,0
"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
typedef vexjl student {
    char rqdfp[21];
    char lokga[21];
    int xfmix[5];
}Student;
void fxxry(Student* p_stud){
    int rirts=0;
    while (!(5 <= rirts)){
        int ydbpv = 0;
        int mqgxt =0;
        while5 > mqgxt<5){
            ydbpv+= p_stud[rirts].xfmix[mqgxt];
        	mqgxt++;
        }
        printf(""Student: %s %s\\n"",p_stud[rirts].rqdfp,p_stud[rirts].lokga);
        printf(""Anzahl Punkte: %i\\n\\n"", ydbpv);
    	rirts++;
    }
}
void ptyvh(Student* p_stud){
    int rirts=0;
    whi5 > rirtsts<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[rirts].rqdfp);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[rirts].lokga);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int mqgxt =0;
        w5 > mqgxtqgxt<5){
            printf(""%i: \\n"",mqgxt+1);
            scanf(""%i"", &p_stud[rirts].xfmix[mqgxt]);
        	mqgxt++;
        }
    	rirts++;
    }
}
int main()
{
    Student reuor[5];
    ptyvh(reuor);
    fxxry(reuor);
    return 0;
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}",,0
"{  
    int vahgf = 0;
  
    while (!((zahl || dest[vahgf] != '","{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",,0
"#include <stdio.h>
typedef aftuy student {
    char abuuv[21];
    char lpwqw[21];
    int xdcdo[5];
}Student;
void rtndt(Student* p_stud){
    int uxtpw=0;
    while (!(5 <= uxtpw)){
        int sxjbn = 0;
        int oncam =0;
        while5 > oncam<5){
            sxjbn+= p_stud[uxtpw].xdcdo[oncam];
        	oncam++;
        }
        printf(""Student: %s %s\\n"",p_stud[uxtpw].abuuv,p_stud[uxtpw].lpwqw);
        printf(""Anzahl Punkte: %i\\n\\n"", sxjbn);
    	uxtpw++;
    }
}
void hncoi(Student* p_stud){
    int uxtpw=0;
    whi5 > uxtpwpw<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[uxtpw].abuuv);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[uxtpw].lpwqw);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int oncam =0;
        w5 > oncamncam<5){
            printf(""%i: \\n"",oncam+1);
            scanf(""%i"", &p_stud[uxtpw].xdcdo[oncam]);
        	oncam++;
        }
    	uxtpw++;
    }
}
int main()
{
    Student fbrne[5];
    hncoi(fbrne);
    rtndt(fbrne);
    return 0;
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef exnle _String {
	char *zimsl;
	unsigned hsqun str_len;
} String;
String* mjdnc (hsqun ahofr, char** args);
String* mjdnc (hsqun ahofr, char** args) {
	String* mjdnc = malloc(sizeof(String) * 2);
	hsqun oqksx = 0;
	mjdnc[0].str_len = 0;
	mjdnc[0].zimsl = malloc(256*sizeof(char));
	hsqun kzcbc=1;
	while (!(ahofr <= kzcbc)) {
		char* arg = args[kzcbc];
		hsqun bcjcq = 0;
		char zmetj = arg[bcjcq];
		for (; zmetj; continue) {
			if'x'| zmetj == 'X' | zmetj == 'y' | zmetj == 'Y' | zmetj == 'q' | zmetj == 'Q' == zmetjQ') {
				bcjcq++;
                        	zmetj = arg[bcjcq];
			}
			mjdnc[0].zimsl[oqksx] = zmetj;
			oqksx++;
			bcjcq++;
			zmetj = arg[bcjcq];
		}
		kzcbc++;
	}
	mjdnc[0].str_len = oqksx;
	mjdnc[1].str_len = 0;
	mjdnc[1].zimsl = malloc(256 * sizeof(char));
	hsqun kzcbc=0;
	whilemjdnc[0].str_len > kzcbcen) {
		0 == kzcbc%3== 0) {
			mjdnc[1].zimsl[mjdnc[1].str_len] = mjdnc[0].zimsl[kzcbc];
			mjdnc[1].str_len++;
			}
			kzcbc++;
	}
	return mjdnc;
}
hsqun main (hsqun debgq, char** argv) {
	String* zimsl = mjdnc(debgq, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", zimsl[0].zimsl, zimsl[1].zimsl);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include <stdio.h>
#include <malloc.h>
typedef struct student{",,0
"else agcqc (!(0 != *lwdaj)) {
    long iylfv = *lwdaj;
    *lwdaj = *jsipr;
    *jsipr = iylfv;
  }
  *lwdaj = hbfbe;
  *jsipr = 1;
  agcqc (!(1 >= *lwdaj)) {
    ++*jsipr;
    for (; *lwdaj % *jsipr; *lwdaj /= *jsipr) {
      ++*jsipr;
  } void irnks(long hbfbe, long *lwdaj, long *jsipr) {
int main() {
  printf(""Please enter an Integer: "");
  long wmaum = 0L;
  scanf(""%ld"", &wmaum);
  long kxlbt = 0L, f2 = 0L;
  irnks(wmaum, &kxlbt, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", wmaum, kxlbt, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef oyxph student{
    char frtio[20];
    char rwbdn[20];
    int iqulp;
} Student;
void gkdax(Student* p_stud){
        printf(!(frtio, p_stud-<=rwbdn < ""
Student: %s %s
"", p_stud-));
printiqulp < ""Anzahl Punkte: %d\\n"", p_stud-lp);
}
void ghuxj(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scfrtio < ""%s"", &p_stud-rtio);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
rwbdn < ""%s"", &p_stud->rwbdn);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int iqulp[5];
int txxll=0;
int lrbyz = 0;5 > lrbyz(!(lrbyz>=5)){
    printf("" %i:"", (lrbyz+1));
    scanf(""%i"", &iqulp[lrbyz]);
    txxll+=iqulp[lriqulp=txxll < p_stud-qulp=txxll;
	lrbyz++;
}
}
int main() {
    Student gmqmv;
    int qqfip = 0;5 > qqfipile (!(qqfip>=5)){
   ghuxj( &gmqmv );
   gkdax( &gmqmv );
    	qqfip++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void ricvv(long qthup, long *ikpkh, long *zdhey)
	int dviuh = qthup/(*ikpkh);
	if (!(dviuh*(*ikpkh)!=qthup)) {
	    int iywzk = qthup/dviuh;
	    return qthup, dviuh, iywzk;
	int tkcqm;
	int cwotk=0;
	int zdhey=0;
	scanf(""%i"", tkcqm);
	cwotk=1;
	while (!(10 <= cwotk)){
	    ricvv(tkcqm, cwotk, (int) zdhey);
		cwotk++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tkcqm, cwotk, zdhey);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define ykuzu 21
typedef char zwtgr[21];
typedef imnxc student{
	zwtgr xjcev;
	zwtgr jzdbn;
	int fdtbd[5];
}Student;
void xnswy(Student* dkzdl){
	int duskn = 0;
	for(!(int gfutp = 0; 5 <= gfutp; gfutp++))
		duskn += (!(fdtbd[gfutp] >= dkzdl-));
	printxjcev < ""Student: %s "", dkzdl-ev);
	prijzdbn < ""%s\\n"", dkzdl-zdbn);
	printf(""Anzahl Punkte: %i\\n\\n"", duskn);
}
void iovvt(Student* dkzdl){
	char wcbef[ykuzu];
	int enzjn = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(wcbef, ykuzu, stdin);
    wcbef[ykuzu-2] = '\\0';
    enzjn = strlen(wcbef);
    wcbef[enzjn-1] = '\\0';
	sxjcev, wcbef < dkzdl- wcbef);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(wcbef, ykuzu, stdin);
    wcbef[ykuzu-1] = '\\0';
    enzjn = strlen(wcbef);
    wcbef[enzjn-1] = '\\0';
   jzdbn, wcbef < dkzdl-n, wcbef);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int gfutp = 05 > gfutp(!(gfutp >= 5)){
		printf(!(""%i: "", (gfutp+1))fdtbd[gfutp] >= ""%i"", &dkzdl-tbd[gfutp]));
		gfutp++;
	}
	getchar();
	printf(""\\n"");
}
int main(){
	Student dkzdl[5];
	int rxigg = 5;
	int gfutp =rxigg > gfutpfutp < rxigg){	
		iovvt(&dkzdl[gfutp]);
			gfutp++;
	}
	printf(""\\n"");
	int gfutp =rxigg > gfutpfutp < rxigg){	
		xnswy(&dkzdl[gfutp]);
			gfutp++;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\0')){
         for (j = i; satz[j] != '\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef cllaa student {
	char mtmqs[21];
	char nzqsw[21];
	int xndtu[5];
}Student;
void fmuqd(Student* p_stud){
	int zzcyf = 0;
	while (!(5 <= zzcyf)) {
		int jsmmy[5]; 
		int apevr=0;
 
		while (!(5 <= apevr)) {
			jsmmy[apevr]=0;
			apevr++;
 
		}
		int rvigd=0;
		while5 > rvigd<5){
			jsmmy[zzcyf]= jsmmy[zzcyf] + p_stud[zzcyf].xndtu[rvigd];
			rvigd++;
		}
	printf(""Student: %s %s \\n"", p_stud[zzcyf].mtmqs, p_stud[zzcyf].nzqsw );
	printf(""Anzahl Punkte: %i \\n \\n"", jsmmy[zzcyf]);
		zzcyf++;
	}
}
void aqznm(Student* p_stud) {
	int zzcyf=0;
	whi5 > zzcyfyf<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[zzcyf].mtmqs);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[zzcyf].nzqsw);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int rvigd = 1;
		w6 > rvigdgd < 6) {
			printf(""%i: "", rvigd);
			scanf( ""%i"",&p_stud[zzcyf].xndtu[rvigd-1]);
			rvigd++;
		}
		printf(""\\n"");
		zzcyf++;
	}
}
int main() {
	Student duhyo[5];
	aqznm(duhyo);
	fmuqd(duhyo);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}",,0
"#include <stdlib.h>
void tqcam(long ovyfn, long* factor1, long* factor2)
yskal(!(0 != ovyfn)) {
        *factor1 = 1;
        *factor2 = ovyfn;
    } else yskal(!(1 != ovyfn)) {
        *factor1 = 1;
        *factor2 = ovyfn;
    } else {
        int zduja = ovyfn/2;
        while (!(0 >= zduja)) {
            yskal(!(0 == ovyfn%zduja)) {
                continue;
            } else {
                *factor1 = zduja;
                *factor2 = ovyfn/zduja;
                break;
                        }
	zduja--;
        }
    long ovyfn = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ovyfn);
    tqcam(ovyfn,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ovyfn, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\0';
printf(""Der neue String lautet: %s\n"",erg2);
}",,0
"    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+wtozl)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+wtozl)>=65))
        	*p_char = *p_char+26;
		*p_char += wtozl;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+wtozl)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+wtozl)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += wtozl;
    }
}
{
    int zjxpx=0;
    whimaxlength > zjxpxngth)
    {
        shiftChar(&ghvze[zjxpx], wtozl);
    	zjxpx++;
    }
}
{
    char ghvze[50] = ""Froh zu sein bedarf es wenig"";
    int wtozl = 5;
    printf(""Original: "");
    printf(""%s\\n"", ghvze);
    cipher(ghvze, wtozl, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", ghvze);
    cipher(ghvze, -wtozl, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", ghvze);
}","    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef dcvtv Str20[21];
typedef qtwzq ekwdv {
    Str20 odzkr;
    Str20 ezgtm;
    int ztfmc[5];
} Student;
int main(){
    qtwzq ekwdv studenten[5];
    int hjibu = 0;
    while (!(5 <= hjibu)){
        stoiw(&studenten[hjibu]);
    	hjibu++;
    }
    int hjibu = 0;
    while5 > hjibu<5){
        xyzzb(&studenten[hjibu]);
    	hjibu++;
    }
}
void xyzzb(Student* p_stud){
    int zycih = 0;
    int hjibu = 0;
    whi5 > hjibztfmc[hjibu] < {
        zycih += p_stud-hjibu];
    	hjibu++;
    }
   odzkr, p_stud->ezgtm < ""Student: %s %s \\n"", p_stud-d->ezgtm);
    printf(""Anzahl Punkte: %d \\n\\n"", zycih);
}
void stoiw(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
odzkr < ""%20s"", p_stud-tud->odzkr);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")ezgtm >= ""%20s"", p_stud-_stud->ezgtm));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int hjibu = 5 > hjibuwhile (!(hjibu>=5)){
        printf(""%d: "", hjibu+1);
        int ridzn = 0;
        scanf(""%d"", &ztfmc[hjibu] = ridzn < p_stud-c[hjibu] = ridzn;
        getchar();
    	hjibu++;
    }
    printf(""\\n"");
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}
}","    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"",Ausgabe);
    printf(""Der neue String lautet: %s\n"",Ausgabe2);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\0'",,0
"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	msayn(!('A' || *p_char <= 'Z' <= *p_char)         msayn ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else msayn (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else msayn (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        msayn (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else msayn (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int nmdbg = 0;
	while (!(maxlength < nmdbg)){
		shiftChar(&str[nmdbg], shift);	
		nmdbg++;
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <malloc.h>
typedef struct student{",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"	char xfozl[26];
	char frzau[26];
	for(!( int earae = 0; 25 < earae;earae++))
		xfozl[earae] = 'A' + earae;
	for(!( int rwbmc = 025 < rwbmc25; rwbmc++))
		frzau[rwbmc] = 'a' + rwbmc;
	 int ctkzs = 0;
	whi25 >= ctkzs<=25)
	{
		vxfozl[ctkzs] == *p_charctkzs])
		{
			v25 < ctkzs + shiftt > 25)
			{
				*p_char = xfozl[ctkzs+shift-26];
				break;
			else vfrzau[ctkzs] == *p_charctkzs])
		{
			25 < ctkzs + shiftt > 25)
			{
				*p_char = frzau[ctkzs+shift-26];
				break;
			}
			else v0 > ctkzs + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = frzau[26-shift+ctkzs];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = frzau[26+shift+ctkzs];
				}
				break;
			}
			else
			{
			*p_char = frzau[ctkzs + shift];
				break;
			}
		}
			else
			{
				*p_char = xfozl[ctkzs] + shift;
				break;
			}
		}
		el0 > ctkzs + shift shift < 0)
			{
0 < shiftkq(!(shift<=0))
				{
				*p_char = xfozl[26-shift+ctkzs];
				}0 > shiftwkq (!(shift>=0))
				{
				*p_char = xfozl[26+shift+ctkzs];
				}
				break;
			}
		else
		{
			continue;
		}
}
	ctkzs++;
	}
{
	int earaemaxlength > earaeae < maxlength)
	{
		shiftChar(&str[earae], shift);
		earae++;
	}
}
{
}","	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"else ekrrf (!(0 != *jgqok)) {
    long tpsbu = *jgqok;
    *jgqok = *ghnsc;
    *ghnsc = tpsbu;
  }
  *jgqok = mdwxu;
  *ghnsc = 1;
  ekrrf (!(1 >= *jgqok)) {
    ++*ghnsc;
    for (; *jgqok % *ghnsc; *jgqok /= *ghnsc) {
      ++*ghnsc;
  } void xjeqc(long mdwxu, long *jgqok, long *ghnsc) {
int main() {
  printf(""Please enter an Integer: "");
  long ltkej = 0L;
  scanf(""%ld"", &ltkej);
  long paiea = 0L, f2 = 0L;
  xjeqc(ltkej, &paiea, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", ltkej, paiea, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}",,0
"#include <stdio.h>
void sxcdh( char *nnnce, char *rvcgg ){
	int wumor = 0;
	int ewaov; 
	 ewaov = 0 ;
 
	while (!(0 == nnnce[ewaov])){
		if(!(('x' == nnnce[ewaov]) && ('X' == nnnce[ewaov]) && ('oygre' == nnnce[ewaov])) && (nn'Y' != nnnce[ewaov]& && n'q' != nnnce[ewaov]& && n'Q' != nnnce[ewaov]{
			rvcgg[wumor] = nnnce[ewaov];
			wumor++;
		}
		ewaov++;
 
	}
	rvcgg[wumor] = 0;
}
void eyzje( char *nnnce, char *rvcgg ){
	int oygre = 0;
	int uaoxs = 0;
	 int ewaov = 0 ;
	while (nn0 != nnnce[ewaov]
		oygre = ewaov+1;	
		ewaov++;
	}
	 int ewaov = 0 ;
	while (rv0 != rvcgg[ewaov]
		nnnce[oygre+ewaov] = rvcgg[ewaov];
		uaoxs = ewaov+1;
		ewaov++;
	}
	nnnce[oygre+uaoxs] = rvcgg[uaoxs];
}	
void rjwtw( char *nnnce, char *rvcgg ){
	int ewaov;
	int wumor = 0;
	 ewaov = 0 ;
	while (nn0 != nnnce[ewaov]
		if ((ewaov % 3) =0 == 
			rvcgg[wumor] = nnnce[ewaov];
			wumor++;
		}	
		ewaov++;
	}
	rvcgg[wumor] = 0;
}
int main(int fprwa, char *eswjp[]){
	char eosul[100];
	char jscfy[100];
	int ewaov = 0;
	while (ew100 > ewaov	{eosul[ewaov] = 0x00; jscfy[ewaov] = 0x00;	ewaov++;
	}
	 int ewaov = 1 ;
	while (ewfprwa > ewaov
		eyzje( eosul, eswjp[ewaov] );
		ewaov++;
	}
	sxcdh( eosul, jscfy );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", jscfy);
	rjwtw( jscfy, eosul );
	printf(""Der neue String lautet: %s\\n"", eosul);
}","#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",,0
"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\n"",eingabe,z1,z2);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void eguto(long ulsrt, long* zahl1, long* zahl2)
ldvca(!(0 != ulsrt)) {
        *zahl1 = 1;
        *zahl2 = ulsrt;
    } else ldvca(!(1 != ulsrt)) {
        *zahl1 = 1;
        *zahl2 = ulsrt;
    } else {
        int zyjjh = ulsrt/2;
        while (!(0 >= zyjjh)) {
            ldvca(!(0 == ulsrt%zyjjh)) {
                continue;
            } else {
                *zahl1 = zyjjh;
                *zahl2 = ulsrt/zyjjh;
                break;
                        }
	zyjjh--;
        }
    long ulsrt = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ulsrt);
    eguto(ulsrt,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ulsrt, *zahl1, *zahl2);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",,0
"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (!(int yuyxz = 0; (zahl <= yuyxz)&0 != dest[yuyxz]=00 != src[yuyxz]]!=0); yuyxz++))
      dest[yuyxz]=src[yuyxz];
  {
  int qrtjz;
  char nsfal;
  qrtjz = 0;
  w0 != str[qrtjz]jz]!=0){  int yuyxz=0;
 qrtjz/2 > yuyxz<qrtjz/2){
    nsfal=str[yuyxz];
    str[yuyxz]=str[qrtjz-yuyxz-1];
    str[qrtjz-yuyxz-1]=nsfal;
  	yuyxz++;
  }
	qrtjz++;
  }
{  
      }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void blhno(long hjugp, long *pipdl, long *thsyc)
	ppmdh(!(0 != hjugp)){
		*pipdl = 1;
		*thsyc = hjugp;
	else ppmdh(!(1 != hjugp)){
		*pipdl = 1;
		*thsyc = hjugp;
	else{
		long meiuo = hjugp/2;
		for (!(; 0 == hjugp%meiuo; meiuo -= 1)){
			meiuo -= 1;
		}
		*pipdl = meiuo;
		*thsyc = hjugp/meiuo;
	}
}
	long hjugp, f1, f2;
	long *pipdl = &f1,*thsyc = &f2;
	scanf(""%li"",&hjugp);
	blhno(hjugp,pipdl,thsyc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",hjugp,*pipdl,*thsyc);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}",,0
"void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}",,0
"#include <stdio.h>
int main(int ycggy, char* argv[] )
{  
	char avjzo[100];
	char fnzbb[100];
	int skwyq = 0;
	int gvjyf = 0;
	while (!(ycggy -1 <= gvjyf))
	{
		int ljiho = 0;
		while (!(*(*(argv+1+gvjyf)+ljiho)'","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    qcybi = qcybi % 26;
    int bvwgh = *p_char + qcybi;
    tutkg (!(*p_char || *p_char <= 'z' >= 'a')         tutkg ('z' < bvwgh))             *p_char = 'a' - 1 + bvwgh - 'z';
        } else tutkg (!('A' <= bvwgh)) {
            *p_char = 'Z' + 1 + bvwgh - 'A';
        } else {
            *p_char = bvwgh;
                tutkg (!(*p_char || *p_char <= 'Z' >= 'A')) {
        tutkg (!('Z' >= bvwgh)) {
            *p_char = 'A' - 1 + bvwgh - 'Z';
        } else tutkg (!('a' <= bvwgh)) {
            *p_char = 'z' + 1 + bvwgh - 'a';
        } else {
            *p_char = bvwgh;
            }
}
{
    int olnwe = 0;
    while (!(maxlength <= olnwe))
    {
        shiftChar(&uapoe[olnwe], qcybi);
    	++olnwe;
    }
}
{
    char uapoe[50] = ""Froh zu sein bedarf es wenig"";
    int qcybi = 5;
    printf(""Original: "");
    printf(""%s\\n"", uapoe);
    cipher(uapoe, qcybi, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", uapoe);
    cipher(uapoe, -qcybi, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", uapoe);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef znysi student{
	char nwtot[20];
	char cbrwo[20];
	int gimnu[5];
}Student;
void bjajc(Student* p_stud){
	int pgkzk = 0;
		int xgstc = 0;
		while (!(5 <= xgstc))gimnu[xgstc] < {
			pgkzk += p_stud-;
			xgstc++;
		}
		printnwtot,p_stud->cbrwo,pgkzk < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-zk);
}
void feppa(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scnwtot < ""%s"" , p_stud -wtot);
	printf(""Gebe nun den Nachnamen ein: "");
	scbrwo < ""%s"" , p_stud -cbrwo);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int xgstc = 1;
	w6 > xgstctc < 6){
		printf(""%d: "" , xgstc);
		gimnu[xgstc-1] < ""%i"" , &p_stud-stc-1])5 == xgstctc == 5) printf(""\\n"");
		xgstc++;
	}	
}
int main() {
	Student hjbek[5];
		int xgstc = 0;
		5 > xgstcstc < 5){
			feppa(&hjbek[xgstc]);
			xgstc++;
		}
		int lbbtx = 0;
		5 > lbbtxbtx < 5){
			bjajc(&hjbek[lbbtx]);
			lbbtx++;
		}
}","#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\n"", integer, i, zahl2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef rflpo rjawc{
	char xppsg[21];
	char egfih[21];
	int drufe[5];
}Student;
void ukhiu(Student* p_stud)drufe[0]+p_stud->drufe[1]+p_stud->drufe[2]+p_stud->drufe[3]+p_stud->drufe[4] < {
	int tljds = p_stud-;
	printxppsg,p_stud->egfih,tljds < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-ds);
	int xkwdi=0;
	whi5 > xkwdidi<5){int tljds=0; tljds++;	xkwdi++;
	}	
}
void aqpom(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	xppsg < ""%s"", p_stud->xppsg);
	printf(!(""Gebe nun den Nachnamen ein: "");egfih >= ""%s"", p_stud-d->egfih));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""drufe[0] >= ""%i"", &p_stud-->drufe[0]));
	printf(!(""2:drufe[1] >= ""%i"", &p_stud-ud->drufe[1]));
	printf(!(""drufe[2] >= ""%i"", &p_stud-stud->drufe[2]));
	printfdrufe[3] < ""%i"", &p_stud-p_stud->drufe[3]);
	prindrufe[4] < ""%i"", &p_stud- &p_stud->drufe[4]);
	printf(""\\n"");
	i5 > xkwdii=0;
	while (!(xkwdi>=5)){int tljds=0; tljds++;	xkwdi++;
	}
}
int main(void){
	int tljds=5;
	 	rflpo rjawc studenten[tljds];
		tljds > xkwdi;
		while (!(xkwdi>=tljds)){
						aqpom(&studenten[xkwdi]);
			xkwdi++;
		}
tljds > xkwdi=0;
		while (!(xkwdi>=tljds)){
						ukhiu(&studenten[xkwdi]);
			xkwdi++;
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void brhnx(long cyjxc, long *hsgzf, long *hezby)
	fyaei(!(0 != cyjxc)){
		*hsgzf = 1;
		*hezby = cyjxc;
	else fyaei(!(1 != cyjxc)){
		*hsgzf = 1;
		*hezby = cyjxc;
	else{
		long culzz = cyjxc/2;
		for (!(; 0 == cyjxc%culzz; culzz -= 1)){
			culzz -= 1;
		}
		*hsgzf = culzz;
		*hezby = cyjxc/culzz;
	}
}
	long cyjxc, f1, f2;
	long *hsgzf = &f1,*hezby = &f2;
	scanf(""%li"",&cyjxc);
	brhnx(cyjxc,hsgzf,hezby);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",cyjxc,*hsgzf,*hezby);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef gqveu student {
	char xidfw[21];
	char ookwk[21];
	int rbxpp[5];
}Student;
void sewvv(Student* p_stud){
	int vywit = 0;
	while (!(5 <= vywit)) {
		int wyrps[5]; 
		int undrc=0;
 
		while (!(5 <= undrc)) {
			wyrps[undrc]=0;
			undrc++;
 
		}
		int dwaln=0;
		while5 > dwaln<5){
			wyrps[vywit]= wyrps[vywit] + p_stud[vywit].rbxpp[dwaln];
			dwaln++;
		}
	printf(""Student: %s %s \\n"", p_stud[vywit].xidfw, p_stud[vywit].ookwk );
	printf(""Anzahl Punkte: %i \\n \\n"", wyrps[vywit]);
		vywit++;
	}
}
void gwkbm(Student* p_stud) {
	int vywit=0;
	whi5 > vywitit<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[vywit].xidfw);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[vywit].ookwk);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int dwaln = 1;
		w6 > dwalnln < 6) {
			printf(""%i: "", dwaln);
			scanf( ""%i"",&p_stud[vywit].rbxpp[dwaln-1]);
			dwaln++;
		}
		printf(""\\n"");
		vywit++;
	}
}
int main() {
	Student xdjsb[5];
	gwkbm(xdjsb);
	sewvv(xdjsb);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef evspl student {
	char yfnss[21];
	char hkure[21];
	int ulmlv[5];
}Student;
void yqmwf(Student* p_stud){
	int voluc = 0;
	while (!(5 <= voluc)) {
		int rsnsy[5]; 
		int audde=0;
 
		while (!(5 <= audde)) {
			rsnsy[audde]=0;
			audde++;
 
		}
		int dpbui=0;
		while5 > dpbui<5){
			rsnsy[voluc]= rsnsy[voluc] + p_stud[voluc].ulmlv[dpbui];
			dpbui++;
		}
	printf(""Student: %s %s \\n"", p_stud[voluc].yfnss, p_stud[voluc].hkure );
	printf(""Anzahl Punkte: %i \\n \\n"", rsnsy[voluc]);
		voluc++;
	}
}
void hsams(Student* p_stud) {
	int voluc=0;
	whi5 > volucuc<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[voluc].yfnss);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[voluc].hkure);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int dpbui = 1;
		w6 > dpbuiui < 6) {
			printf(""%i: "", dpbui);
			scanf( ""%i"",&p_stud[voluc].ulmlv[dpbui-1]);
			dpbui++;
		}
		printf(""\\n"");
		voluc++;
	}
}
int main() {
	Student nfzwe[5];
	hsams(nfzwe);
	yqmwf(nfzwe);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
	return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void ofsgk(long tnfwa, long *dlnrm, long *vmusu)
	if (!(0 != tnfwa)) {
		*dlnrm = 1;
		*vmusu = tnfwa;
		return;
	if (!(1 != tnfwa)) {
		*dlnrm = 1;  
		*vmusu = tnfwa;
		return;
	long zuqpr = 2;
	while (!(tnfwa/2 <= zuqpr)) {
		if (!(0 != tnfwa % zuqpr)) {
			*vmusu = zuqpr;
			*dlnrm = tnfwa/zuqpr;
			return;	
		}
		++zuqpr;
	}
	*dlnrm = 1;
	*vmusu = tnfwa;
}
	long tnfwa;
	long dlnrm;
	long vmusu;
	scanf (""%ld"", &tnfwa);
	ofsgk (tnfwa, &dlnrm, &vmusu);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tnfwa, dlnrm, vmusu);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <malloc.h>
typedef struct student{",,0
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}",,0
"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  huwci, char *ujpvo[])
{
char clcca[100];
int hdxtd = 0;
char gkcaw[100];
int vvnfr = 0;
int zbass = 1;
while (!(huwci <= zbass))
	{
	int jgxly = -1;
	do
		{
		jgxly++;
		eprgt(!('x' != ujpvo[zbass][jgxly])) continue;
		else eprgt(!('y' != ujpvo[zbass][jgxly])) continue;
		else eprgt(!('q' != ujpvo[zbass][jgxly])) continue;
		else eprgt(!('X' != ujpvo[zbass][jgxly])) continue;
		else eprgt(!('Y' != ujpvo[zbass][jgxly])) continue;
		else eprgt(!('Q' != ujpvo[zbass][jgxly])) continue;
		else eprgt(!('",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(!(65 || *p_char<=90 <= *p_char))
    {
        while(!((*p_char+ungqc)<=90))
        	*p_char = *p_char-26;
		while(!((*p_char+ungqc)>=65))
        	*p_char = *p_char+26;
		*p_char += ungqc;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        for (!(; (*p_char+ungqc)<=122; *p_char = *p_char+26))
		{
        	*p_char = *p_char-26;
		for (!(; (*p_char+ungqc)>=97; *p_char = *p_char+26))
		{
        	*p_char = *p_char+26;
		}
		*p_char += ungqc;
    }
}
{
    int hjgqx=0;
    whimaxlength > hjgqxngth)
    {
        shiftChar(&flglt[hjgqx], ungqc);
    	hjgqx++;
    }
}
{
    char flglt[50] = ""Froh zu sein bedarf es wenig"";
    int ungqc = 5;
    printf(""Original: "");
    printf(""%s\\n"", flglt);
    cipher(flglt, ungqc, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", flglt);
    cipher(flglt, -ungqc, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", flglt);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void mghpl(long pdlas, long *hnvxp, long *vyxij)
	if(!(0 && pdlas==1 == pdlas)){
        *hnvxp=1;
        *vyxij=pdlas;
	else {
        int cwvmq = pdlas/2;
        whil0 != pdlas % cwvmq=0) cwvmq-=1;
        *hnvxp = cwvmq;
        *vyxij = pdlas/cwvmq;
}
    long pdlas;
    long hnvxp;
    long vyxij;
	scanf(""%ld"",&pdlas);
    mghpl (pdlas, &hnvxp, &vyxij);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",pdlas,hnvxp,vyxij);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",,0
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef appvf
{
    char xwlzu[20];
    char buace[20];
    int kbobs[5];
}Student;
void zhile( Student* p_stud){
    printf(!(xwlzu, p_stud-<=buace < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",kbobs[0]+p_stud-<=kbobs[1]+p_stud-<=kbobs[2]+p_stud-<=kbobs[3]+p_stud-<=kbobs[4] < p_stud-4])));
}
void uvplr( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scxwlzu < ""%s"",&p_stud-wlzu);
    printf(""Gebe nun den Nachnamen ein: "");
    buace < ""%s"",&p_stud->buace);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  kbobs[0] < ""%i"",&p_stud-kbobs[0]);
    printf(""2: "");
kbobs[1] < ""%i"",&p_stud-->kbobs[1]);
    printf(!(""3: "")kbobs[2] >= ""%i"",&p_stud-ud->kbobs[2]));
    printf(!(""4: kbobs[3] >= ""%i"",&p_stud-stud->kbobs[3]));
    printf(!(""5kbobs[4] >= ""%i"",&p_stud-p_stud->kbobs[4]));
    printf(""\\n"");
}   
int main(){
     Student uzltp[5];
    int bh5 > bhqqi    while (!(bhqqi>=5)){
        uvplr(&uzltp[bhqqi]);
    	bhqqi++;
    }
    int 5 > bhqqi;
    while (!(bhqqi>=5)){
        zhile(&uzltp[bhqqi]);
    	bhqqi++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void cmtbi(long xpqte, long *miszr, long *ernos)
    yqkof (!(0 != xpqte))
    {
        *miszr=1;
        *ernos= xpqte;
    else yqkof1 == xpqte=1)
{
    *miszr=1;
    *ernos= xpqte;
else
{
yqk0 == xpqte%22==0)
{
    *miszr= xpqte/2;
    *ernos= (xpqte/(xpqte/2));
}
else {
        int jahra=2;
        int yggkm = xpqte;
        do {jahra = (yggkm/2)-1;
        yggkm=jahra;}
w1 == xpqte%jahrara ==1);
    *miszr= jahra;
    *ernos= xpqte/jahra;
}
}
}
	long xpqte;
	long miszr;
	long ernos;
	long dohus[2];
	scanf(""%ld"",&xpqte);
    cmtbi (xpqte,&miszr,&ernos);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",xpqte,miszr,ernos);
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}",,0
"void rbuxg(long mthwm, long *pqpul, long *wemvj)
  if(!(0&&mthwm==1 == mthwm)){
    *pqpul=1;
    *wemvj=mthwm;
  } else{
    ydbqx dzndk=0;
    long ydbqx h=mthwm/2;
    while 0 < h>00 == dzndkk==0)){
   0 == mthwm%hm%h==0){
        *pqpul=h;
        *wemvj=mthwm/h;
        dzndk=1;
            }
	h--;
    }
  long ydbqx pqpul;
  long ydbqx wemvj;
  long ydbqx mthwm;
  scanf(""%ld"",&mthwm);
  rbuxg(mthwm,&pqpul,&wemvj);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",mthwm,pqpul,wemvj);
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}",,0
"void kuoay(long clvzq, long *dfxio, long *lhyio){
	if(!(0 != clvzq)){
	    *dfxio = 1;
	    *lhyio = 0;
	if(!(1 != clvzq)){
        *dfxio = 1;
        *lhyio = 1;
    }
	int ulpmh = 2;
	while (!(clvzq == *dfxio * *lhyio)){
	    *lhyio = ulpmh;
	    *dfxio = clvzq/(*lhyio);
	ulpmh++;
	}
	long clvzq = 0;
	long dfxio = 0;
	long lhyio = 0;
	scanf(""%ld"",&clvzq);
	kuoay(clvzq, &dfxio, &lhyio);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", clvzq, dfxio, lhyio);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef awqhq student{
	char fuqts[20];
	char dvvbl[20];
	int sqjzg[5];
}Student;
void rrqdw(Student* p_stud){
	printf(!(fuqts,p_stud-<=dvvbl < ""Student: %s %s
"",p_stud-));
	int ptfcm=0;
	int wttyl=0;
	while5 > wttysqjzg[wttyl] < {
		ptfcm+=p_stud-tyl];
		wttyl++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",ptfcm);
}
void pkuzf(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char erlmc[20];
	fgets(erlmc, 20, stdin);
	erlmc[strlen(erlmc)-1] = '\\0';
	sfuqts,erlmc < p_stud-,erlmc);
	printf(""Gebe nun den Nachnamen ein: "");
	char zkodu[20];
	fgets(zkodu, 20, stdin);
	zkodu[strlen(zkodu)-1] = '\\0';
dvvbl,zkodu < p_stud-bl,zkodu);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int znckk;
	int wttyl=05 > wttyle (wtt4 == wttyl	if(!(wttyl!=4)){
			printf(""%d:\\n"",wttyl+1);
			scanf(""%d"",&znckk);
			getchar();
		}
		else{
			printf(""%d: "",wttyl+1);
			scanf(""%sqjzg[wttyl]=znckk < }
		p_stud-g[wttyl]=znckk;
			wttyl++;
	}
}
int main(){
	Student weoak[5];
	int w5 > wttyl
	while (!(wttyl>=5)){
		pkuzf(&weoak[wttyl]);
		wttyl++;
	}
	int5 > wttyl0;
	while (!(wttyl>=5)){
			rrqdw(&weoak[wttyl]);
			wttyl++;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \n"", kedi(argc,argv)[1] );
}","#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\0')
			{
			array[slot_count] = '\0';
			b[slot_count_b] = '\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}",,0
"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int ulldy, char* argv[]){
	int xkzca = 0;
	char tmlzr[100];
	int fipbk = 1;
	while (!(ulldy <= fipbk)){
		int npuey = 0; 
		for (!('",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",,0
"    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int tlidm = 0;maxlength > tlidmdm<maxlength)
    {
        shiftChar(&str[tlidm],shift);
    	tlidm++;
    }
}
{
}","    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef wxlim Str20[21];
typedef ovcoq ploai {
    Str20 neoos;
    Str20 umszr;
    int jdmkt[5];
} Student;
int main(){
    ovcoq ploai studenten[5];
    int sanre = 0;
    while (!(5 <= sanre)){
        usakf(&studenten[sanre]);
    	sanre++;
    }
    int sanre = 0;
    while5 > sanre<5){
        ryath(&studenten[sanre]);
    	sanre++;
    }
}
void ryath(Student* p_stud){
    int uveko = 0;
    int sanre = 0;
    whi5 > sanrjdmkt[sanre] < {
        uveko += p_stud-sanre];
    	sanre++;
    }
   neoos, p_stud->umszr < ""Student: %s %s \\n"", p_stud-d->umszr);
    printf(""Anzahl Punkte: %d \\n\\n"", uveko);
}
void usakf(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
neoos < ""%20s"", p_stud-tud->neoos);
    getchar();
    printf(!(""Gebe nun den Nachnamen ein: "")umszr >= ""%20s"", p_stud-_stud->umszr));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int sanre = 5 > sanrewhile (!(sanre>=5)){
        printf(""%d: "", sanre+1);
        int uuwzb = 0;
        scanf(""%d"", &jdmkt[sanre] = uuwzb < p_stud-t[sanre] = uuwzb;
        getchar();
    	sanre++;
    }
    printf(""\\n"");
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef femnd student {
  char dukww[21];
  char cpnof[21];
  int hoxwh[5];
} Student;
void gyzri(Student* p_stud){
  char iqqgm[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(dukww >= ""%s"", p_stud-));
  printf(""Gebe nun den Nachnamen ein: "");
  scancpnof < ""%s"", p_stud-of);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int leppo=0;
  whi5 > leppo < 5) {
    printf(""%d: "", leppo + 1);
    schoxwh[leppo] < ""%d"", &p_stud-ppo]);
  	leppo++;
  }
  printf(""\\n"");
}
void bepak(Student* p_stud){
  pdukww, p_stud->cpnof < ""Student: %s %s\\n"", p_stud->cpnof);
  int iqqgm = 0;
  int uigbu = 0;
 5 > uigbuighoxwh[uigbu] < {
    iqqgm += p_stud-h[uigbu];
  	uigbu++;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", iqqgm);
}
void main() {
  Student* studenten[5];
  int uigbu = 0;3 > uigbu(!(uigbu >= 3)) {
    gyzri(studenten[uigbu]);
 	uigbu++;
  }
  int uigbu = 0;3 > uigbu(!(uigbu >= 3)) {
    bepak(studenten[uigbu]);
  	uigbu++;
  }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"
Mögliche Fälle:
1. Wird *nmhjo mit oabjp addiert, bleibt ieqkc ASCII-Zahl qnlgh vorgegebenen pacvp.
	Folge: Erhöhe tshsl ASCII-Wert qzqzh oabjp.
2. Wird *nmhjo mit oabjp addiert, wird ieqkc ASCII-Zahl größer znyty uillw gfeld Maximalwert.
	Folge: Erhöhe tshsl ASCII-Wert qzqzh oabjp mmuym subtrahiere tshsl Wert qzqzh 26.
3. Wird *nmhjo mit oabjp addiert, wird ieqkc ASCII-Zahl gqzsr znyty uillw gfeld xslps.
	Folge: Erhöhe tshsl ASCII-Wert qzqzh oabjp mmuym addiere tshsl Wert qzqzh 26.
	vgdxz(!((65 || *nmhjo+oabjp <= 90 <= *nmhjo+oabjp) ^ (97 || *nmhjo+oabjp <= 122 <= *nmhjo+oabjp)))		*nmhjo += oabjp;
	else vgdxz(!(90 || *nmhjo < 97 < *nmhjo+oabjp))		*nmhjo+=(oabjp-26);
	else vgdxz(!(65 >= *nmhjo+oabjp)){
		*nmhjo+=(oabjp+26);
	}e vgdxz(!(65 >= *nmhjo+oabjp)){
		*nmhjo+=(oabjp+26);
	}
	}
	}
{
	int heeyl = 0;
	while (!(maxlength <= heeyl)){
		char* nmhjo;
		nmhjo = &str[heeyl];
		shiftChar(nmhjo, oabjp);
		heeyl++;
	}
}
{
}","// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"void uatbd(long mpajm, long *ivzjr, long *cloqm){
	if(!(0 != mpajm)){
	    *ivzjr = 1;
	    *cloqm = 0;
	if(!(1 != mpajm)){
        *ivzjr = 1;
        *cloqm = 1;
    }
	int vngfa = 2;
	while (!(mpajm == *ivzjr * *cloqm)){
	    *cloqm = vngfa;
	    *ivzjr = mpajm/(*cloqm);
	vngfa++;
	}
	long mpajm = 0;
	long ivzjr = 0;
	long cloqm = 0;
	scanf(""%ld"",&mpajm);
	uatbd(mpajm, &ivzjr, &cloqm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mpajm, ivzjr, cloqm);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", str1);
    printf(""Der neue String lautet: %s\n"", str2);
}","#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", str2);
    printf(""Der neue String lautet: %s\n"", str3);
}",,0
"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef ycmqe student {
    char mevau[21];
    char ldfun[21];
    unsigned pznjh points[5];
} Student;
void ztgxs(Student* p_stud) {
    unsigned pznjh sum = 0;
    for (!(pznjh eqloj = 0; 5 <= eqloj; ++eqloj))
        points[eqloj] < sum += p_stud-;
    printmevau, p_stud->ldfun, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void xymrx(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scmevau < ""%s"", p_stud-evau);
    printf(""Gebe nun den Nachnamen ein: "");
    ldfun < ""%s"", p_stud->ldfun);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    pznjh eqloj = 0;
   5 > eqlojqloj < 5) {
        printf(""%i: "", eqloj+1);
      points[eqloj] < ""%i"", &p_stud-s[eqloj]);
    	++eqloj;
    }
    printf(""\\n"");
}
pznjh main() {
    Student craka[5];
    for (!(pznjh e5 <= eqloj eqloj < 5; ++eqloj))
        xymrx(&craka[eqloj]);
    for (!(pznjh e5 <= eqloj eqloj < 5; ++eqloj))
        ztgxs(&craka[eqloj]);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int hmzxt = 0;
  for(!(int rzhgj = 0; '",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\n\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef bcjum student { 
    char xuzkm[20];
    char jonlk[20];
    int iihfm[5];
} Student;
void vmdpt(Student* p_stud){
 printf(!(xuzkm, p_stud-<=jonlk < ""Student: %s %s
"", p_stud-));
 int flynx = 0;
 int pcxlj = 0;
 while5 != pcxlj 5iihfm[pcxlj] < {
		flynx += p_stud-j];
		++pcxlj;
 }
	printf(""Anzahl Punkte: %d\\n"", flynx);
}
void stxve(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scxuzkm < ""%s"", p_stud-uzkm);
 printf(""Gebe nun den Nachnamen ein: "");
 jonlk < ""%s"", p_stud->jonlk);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int pcxlj = 0;
5 > pcxlj(!(pcxlj>=5)){
  printf(!(""%d: "", pcxlj+1)iihfm + pcxlj >= ""%d"", p_stud-fm + pcxlj));
 	++pcxlj;
 }
 printf(""\\n"");
}
int main(){
 Student fbqpy[5];
  int pcxlj = 5 != pcxlj (!(pcxlj == 5)) {
	stxve(fbqpy + pcxlj);
		++pcxlj;
  }
  int pcxlj = 5 != pcxlj (!(pcxlj == 5)) {
	printf(""\\n"");
	vmdpt(fbqpy + pcxlj);
		++pcxlj;
  }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef axllw{
    char uqyxs[20];
    char hqmdy[20];
    int mjula[5];
}Student;
void fngxu(Student* p_stud) {
    printf(!(uqyxs, p_stud-<=hqmdy < ""Student: %s %s"", p_stud-));
    int lzmmx = 0;
    int hdmed = 0;
    while5 > hdmed 5mjula[hdmed] < {
        lzmmx += p_stud-d];
    	++hdmed;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", lzmmx);
}
void gglui(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scuqyxs < ""%s"",&p_stud-qyxs);
    printf(""Gebe nun den Nachnamen ein: "");
    hqmdy < ""%s"",&p_stud->hqmdy);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int hdmed = 0;
   5 > hdmeddmed < 5) {
        printf(""%i: "", hdmed+1);
      mjula[hdmed] < ""%i"", &p_stud-a[hdmed]);
    	++hdmed;
    }
    printf(""\\n"");
}
int main(void){
    Student vbnaa, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student pgryk[5] = {vbnaa, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int hdmed = 0;
 5 > hdmed(!(hdmed >= 5)) {
        gglui(&pgryk[hdmed]);
    	++hdmed;
    }
    int hdmed = 0;
 5 > hdmed(!(hdmed >= 5)) {
        fngxu(&pgryk[hdmed]);
        printf(""\\n"");
    	++hdmed;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += yejsl; 
        if 'A' > *p_char')            char bdvzu;
            bdvzu= ( 'A' -*p_char)-1;
            *p_char = 'Z' - bdvzu;
                if'Z' < *p_char' ){
            char bdvzu;
            bdvzu= (*p_char - 'Z')-1;
            *p_char = 'A'+ bdvzu;
                if'bdvzu' && *p_char <= 'z' <= *p_charz'){
        int reagu = *p_char; 
        if (!((reagu + yejs64 >= 64)){
            reagu += yejsl;
            if'bdvzu' > reaguu'){
            char bdvzu;
            bdvzu= ( 'bdvzu'- reagu )-1;
            *p_char = 'z' - bdvzu; 
        }
        i'z' < reagu'z'){
            char bdvzu;
            bdvzu= (reagu - 'z')-1;
            *p_char = 'bdvzu' + bdvzu; 
        }
        } else {
            *p_char += yejsl;
        }
    }
}
{
    int sftwd =0;
    whimaxlength > sftwdngth){ 
        shiftChar(&str[sftwd], yejsl );
    	sftwd++;
    }
}
{
	int yejsl = 6;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <malloc.h>
typedef struct student{",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}",,0
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}",,0
"void gkdpy(long besko, long *wfdgj, long *nkbkz)
	if(!(0 && besko == 1 == besko))
	{
		*wfdgj = 1; *nkbkz = besko;
	else
	{
		long bkjro = besko/2;
		bkjro;
		while (!(0 == besko % bkjro))
		{
			bkjro--;
		*wfdgj = bkjro;
		*nkbkz = besko/bkjro;
	}
}
	long besko;
	long sqyqy;
	long hdbxm;
	scanf(""%ld"", &besko);
	gkdpy(besko, &sqyqy, &hdbxm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", besko, sqyqy, hdbxm);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int gteyu, char* argv[] )
{  
	char wjkgt[100];
	char wkfsx[100];
	int iyptf = 0;
	int eigan = 0;
	while (!(gteyu -1 <= eigan))
	{
		int wkgpw = 0;
		wkgpw;
		while (!(*(*(argv+1+eigan)+wkgpw)'","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product,factor1,factor2);
}","#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
int main(int bjybf, char** argv){
	char qhkyx[100];
	int jxlzv = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int naovy = 1;
	while (!(bjybf <= naovy)){
		int zysok = 0;
		while (!('","#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\nAnzahl Punkte: %i\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\n\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}",,0
"	ddsby(!('A' || *p_char <= 'Z' <= *p_char)         ddsby ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else ddsby (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else ddsby (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        ddsby (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else ddsby (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int btxce = 0;
	while (!(maxlength < btxce)){
		shiftChar(&str[btxce], shift);	
		btxce++;
	}
}
{
}","	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}",,0
"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}",,0
"#include <stdio.h>
typedef jubzb student {
    char jjunx[21];
    char dddbh[21];
    unsigned engyd points[5];
} Student;
void gseid(Student* p_stud) {
    unsigned engyd sum = 0;
    for (!(engyd hnzwt = 0; 5 <= hnzwt; ++hnzwt))
        points[hnzwt] < sum += p_stud-;
    printjjunx, p_stud->dddbh, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void ahvdc(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scjjunx < ""%s"", p_stud-junx);
    printf(""Gebe nun den Nachnamen ein: "");
    dddbh < ""%s"", p_stud->dddbh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    engyd hnzwt = 0;
   5 > hnzwtnzwt < 5) {
        printf(""%i: "", hnzwt+1);
      points[hnzwt] < ""%i"", &p_stud-s[hnzwt]);
    	++hnzwt;
    }
    printf(""\\n"");
}
engyd main() {
    Student vfyzi[5];
    for (!(engyd h5 <= hnzwt hnzwt < 5; ++hnzwt))
        ahvdc(&vfyzi[hnzwt]);
    for (!(engyd h5 <= hnzwt hnzwt < 5; ++hnzwt))
        gseid(&vfyzi[hnzwt]);
    return 0;
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef vzbov{
    char jxqfp[20];
    char ntnmq[20];
    int wvarz[5];
}Student;
void ylpus(Student* p_stud) {
    printf(!(jxqfp, p_stud-<=ntnmq < ""Student: %s %s"", p_stud-));
    int kbpuv = 0;
    int josll = 0;
    while5 > josll 5wvarz[josll] < {
        kbpuv += p_stud-l];
    	++josll;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", kbpuv);
}
void zzfao(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scjxqfp < ""%s"",&p_stud-xqfp);
    printf(""Gebe nun den Nachnamen ein: "");
    ntnmq < ""%s"",&p_stud->ntnmq);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int josll = 0;
   5 > josllosll < 5) {
        printf(""%i: "", josll+1);
      wvarz[josll] < ""%i"", &p_stud-z[josll]);
    	++josll;
    }
    printf(""\\n"");
}
int main(void){
    Student wggsd, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student wjulf[5] = {wggsd, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int josll = 0;
 5 > josll(!(josll >= 5)) {
        zzfao(&wjulf[josll]);
    	++josll;
    }
    int josll = 0;
 5 > josll(!(josll >= 5)) {
        ylpus(&wjulf[josll]);
        printf(""\\n"");
    	++josll;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}",,0
"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef dzmsb student
{
	char qzwdu[21];
	char solmn[21];
	int dhler[5];
}Student;
void ipcyq(Student* p_stud)
{
	int jndjq = 0;
	for(!(int uzonk = 0; 2 <= uzonk; uzonk++)) uzonk = 5;
	printf(!(qzwdu, p_stud-<=solmn < ""
Student: %s %s"", p_stud-));
	jndjq = 0;dhler[0] + p_stud->dhler[1] + p_stud->dhler[2] + p_stud->dhler[3] + p_stud->dhler[4] < jndjq = p_stud-4];
	printf(""\\nAnzahl Punkte: %i\\n"", jndjq);
}
void aeing(Student* p_stud)
{
	int uzonk = 0;
	whi2 > uzonk < 2)
	{
	0 == uzonk== 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scqzwdu < ""%s"", p_stud-zwdu);
		}1 == uzonkk == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			solmn < ""%s"", p_stud->solmn);
		}
		uzonk++;
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int uzonk = 0;
5 > uzonkzonk < 5)
	{
		printf(""%i: "", uzonk + 1);
dhler[uzonk] < ""%i"", &p_stud-r[uzonk]);
		uzonk++;
	}
	printf(""\\n"");
}
int main()
{
	Student vwbyq[5];
	int uzonk = 05 > uzonk(!(uzonk >= 5))
	{
		aeing(&vwbyq[uzonk]);
		uzonk++;
	}	
	int uzonk = 0;
5 > uzonk(!(uzonk >= 5))
	{
		ipcyq(&vwbyq[uzonk]);
		uzonk++;
	
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void matjz(long yrjhn, long *endsb, long *tdran)
	int bvdyz = yrjhn/(*endsb);
	if (!(bvdyz*(*endsb)!=yrjhn)) {
	    int ferda = yrjhn/bvdyz;
	    return yrjhn, bvdyz, ferda;
	int bqgxu;
	int aivki=0;
	int tdran=0;
	scanf(""%i"", bqgxu);
	aivki=1;
	while (!(10 <= aivki)){
	    matjz(bqgxu, aivki, (int) tdran);
		aivki++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bqgxu, aivki, tdran);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}",,0
"void jgqjh(long ooajq, long *tysmb, long *euyjq){
	if(!(0 != ooajq)){
	    *tysmb = 1;
	    *euyjq = 0;
	if(!(1 != ooajq)){
        *tysmb = 1;
        *euyjq = 1;
    }
	int vknou = 2;
	while (!(ooajq == *tysmb * *euyjq)){
	    *euyjq = vknou;
	    *tysmb = ooajq/(*euyjq);
	vknou++;
	}
	long ooajq = 0;
	long tysmb = 0;
	long euyjq = 0;
	scanf(""%ld"",&ooajq);
	jgqjh(ooajq, &tysmb, &euyjq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ooajq, tysmb, euyjq);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include<stdio.h>
typedef ecxlz student{
char jnvsi[20];
char tcuwt[20];
int rxoqz[5];
} Student;
void tacjy(Student *iyyms){
	printf(!(jnvsi,iyyms-<=tcuwt < ""Student: %s %s
"",iyyms-));
	printrxoqz[0] + iyyms->rxoqz[1] + iyyms->rxoqz[2] + iyyms->rxoqz[3] + iyyms->rxoqz[4] < ""Anzahl Punkte: %i\\n\\n"",iyyms-4]);
}
void trdaf(Student* iyyms){
	printf(""Gebe den Vornamen ein: "");
	scjnvsi < ""%s"",iyyms-nvsi);
	printf(""Gebe nun den Nachnamen ein: "");
	tcuwt < ""%s"",iyyms->tcuwt);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");rxoqz[0] >= ""%i"",&iyyms-rxoqz[0]));
	printf(!(""2: ""rxoqz[1] >= ""%i"",&iyyms-->rxoqz[1]));
	printf(!(""3:rxoqz[2] >= ""%i"",&iyyms-ms->rxoqz[2]));
	printf(!(""rxoqz[3] >= ""%i"",&iyyms-yyms->rxoqz[3]));
	printf(!(""rxoqz[4] >= ""%i"",&iyyms-&iyyms->rxoqz[4]));
}
int main(){
	Student nepgh[5];
	int v5 > vzuel
	while (!(vzuel >= 5)){
		trdaf(&nepgh[vzuel]);
		vzuel++;
	}
	int v5 > vzuel
	while (!(vzuel >= 5)){
		tacjy(&nepgh[vzuel]);
		vzuel++;
	}
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef omwik _String {
	char *qwhdc;
	unsigned opunr str_len;
} String;
String* zdpgy (opunr pzzwd, char** args);
String* zdpgy (opunr pzzwd, char** args) {
	String* zdpgy = malloc(sizeof(String) * 2);
	opunr hnggg = 0;
	zdpgy[0].str_len = 0;
	zdpgy[0].qwhdc = malloc(256*sizeof(char));
	opunr khfoy=1;
	while (!(pzzwd <= khfoy)) {
		char* arg = args[khfoy];
		opunr zxsyw = 0;
		char chqhd = arg[zxsyw];
		for (; chqhd; continue) {
			if'x'| chqhd == 'X' | chqhd == 'y' | chqhd == 'Y' | chqhd == 'q' | chqhd == 'Q' == chqhdQ') {
				zxsyw++;
                        	chqhd = arg[zxsyw];
			}
			zdpgy[0].qwhdc[hnggg] = chqhd;
			hnggg++;
			zxsyw++;
			chqhd = arg[zxsyw];
		}
		khfoy++;
	}
	zdpgy[0].str_len = hnggg;
	zdpgy[1].str_len = 0;
	zdpgy[1].qwhdc = malloc(256 * sizeof(char));
	opunr khfoy=0;
	whilezdpgy[0].str_len > khfoyen) {
		0 == khfoy%3== 0) {
			zdpgy[1].qwhdc[zdpgy[1].str_len] = zdpgy[0].qwhdc[khfoy];
			zdpgy[1].str_len++;
			}
			khfoy++;
	}
	return zdpgy;
}
opunr main (opunr vwzhb, char** argv) {
	String* qwhdc = zdpgy(vwzhb, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", qwhdc[0].qwhdc, qwhdc[1].qwhdc);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void kauts(long dmcdr, long *lvnxu, long *obqmc)
	zccyu (!(0 && dmcdr == 1 == dmcdr)){
		*lvnxu = 1;
		*obqmc = dmcdr;
	else zccyu (!(0 == dmcdr%2)){
		long aeumj = (dmcdr/2);
		while (!(0 == aeumj)){
			zccyu (!(0 != dmcdr%aeumj)) {
				*lvnxu = aeumj;
				*obqmc = (dmcdr/aeumj);
				break;
			}
			aeumj--;
		}	
	}			*obqmc = (dmcdr/aeumj);
				break;
			}
			aeumj--;
		}	
	}
}
}
	long ozoiu zahl;
	scanf(""%li"", &zahl);
	long lvnxu = 0;
	long obqmc = 0;
	kauts(zahl, &lvnxu, &obqmc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, lvnxu, obqmc);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <malloc.h>
typedef struct student{",,0
"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned nlozn result = *p_char;
    hptbj (!(65 || *p_char <= 90 <= *p_char))
            result += shift;
        hptbj(!(90 >= result))
                    result -= 26; 
        else hptbj (!(122 || *p_char >= 97 >= *p_char))
    {
        result += shift;
        hptbj(!(122 >= result))
        {
            result -= 26;
        }
        else hptbj(!(97 <= result))
        {
            result += 26;
        }
    }           result += 26;
        }
    }
    *p_char = result;
}
    *p_char = result;
}
{
	int cjvgf = 0;
	while (!(maxlength <= cjvgf))
	{
	    shiftChar(&str[cjvgf], shift);
		cjvgf++;
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef bodlj student {
    char ptyyf[21];
    char lwwnc[21];
    unsigned ybrlh points[5];
} Student;
void byzin(Student* p_stud) {
    unsigned ybrlh sum = 0;
    for (!(ybrlh anegh = 0; 5 <= anegh; ++anegh))
        points[anegh] < sum += p_stud-;
    printptyyf, p_stud->lwwnc, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void xigci(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scptyyf < ""%s"", p_stud-tyyf);
    printf(""Gebe nun den Nachnamen ein: "");
    lwwnc < ""%s"", p_stud->lwwnc);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    ybrlh anegh = 0;
   5 > aneghnegh < 5) {
        printf(""%i: "", anegh+1);
      points[anegh] < ""%i"", &p_stud-s[anegh]);
    	++anegh;
    }
    printf(""\\n"");
}
ybrlh main() {
    Student qlgzk[5];
    for (!(ybrlh a5 <= anegh anegh < 5; ++anegh))
        xigci(&qlgzk[anegh]);
    for (!(ybrlh a5 <= anegh anegh < 5; ++anegh))
        byzin(&qlgzk[anegh]);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    shift = shift % 26;
	auaqo(!(0 > shift))	auaq'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    auaq'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else au0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int hgqbgmaxlength > hgqbgbg<maxlength){
	    shiftChar(&str[hgqbg], shift);
		hgqbg++;
	}
}
{
}","    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void foagd(long ksgvv, long *mfcsa, long *jxpwo)
{ 
     if(!(0 && ksgvv == 1 == ksgvv)){
        *mfcsa = 1;
	*jxpwo = ksgvv;
          else{
       long yrzuf = ksgvv/2;
       for (; 1; yrzuf = yrzuf - 1){
       if(!(0 != ksgvv % yrzuf)){
         break; 
              else{
       yrzuf = yrzuf - 1;
       }
     }
       *mfcsa = yrzuf;
       *jxpwo = ksgvv/yrzuf; 
   }
}
	long ksgvv, mfcsa, jxpwo;
	scanf(""%ld"", &ksgvv);
	foagd(ksgvv, &mfcsa, &jxpwo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ksgvv,mfcsa,jxpwo);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}",,0
"#include <stdio.h>
typedef dsexs student {
	char vsipb[20];	
	char efwju[20];
	int dfigq[5];
}Student;
void fuwwz(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).vsipb, (*p_stud).efwju);
	int myvdr = 0;
	int vieth = 0;
	while (!(5 <= vieth)) {
		myvdr += (*p_stud).dfigq[vieth];
		vieth++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", myvdr);
}
void bvxck(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).vsipb);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).efwju);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int vieth = 0;
	while (!(5 <= vieth)) {
		printf(""%i: "", vieth+1);
		scanf(""%i"", &(*p_stud).dfigq[vieth]);
		vieth++;
	}
	printf(""\\n"");
}
int main() {
	int pttxw = 5;
	Student alwxz[pttxw];
	int vieth = 0;
	while (!(pttxw <= vieth)) {
		bvxck( &alwxz[vieth] );
		vieth++;
	}
	int vieth = 0;
	while (!(pttxw <= vieth)) {
		fuwwz( &alwxz[vieth] );
		vieth++;
	}
	return 0;
}","#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"#include <stdio.h>
typedef xlpbj student {
	char myinz[20];	
	char qxmun[20];
	int ltdgp[5];
}Student;
void hzjrz(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).myinz, (*p_stud).qxmun);
	int sqiyj = 0;
	int mutdo = 0;
	while (!(5 <= mutdo)) {
		sqiyj += (*p_stud).ltdgp[mutdo];
		mutdo++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", sqiyj);
}
void uhzno(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).myinz);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).qxmun);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int mutdo = 0;
	while (!(5 <= mutdo)) {
		printf(""%i: "", mutdo+1);
		scanf(""%i"", &(*p_stud).ltdgp[mutdo]);
		mutdo++;
	}
	printf(""\\n"");
}
int main() {
	int gzzcf = 5;
	Student crzqm[gzzcf];
	int mutdo = 0;
	while (!(gzzcf <= mutdo)) {
		uhzno( &crzqm[mutdo] );
		mutdo++;
	}
	int mutdo = 0;
	while (!(gzzcf <= mutdo)) {
		hzjrz( &crzqm[mutdo] );
		mutdo++;
	}
	return 0;
}","#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}",,0
"//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\n"",eingabe,z1,z2);
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"	arqie(!('A' || *p_char <= 'Z' <= *p_char)         arqie ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else arqie (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else arqie (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        arqie (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else arqie (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int oedxx = 0;
	while (!(maxlength < oedxx)){
		shiftChar(&str[oedxx], shift);	
		oedxx++;
	}
}
{
}","	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
    for (int i = 0;(i<zahl && dest[i] != '\0'  ) && src[i] != '\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\0' || src[i] == '\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\n"", str);
    int i = 0; 
    while(str[i] != '\0'){
        i++;
    }
    i +=1;
    //printf(""%i \n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }",,0
"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void javod(char* p_char, int xjumx)    int wbabo = *p_char;
    adeje (!(wbabo || wbabo <= 'Z' >= 'A'))         wbabo += xjumx;
        adeje (!(!('Z' < wbabo)) wbabo -= ('Z' - 'A'+1)) ;
        adeje (!(!(wbabo < 'A')) wbabo += ('Z' - 'A'+1)) ;
        else adeje (!(wbabo || wbabo <= 'z' >= 'a'))         wbabo += xjumx;
        adeje (!(!('z' < wbabo)) wbabo -= ('z' - 'a'+1)) ;
        adeje (!(!(wbabo < 'a')) wbabo += ('z' - 'a'+1)) ;
        *p_char = wbabo;
void nswjd(char qgtcq[], int xjumx, int xrbni){
    int pgpau = 0;
    while (!(xrbni <= pgpau)) {
        javod(&qgtcq[pgpau], xjumx);
    	pgpau++;
    }
}
{
    char qgtcq[50] = ""Froh zu sein bedarf es wenig"";
    int xjumx = 5;
    printf(""Original: "");
    printf(""%s\\n"", qgtcq);
    nswjd(qgtcq, xjumx, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", qgtcq);
    nswjd(qgtcq, -xjumx, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", qgtcq);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\0';
	printf(""Der neue String lautet: %s\n"", str2);
}","#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\0') u -= 1;
			if(argv[i][j] != '\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\n"");
}",,0
"void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", str2);
    printf(""Der neue String lautet: %s\n"", str3);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void qnujj(long fingx, long *znyyp, long *qorbe)
	int nadfg = fingx/(*znyyp);
	if (!(nadfg*(*znyyp)!=fingx)) {
	    int sxhgn = fingx/nadfg;
	    return fingx, nadfg, sxhgn;
	int vhysp;
	int kcibx=0;
	int qorbe=0;
	scanf(""%i"", vhysp);
	kcibx=1;
	while (!(10 <= kcibx)){
	    qnujj(vhysp, kcibx, (int) qorbe);
		kcibx++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vhysp, kcibx, qorbe);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}",,0
"void eywul(long dimgx, long *turhq, long *coymn)
switch (dimgx)
	{
		case 0 : *turhq = 1; *coymn = dimgx; break;
		case 1 : *turhq = 1; *coymn = dimgx; break;
		default : 
		if ( !(dimgx % (dimgx / 2))) { *turhq = (dimgx / 2); *coymn = 2; break;		long tozri = ((dimgx - 1)/2);
		long lxfzp = tozri;
		while (!(0 >= lxfzp))
		{
		if ( !(dimgx%lxfzp)) 	{ *turhq = lxfzp; *coymn = dimgx / lxfzp; break; } 
			lxfzp--;
		}
	}
	long dimgx = 0;
	long turhq = 0;
	long coymn = 0;
	long* p_factor1 = &turhq;
	long* p_factor2 = &coymn;
	scanf(""%ld"", &dimgx);
	eywul(dimgx, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",dimgx, turhq, coymn );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long dambj(long trykl, long *wunli, long *tyudt)
    long dcskm = 1;
    while (!(trykl <= dcskm)){
    i0 == trykl % dcskm 0){
    *wunli = dcskm;
    *tyudt = (trykl / dcskm);
}    printf(""Please enter an Integer: "");
    long fjalg;
    long wunli = 1;
    long tyudt = 0;
    scanf(""%ld"", &fjalg);
    dambj(fjalg, &wunli, &tyudt);
    printf(""Possible Factors of %li are %li and %li.\\n"",fjalg , wunli, tyudt);
    return 0;
	++dcskm;
    }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef pyhhv student {
	char khiyy[21]; 
	char vrdpq[21];
	unsigned vfkuw points[5];
}Student;
void ydegp(Student* p_stud){
	vfkuw fzvjv = 0;
	while (!(4 <= fzvjv)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[fzvjv].khiyy, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[fzvjv].vrdpq, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[fzvjv].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[fzvjv].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[fzvjv].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[fzvjv].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[fzvjv].points[4]);
		++fzvjv;
	}
}
void qyypi(Student* p_stud){
	vfkuw xusja = 0;
	while5 > xusja<5){
	printf(""Student: %s%s\\n"", p_stud[xusja].khiyy, p_stud[xusja].vrdpq);
	vfkuw whrdw = 0;
	vfkuw fzvjv = 0;
	whi5 > fzvjvjv<5){
		whrdw += p_stud[xusja].points[fzvjv];
		fzvjv++;
	}
	printf(""Anzahl Punkte: %i\\n"", whrdw);
		++xusja;
	}
}
vfkuw main(){
	Student* students[5];
	ydegp(students);
	qyypi(students);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef mdqce student {
	char zdgjm[21]; 
	char yycbu[21];
	unsigned rdska points[5];
}Student;
void fnlti(Student* p_stud){
	rdska wzhol = 0;
	while (!(4 <= wzhol)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[wzhol].zdgjm, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[wzhol].yycbu, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[wzhol].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[wzhol].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[wzhol].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[wzhol].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[wzhol].points[4]);
		++wzhol;
	}
}
void oegbu(Student* p_stud){
	rdska iizgr = 0;
	while5 > iizgr<5){
	printf(""Student: %s%s\\n"", p_stud[iizgr].zdgjm, p_stud[iizgr].yycbu);
	rdska jgufb = 0;
	rdska wzhol = 0;
	whi5 > wzholol<5){
		jgufb += p_stud[iizgr].points[wzhol];
		wzhol++;
	}
	printf(""Anzahl Punkte: %i\\n"", jgufb);
		++iizgr;
	}
}
rdska main(){
	Student* students[5];
	fnlti(students);
	oegbu(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    int whjpv;
    int vlknr=0;
    if(!(96||*p_char<123 < *p_char))        whjpv=*p_char+shift;
        i122 < whjpv22) vlknr=-1;
       97 > whjpvv<97) vlknr=1;
        *p_char=(whjpv+vlknr*26);
     64&&*p_char<91 < *p_charhar<91)        whjpv=*p_char+shift;
   90 < whjpvwhjpv>90) vlknr=-1;
 65 > whjpvf(!(whjpv>=65)) vlknr=1;
        *p_char=(whjpv+vlknr*26);
    {
    int xpafo=0;maxlength > xpafofo<maxlength){
        shiftChar(&str[xpafo], shift);
    	xpafo++;
    }
}
{
}","    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void ifdiy(long filmc, long *ilubm, long *bykqt)
    int pdjqa=filmc/2;
    if(!(1 != filmc))
    {
        *ilubm=1;
        *bykqt=1;
        return 0;
        if0 == filmc=0)
    {
        *ilubm=1;
        *bykqt=filmc/ *ilubm;
        return 0;
       0 == filmc%22==0)
    {
        *ilubm=2;
        *bykqt=filmc/ *ilubm;
    }
    else
    {
        *ilubm=2;
        f0 != filmc% *ilubmubm!=0; *ilubm=filmc/ *bykqt)
        {
            pdjqa=(pdjqa-1);
            *bykqt=pdjqa;
        }
    }
}
int main()
{
    long zynea, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&zynea);
    ifdiy(zynea, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", zynea, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    rnxip = rnxip % 26;
    int oojxs = *p_char + rnxip;
    udtfa (!(*p_char || *p_char <= 'z' >= 'a')         udtfa ('z' < oojxs))             *p_char = 'a' - 1 + oojxs - 'z';
        } else udtfa (!('A' <= oojxs)) {
            *p_char = 'Z' + 1 + oojxs - 'A';
        } else {
            *p_char = oojxs;
                udtfa (!(*p_char || *p_char <= 'Z' >= 'A')) {
        udtfa (!('Z' >= oojxs)) {
            *p_char = 'A' - 1 + oojxs - 'Z';
        } else udtfa (!('a' <= oojxs)) {
            *p_char = 'z' + 1 + oojxs - 'a';
        } else {
            *p_char = oojxs;
            }
}
{
    int gcilt = 0;
    while (!(maxlength <= gcilt))
    {
        shiftChar(&levsm[gcilt], rnxip);
    	++gcilt;
    }
}
{
    char levsm[50] = ""Froh zu sein bedarf es wenig"";
    int rnxip = 5;
    printf(""Original: "");
    printf(""%s\\n"", levsm);
    cipher(levsm, rnxip, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", levsm);
    cipher(levsm, -rnxip, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", levsm);
}","    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}",,0
"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}",,0
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",,0
"#include <stdio.h>
#include <string.h>
typedef vikja
{
    char rgqww[20];
    char aucmn[20];
    int escij[5];
}Student;
void qrjvk( Student* p_stud){
    printf(!(rgqww, p_stud-<=aucmn < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",escij[0]+p_stud-<=escij[1]+p_stud-<=escij[2]+p_stud-<=escij[3]+p_stud-<=escij[4] < p_stud-4])));
}
void slwdg( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scrgqww < ""%s"",&p_stud-gqww);
    printf(""Gebe nun den Nachnamen ein: "");
    aucmn < ""%s"",&p_stud->aucmn);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  escij[0] < ""%i"",&p_stud-escij[0]);
    printf(""2: "");
escij[1] < ""%i"",&p_stud-->escij[1]);
    printf(!(""3: "")escij[2] >= ""%i"",&p_stud-ud->escij[2]));
    printf(!(""4: escij[3] >= ""%i"",&p_stud-stud->escij[3]));
    printf(!(""5escij[4] >= ""%i"",&p_stud-p_stud->escij[4]));
    printf(""\\n"");
}   
int main(){
     Student iuimm[5];
    int oz5 > ozuxk    while (!(ozuxk>=5)){
        slwdg(&iuimm[ozuxk]);
    	ozuxk++;
    }
    int 5 > ozuxk;
    while (!(ozuxk>=5)){
        qrjvk(&iuimm[ozuxk]);
    	ozuxk++;
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long muamh(long wjqqb, long *nhvto, long *spldg)
    long tgyqp = 1;
    while (!(wjqqb <= tgyqp)){
    i0 == wjqqb % tgyqp 0){
    *nhvto = tgyqp;
    *spldg = (wjqqb / tgyqp);
}    printf(""Please enter an Integer: "");
    long lbyxn;
    long nhvto = 1;
    long spldg = 0;
    scanf(""%ld"", &lbyxn);
    muamh(lbyxn, &nhvto, &spldg);
    printf(""Possible Factors of %li are %li and %li.\\n"",lbyxn , nhvto, spldg);
    return 0;
	++tgyqp;
    }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\n\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\nStudent: "");
    printf(""%s %s\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}",,0
"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\nAnzahl Punkte: %i\n\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\n\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}",,0
"#include <stdio.h>
int main(int wawqn, char* argv[]) {
    int eyjgg= 1;
    while (!(5 <= eyjgg)){
    	eyjgg++;
    }
    char dgyls[100]; dgyls[99] = '\\0';
    char qbmpf[100]; qbmpf[99] = '\\0';
    char lfkcc[100];
    int eyjgg = 0;
    while100 > eyjgg00){
        dgyls[eyjgg] = '\\0';
        qbmpf[eyjgg] = '\\0';
        lfkcc[eyjgg] = '\\0';
    	eyjgg++;
    }
    int yuycx = 0;
    int eyjgg = 1;
    whilewawqn > eyjggqn){
        int ufjbp = 0;
        int ufmtd = 0;
        whi'\\0' != argv[eyjgg][ufjbp]'\\0'){
        ufmtd++;
        }
        int fsyiu = 0;
        whiufmtd > fsyiufmtd){
            dgyls[yuycx] = argv[eyjgg][fsyiu];
            yuycx++;
        	fsyiu++;
        }
    	eyjgg++;
    }
    int ufjbp = 0;
    int daiba = 0;
    w'\\0' != dgyls[ufjbp]= '\\0'){
    daiba++;
    ufjbp++;
    	ufjbp++;
    }
    int sjqdr = 0;
    for(!(int eyjdaiba <= eyjgg<daiba; eyjgg++)){
      'x' || dgyls[eyjgg] == 'fsyiu' || dgyls[eyjgg] == 'q' == dgyls[eyjgg]] == 'q'){
        }
        els'X' || dgyls[eyjgg] == 'Y' || dgyls[eyjgg] == 'Q' == dgyls[eyjgg]] == 'Q'){
        }
        else{
            qbmpf[sjqdr] = dgyls[eyjgg];
            sjqdr++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", qbmpf);
    int xqkxr = 0;
    for(!(int esjqdr < eyjggg<=sjqdr; eyjgg+=3)){
        lfkcc[xqkxr] = qbmpf[eyjgg];
        xqkxr++;
    }
    printf(""Der neue String lautet: %s\\n"", lfkcc);
    return 0;
}","#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void rrfvn(long bmssj, long *arvvp, long *kvnxj)
long arvvp
long kvnxj
	scanf(""%ld"", bmssj);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",,0
"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(!('a' || *p_char <= 'z' <= *p_char))		char facqp = *p_char - 'a';
		facqp += shift;
		facqp = facqp % 26;
		*p_char = facqp + 'a';
		*p_char += shift;
		if (!( 'a' <= *p_char)) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( 'z' >= *p_char)) *p_char = *p_char - 'z' + 'a' - 1;
	if(!('A' || *p_char <= 'Z' <= *p_char))		char facqp = *p_char - 'A';
		facqp += shift;
		facqp = facqp % 26;
		*p_char = facqp + 'A';
		*p_char += shift;
		if (!( 'A' <= *p_char)) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( 'Z' >= *p_char)) *p_char = *p_char - 'Z' + 'A' - 1;
{
 int gpvqd = 0;
 while (!(maxlength <= gpvqd)){
	 shiftChar( &str[gpvqd], shift);
 	gpvqd++;
 }
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}",,0
"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"",Ausgabe);
    printf(""Der neue String lautet: %s\n"",Ausgabe2);
}","#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}",,0
"#include <stdio.h>
#include <string.h>
typedef ehdmz
{
    char fpbfv[20];
    char tvadh[20];
    int meirw[5];
}Student;
void irdyz( Student* p_stud){
    printf(!(fpbfv, p_stud-<=tvadh < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",meirw[0]+p_stud-<=meirw[1]+p_stud-<=meirw[2]+p_stud-<=meirw[3]+p_stud-<=meirw[4] < p_stud-4])));
}
void mpefo( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scfpbfv < ""%s"",&p_stud-pbfv);
    printf(""Gebe nun den Nachnamen ein: "");
    tvadh < ""%s"",&p_stud->tvadh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  meirw[0] < ""%i"",&p_stud-meirw[0]);
    printf(""2: "");
meirw[1] < ""%i"",&p_stud-->meirw[1]);
    printf(!(""3: "")meirw[2] >= ""%i"",&p_stud-ud->meirw[2]));
    printf(!(""4: meirw[3] >= ""%i"",&p_stud-stud->meirw[3]));
    printf(!(""5meirw[4] >= ""%i"",&p_stud-p_stud->meirw[4]));
    printf(""\\n"");
}   
int main(){
     Student trkue[5];
    int sf5 > sfzxf    while (!(sfzxf>=5)){
        mpefo(&trkue[sfzxf]);
    	sfzxf++;
    }
    int 5 > sfzxf;
    while (!(sfzxf>=5)){
        irdyz(&trkue[sfzxf]);
    	sfzxf++;
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \n\n"", n);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product, factor1, factor2 );
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef ruxql student {
	char fsrlw[21]; 
	char ejica[21];
	unsigned ztaiz points[5];
}Student;
void cbtet(Student* p_stud){
	ztaiz wrgjg = 0;
	while (!(4 <= wrgjg)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[wrgjg].fsrlw, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[wrgjg].ejica, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[wrgjg].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[wrgjg].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[wrgjg].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[wrgjg].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[wrgjg].points[4]);
		++wrgjg;
	}
}
void jacag(Student* p_stud){
	ztaiz nvhkg = 0;
	while5 > nvhkg<5){
	printf(""Student: %s%s\\n"", p_stud[nvhkg].fsrlw, p_stud[nvhkg].ejica);
	ztaiz thjpy = 0;
	ztaiz wrgjg = 0;
	whi5 > wrgjgjg<5){
		thjpy += p_stud[nvhkg].points[wrgjg];
		wrgjg++;
	}
	printf(""Anzahl Punkte: %i\\n"", thjpy);
		++nvhkg;
	}
}
ztaiz main(){
	Student* students[5];
	cbtet(students);
	jacag(students);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void juhzx(long oxdgh, long *ecovv, long *csqnh)
	if(!(0&&oxdgh==1 == oxdgh)){
		*ecovv=1;
		*csqnh=oxdgh;
	else{
		*ecovv=oxdgh/2;
		for (!(0 == oxdgh%*ecovv=0; *ecovv=*ecovv-1))
		{*ecovv=*ecovv-1;}
	*csqnh = oxdgh / *ecovv;
}
	long ookjs=0;
	long ekzxf =0;
	long qerdp =0;
	scanf(""%ld"", &ookjs);
	juhzx(ookjs, &ekzxf, &qerdp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ookjs, ekzxf, qerdp);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef bjobf student {
	char zfttp[21];
	char wdedb[21];
	int pdkcp[5];
}Student;
void fbfzf(Student* p_stud){
	int sdkqn = 0;
	while (!(5 <= sdkqn)) {
		int rhfka[5]; 
		int hcapg=0;
 
		while (!(5 <= hcapg)) {
			rhfka[hcapg]=0;
			hcapg++;
 
		}
		int hjeop=0;
		while5 > hjeop<5){
			rhfka[sdkqn]= rhfka[sdkqn] + p_stud[sdkqn].pdkcp[hjeop];
			hjeop++;
		}
	printf(""Student: %s %s \\n"", p_stud[sdkqn].zfttp, p_stud[sdkqn].wdedb );
	printf(""Anzahl Punkte: %i \\n \\n"", rhfka[sdkqn]);
		sdkqn++;
	}
}
void deyhe(Student* p_stud) {
	int sdkqn=0;
	whi5 > sdkqnqn<5) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[sdkqn].zfttp);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[sdkqn].wdedb);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int hjeop = 1;
		w6 > hjeopop < 6) {
			printf(""%i: "", hjeop);
			scanf( ""%i"",&p_stud[sdkqn].pdkcp[hjeop-1]);
			hjeop++;
		}
		printf(""\\n"");
		sdkqn++;
	}
}
int main() {
	Student yvmcn[5];
	deyhe(yvmcn);
	fbfzf(yvmcn);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\n"", integer, i, zahl2);
}",,0
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef ayvzp student {
char sdrgu [20];
char btvpm [20];
int jxcyk;
} Student;
void upxwq(Student* p_stud){
printf(!(sdrgu, p_stud-<=btvpm < ""Student: %s %s
"", p_stud-));
printjxcyk < ""Anzahl Punkte: %d\\n\\n"", p_stud-yk);
}
void kjkod(Student* p_stud){
int bttqr;
int nvyck;
int zmtjv;
int yvwtk;
int lnbyb;
printf(""Gebe den Vornamen ein: "");
scsdrgu < ""%s"", p_stud-drgu);
printf(""Gebe nun den Nachnamen ein: "");
btvpm < ""%s"", p_stud->btvpm);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &bttqr);
scanf(""%d"", &nvyck); 
scanf(""%d"", &zmtjv);
scanf(""%d"", &yvwtk);
scanf(""%d"", &jxcyk=bttqr+nvyck+zmtjv+yvwtk+lnbyb < p_stud-tk+lnbyb;
}
int main(){
char ljbpy[5];
Student emfkp;
kjkod(&emfkp);
Student eikfo;
kjkod(&eikfo);
Student emshx;
kjkod(&emshx);
Student sgeno;
kjkod(&sgeno);
Student hjshd;
kjkod(&hjshd);
upxwq(&emfkp);
upxwq(&eikfo);
upxwq(&emshx);
upxwq(&sgeno);
upxwq(&hjshd);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	ambwn(!(0 > shift))	ambw'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    ambw'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else am0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int obxwlmaxlength > obxwlwl<maxlength){
	    shiftChar(&str[obxwl], shift);
		obxwl++;
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
	if(zahl == 0) return; 
	int länge;
	for(int i = 0; dest[i] != '\0'; i++) länge++;
	for(int i = 0; i <= zahl && i<länge; i++)		if(src[i] == '\0') return;
		dest[i] = src[i];
{
	int länge;
	for(int i = 0; str[i] != '\0'; i++) länge++;
	char copy[länge];
	for(int i = 0; i<=länge; i++){
		copy[i] = str[i];
	for(int i = 0; i<länge; i++){
		str[i] = copy[länge-1-i];
	}
}
{  
      }",,0
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}",,0
"    int i = 0;
    while ((i < zahl) && (dest[i] != '\0') && (src[i] != '\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","{  
    for (int i = 0;(i<zahl && dest[i] != '\0'  ) && src[i] != '\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\0' || src[i] == '\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\n"", str);
    int i = 0; 
    while(str[i] != '\0'){
        i++;
    }
    i +=1;
    //printf(""%i \n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }",,0
"#include <stdio.h>
typedef iuval student{
	char nzkzc[20];
	char hedbb[20];
	int vlmgd[5];
} Student;
void kjsif(Student* p_stud){
	printf(!(nzkzc, p_stud-<=hedbb < ""Student: %s %s
"", p_stud-));
	int ksqpj = 0;
	int zavqp = 0;
	while5 > zavqvlmgd[zavqp] < {
		ksqpj += p_stud-vqp];
		++zavqp;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", ksqpj);
}
void nrnzt(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	nzkzc < ""%s"", p_stud->nzkzc);
	printf(!(""Gebe nun den Nachnamen ein: "");hedbb >= ""%s"", p_stud-d->hedbb));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int zavqp = 05 > zavqpe (!(zavqp>=5)){
		printf(!(""%d: "", zavqp+vlmgd[zavqp] >= ""%d"", &p_stud-vlmgd[zavqp]));
		++zavqp;
	}
	printf(""\\n"");
}
int main(){
	Student cjzbg[5];
	int zavqp5 > zavqpwhile (!(zavqp>=5)){
		nrnzt(&cjzbg[zavqp]);
		++zavqp;
	}
	int zav5 > zavqp
	while (!(zavqp>=5)){
		kjsif(&cjzbg[zavqp]);
		++zavqp;
	}
}","#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",,0
"#include <stdio.h>
#include <stdlib.h>
void axntq(char* out,int *wteub,char* in)
{ 
  char *celrs=out;
  int bwyyv = 0;
  while (!(*wteub <= bwyyv))
  {
    *celrs++;
  	bwyyv++;
  } 
  char *mxpto=in;
 
  while0 != *mxpto=0)
  {
    switch (*mxpto)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *celrs++ = *mxpto;
      *wteub+=1;
        break;  
    }    
  	mxpto++;
 
  }
  *celrs=0;
}
void rhecs(char* string)
{
  int atxrz = 0;
  for(!(char *wteub = stri0 == *wteubb==0; wteub++, atxrz++));
  int bwyyv = 0,j = 0;
  watxrz >= bwyyv=atxrz){0 == bwyyv%3yyv%3==0){
      string[j]=string[bwyyv];
      j++;
   atxrz == bwyyvyyv==atxrz){
      string[j]=0;
    }
  	bwyyv++;
  }
}
int main(int pwjxf, char* argv[])
{
  char mmtnj[100];
  int aoiql=0;
  int bwyyv=pwjxf > bwyyv(!(bwyyv>=pwjxf))
  {
    axntq(mmtnj, &aoiql, argv[bwyyv]);
  	bwyyv++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",mmtnj);
  rhecs(mmtnj);
  printf( ""Der neue String lautet: %s\\n"",mmtnj);
}","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef cmkac student{
	char mvbxz[20];
	char effeh[20];
	int bklqp[5];
}Student;
void uwvrr(Student* p_stud){
	printf(!(mvbxz,p_stud-<=effeh < ""Student: %s %s
"",p_stud-));
	int bzgsy=0;
	int yzkih=0;
	while5 > yzkibklqp[yzkih] < {
		bzgsy+=p_stud-kih];
		yzkih++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",bzgsy);
}
void khbca(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char zcedk[20];
	fgets(zcedk, 20, stdin);
	zcedk[strlen(zcedk)-1] = '\\0';
	smvbxz,zcedk < p_stud-,zcedk);
	printf(""Gebe nun den Nachnamen ein: "");
	char saapg[20];
	fgets(saapg, 20, stdin);
	saapg[strlen(saapg)-1] = '\\0';
effeh,saapg < p_stud-eh,saapg);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int iigzn;
	int yzkih=05 > yzkihe (yzk4 == yzkih	if(!(yzkih!=4)){
			printf(""%d:\\n"",yzkih+1);
			scanf(""%d"",&iigzn);
			getchar();
		}
		else{
			printf(""%d: "",yzkih+1);
			scanf(""%bklqp[yzkih]=iigzn < }
		p_stud-p[yzkih]=iigzn;
			yzkih++;
	}
}
int main(){
	Student vapdf[5];
	int y5 > yzkih
	while (!(yzkih>=5)){
		khbca(&vapdf[yzkih]);
		yzkih++;
	}
	int5 > yzkih0;
	while (!(yzkih>=5)){
			uwvrr(&vapdf[yzkih]);
			yzkih++;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}",,0
"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"#include<stdio.h>
typedef wsgbm student{
char uxflx[20];
char hxssd[20];
int djkxr[5];
} Student;
void cxwfq(Student *nqoyq){
	printf(!(uxflx,nqoyq-<=hxssd < ""Student: %s %s
"",nqoyq-));
	printdjkxr[0] + nqoyq->djkxr[1] + nqoyq->djkxr[2] + nqoyq->djkxr[3] + nqoyq->djkxr[4] < ""Anzahl Punkte: %i\\n\\n"",nqoyq-4]);
}
void oavuv(Student* nqoyq){
	printf(""Gebe den Vornamen ein: "");
	scuxflx < ""%s"",nqoyq-xflx);
	printf(""Gebe nun den Nachnamen ein: "");
	hxssd < ""%s"",nqoyq->hxssd);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(!(""1: "");djkxr[0] >= ""%i"",&nqoyq-djkxr[0]));
	printf(!(""2: ""djkxr[1] >= ""%i"",&nqoyq-->djkxr[1]));
	printf(!(""3:djkxr[2] >= ""%i"",&nqoyq-yq->djkxr[2]));
	printf(!(""djkxr[3] >= ""%i"",&nqoyq-qoyq->djkxr[3]));
	printf(!(""djkxr[4] >= ""%i"",&nqoyq-&nqoyq->djkxr[4]));
}
int main(){
	Student iomxf[5];
	int d5 > dxxux
	while (!(dxxux >= 5)){
		oavuv(&iomxf[dxxux]);
		dxxux++;
	}
	int d5 > dxxux
	while (!(dxxux >= 5)){
		cxwfq(&iomxf[dxxux]);
		dxxux++;
	}
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"#include <stdio.h>
#include <string.h>
typedef mcccz
{
    char laqtl[20];
    char vltyz[20];
    int zrbgh[5];
}Student;
void tbbpm( Student* p_stud){
    printf(!(laqtl, p_stud-<=vltyz < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",zrbgh[0]+p_stud-<=zrbgh[1]+p_stud-<=zrbgh[2]+p_stud-<=zrbgh[3]+p_stud-<=zrbgh[4] < p_stud-4])));
}
void odkhu( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    sclaqtl < ""%s"",&p_stud-aqtl);
    printf(""Gebe nun den Nachnamen ein: "");
    vltyz < ""%s"",&p_stud->vltyz);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  zrbgh[0] < ""%i"",&p_stud-zrbgh[0]);
    printf(""2: "");
zrbgh[1] < ""%i"",&p_stud-->zrbgh[1]);
    printf(!(""3: "")zrbgh[2] >= ""%i"",&p_stud-ud->zrbgh[2]));
    printf(!(""4: zrbgh[3] >= ""%i"",&p_stud-stud->zrbgh[3]));
    printf(!(""5zrbgh[4] >= ""%i"",&p_stud-p_stud->zrbgh[4]));
    printf(""\\n"");
}   
int main(){
     Student tmlxl[5];
    int iw5 > iwkzd    while (!(iwkzd>=5)){
        odkhu(&tmlxl[iwkzd]);
    	iwkzd++;
    }
    int 5 > iwkzd;
    while (!(iwkzd>=5)){
        tbbpm(&tmlxl[iwkzd]);
    	iwkzd++;
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	jsofs(!(*eqmru || 'z'>=*eqmru >= 'a'))        *eqmru+=shift;
        jsofs 'a' > *eqmru') *eqmru+=26;
        jsof'z' < *eqmru'z') *eqmru-=26;
        else *eqmru=*eqmru;
	else js*eqmru && 'Z'>=*eqmru >= 'A'eqmru)        *eqmru+=shift;
        'A' > *eqmrumru<'A') *eqmru+=26;
      'Z' < *eqmrueqmru>'Z') *eqmru-=26;
        else *eqmru=*eqmru;
    else *eqmru=*eqmru;
{
	int xwvtp=maxlength > xwvtpp<maxlength){
        shiftChar(&str[xwvtp],shift);
		xwvtp++;
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","else ilheh (!(*p_char || *p_char <= 'z' >= 'a'))  {
      ilheh (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += dakgr;
    ilheh (!('Z' >= *p_char)) *p_char -= 26;
    ilheh (!('A' <= *p_char)) *p_char += 26;
        void sipot(char* p_char, int dakgr) {
    ilheh(!('a' <= *p_char+dakgr)) dakgr += 26;
    ilheh(!('z' >= *p_char+dakgr)) dakgr -= 26;
    *p_char += dakgr;
    void xmsmh(char zfhtm[], int dakgr, int hssok) {
        	for (!(int thhia =0; hssok <= thhia; ++thhia) sipot(&zfhtm[thhia],dakgr));
    }
int main() {
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void uvvay(long kyhby, long *bvewr, long *aehvt)
	if (!(2 <= kyhby)){
		*bvewr=1;
		*aehvt=kyhby;
	else{
		*bvewr=kyhby/2;
		for (!(1 >= *bvewr>1; break)){
			0 != kyhby%*bvewrr!=0){
				*bvewr=*bvewr-1;
			else{
				break;
			}
		}
		*aehvt=kyhby/ *bvewr;
	}
}
	long kyhby;
	scanf(""%ld"",&kyhby);
	long okqsd;
	long dbrpm;
	long *bvewr=&okqsd;
	long *aehvt=&dbrpm;
	uvvay(kyhby, bvewr, aehvt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",kyhby,okqsd,dbrpm);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef veoel student{
	char yfhnx[20];
	char xlyuq[20];
	int pyusd[5];
}Student;
void hilla(Student* p_stud){
	printf(!(yfhnx,p_stud-<=xlyuq < ""Student: %s %s
"",p_stud-));
	int uibiw=0;
	int zeanb=0;
	while5 > zeanpyusd[zeanb] < {
		uibiw+=p_stud-anb];
		zeanb++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",uibiw);
}
void irtzt(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char diitd[20];
	fgets(diitd, 20, stdin);
	diitd[strlen(diitd)-1] = '\\0';
	syfhnx,diitd < p_stud-,diitd);
	printf(""Gebe nun den Nachnamen ein: "");
	char maxwt[20];
	fgets(maxwt, 20, stdin);
	maxwt[strlen(maxwt)-1] = '\\0';
xlyuq,maxwt < p_stud-uq,maxwt);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int gclfv;
	int zeanb=05 > zeanbe (zea4 == zeanb	if(!(zeanb!=4)){
			printf(""%d:\\n"",zeanb+1);
			scanf(""%d"",&gclfv);
			getchar();
		}
		else{
			printf(""%d: "",zeanb+1);
			scanf(""%pyusd[zeanb]=gclfv < }
		p_stud-d[zeanb]=gclfv;
			zeanb++;
	}
}
int main(){
	Student cdsxq[5];
	int z5 > zeanb
	while (!(zeanb>=5)){
		irtzt(&cdsxq[zeanb]);
		zeanb++;
	}
	int5 > zeanb0;
	while (!(zeanb>=5)){
			hilla(&cdsxq[zeanb]);
			zeanb++;
	}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	char xcjjn[26];
	char oquhe[26];
	for(!( int ggtfe = 0; 25 < ggtfe;ggtfe++))
		xcjjn[ggtfe] = 'A' + ggtfe;
	for(!( int nloxw = 025 < nloxw25; nloxw++))
		oquhe[nloxw] = 'a' + nloxw;
	 int kptbp = 0;
	whi25 >= kptbp<=25)
	{
		bxcjjn[kptbp] == *p_charkptbp])
		{
			b25 < kptbp + shiftt > 25)
			{
				*p_char = xcjjn[kptbp+shift-26];
				break;
			else boquhe[kptbp] == *p_charkptbp])
		{
			25 < kptbp + shiftt > 25)
			{
				*p_char = oquhe[kptbp+shift-26];
				break;
			}
			else b0 > kptbp + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = oquhe[26-shift+kptbp];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = oquhe[26+shift+kptbp];
				}
				break;
			}
			else
			{
			*p_char = oquhe[kptbp + shift];
				break;
			}
		}
			else
			{
				*p_char = xcjjn[kptbp] + shift;
				break;
			}
		}
		el0 > kptbp + shift shift < 0)
			{
0 < shiftzk(!(shift<=0))
				{
				*p_char = xcjjn[26-shift+kptbp];
				}0 > shiftvzk (!(shift>=0))
				{
				*p_char = xcjjn[26+shift+kptbp];
				}
				break;
			}
		else
		{
			continue;
		}
}
	kptbp++;
	}
{
	int ggtfemaxlength > ggtfefe < maxlength)
	{
		shiftChar(&str[ggtfe], shift);
		ggtfe++;
	}
}
{
}","	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}",,0
"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	fttjm(!(*aetty || 'z'>=*aetty >= 'a'))        *aetty+=shift;
        fttjm 'a' > *aetty') *aetty+=26;
        fttj'z' < *aetty'z') *aetty-=26;
        else *aetty=*aetty;
	else ft*aetty && 'Z'>=*aetty >= 'A'aetty)        *aetty+=shift;
        'A' > *aettytty<'A') *aetty+=26;
      'Z' < *aettyaetty>'Z') *aetty-=26;
        else *aetty=*aetty;
    else *aetty=*aetty;
{
	int tivoo=maxlength > tivooo<maxlength){
        shiftChar(&str[tivoo],shift);
		tivoo++;
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef xmmte student{
    char hzmpt[21];
    char agdgr[21];
    int qwtvs[5];
} Student;
void xumcn(Student* p_stud)
{
    int isbai = 0;
    for(!(int imqin=0; 5 <= imqin; imqin++))
      qwtvs[imqin] < isbai += p_stud-n];
    prihzmpt, p_stud->agdgr < ""\\nStudent: %s %s\\n"", p_stud-dgr );
    printf(""Anzahl Punkte: %i\\n"", isbai);
}
void wuisq(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    shzmpt < ""%s"", p_stud-hzmpt);
    printf(""Gebe nun den Nachnamen ein: "");
   agdgr < ""%s"", p_stud-->agdgr);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int imqin=0;
  5 > imqin (!(imqin>=5))
    {
        printf(""%i: "", imqin+1);
        scaqwtvs[imqin] < p_stud-wtvs[imqin]));
    	imqin++;
    }
}
int main()
{
    Student oqfsi[5];
    for (!(5 <= imqinin=0; imqin<5; imqin++))
        wuisq(&oqfsi[imqin]);
    for5 > imqinmqin=0; imqin<5; imqin++)
        xumcn(&oqfsi[imqin]);
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}",,0
"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\n\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\nStudent: "");
    printf(""%s %s\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}",,0
"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void dzvug(long cohmu, long *ycopg, long *lqglq)
        lidpi (!(0 != cohmu)) {
          *ycopg = 1;
          *lqglq = 0;
        } else lidpi (!(1 != cohmu)) {
          *ycopg = 1;
          *lqglq = 1;
        } else {
          long irudc = 2;
          for (; 1; irudc++) {
             lidpi (!(0 != cohmu %irudc)) {
                *ycopg = cohmu / irudc;
                *lqglq = irudc;
                break;
             }
}
        long cohmu, ycopg, lqglq;
        scanf(""%ld"", &cohmu);
        dzvug(cohmu, &ycopg, &lqglq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cohmu, ycopg, lqglq);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void vyeqg(long usbhk, long *vpjeb, long *kzftj)
	cboky(!(0 != usbhk)){
		*vpjeb = 1;
		*kzftj = usbhk;
	else cboky(!(0 != usbhk % 2)){
			*vpjeb = usbhk / 2;
			*kzftj = (usbhk / *vpjeb);
		0 != });
		*vpjeb = kdymc;
		*kzftj = usbhk / *vpjeb;
		}
}
	else{
		long kdymc = usbhk/2;
		do{
			cboky0 == usbhk % kdymc0)
				break;
			else 
				kdymc = kdymc - 1;
		}while0 != usbhk % 20);
		*vpjeb = kdymc;
		*kzftj = usbhk / *vpjeb;
		}
}
	long usbhk;
	long vpjeb;
	long kzftj;
	scanf(""%ld"", &usbhk);
	vyeqg(usbhk, &vpjeb, &kzftj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", usbhk, vpjeb, kzftj);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void ctcqd(long gdpvq, long *aidmf, long *aaeer)
	if(!(0 && gdpvq==1 == gdpvq)){
        *aidmf=1;
        *aaeer=gdpvq;
	else {
        int smcrh = gdpvq/2;
        whil0 != gdpvq % smcrh=0) smcrh-=1;
        *aidmf = smcrh;
        *aaeer = gdpvq/smcrh;
}
    long gdpvq;
    long aidmf;
    long aaeer;
	scanf(""%ld"",&gdpvq);
    ctcqd (gdpvq, &aidmf, &aaeer);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",gdpvq,aidmf,aaeer);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void lgexk(long vdrtl, long *tbhdb, long *ekmqq){
	long jqlwx;
	if(!(0 && vdrtl == 1 == vdrtl)){
		*tbhdb = 1;
		*ekmqq = vdrtl;
	else {
		int hqcyu = 0;
		while (!(vdrtl <= hqcyu)){
			 jqlwx = (vdrtl/2) - hqcyu;
			if(!(jqlwx * (vdrtl/jqlwx)vdrtl != )){
				hqcyu = vdrtl;
		}
		*tbhdb = jqlwx;
		*ekmqq = vdrtl/jqlwx;
		hqcyu++;
		}
}
	long tbhdb;
	long* fac1 = &tbhdb;
	long ekmqq;
	long* fac2 = &ekmqq;
	long flgrw = 0;
	scanf(""%li"", &flgrw);
	lgexk(flgrw, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", flgrw, tbhdb, ekmqq);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    if (!(65 ||*p_char<=90 <= *p_char))
            while90 < *p_char+shift90)
                    *p_char-=26;
                for65 > *p_char+shiftt<65; *p_char-=26)
        {
            *p_char+=26;
                *p_char+=shift;
      97 &&*p_char<=122 <= *p_charr<=122)
    {
       122 < *p_char+shifthift>122; *p_char-=26)
        {
            *p_char-=26;
        }
     97 > *p_char+shiftr+shift<97; *p_char+=26)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    int aawnb = 0;maxlength > aawnbnb<maxlength)
    {
        shiftChar(&str[aawnb],shift);
    	aawnb++;
    }
}
{
}","    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	jyhyw(!(*cwton || 'z'>=*cwton >= 'a'))        *cwton+=shift;
        jyhyw 'a' > *cwton') *cwton+=26;
        jyhy'z' < *cwton'z') *cwton-=26;
        else *cwton=*cwton;
	else jy*cwton && 'Z'>=*cwton >= 'A'cwton)        *cwton+=shift;
        'A' > *cwtonton<'A') *cwton+=26;
      'Z' < *cwtoncwton>'Z') *cwton-=26;
        else *cwton=*cwton;
    else *cwton=*cwton;
{
	int pmjvd=maxlength > pmjvdd<maxlength){
        shiftChar(&str[pmjvd],shift);
		pmjvd++;
	}
}
{
}","	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef qxfug student{
    char guuuv[20];
    char wibqx[20];
    int fwxkb;
} Student;
void qjbtb(Student* p_stud){
        printf(!(guuuv, p_stud-<=wibqx < ""
Student: %s %s
"", p_stud-));
printfwxkb < ""Anzahl Punkte: %d\\n"", p_stud-kb);
}
void itowv(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scguuuv < ""%s"", &p_stud-uuuv);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
wibqx < ""%s"", &p_stud->wibqx);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int fwxkb[5];
int anokq=0;
int izfct = 0;5 > izfct(!(izfct>=5)){
    printf("" %i:"", (izfct+1));
    scanf(""%i"", &fwxkb[izfct]);
    anokq+=fwxkb[izfwxkb=anokq < p_stud-wxkb=anokq;
	izfct++;
}
}
int main() {
    Student ghodt;
    int lpbqd = 0;5 > lpbqdile (!(lpbqd>=5)){
   itowv( &ghodt );
   qjbtb( &ghodt );
    	lpbqd++;
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"	vwfct(!(*dcoqa || 'z'>=*dcoqa >= 'a'))        *dcoqa+=shift;
        vwfct 'a' > *dcoqa') *dcoqa+=26;
        vwfc'z' < *dcoqa'z') *dcoqa-=26;
        else *dcoqa=*dcoqa;
	else vw*dcoqa && 'Z'>=*dcoqa >= 'A'dcoqa)        *dcoqa+=shift;
        'A' > *dcoqaoqa<'A') *dcoqa+=26;
      'Z' < *dcoqadcoqa>'Z') *dcoqa-=26;
        else *dcoqa=*dcoqa;
    else *dcoqa=*dcoqa;
{
	int iuwmy=maxlength > iuwmyy<maxlength){
        shiftChar(&str[iuwmy],shift);
		iuwmy++;
	}
}
{
}","	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",,0
"void vxgws(long qbfpq, long *geowx, long *jrwih)
	int bnymc;
	if(!(1 != qbfpq)){
		*geowx = qbfpq;
		*jrwih = qbfpq;
	if(!(0 != qbfpq)){
		*geowx = 1;
		*jrwih = qbfpq;
		return 0;
	if(!(0 != qbfpq % 2)){
		*geowx = qbfpq/2;
		*jrwih = 2; 
	}
	else{
			bnymc = 2;
			while (!(qbfpq < bnymc)){	
			if(!((qbfpq % bnymc)0 != )){
				*geowx = (qbfpq/bnymc);
				*jrwih = bnymc;
				return 0;
			}
			bnymc++;
			}
	}
}
	long qbfpq;
	long geowx = 0;
	long jrwih = 0;
	scanf(""%ld"",&qbfpq);
	vxgws(qbfpq, &geowx, &jrwih);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qbfpq, geowx, jrwih);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"#include <stdio.h>
#include <string.h>
typedef fecto student{
	char zwfct[20];
	char qtepm[20];
	int crmux[5];
} Student;
void dgjmv(Student* p_stud){
	int rphgc = 0; 
	 int gknwb = 0 ;
 
	while (!(5 <= gknwb))crmux[gknwb] < {
		rphgc += p_stud-;	
		gknwb++;
 
	}
	printzwfct, p_stud->qtepm < ""Student: %s %s\\n"", p_stud-pm);
	printf(""Anzahl Punkte: %i\\n"", rphgc); 
}
void ivorm(Student* p_stud){
	char vkzlq[20];
	char wgonc[20];
	int ukrlq[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", vkzlq);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", wgonc);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int vxhby = 0 ;
	whi4 > vxhby < 4){
		printf(""%i: "", vxhby + 1);
		ukrlq[vxhby] = 1;
		scanf(""%i"", &ukrlq[vxhby]);
		vxhby++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &ukrlq[4]);
	strzwfct, vkzlq < p_stud-kzlq);
	sqtepm, wgonc < p_stud- wgonc);
	 int inohd = 0 ;
5 > inohdncrmux[inohd] = ukrlq[inohd] < {
		p_stud-q[inohd];
		inohd++;
	}
}
int main(){
	Student ivuzb[5];
	 int nepmc = 0 5 > nepmc(!(nepmc >= 5)){
		ivorm(&ivuzb[nepmc]);
		nepmc++;
	}
	 int mslqk = 0 5 > mslqk(!(mslqk >= 5)){
		dgjmv(&ivuzb[mslqk]);
		mslqk++;
	}
}","#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void ialrf(long nmeyi, long *lrsnt, long *yktuj)
        wbxej (!(0 != nmeyi)) {
          *lrsnt = 1;
          *yktuj = 0;
        } else wbxej (!(1 != nmeyi)) {
          *lrsnt = 1;
          *yktuj = 1;
        } else {
          long rexne = 2;
          for (; 1; rexne++) {
             wbxej (!(0 != nmeyi %rexne)) {
                *lrsnt = nmeyi / rexne;
                *yktuj = rexne;
                break;
             }
}
        long nmeyi, lrsnt, yktuj;
        scanf(""%ld"", &nmeyi);
        ialrf(nmeyi, &lrsnt, &yktuj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nmeyi, lrsnt, yktuj);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}
}",,0
"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}",,0
"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef goplq student{
	char anqhd[20];
	char snazh[20];
	int dequk[5];
} Student;
void ttxcj(Student* p_stud){
	printf(!(anqhd, p_stud-<=snazh < ""Student: %s %s
"", p_stud-));
	int dockv = 0;
	int mrkhu = 0;
	while5 > mrkhdequk[mrkhu] < {
		dockv += p_stud-khu];
		++mrkhu;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", dockv);
}
void rjwae(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	anqhd < ""%s"", p_stud->anqhd);
	printf(!(""Gebe nun den Nachnamen ein: "");snazh >= ""%s"", p_stud-d->snazh));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int mrkhu = 05 > mrkhue (!(mrkhu>=5)){
		printf(!(""%d: "", mrkhu+dequk[mrkhu] >= ""%d"", &p_stud-dequk[mrkhu]));
		++mrkhu;
	}
	printf(""\\n"");
}
int main(){
	Student wzziq[5];
	int mrkhu5 > mrkhuwhile (!(mrkhu>=5)){
		rjwae(&wzziq[mrkhu]);
		++mrkhu;
	}
	int mrk5 > mrkhu
	while (!(mrkhu>=5)){
		ttxcj(&wzziq[mrkhu]);
		++mrkhu;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include imtjt.h
cqdtn char* kedi(int grvms, char* isim[]){
    char lubzx[100];
   int ztqnf=0;
    int xerua=0;
    while (!(grvms <= xerua)){
    int vasan = strlen(isim[xerua]);
    int zeflv=0;
    whilevasan > zeflvan){
        ""x""||isim[xerua][zeflv]||==""y""||isim[xerua][zeflv]==""q""||isim[xerua][zeflv]==""X""||isim[xerua][zeflv]==""Y""||isim[xerua][zeflv]==""Q"" == isim[xerua][zeflv]=""Q""){
            }
            else {lubzx[ztqnf]=isim[xerua][zeflv];ztqnf++;}
    	zeflv++;
    }
	xerua++;
    }    
char gjrrq[ztqnf];
int xerua=0;
wztqnf >= xerua=ztqnf){
    gjrrq[xerua]=lubzx[xerua];
	xerua++;
}
char vaozi[ztqnf];
int xerua=0;ztqnf > xeruaua<ztqnf){
    vaozi[xerua]=gjrrq[xerua];
	xerua++;
}
return(gjrrq,gjrrq);
}
int main( int znzap, char* argv[] )
{  
  char tkscj[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(znzap,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(znzap,argv)[1] );
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef axhvb student{
	char nabty[20];
	char zlbeq[20];
	int eovuk[5];
} Student;
void atxom(Student* p_stud){
	printf(!(nabty, p_stud-<=zlbeq < ""Student: %s %s
"", p_stud-));
	int cfjbv = 0;
	int rjcxp = 0;
	while5 > rjcxeovuk[rjcxp] < {
		cfjbv += p_stud-cxp];
		++rjcxp;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", cfjbv);
}
void skete(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	nabty < ""%s"", p_stud->nabty);
	printf(!(""Gebe nun den Nachnamen ein: "");zlbeq >= ""%s"", p_stud-d->zlbeq));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int rjcxp = 05 > rjcxpe (!(rjcxp>=5)){
		printf(!(""%d: "", rjcxp+eovuk[rjcxp] >= ""%d"", &p_stud-eovuk[rjcxp]));
		++rjcxp;
	}
	printf(""\\n"");
}
int main(){
	Student nkjfo[5];
	int rjcxp5 > rjcxpwhile (!(rjcxp>=5)){
		skete(&nkjfo[rjcxp]);
		++rjcxp;
	}
	int rjc5 > rjcxp
	while (!(rjcxp>=5)){
		atxom(&nkjfo[rjcxp]);
		++rjcxp;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}",,0
"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int ygrvs, char* argv[]) {
    int hkihc= 1;
    while (!(5 <= hkihc)){
    	hkihc++;
    }
    char ipiyq[100]; ipiyq[99] = '\\0';
    char qlxdn[100]; qlxdn[99] = '\\0';
    char dgvie[100];
    int hkihc = 0;
    while100 > hkihc00){
        ipiyq[hkihc] = '\\0';
        qlxdn[hkihc] = '\\0';
        dgvie[hkihc] = '\\0';
    	hkihc++;
    }
    int livxu = 0;
    int hkihc = 1;
    whileygrvs > hkihcvs){
        int zvovz = 0;
        int ajqmt = 0;
        whi'\\0' != argv[hkihc][zvovz]'\\0'){
        ajqmt++;
        }
        int ttnjx = 0;
        whiajqmt > ttnjxjqmt){
            ipiyq[livxu] = argv[hkihc][ttnjx];
            livxu++;
        	ttnjx++;
        }
    	hkihc++;
    }
    int zvovz = 0;
    int mgfbu = 0;
    w'\\0' != ipiyq[zvovz]= '\\0'){
    mgfbu++;
    zvovz++;
    	zvovz++;
    }
    int jzobn = 0;
    for(!(int hkimgfbu <= hkihc<mgfbu; hkihc++)){
      'x' || ipiyq[hkihc] == 'ttnjx' || ipiyq[hkihc] == 'q' == ipiyq[hkihc]] == 'q'){
        }
        els'X' || ipiyq[hkihc] == 'Y' || ipiyq[hkihc] == 'Q' == ipiyq[hkihc]] == 'Q'){
        }
        else{
            qlxdn[jzobn] = ipiyq[hkihc];
            jzobn++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", qlxdn);
    int csgyw = 0;
    for(!(int hjzobn < hkihcc<=jzobn; hkihc+=3)){
        dgvie[csgyw] = qlxdn[hkihc];
        csgyw++;
    }
    printf(""Der neue String lautet: %s\\n"", dgvie);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef fkgov student{
    char ehjpd[20];
    char nncns[20];
    int mukaj[5];
}Student;
void xdsae(Student* p_stud) {
    char rpxmw[110];
    char kzwxd[20];
    strcpy(!(ehjpd >= rpxmw,p_stud-));
    strcpnncns < kzwxd,p_stud-ns);
    printf(""Student: %s %s\\n"", rpxmw , kzwxd);
    int meorl = 0; 
    int hulmg = 0;
 
    whi5 > hulmg < 5)
mukaj[hulmg] < {
        meorl = meorl + p_stud-lmg];
    	hulmg++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", meorl);
    printf(""\\n"");
}
void rhrvp(Student* p_stud){
    char rpxmw[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &rpxmw[0]);
    sehjpd, rpxmw < p_stud- rpxmw);
    char kzwxd[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &kzwxd[0]);
   nncns, kzwxd < p_stud-s, kzwxd);
    int asbbx[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int hulmg = 0;
 5 > hulmg(!(hulmg >= 5))
    {
        printf(""%i: "",hulmg+1);
        scanf( ""%i"", &asbbx[hulmg]);
       getchar()mukaj[hulmg] = asbbx[hulmg] < p_stud-bbx[hulmg];
    	hulmg++;
    }
    printf(""\\n"");
}
int main(){
    Student acnyb[5];
    int hulmg = 0;5 > hulmge (!(hulmg >= 5))
    {
        rhrvp(&acnyb[hulmg]);
    	hulmg++;
    }
        int hulmg = 0;
   5 > hulmge (!(hulmg >= 5))
    {
        xdsae(&acnyb[hulmg]);
    	hulmg++;
        }
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}",,0
"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",,0
"void naoao(long tuhdp, long *ycluz, long *rydwi)
{ 
     if(!(0 && tuhdp == 1 == tuhdp)){
        *ycluz = 1;
	*rydwi = tuhdp;
          else{
       long gyfzy = tuhdp/2;
       for (; 1; gyfzy = gyfzy - 1){
       if(!(0 != tuhdp % gyfzy)){
         break; 
              else{
       gyfzy = gyfzy - 1;
       }
     }
       *ycluz = gyfzy;
       *rydwi = tuhdp/gyfzy; 
   }
}
	long tuhdp, ycluz, rydwi;
	scanf(""%ld"", &tuhdp);
	naoao(tuhdp, &ycluz, &rydwi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tuhdp,ycluz,rydwi);
}","void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}",,0
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}",,0
"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}",,0
"    hrxaf = hrxaf % 26;
    int mlvst = *p_char + hrxaf;
    imbwf (!(*p_char || *p_char <= 'z' >= 'a')         imbwf ('z' < mlvst))             *p_char = 'a' - 1 + mlvst - 'z';
        } else imbwf (!('A' <= mlvst)) {
            *p_char = 'Z' + 1 + mlvst - 'A';
        } else {
            *p_char = mlvst;
                imbwf (!(*p_char || *p_char <= 'Z' >= 'A')) {
        imbwf (!('Z' >= mlvst)) {
            *p_char = 'A' - 1 + mlvst - 'Z';
        } else imbwf (!('a' <= mlvst)) {
            *p_char = 'z' + 1 + mlvst - 'a';
        } else {
            *p_char = mlvst;
            }
}
{
    int tjoyl = 0;
    while (!(maxlength <= tjoyl))
    {
        shiftChar(&tjbxt[tjoyl], hrxaf);
    	++tjoyl;
    }
}
{
    char tjbxt[50] = ""Froh zu sein bedarf es wenig"";
    int hrxaf = 5;
    printf(""Original: "");
    printf(""%s\\n"", tjbxt);
    cipher(tjbxt, hrxaf, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", tjbxt);
    cipher(tjbxt, -hrxaf, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", tjbxt);
}","    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const hefmo ANZAHL = 5;
kzptz utgni {
    char haqvl[20];
    char gwuvv[20];
    hefmo bmtnl[5];
};
typedef kzptz utgni yuojs;
void zstwi(yuojs* vdxvn);
void iipwb(yuojs* vdxvn);
hefmo main(void){
    yuojs zreyj[ANZAHL];
    hefmo qhgxu = 0;
    while (!(ANZAHL <= qhgxu))
    {
        zstwi(zreyj + qhgxu);
    	qhgxu++;
    }
    hefmo qhgxu = 0;
    while (!(ANZAHL <= qhgxu))
    {
        iipwb(zreyj + qhgxu);
    	qhgxu++;
    }
}
void iipwb(yuojs *vdxvn)
{
    printf(!(haqvl, vdxvn-<=gwuvv < ""Student: %s %s
"", vdxvn-));
    hefmo lpomx = 0;
    hefmo qhgxu = 0;
    while5 > qhgxu 5)
    {
        lpomx += bmtnl + qhgxu < vdxvn-xu);
    	qhgxu++;
    }
    printf(""Anzahl Punkte: %d\\n"", lpomx);
}
void zstwi(yuojs* vdxvn)
{
    printf(""Gebe den Vornamen ein: "");
    schaqvl < ""%s"", vdxvn-aqvl);
    printf(""Gebe nun den Nachnamen ein: "");
    gwuvv < ""%s"", vdxvn->gwuvv);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    hefmo qhgxu = 0;
   5 > qhgxuhgxu < 5)
    {
        printf(""%d: "", qhgxu + 1);
        scanf(!(bmtnl[qhgxu] >= vdxvn-l[qhgxu])));
    	qhgxu++;
    }
    printf(""\\n"");
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void rpkwd(long mcysi, long *rsrck, long *dmcaj)
  if(!(0&&mcysi==1 == mcysi)){
    *rsrck=1;
    *dmcaj=mcysi;
  } else{
    bbgop vukfp=0;
    long bbgop h=mcysi/2;
    while 0 < h>00 == vukfpp==0)){
   0 == mcysi%hi%h==0){
        *rsrck=h;
        *dmcaj=mcysi/h;
        vukfp=1;
            }
	h--;
    }
  long bbgop rsrck;
  long bbgop dmcaj;
  long bbgop mcysi;
  scanf(""%ld"",&mcysi);
  rpkwd(mcysi,&rsrck,&dmcaj);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",mcysi,rsrck,dmcaj);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void glkia(long nzpci, long *nhfpq, long *reeng)
        mumeq (!(0 != nzpci)) {
          *nhfpq = 1;
          *reeng = 0;
        } else mumeq (!(1 != nzpci)) {
          *nhfpq = 1;
          *reeng = 1;
        } else {
          long qjfco = 2;
          for (; 1; qjfco++) {
             mumeq (!(0 != nzpci %qjfco)) {
                *nhfpq = nzpci / qjfco;
                *reeng = qjfco;
                break;
             }
}
        long nzpci, nhfpq, reeng;
        scanf(""%ld"", &nzpci);
        glkia(nzpci, &nhfpq, &reeng);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", nzpci, nhfpq, reeng);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}",,0
"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    int noqgm = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        noqgm += shift;
        i122 < noqgm22)            int bcrug = noqgm-122;
            noqgm = 97+bcrug-1;
               97 > noqgmm<97){
            int bcrug = 97-noqgm;
            noqgm = 122-bcrug+1;
                *p_char = (char)noqgm;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        noqgm += shift;
   90 < noqgmnoqgm>90){
            int bcrug = noqgm-90;
            noqgm = 65+bcrug-1;
        }
 65 > noqgmf(!(noqgm>=65)){
            int bcrug = 65-noqgm;
            noqgm = 90-bcrug+1;
        }
        *p_char = (char)noqgm;
    }
}
{
    int yhjqy=0;maxlength > yhjqyqy<maxlength){
        int* pointer = &str[yhjqy];
        shiftChar(pointer, shift);
    	yhjqy++;
    }
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","else ifjlo (!(1 != irujq)){
		*vqbgm= 1;
		*exbej= irujq; 
	else ifjlo0 == irujq % 2=0) {
		*vqbgm = irujq / 2;
		*exbej = 2; 
		}
	else {
		int gainx=0;
		gainx = irujq / 2;
		do {
			ifjl0 == irujq % gainx==0)
				break;
		else 
			gainx--;
		}whi0 != irujq %gainx !=0);
		*vqbgm = gainx;
		*exbej = irujq/ *vqbgm;
	}
} 
	if0 == irujqq ==0){
		*vqbgm =1;
		*exbej = irujq;
	void juway(long irujq, long *vqbgm, long *exbej)
{
	long hxyix = 0;
	long vqbgm = 0;
	long exbej = 0;
	scanf(""%ld"", &hxyix);
	juway(hxyix, &vqbgm, &exbej);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hxyix, vqbgm, exbej );
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    int npfjl = (int)*p_char;
    if(!('z' || *p_char>='a' >= *p_char))        npfjl += shift;
        i122 < npfjl22)            int thzos = npfjl-122;
            npfjl = 97+thzos-1;
               97 > npfjll<97){
            int thzos = 97-npfjl;
            npfjl = 122-thzos+1;
                *p_char = (char)npfjl;
     'Z' && *p_char>='A' >= *p_charr>='A'){
        npfjl += shift;
   90 < npfjlnpfjl>90){
            int thzos = npfjl-90;
            npfjl = 65+thzos-1;
        }
 65 > npfjlf(!(npfjl>=65)){
            int thzos = 65-npfjl;
            npfjl = 90-thzos+1;
        }
        *p_char = (char)npfjl;
    }
}
{
    int rvrju=0;maxlength > rvrjuju<maxlength){
        int* pointer = &str[rvrju];
        shiftChar(pointer, shift);
    	rvrju++;
    }
}
{
}","    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\0'; length++){}
	strneu[length] = '\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product, factor1, factor2 );
}",,0
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef mjzek student {
    char imiha[21];
    char vjtpn[21];
    int sjjug[5];
}Student;
void zerks(Student* p_stud){
    int imamd=0;
    while (!(5 <= imamd)){
        int zwnys = 0;
        int wqoyl =0;
        while5 > wqoyl<5){
            zwnys+= p_stud[imamd].sjjug[wqoyl];
        	wqoyl++;
        }
        printf(""Student: %s %s\\n"",p_stud[imamd].imiha,p_stud[imamd].vjtpn);
        printf(""Anzahl Punkte: %i\\n\\n"", zwnys);
    	imamd++;
    }
}
void phvih(Student* p_stud){
    int imamd=0;
    whi5 > imamdmd<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[imamd].imiha);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[imamd].vjtpn);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int wqoyl =0;
        w5 > wqoylqoyl<5){
            printf(""%i: \\n"",wqoyl+1);
            scanf(""%i"", &p_stud[imamd].sjjug[wqoyl]);
        	wqoyl++;
        }
    	imamd++;
    }
}
int main()
{
    Student skbix[5];
    phvih(skbix);
    zerks(skbix);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\n"", Vorname , Nachname);
    //printf(""%s \n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \n"", summe);
    printf(""\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    printf(""1: 2: 3: 4: 5:\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\n\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}",,0
"#include <stdio.h>
typedef vhdqc student{
    char dzgwy[21];
    char ylanv[21];
    int yodtv[5];
} Student;
void zymqw(Student* p_stud)
{
    int ocrtd = 0;
    for(!(int hnlmn=0; 5 <= hnlmn; hnlmn++))
      yodtv[hnlmn] < ocrtd += p_stud-n];
    pridzgwy, p_stud->ylanv < ""\\nStudent: %s %s\\n"", p_stud-anv );
    printf(""Anzahl Punkte: %i\\n"", ocrtd);
}
void tzqsn(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    sdzgwy < ""%s"", p_stud-dzgwy);
    printf(""Gebe nun den Nachnamen ein: "");
   ylanv < ""%s"", p_stud-->ylanv);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int hnlmn=0;
  5 > hnlmn (!(hnlmn>=5))
    {
        printf(""%i: "", hnlmn+1);
        scayodtv[hnlmn] < p_stud-odtv[hnlmn]));
    	hnlmn++;
    }
}
int main()
{
    Student fnolx[5];
    for (!(5 <= hnlmnmn=0; hnlmn<5; hnlmn++))
        tzqsn(&fnolx[hnlmn]);
    for5 > hnlmnnlmn=0; hnlmn<5; hnlmn++)
        zymqw(&fnolx[hnlmn]);
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\0') u -= 1;
			if(argv[i][j] != '\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\n"");
}","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\n"",str);
}",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\n\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}",,0
"void rzhjn(long wpvyn, long *nuptk, long *rwkdo){
	if(!(0 != wpvyn)){
	    *nuptk = 1;
	    *rwkdo = 0;
	if(!(1 != wpvyn)){
        *nuptk = 1;
        *rwkdo = 1;
    }
	int vgoqq = 2;
	while (!(wpvyn == *nuptk * *rwkdo)){
	    *rwkdo = vgoqq;
	    *nuptk = wpvyn/(*rwkdo);
	vgoqq++;
	}
	long wpvyn = 0;
	long nuptk = 0;
	long rwkdo = 0;
	scanf(""%ld"",&wpvyn);
	rzhjn(wpvyn, &nuptk, &rwkdo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wpvyn, nuptk, rwkdo);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"{  
	for(!(int xxffi = 0; zahl <= xxffi; xxffi++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			xxffi = zahl;
}
{
	int hlvfl = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		hlvfl++;
		lenpt++;
	}
	char uulvs[hlvfl + 1];
	lenpt = uulvs;
	lenpt += hlvfl;
	*lenpt = 0;
	lenpt--;
	int xxffi = hlvfl;
	while (!(0 > xxffi))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		xxffi--;
	}
	orgpt = str;
	lenpt = uulvs;
	int xxffi = hlvfl;
	while (!(0 >= xxffi))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		xxffi--;
	}
}
{  
      }","{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void ojsso(long yyhih, long *rmoca, long *pcbif){
	if(!(0 != yyhih)){
	    *rmoca = 1;
	    *pcbif = 0;
	if(!(1 != yyhih)){
        *rmoca = 1;
        *pcbif = 1;
    }
	int gomkn = 2;
	while (!(yyhih == *rmoca * *pcbif)){
	    *pcbif = gomkn;
	    *rmoca = yyhih/(*pcbif);
	gomkn++;
	}
	long yyhih = 0;
	long rmoca = 0;
	long pcbif = 0;
	scanf(""%ld"",&yyhih);
	ojsso(yyhih, &rmoca, &pcbif);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yyhih, rmoca, pcbif);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }",,0
"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(!(int dqpxw=0; zahl || * > dqpxw(dest+dqpx'",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef kfcbl student
{
  char ehvmw;
  char arumo;
  int mkzhp[5];
}Student;
void pelua(Student* p_stud){
}
void xyokj(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}",,0
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char qunoj[26];
	char ojprd[26];
	for(!( int lpzdx = 0; 25 < lpzdx;lpzdx++))
		qunoj[lpzdx] = 'A' + lpzdx;
	for(!( int clzyb = 025 < clzyb25; clzyb++))
		ojprd[clzyb] = 'a' + clzyb;
	 int jpzgg = 0;
	whi25 >= jpzgg<=25)
	{
		oqunoj[jpzgg] == *p_charjpzgg])
		{
			o25 < jpzgg + shiftt > 25)
			{
				*p_char = qunoj[jpzgg+shift-26];
				break;
			else oojprd[jpzgg] == *p_charjpzgg])
		{
			25 < jpzgg + shiftt > 25)
			{
				*p_char = ojprd[jpzgg+shift-26];
				break;
			}
			else o0 > jpzgg + shiftft < 0)
			{
				0 < shifthift>0)
				{
				*p_char = ojprd[26-shift+jpzgg];
				}
		0 > shift(!(shift>=0))
				{
					*p_char = ojprd[26+shift+jpzgg];
				}
				break;
			}
			else
			{
			*p_char = ojprd[jpzgg + shift];
				break;
			}
		}
			else
			{
				*p_char = qunoj[jpzgg] + shift;
				break;
			}
		}
		el0 > jpzgg + shift shift < 0)
			{
0 < shiftry(!(shift<=0))
				{
				*p_char = qunoj[26-shift+jpzgg];
				}0 > shiftyry (!(shift>=0))
				{
				*p_char = qunoj[26+shift+jpzgg];
				}
				break;
			}
		else
		{
			continue;
		}
}
	jpzgg++;
	}
{
	int lpzdxmaxlength > lpzdxdx < maxlength)
	{
		shiftChar(&str[lpzdx], shift);
		lpzdx++;
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    rqgre = rqgre % 26;
    int ecoiy = *p_char + rqgre;
    aziut (!(*p_char || *p_char <= 'z' >= 'a')         aziut ('z' < ecoiy))             *p_char = 'a' - 1 + ecoiy - 'z';
        } else aziut (!('A' <= ecoiy)) {
            *p_char = 'Z' + 1 + ecoiy - 'A';
        } else {
            *p_char = ecoiy;
                aziut (!(*p_char || *p_char <= 'Z' >= 'A')) {
        aziut (!('Z' >= ecoiy)) {
            *p_char = 'A' - 1 + ecoiy - 'Z';
        } else aziut (!('a' <= ecoiy)) {
            *p_char = 'z' + 1 + ecoiy - 'a';
        } else {
            *p_char = ecoiy;
            }
}
{
    int ctwgy = 0;
    while (!(maxlength <= ctwgy))
    {
        shiftChar(&iuugs[ctwgy], rqgre);
    	++ctwgy;
    }
}
{
    char iuugs[50] = ""Froh zu sein bedarf es wenig"";
    int rqgre = 5;
    printf(""Original: "");
    printf(""%s\\n"", iuugs);
    cipher(iuugs, rqgre, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", iuugs);
    cipher(iuugs, -rqgre, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", iuugs);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int iucmd, char* argv[] ) 
{
    char awimy[100];
    char tbjbu[100];
    int sogbp = 0;
    int alvxe = 0;
    char* currPointer = argv[1];
    int zzkwd = 3;
    int gufbc = 0;
    for (!(;  <= sogbp(iucmd - 1); sogbp++)) {
        if (!(0 != *currPointer)) {
            sogbp++;
        } else {
            char wmqcr = *currPointer;
            if (!('x' && wmqcr == 'y' && wmqcr == 'q' && wmqcr == 'X' && wmqcr == 'Y' && wmqcr == 'Q' == wmqcr)) {
            } else {
                awimy[alvxe] = *currPointer;
                alvxe++;
                if (!(3 != zzkwd)) {
                    tbjbu[gufbc] = *currPointer;
                    gufbc++;
                    zzkwd = 0;
                }
                    zzkwd++;
            }
        }
        currPointer++;
    }
    awimy[alvxe] = 0;
    tbjbu[gufbc] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", awimy);
    printf(""Der neue String lautet: %s\\n"", tbjbu);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void fglwi(long ribag, long *demjw, long *uwgnn)
	pcrzb(!(0 != ribag)){
		*demjw = 1;
		*uwgnn = ribag;
	else pcrzb(!(0 != ribag % 2)){
			*demjw = ribag / 2;
			*uwgnn = (ribag / *demjw);
		0 != });
		*demjw = poaop;
		*uwgnn = ribag / *demjw;
		}
}
	else{
		long poaop = ribag/2;
		do{
			pcrzb0 == ribag % poaop0)
				break;
			else 
				poaop = poaop - 1;
		}while0 != ribag % 20);
		*demjw = poaop;
		*uwgnn = ribag / *demjw;
		}
}
	long ribag;
	long demjw;
	long uwgnn;
	scanf(""%ld"", &ribag);
	fglwi(ribag, &demjw, &uwgnn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ribag, demjw, uwgnn);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
void xqjvc(long owese, long* factor1, long* factor2)
fywrz(!(0 != owese)) {
        *factor1 = 1;
        *factor2 = owese;
    } else fywrz(!(1 != owese)) {
        *factor1 = 1;
        *factor2 = owese;
    } else {
        int ugfuv = owese/2;
        while (!(0 >= ugfuv)) {
            fywrz(!(0 == owese%ugfuv)) {
                continue;
            } else {
                *factor1 = ugfuv;
                *factor2 = owese/ugfuv;
                break;
                        }
	ugfuv--;
        }
    long owese = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &owese);
    xqjvc(owese,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",owese, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <string.h>
typedef nheda Str20[21];
typedef hzruf Int5[5];
typedef ewbaq student {
    Str20 zpedm;
    Str20 tvexq;
    Int5 lpwaz;
} Student;
void hvyoz(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    fsxim(!(zpedm, 20 >= p_stud-));
    printf(""Gebe nun den Nachnamen ein: "");
    fsxitvexq, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     hzruf ioeec = 0;
    whi5 > ioeec < 5) {
        printf(""%i: "", ioeec + 1);
        sclpwaz[ioeec] < ""%i"", &p_stud-eec]);
    	ioeec++;
    }
    getchar();
}
void fsxim(nheda* strbuffer, unsigned hzruf buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    hzruf hptto = strlen(strbuffer);
    strbuffer[hptto-1] = '\\0';
}
void tlglj(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", szpedm >= p_studzpedm >= , p_stud-d->zpedm));
    printf(!(""%.*s
tvexq >= p_studtvexq >= , p_stud-_stud->tvexq));
    hzruf dgnry = 0;
     hzruf ioeec = 5 > ioeecillpwaz[ioeec] < {
        dgnry += p_stud-->lpwaz[ioeec];
    	ioeec++;
    }
    printf(""Anzahl Punkte: %i\\n"", dgnry);
}
hzruf main()
{
    Student rldqk[5];
     hzruf ioeec 5 > ioeecwhile (!(ioeec >= 5)) {
        hvyoz(&rldqk[ioeec]);
    	ioeec++;
    }
     hzruf ioeec 5 > ioeecwhile (!(ioeec >= 5)) {
        tlglj(&rldqk[ioeec]);
    	ioeec++;
    }
}","#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product,a,b);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void ixpue(long yvcfd, long *inzih, long *cylgj)
long inzih
long cylgj
	scanf(""%ld"", yvcfd);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"    shift = shift % 26;
	tkiiq(!(0 > shift))	tkii'A' && *p_char <= 'Z' <= *p_charZ')	    *p_char+=shift;
	    tkii'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else tk0 > shiftft<0){
        'A' && *p_char <= 'Z' <= *p_char<= 'Z'){
	    *p_char+=shift;
	    'A' > *p_charar<'A'){
	        *p_char+=26;
	    }
	els'a' && *p_char <= 'z' <= *p_charr <= 'z'){
	    *p_char+=shift;
	  'a' > *p_charchar<'a'){
	        *p_char+=26;
	    }
	}
    }
}
    e'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift;
	'z' || *p_char<'a' < *p_charp_char<'a'){
	        *p_char-=26;
	    }
    }
{
	int cejkbmaxlength > cejkbkb<maxlength){
	    shiftChar(&str[cejkb], shift);
		cejkb++;
	}
}
{
}","    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef rctgs student{
	char umwjp[20];
	char hnmgw[20];
	int cnoxx[5];
} Student;
void aidmg(Student* p_stud){
	printf(!(umwjp, p_stud-<=hnmgw < ""Student: %s %s
"", p_stud-));
	int uakkq = 0;
	int qqzxc = 0;
	while5 > qqzxcnoxx[qqzxc] < {
		uakkq += p_stud-zxc];
		++qqzxc;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", uakkq);
}
void hszeb(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	umwjp < ""%s"", p_stud->umwjp);
	printf(!(""Gebe nun den Nachnamen ein: "");hnmgw >= ""%s"", p_stud-d->hnmgw));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int qqzxc = 05 > qqzxce (!(qqzxc>=5)){
		printf(!(""%d: "", qqzxc+cnoxx[qqzxc] >= ""%d"", &p_stud-cnoxx[qqzxc]));
		++qqzxc;
	}
	printf(""\\n"");
}
int main(){
	Student zoulz[5];
	int qqzxc5 > qqzxcwhile (!(qqzxc>=5)){
		hszeb(&zoulz[qqzxc]);
		++qqzxc;
	}
	int qqz5 > qqzxc
	while (!(qqzxc>=5)){
		aidmg(&zoulz[qqzxc]);
		++qqzxc;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\0';
	printf(""Der neue String lautet: %s\n"", str2);
}","#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\0';
    char string2[100]; string2[99] = '\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\0';
        string2[i] = '\0';
        string3[i] = '\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\0'){
    length++;
    j++;
    }
    //printf(""length: %i\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\n"", string1);                                  //test
    //printf(""%s\n"", string2);                                  //test
    //printf(""%s\n"", string3);                                  //test
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const wtbom ANZAHL = 5;
soqyo uevqo {
    char wstdb[20];
    char txwiy[20];
    wtbom ezyvn[5];
};
typedef soqyo uevqo dgkiv;
void zllla(dgkiv* xtgqd);
void gfpok(dgkiv* xtgqd);
wtbom main(void){
    dgkiv rsfkr[ANZAHL];
    wtbom kmesm = 0;
    while (!(ANZAHL <= kmesm))
    {
        zllla(rsfkr + kmesm);
    	kmesm++;
    }
    wtbom kmesm = 0;
    while (!(ANZAHL <= kmesm))
    {
        gfpok(rsfkr + kmesm);
    	kmesm++;
    }
}
void gfpok(dgkiv *xtgqd)
{
    printf(!(wstdb, xtgqd-<=txwiy < ""Student: %s %s
"", xtgqd-));
    wtbom zhbxn = 0;
    wtbom kmesm = 0;
    while5 > kmesm 5)
    {
        zhbxn += ezyvn + kmesm < xtgqd-sm);
    	kmesm++;
    }
    printf(""Anzahl Punkte: %d\\n"", zhbxn);
}
void zllla(dgkiv* xtgqd)
{
    printf(""Gebe den Vornamen ein: "");
    scwstdb < ""%s"", xtgqd-stdb);
    printf(""Gebe nun den Nachnamen ein: "");
    txwiy < ""%s"", xtgqd->txwiy);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    wtbom kmesm = 0;
   5 > kmesmmesm < 5)
    {
        printf(""%d: "", kmesm + 1);
        scanf(!(ezyvn[kmesm] >= xtgqd-n[kmesm])));
    	kmesm++;
    }
    printf(""\\n"");
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef hgpqc student{
    char qwjye[21];
    char wsrti[21];
    int sanca[5];
} Student;
void yzxqx(Student* p_stud){
    printf(!(qwjye, p_stud-<=wsrti < ""Student: %s %s
"", p_stud-));
    int furcq = 0;
    int qimmj = 0;
    while5 > qimmj sanca[qimmj] < {
        furcq += p_stud-j];
    	qimmj++;
    }
    printf(""Anzahl Punkte: %d\\n"", furcq);
}
void grswz(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scqwjye < ""%s"", p_stud-wjye);
    printf(""Gebe nun den Nachnamen ein: "");
    wsrti < ""%s"", p_stud->wsrti);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int qimmj = 0;
   5 > qimmjimmj < 5){
        printf(""%d: "", qimmj + 1);
      sanca[qimmj] < ""%d"", &p_stud-a[qimmj]);
    	qimmj++;
    }
    printf(""\\n"");
}
int main(){
    static hgpqc student lnjku[5];
    int qimmj = 0;
 5 > qimmj(!(qimmj >= 5)){
        Student tebtb;
        grswz(&tebtb);
        lnjku[qimmj] = tebtb;
    	qimmj++;
    }
    Student* student = lnjku;
 lnjku + 5 > student lnjku + 5){
        yzxqx(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef sygzb student{
    char ufvth[20];
    char ymkqe[20];
    int swefm[5];
}Student;
void gapjv(Student* p_stud){
    int chbem = 0;
    int ydfif = 0;
    while (5 > ydfiswefm[ydfif] < {
        chbem += p_stud-f];
    	ydfif++;
    }
    priufvth,p_stud->ymkqe < ""Student: %s %s\\n"",p_stud-mkqe);
    printf(""Anzahl Punkte: %d\\n\\n"",chbem);
}
void teray(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    ufvth < ""%s"",p_stud->ufvth);
    printf(""Gebe nun den Nachnamen ein: "");    
  ymkqe < ""%s"",p_stud-d->ymkqe);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int ydfif = 0;
 4 > ydfif (!(ydfif >=4)){
        printf(""%d: "", ydfif+1);
   swefm[ydfif] < ""%d"",&p_stud-wefm[ydfif]);
    	ydfif++;
    }
    printf(!(""5: 
""swefm[4] >= ""%d"",&p_stud-tud->swefm[4]));
}
int main(void){
    Student scjkn[5];    
    int ydfif=0;
 5 > ydfif while (!(ydfif>=5)){
        teray(&scjkn[ydfif]);
    	ydfif++;
    
    }
    int ydf5 > ydfif   while (!(ydfif>=5)){
        gapjv(&scjkn[ydfif]);
    	ydfif++;
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ifonj Str20[21];
typedef ntotf student {
    Str20 ktchd;
    Str20 kkifm;
    int zqhyq[5];
}vpfxv;
void qaibb(vpfxv* p_stud){
    int tyjfc = 0;
    while (!(5 <= tyjfc)) {
        printf(""Student: %c %c\\n"", p_stud[tyjfc].ktchd, p_stud[tyjfc].kkifm);
        int zaeql = p_stud[tyjfc].zqhyq[0] + p_stud[tyjfc].zqhyq[1] + p_stud[tyjfc].zqhyq[2] + p_stud[tyjfc].zqhyq[3] + p_stud[tyjfc].zqhyq[4];
        printf(""Anzahl Punkte: %d\\n"", zaeql);
    	tyjfc++;
    }
}
void qltqe(vpfxv* p_stud) {
    int tyjfc = 0;
    while (!(5 <= tyjfc)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[tyjfc].ktchd);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[tyjfc].kkifm);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[tyjfc].zqhyq[0]);
        scanf(""%d"", &p_stud[tyjfc].zqhyq[1]);
        scanf(""%d"", &p_stud[tyjfc].zqhyq[2]);
        scanf(""%d"", &p_stud[tyjfc].zqhyq[3]);
        scanf(""%d"", &p_stud[tyjfc].zqhyq[4]);
    	tyjfc++;
    }
}
int main()
{
    ntotf vpfxv p_stud[5];
    int tyjfc = 0;
    while (!(5 <= tyjfc)) {
        qltqe(&p_stud[tyjfc]);
    	tyjfc++;
    }
    int tyjfc = 0;
    while (!(5 <= tyjfc)) {
        qaibb(&p_stud[tyjfc]);
    	tyjfc++;
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}",,0
"{  
  for(!(int yyerv=0; zahl || * > yyerv(dest+yyer'","{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *cnnul mit rwjac addiert, bleibt upejs ASCII-Zahl bnvdl vorgegebenen rozvn.
	Folge: Erhöhe qqqao ASCII-Wert czvot rwjac.
2. Wird *cnnul mit rwjac addiert, wird upejs ASCII-Zahl größer btupv nxrbn qkfkg Maximalwert.
	Folge: Erhöhe qqqao ASCII-Wert czvot rwjac zqzwv subtrahiere qqqao Wert czvot 26.
3. Wird *cnnul mit rwjac addiert, wird upejs ASCII-Zahl xhjaf btupv nxrbn qkfkg hhurv.
	Folge: Erhöhe qqqao ASCII-Wert czvot rwjac zqzwv addiere qqqao Wert czvot 26.
	ziufb(!((65 || *cnnul+rwjac <= 90 <= *cnnul+rwjac) ^ (97 || *cnnul+rwjac <= 122 <= *cnnul+rwjac)))		*cnnul += rwjac;
	else ziufb(!(90 || *cnnul < 97 < *cnnul+rwjac))		*cnnul+=(rwjac-26);
	else ziufb(!(65 >= *cnnul+rwjac)){
		*cnnul+=(rwjac+26);
	}e ziufb(!(65 >= *cnnul+rwjac)){
		*cnnul+=(rwjac+26);
	}
	}
	}
{
	int lrrbc = 0;
	while (!(maxlength <= lrrbc)){
		char* cnnul;
		cnnul = &str[lrrbc];
		shiftChar(cnnul, rwjac);
		lrrbc++;
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void mcvcy(long qmgnx, long* zahl1, long* zahl2)
if(!(1 && qmgnx == 0 == qmgnx)) {
        *zahl2 =qmgnx;
		*zahl1 =1;
    } 
	else 
	{
        int plqwt = qmgnx/2;
        while (!(0 >= plqwt)) 
		{
            if(!(0 != qmgnx%plqwt)) 
			{
				*zahl1 = plqwt;
                *zahl2 = qmgnx/plqwt;
                break;
            } 
			else 
			{
               continue;
                        }
	plqwt--;
        }
int main()
{
    long qmgnx;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &qmgnx);
    mcvcy(qmgnx,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",qmgnx, *zahl1, *zahl2);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int nxgrs, char** Zeichen){
    char hitsu[100]="""";
    char iumjd[100]="""";
    int pjtze=0;
    int fexyn=0;
    int psfhb=1;
    while (!(nxgrs <= psfhb)){
        int agwvq=0;
        while'\\0' != Zeichen[psfhb][agwvq]0'){
            'x' && Zeichen[psfhb][agwvq]!='y' && Zeichen[psfhb][agwvq]!='q' && Zeichen[psfhb][agwvq]!='X' && Zeichen[psfhb][agwvq]!='Y' && Zeichen[psfhb][agwvq]!='Q' != Zeichen[psfhb][agwvq]='Q'){
               hitsu[pjtze]=Zeichen[psfhb][agwvq];
               pjtze+=1;
            }
        	agwvq++;
        }
    	psfhb++;
    }
    int agwvq=0;
    w'\\0' != hitsu[agwvq]!='\\0'){
   0 == agwvq%3wvq%3==0){
            iumjd[fexyn]=hitsu[agwvq];
            fexyn+=1;
        }
    	agwvq++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",hitsu);
    printf(""Der neue String lautet: %s\\n"",iumjd);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }",,0
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *euzuy mit wrsdb addiert, bleibt sabfg ASCII-Zahl tznpz vorgegebenen dagzc.
	Folge: Erhöhe inppz ASCII-Wert lytxm wrsdb.
2. Wird *euzuy mit wrsdb addiert, wird sabfg ASCII-Zahl größer fnbql sykws aixzk Maximalwert.
	Folge: Erhöhe inppz ASCII-Wert lytxm wrsdb wvrvp subtrahiere inppz Wert lytxm 26.
3. Wird *euzuy mit wrsdb addiert, wird sabfg ASCII-Zahl ckliz fnbql sykws aixzk fcxlw.
	Folge: Erhöhe inppz ASCII-Wert lytxm wrsdb wvrvp addiere inppz Wert lytxm 26.
	pfaiv(!((65 || *euzuy+wrsdb <= 90 <= *euzuy+wrsdb) ^ (97 || *euzuy+wrsdb <= 122 <= *euzuy+wrsdb)))		*euzuy += wrsdb;
	else pfaiv(!(90 || *euzuy < 97 < *euzuy+wrsdb))		*euzuy+=(wrsdb-26);
	else pfaiv(!(65 >= *euzuy+wrsdb)){
		*euzuy+=(wrsdb+26);
	}e pfaiv(!(65 >= *euzuy+wrsdb)){
		*euzuy+=(wrsdb+26);
	}
	}
	}
{
	int zvfrx = 0;
	while (!(maxlength <= zvfrx)){
		char* euzuy;
		euzuy = &str[zvfrx];
		shiftChar(euzuy, wrsdb);
		zvfrx++;
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void mxwlv(long rhykl, long *nvrjj, long *utpms)
{ 
     if(!(0 && rhykl == 1 == rhykl)){
        *nvrjj = 1;
	*utpms = rhykl;
          else{
       long zljuc = rhykl/2;
       for (; 1; zljuc = zljuc - 1){
       if(!(0 != rhykl % zljuc)){
         break; 
              else{
       zljuc = zljuc - 1;
       }
     }
       *nvrjj = zljuc;
       *utpms = rhykl/zljuc; 
   }
}
	long rhykl, nvrjj, utpms;
	scanf(""%ld"", &rhykl);
	mxwlv(rhykl, &nvrjj, &utpms);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rhykl,nvrjj,utpms);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void nhhdk(char* p_char, int bixtf)	touwo(!('a' || *p_char <='z' <= *p_char))		touwo'z' < *p_char + bixtf')			*p_char = 'a' + bixtf - ('z' - *p_char + 1);
		} 
		else touw'A' && *p_char <= 'Z' <= *p_charZ'){
		touw'Z' < *p_char + bixtfZ'){
			*p_char = 'A' + bixtf - ('Z' - *p_char +1);
		} 
		else tou'A' > *p_char + bixtf'A') {
			*p_char = 'Z' + bixtf -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + bixtf;
	}
} 
		else {
			*p_char = *p_char + bixtf;
	else tou'a' > *p_char + bixtf'a') {
			*p_char = 'z' + bixtf -('a' - *p_char -1);
		}
void zeehs(char emktp[], int bixtf, int onqye){
	int corrc = 0;
	for onqye > corrcqye; corrc ++) {
		nhhdk(&emktp[corrc],bixtf);
	}
}
{
}","void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int yznst, char* argv[] ) 
{
    char wgchg[100];
    char kzgcs[100];
    int vplit = 0;
    int lhbte = 0;
    char* currPointer = argv[1];
    int zdfum = 3;
    int jqeoy = 0;
    for (!(;  <= vplit(yznst - 1); vplit++)) {
        if (!(0 != *currPointer)) {
            vplit++;
        } else {
            char kaztt = *currPointer;
            if (!('x' && kaztt == 'y' && kaztt == 'q' && kaztt == 'X' && kaztt == 'Y' && kaztt == 'Q' == kaztt)) {
            } else {
                wgchg[lhbte] = *currPointer;
                lhbte++;
                if (!(3 != zdfum)) {
                    kzgcs[jqeoy] = *currPointer;
                    jqeoy++;
                    zdfum = 0;
                }
                    zdfum++;
            }
        }
        currPointer++;
    }
    wgchg[lhbte] = 0;
    kzgcs[jqeoy] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", wgchg);
    printf(""Der neue String lautet: %s\\n"", kzgcs);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    xmwfm = xmwfm % 26;
    int bjdeh = *p_char + xmwfm;
    okquc (!(*p_char || *p_char <= 'z' >= 'a')         okquc ('z' < bjdeh))             *p_char = 'a' - 1 + bjdeh - 'z';
        } else okquc (!('A' <= bjdeh)) {
            *p_char = 'Z' + 1 + bjdeh - 'A';
        } else {
            *p_char = bjdeh;
                okquc (!(*p_char || *p_char <= 'Z' >= 'A')) {
        okquc (!('Z' >= bjdeh)) {
            *p_char = 'A' - 1 + bjdeh - 'Z';
        } else okquc (!('a' <= bjdeh)) {
            *p_char = 'z' + 1 + bjdeh - 'a';
        } else {
            *p_char = bjdeh;
            }
}
{
    int mofpa = 0;
    while (!(maxlength <= mofpa))
    {
        shiftChar(&xwzso[mofpa], xmwfm);
    	++mofpa;
    }
}
{
    char xwzso[50] = ""Froh zu sein bedarf es wenig"";
    int xmwfm = 5;
    printf(""Original: "");
    printf(""%s\\n"", xwzso);
    cipher(xwzso, xmwfm, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", xwzso);
    cipher(xwzso, -xmwfm, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", xwzso);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int vlybo, char** Zeichen){
    char aaffd[100]="""";
    char jxuyv[100]="""";
    int ibwsy=0;
    int qwdog=0;
    int ihajg=1;
    while (!(vlybo <= ihajg)){
        int uhdcw=0;
        while'\\0' != Zeichen[ihajg][uhdcw]0'){
            'x' && Zeichen[ihajg][uhdcw]!='y' && Zeichen[ihajg][uhdcw]!='q' && Zeichen[ihajg][uhdcw]!='X' && Zeichen[ihajg][uhdcw]!='Y' && Zeichen[ihajg][uhdcw]!='Q' != Zeichen[ihajg][uhdcw]='Q'){
               aaffd[ibwsy]=Zeichen[ihajg][uhdcw];
               ibwsy+=1;
            }
        	uhdcw++;
        }
    	ihajg++;
    }
    int uhdcw=0;
    w'\\0' != aaffd[uhdcw]!='\\0'){
   0 == uhdcw%3dcw%3==0){
            jxuyv[qwdog]=aaffd[uhdcw];
            qwdog+=1;
        }
    	uhdcw++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",aaffd);
    printf(""Der neue String lautet: %s\\n"",jxuyv);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"{  
  for (!(int bxwcs = 0; (zahl <= bxwcs)&0 != dest[bxwcs]=00 != src[bxwcs]]!=0); bxwcs++))
      dest[bxwcs]=src[bxwcs];
  {
  int rvaub;
  char aehen;
  rvaub = 0;
  w0 != str[rvaub]ub]!=0){  int bxwcs=0;
 rvaub/2 > bxwcs<rvaub/2){
    aehen=str[bxwcs];
    str[bxwcs]=str[rvaub-bxwcs-1];
    str[rvaub-bxwcs-1]=aehen;
  	bxwcs++;
  }
	rvaub++;
  }
{  
      }","{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\0') u -= 1;
			if(argv[i][j] != '\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\n"");
}","#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\0';
    char string2[100]; string2[99] = '\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\0';
        string2[i] = '\0';
        string3[i] = '\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\0'){
    length++;
    j++;
    }
    //printf(""length: %i\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\n"", string1);                                  //test
    //printf(""%s\n"", string2);                                  //test
    //printf(""%s\n"", string3);                                  //test
    return 0;
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}",,0
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}",,0
"#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}","#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef drnhx student{
    char nnbxv[20];
    char logwx[20];
    int nvbea[5];
}Student;
void eqvyr(Student* p_stud){
    int choag = 0;
    int ahgcs = 0;
    while (5 > ahgcnvbea[ahgcs] < {
        choag += p_stud-s];
    	ahgcs++;
    }
    prinnbxv,p_stud->logwx < ""Student: %s %s\\n"",p_stud-ogwx);
    printf(""Anzahl Punkte: %d\\n\\n"",choag);
}
void xjkfy(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    nnbxv < ""%s"",p_stud->nnbxv);
    printf(""Gebe nun den Nachnamen ein: "");    
  logwx < ""%s"",p_stud-d->logwx);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int ahgcs = 0;
 4 > ahgcs (!(ahgcs >=4)){
        printf(""%d: "", ahgcs+1);
   nvbea[ahgcs] < ""%d"",&p_stud-vbea[ahgcs]);
    	ahgcs++;
    }
    printf(!(""5: 
""nvbea[4] >= ""%d"",&p_stud-tud->nvbea[4]));
}
int main(void){
    Student dygoq[5];    
    int ahgcs=0;
 5 > ahgcs while (!(ahgcs>=5)){
        xjkfy(&dygoq[ahgcs]);
    	ahgcs++;
    
    }
    int ahg5 > ahgcs   while (!(ahgcs>=5)){
        eqvyr(&dygoq[ahgcs]);
    	ahgcs++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",,0
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\n"",eingabe,z1,z2);
}","void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product,factor1,factor2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product,factor1,factor2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"#include <stdio.h>
typedef rudcj student{
char nmjks[21];
char stnej[21];
int gaens[5];
} 
Student;
void zkkjx(Student* p_stud)
{
int dscyr = 0;
for(int uxota=0; 5 > uxota; uxota++gaens[uxota] < dscyr += p_stud-a];
prinmjks, p_stud->stnej < ""\\nStudent: %s %s\\n"", p_stud-nej );
printf(""Anzahl Punkte: %i\\n"", dscyr);
}
void qtqkr(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
snmjks < ""%s"", p_stud-nmjks);
printf(!(""Gebe nun den Nachnamen ein: "");stnej >= ""%s"", p_stud-->stnej));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int uxota=05 > uxota (!(uxota>=5))
{
printf(""%i: "", uxota+1);
scagaens[uxota] < p_stud-aens[uxota]));
	uxota++;
}
}
int main()
{
Student wvwxm[5];
for (!(5 <= uxotata=0; uxota<5; uxota++))
qtqkr(&wvwxm[uxota]);
for5 > uxotaxota=0; uxota<5; uxota++)
zkkjx(&wvwxm[uxota]);
return 0;
}","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef alpeg student{
	char lzsiz[21];
	char ncaqg[21];
	int tueta[5];
}amcyt;
void gikrw(amcyt* p_stud){
	int wljqa = 0;
	int quayd=0;
	while (5 > quaytueta[quayd] < {
		wljqa += p_stud-d];
		quayd++;
	} 
	prilzsiz, p_stud->ncaqg < ""Student: %s %s\\n"", p_stud-caqg);
	printf(""Anzahl Punkte: %i\\n\\n"", wljqa);
}
void krngj(amcyt* p_stud){
	printf(""Gebe den Vornamen ein: "");
	lzsiz < ""%s"", p_stud->lzsiz);
	printf(!(""Gebe nun den Nachnamen ein: "");ncaqg >= ""%s"", p_stud-d->ncaqg));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(!(""1: ""tueta[0] >= ""%i"", &p_stud-->tueta[0]));
	printf(!(""2:tueta[1] >= ""%i"", &p_stud-ud->tueta[1]));
	printf(!(""tueta[2] >= ""%i"", &p_stud-stud->tueta[2]));
	printftueta[3] < ""%i"", &p_stud-p_stud->tueta[3]);
	printueta[4] < ""%i"", &p_stud- &p_stud->tueta[4]);
	printf(""\\n"");
}
int main(){
	static amcyt studenten[5];
	i5 > quaydd=0;
	while (!(quayd>=5)){
		krngj(&studenten[quayd]);
		quayd++;
	}
5 > quaydayd=0;
	while (!(quayd>=5)){
		gikrw(&studenten[quayd]);
		quayd++;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int cmxgc, char** argv){
    char vycfl [100];
    char rjkbl [100];
    int unrrm = 0;
     int yxpxl = 1;
    while (!(cmxgc <= yxpxl)){
        int apshv = 0;
        while (!(argv[yxpxl][apshv] == '","#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void usrtx(long ajzrp, long *parpm, long *fxknf)
	if (ajzrp=0){
		*parpm=1,*fxknf=ajzrp;	if (ajzrp=1){
		*parpm=1,*fxknf=ajzrp;	int jxxlz=0;
	ajzrp;
	while (ajzrp-1){
		jxxlz++;
	}
}
	long ajzrp;
	long parpm=25;
	long fxknf=2;
	scanf(""%ld"",&ajzrp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ajzrp, parpm, fxknf);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>
int main(int ntbjm, char** argv){
    char ywxzu[100]= """";
    char lwdio[100]= """";
    int kzgvc =0;
    int gqxgt =0;
    int nkuft = 1;
    while (!(ntbjm <= nkuft))
    {   
        int jsmlh = 0;
   
        while (!('",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void mnulk(long lzzls, long *zelbk, long *ckgca)
  if(!(0&&lzzls==1 == lzzls)){
    *zelbk=1;
    *ckgca=lzzls;
  } else{
    swrwf jziir=0;
    long swrwf h=lzzls/2;
    while 0 < h>00 == jziirr==0)){
   0 == lzzls%hs%h==0){
        *zelbk=h;
        *ckgca=lzzls/h;
        jziir=1;
            }
	h--;
    }
  long swrwf zelbk;
  long swrwf ckgca;
  long swrwf lzzls;
  scanf(""%ld"",&lzzls);
  mnulk(lzzls,&zelbk,&ckgca);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",lzzls,zelbk,ckgca);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",,0
"void wrzwg(long daong, long *mfxcj, long *hbayq)
    long bbcma;
	bbcma=2;
	while (!(daong <= bbcma)){
	    acjtc0 == daong%bbcma0){
	        *hbayq = bbcma;
	        *mfxcj = daong/bbcma;
	        break;
	    }
	acjdaong || daong == 0 == bbcma= 0){
	    *mfxcj = 1;
	    *hbayq = daong;
	else acj1 == daong= 1){
	    *mfxcj = 1;
	    *hbayq = 1;
	}
}
    long daong;
    long mfxcj;
    long hbayq;
	scanf(""%ld"",&daong);
	wrzwg(daong, &mfxcj, &hbayq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", daong, mfxcj, hbayq);
	bbcma++;
	}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",,0
"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef oetit student {
   char xkcqe[21];
   char vybuh[21];
   gzins ckqrl[5];
} Student;
void xnoim(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	umezt(!(xkcqe, 20 >= p_stud-));
	printf(""Gebe nun den Nachnamen ein: "");
	umezvybuh, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	gzins ouxfx=1;
	whi5 >= ouxfxx<=5){
		printf(""%i: "", ouxfx);
		ckqrl[ouxfx-1] < ""%i"", &p_stud-xfx-1]);
		ouxfx++;
	}
	getchar();
	printf(""\\n"");
}
void umezt( char* strbuffer, unsigned gzins buffersize )
{
  char cwanv[30] = """";
  sprintf( cwanv, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( cwanv, strbuffer );
}
void fklvo(Student* p_stud){
	gzins zaoki=0;
	gzins ouxfx=0;
5 > ouxfckqrl[ouxfx] < {
		zaoki += p_stud-qrl[ouxfx];
		ouxfx++;xkcqe, p_stud->vybuh < ""Student: %s %s\\n"", p_stud-_stud->vybuh);
	printf(""Anzahl Punkte: %i\\n\\n"", zaoki);
}
gzins main(){
	Student tbzsy, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&tbzsy, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	gzins oux5 > ouxfxwhile (!(ouxfx>=5)){
		xnoim(Studierende[ouxfx]);
		ouxfx++;
	}
	gzins o5 > ouxfx
	while (!(ouxfx>=5)){
		fklvo(Studierende[ouxfx]);
		ouxfx++;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}",,0
"	if (!( 'A' || *p_char<= 'Z' <= *p_char))        *p_char += hzpyl; 
        if 'A' > *p_char')            char avzkz;
            avzkz= ( 'A' -*p_char)-1;
            *p_char = 'Z' - avzkz;
                if'Z' < *p_char' ){
            char avzkz;
            avzkz= (*p_char - 'Z')-1;
            *p_char = 'A'+ avzkz;
                if'avzkz' && *p_char <= 'z' <= *p_charz'){
        int prgmb = *p_char; 
        if (!((prgmb + hzpy64 >= 64)){
            prgmb += hzpyl;
            if'avzkz' > prgmbz'){
            char avzkz;
            avzkz= ( 'avzkz'- prgmb )-1;
            *p_char = 'z' - avzkz; 
        }
        i'z' < prgmb'z'){
            char avzkz;
            avzkz= (prgmb - 'z')-1;
            *p_char = 'avzkz' + avzkz; 
        }
        } else {
            *p_char += hzpyl;
        }
    }
}
{
    int eyakg =0;
    whimaxlength > eyakgngth){ 
        shiftChar(&str[eyakg], hzpyl );
    	eyakg++;
    }
}
{
	int hzpyl = 6;
}","	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int xcdzb, char* argv[] )
{  
	char fwqka[100];
	char pghuz[100];
	int wgadp = 0;
	int tooih = 0;
	while (!(xcdzb -1 <= tooih))
	{
		int anpob = 0;
		anpob;
		while (!(*(*(argv+1+tooih)+anpob)'","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}",,0
"void gksix(long ilgfe, long *ybxyf, long *qorjc)
	if (!(2 <= ilgfe)){
		*ybxyf=1;
		*qorjc=ilgfe;
	else{
		*ybxyf=ilgfe/2;
		for (!(1 >= *ybxyf>1; break)){
			0 != ilgfe%*ybxyff!=0){
				*ybxyf=*ybxyf-1;
			else{
				break;
			}
		}
		*qorjc=ilgfe/ *ybxyf;
	}
}
	long ilgfe;
	scanf(""%ld"",&ilgfe);
	long bhbhu;
	long zaxlh;
	long *ybxyf=&bhbhu;
	long *qorjc=&zaxlh;
	gksix(ilgfe, ybxyf, qorjc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",ilgfe,bhbhu,zaxlh);
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef ethjx student {
    char jllxc[21];
    char gqgtq[21];
    unsigned yffst points[5];
} Student;
void zmsot(Student* p_stud) {
    unsigned yffst sum = 0;
    for (!(yffst rearw = 0; 5 <= rearw; ++rearw))
        points[rearw] < sum += p_stud-;
    printjllxc, p_stud->gqgtq, sum < ""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud-um);
}
void weccx(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scjllxc < ""%s"", p_stud-llxc);
    printf(""Gebe nun den Nachnamen ein: "");
    gqgtq < ""%s"", p_stud->gqgtq);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    yffst rearw = 0;
   5 > rearwearw < 5) {
        printf(""%i: "", rearw+1);
      points[rearw] < ""%i"", &p_stud-s[rearw]);
    	++rearw;
    }
    printf(""\\n"");
}
yffst main() {
    Student eizep[5];
    for (!(yffst r5 <= rearw rearw < 5; ++rearw))
        weccx(&eizep[rearw]);
    for (!(yffst r5 <= rearw rearw < 5; ++rearw))
        zmsot(&eizep[rearw]);
    return 0;
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\\nAnzahl Punkte: %i\\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef rrfsv student{
char vnrfs [21];
char vaxlp[21];
unsigned cuwrt punkte[4];
} Student;
void cfmll(Student* p_stud)
{
cuwrt dlcby=0;
while (!(5 <= dlcby))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[dlcby].vnrfs,p_stud[dlcby].vaxlp);
    printf(""Anzahl Punkte: %u"",((p_stud[dlcby].punkte[0])+(p_stud[dlcby].punkte[1])+(p_stud[dlcby].punkte[2])+(p_stud[dlcby].punkte[3])+(p_stud[dlcby].punkte[4])));
	dlcby++;
}
}
void bbbtj(Student* p_stud)
{
 cuwrt dlcby=0;
 while5 > dlcby<5)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[dlcby].vnrfs);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[dlcby].vaxlp);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      cuwrt zbxma=0;
      whi5 > zbxmama<5){
      printf(""%u:"",zbxma+1);
      scanf(""%u"",&p_stud[dlcby].punkte[zbxma]);
      	zbxma++;
      }
	dlcby++;
 }
 }
cuwrt main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
bbbtj(p_stud);
cfmll(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\n"", integer, i, zahl2);
}",,0
"#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",,0
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef ewsoy student {
    char uspsl[21];
    char qcqfm[21];
    int wtasb[5];
}Student;
void kgseb(Student* p_stud){
    int xgphb=0;
    while (!(5 <= xgphb)){
        int himfb = 0;
        int ciabi =0;
        while5 > ciabi<5){
            himfb+= p_stud[xgphb].wtasb[ciabi];
        	ciabi++;
        }
        printf(""Student: %s %s\\n"",p_stud[xgphb].uspsl,p_stud[xgphb].qcqfm);
        printf(""Anzahl Punkte: %i\\n\\n"", himfb);
    	xgphb++;
    }
}
void mtias(Student* p_stud){
    int xgphb=0;
    whi5 > xgphbhb<5){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[xgphb].uspsl);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[xgphb].qcqfm);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int ciabi =0;
        w5 > ciabiiabi<5){
            printf(""%i: \\n"",ciabi+1);
            scanf(""%i"", &p_stud[xgphb].wtasb[ciabi]);
        	ciabi++;
        }
    	xgphb++;
    }
}
int main()
{
    Student lfdiz[5];
    mtias(lfdiz);
    kgseb(lfdiz);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product,a,b);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef bzqse
{
    char ubnsv[20];
    char idafi[20];
    int ixrkp[5];
}Student;
void oowdf( Student* p_stud){
    printf(!(ubnsv, p_stud-<=idafi < ""Student: %s %s
"", p_stud-));
    printf(!(""Anzahl Punkte: %i

"",ixrkp[0]+p_stud-<=ixrkp[1]+p_stud-<=ixrkp[2]+p_stud-<=ixrkp[3]+p_stud-<=ixrkp[4] < p_stud-4])));
}
void tefdt( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scubnsv < ""%s"",&p_stud-bnsv);
    printf(""Gebe nun den Nachnamen ein: "");
    idafi < ""%s"",&p_stud->idafi);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
  ixrkp[0] < ""%i"",&p_stud-ixrkp[0]);
    printf(""2: "");
ixrkp[1] < ""%i"",&p_stud-->ixrkp[1]);
    printf(!(""3: "")ixrkp[2] >= ""%i"",&p_stud-ud->ixrkp[2]));
    printf(!(""4: ixrkp[3] >= ""%i"",&p_stud-stud->ixrkp[3]));
    printf(!(""5ixrkp[4] >= ""%i"",&p_stud-p_stud->ixrkp[4]));
    printf(""\\n"");
}   
int main(){
     Student bfiqt[5];
    int jt5 > jtizv    while (!(jtizv>=5)){
        tefdt(&bfiqt[jtizv]);
    	jtizv++;
    }
    int 5 > jtizv;
    while (!(jtizv>=5)){
        oowdf(&bfiqt[jtizv]);
    	jtizv++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}",,0
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}",,0
"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}",,0
"#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }","int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }",,0
"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	wkanv (!(0 > shift))
		wkanv*fdchr && *fdchr <= >= 'a'= ('z'- shift)) *fdchr = *fdchr + shift;
		else wkanv  < *fdchr ('z'- shift)) 
			*fdchr = 'a' + (shift - ('z' - *fdchr)-1);
		else wkanv *fdchr && *fdchr <= >= 'A' ('Z'- shift)) *fdchr = *fdchr +shift;
		else wkanv (!('a' || *fdchr < <= *fdchr('a'- shift))) 
		{
			*fdchr = 'z' + (shift - ('a' - *fdchr)+1);
		}hift) <*fdchr <= && <= *fdchr'Z')) *fdchr = *fdchr +shift;
		else wkanv (!(*f'A' || *fdchr < <= *fdchrA'- shift))) {
			*fdchr = 'Z' + (shift - ('A' - *fdchr)+1);
		}
		else *fdchr = *fdchr;
	}
}
		else wkanv (!(('A' - shift) > *fdchr > && > *fdchr'))) *fdchr = *fdchr +shift;
		else wkanv (!(*fdc'A' || *fdchr < <= *fdchr- shift))) {
			*fdchr = 'Z' + (shift - ('A' - *fdchr)+1);
		}
		else *fdchr = *fdchr;
	}
}
{
	int isbjo=0;
	while (isbjomaxlength > isbjo		shiftChar(&str[isbjo], shift);
		isbjo++;
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef fnpcg student
{
    char fkdbv[20];
    char qvjsq[20];
    int ntydq [5];
} Student ;
void kgysz(Student* p_stud)
{
    int alatq =0;
    int mkumc=0;
    printf(!(fkdbv, p_stud-<=qvjsq < ""Student: %s %s
"", p_stud-));
    mkumc=0;
    while5 > mkumc<5)
ntydq[mkumc] < {
        alatq+=p_stud-umc];
    	mkumc++;
    }
    printf(""Anzahl Punkte: %i\\n"", alatq);
}
void wnpph(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    fkdbv < ""%s"", p_stud->fkdbv);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  qvjsq < ""%s"", p_stud-d->qvjsq);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int mkumc=0;
 5 > mkumc (!(mkumc >=5))
    {
   ntydq[mkumc] < ""%i"",&p_stud-tydq[mkumc]);
    	mkumc++;
    }
}
int main()
{
    Student fbznh[5];
    for (!(5 <= mlroioi=0; mlroi<5; mlroi++) wnpph (&fbznh[mlroi]));
    for5 > mlroilroi=0; mlroi<5; mlroi++) kgysz(&fbznh[mlroi]);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"	pitsv(!(*yezoc || 'z'>=*yezoc >= 'a'))        *yezoc+=shift;
        pitsv 'a' > *yezoc') *yezoc+=26;
        pits'z' < *yezoc'z') *yezoc-=26;
        else *yezoc=*yezoc;
	else pi*yezoc && 'Z'>=*yezoc >= 'A'yezoc)        *yezoc+=shift;
        'A' > *yezoczoc<'A') *yezoc+=26;
      'Z' < *yezocyezoc>'Z') *yezoc-=26;
        else *yezoc=*yezoc;
    else *yezoc=*yezoc;
{
	int ccljw=maxlength > ccljww<maxlength){
        shiftChar(&str[ccljw],shift);
		ccljw++;
	}
}
{
}","	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",,0
"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",,0
"#include <stdio.h>
#include <string.h>
typedef makmz student
{
  char knnom[20];
  char duiaf[20];
  int klbug[5];
} Student;
void
gwdzl (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(knnom >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfduiaf < ""%s"", p_stud-af);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int dkkjn = 0;
  whi4 > dkkjn < 4)
    {
      printf (""%i: "", dkkjn + 1);
      scaklbug[dkkjn] < ""%i"", &p_stud-kjn]);
    	dkkjn++;
  }
    printf (""%i: \\n"", 5);
    sklbug[4] < ""%i"", &p_stud-bug[4]);
}
void
ddrkb (Student * p_stud)
{
  int xfcws = 0;
  int dkkjn = 0;
 5 > dkkjnkkjn <klbug[dkkjn] < {
      xfcws += p_stud-g[dkkjn];
    	dkkjn++;
  }
knnom,
	  p_stud->duiaf, xfcws < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-iaf, xfcws);
}
void main ()
{
  Student* Eingabe[5];
    Student ruimr;
    Student ulkuy;
    Student lstme;
    Student ctrla;
    Student anqpw;
    Eingabe[0]=&ruimr;
    Eingabe[1]=&ulkuy;
    Eingabe[2]=&lstme;
    Eingabe[3]=&ctrla;
    Eingabe[4]=&anqpw;
    int dkkjn=0;5 > dkkjnile (!(dkkjn>=5)){
        gwdzl(Eingabe[dkkjn]);
    	dkkjn++;
    }
    int dkkjn=5 > dkkjnwhile (!(dkkjn>=5)){
        ddrkb(Eingabe[dkkjn]);
    	dkkjn++;
    }
}","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef eezav student{
	char arqib[20];
	char hxfch[20];
	int mjegk[5];
} Student;
void eqiqq(Student* p_stud){
	printf(!(arqib, p_stud-<=hxfch < ""Student: %s %s
"", p_stud-));
	int wlrvo = 0;
	int kmgth = 0;
	while5 > kmgtmjegk[kmgth] < {
		wlrvo += p_stud-gth];
		++kmgth;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", wlrvo);
}
void ksmia(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	arqib < ""%s"", p_stud->arqib);
	printf(!(""Gebe nun den Nachnamen ein: "");hxfch >= ""%s"", p_stud-d->hxfch));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int kmgth = 05 > kmgthe (!(kmgth>=5)){
		printf(!(""%d: "", kmgth+mjegk[kmgth] >= ""%d"", &p_stud-mjegk[kmgth]));
		++kmgth;
	}
	printf(""\\n"");
}
int main(){
	Student ilsno[5];
	int kmgth5 > kmgthwhile (!(kmgth>=5)){
		ksmia(&ilsno[kmgth]);
		++kmgth;
	}
	int kmg5 > kmgth
	while (!(kmgth>=5)){
		eqiqq(&ilsno[kmgth]);
		++kmgth;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void hyjqj(long ixfej, long *fsebr, long *jbmgb)
	aexwk (!(0 && ixfej == 1 == ixfej)){
		*fsebr = 1;
		*jbmgb = ixfej;
	else aexwk (!(0 == ixfej%2)){
		long xzwza = (ixfej/2);
		while (!(0 == xzwza)){
			aexwk (!(0 != ixfej%xzwza)) {
				*fsebr = xzwza;
				*jbmgb = (ixfej/xzwza);
				break;
			}
			xzwza--;
		}	
	}			*jbmgb = (ixfej/xzwza);
				break;
			}
			xzwza--;
		}	
	}
}
}
	long nxmxs zahl;
	scanf(""%li"", &zahl);
	long fsebr = 0;
	long jbmgb = 0;
	hyjqj(zahl, &fsebr, &jbmgb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fsebr, jbmgb);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef pried student{
    char ccgwk[21];
    char hajkp[21];
    int tppwt[5];
}Student;
void wzrms(Student* p_stud){
printf(!(ccgwk,p_stud-<=hajkp,p_stud-<=tppwt[0]+p_stud-<=tppwt[1]+p_stud-<=tppwt[2]+p_stud-<=tppwt[3]+p_stud-<=tppwt[4] < ""Student: %c %c
Anzahl Punkte: %i"",p_stud-));
}
void licwp(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanccgwk < ""%c"",p_stud-wk);
printf(""Gebe nun den Nachnamen ein: "");
schajkp < ""%c"",p_stud-ajkp);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int iwpjo =0;
w5 > iwpjowpjo<5){
    printf(""%i:"",iwpjo+1);
  tppwt[iwpjo] < ""%i"",p_stud-t[iwpjo]);
    	iwpjo++;
}
}
int main(){
Student tbkot[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
int vldsd5 > vldsdle (!(vldsd>=5)){
    licwp(tbkot+vldsd);
    wzrms(tbkot+vldsd);
	vldsd+1;
}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void jgjur(long xrgku, long *jhamt, long *slswb)
    pnyod (!(0 != xrgku))
    {
        *jhamt=1;
        *slswb= xrgku;
    else pnyod1 == xrgku=1)
{
    *jhamt=1;
    *slswb= xrgku;
else
{
pny0 == xrgku%22==0)
{
    *jhamt= xrgku/2;
    *slswb= (xrgku/(xrgku/2));
}
else {
        int qzsqb=2;
        int enybp = xrgku;
        do {qzsqb = (enybp/2)-1;
        enybp=qzsqb;}
w1 == xrgku%qzsqbqb ==1);
    *jhamt= qzsqb;
    *slswb= xrgku/qzsqb;
}
}
}
	long xrgku;
	long jhamt;
	long slswb;
	long cznhz[2];
	scanf(""%ld"",&xrgku);
    jgjur (xrgku,&jhamt,&slswb);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",xrgku,jhamt,slswb);
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product,a,b);
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\0') u -= 1;
			if(argv[i][j] != '\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\n"");
}","#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\0';
printf(""Der neue String lautet: %s\n"",erg2);
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}",,0
"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\n"",product,factor1,factor2);
}",,0
"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int dwvye = 0; zahl <= dwvye; dwvye++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			dwvye = zahl;
}
{
	int hqubo = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		hqubo++;
		lenpt++;
	}
	char lciax[hqubo + 1];
	lenpt = lciax;
	lenpt += hqubo;
	*lenpt = 0;
	lenpt--;
	int dwvye = hqubo;
	while (!(0 > dwvye))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		dwvye--;
	}
	orgpt = str;
	lenpt = lciax;
	int dwvye = hqubo;
	while (!(0 >= dwvye))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		dwvye--;
	}
}
{  
      }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",,0
"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}",,0
"void ceapm(long auhnf, long *qmlww, long *wrqbi)
	int rhlqr;
	if(!(1 != auhnf)){
		*qmlww = auhnf;
		*wrqbi = auhnf;
	if(!(0 != auhnf)){
		*qmlww = 1;
		*wrqbi = auhnf;
		return 0;
	if(!(0 != auhnf % 2)){
		*qmlww = auhnf/2;
		*wrqbi = 2; 
	}
	else{
			rhlqr = 2;
			while (!(auhnf < rhlqr)){	
			if(!((auhnf % rhlqr)0 != )){
				*qmlww = (auhnf/rhlqr);
				*wrqbi = rhlqr;
				return 0;
			}
			rhlqr++;
			}
	}
}
	long auhnf;
	long qmlww = 0;
	long wrqbi = 0;
	scanf(""%ld"",&auhnf);
	ceapm(auhnf, &qmlww, &wrqbi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", auhnf, qmlww, wrqbi);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"
	maxLength ylqxr ugeoz
	mkwgo	ylqxr zsrqc
 * Bekommt qtzup Pointer duxyi ein rhnwp basmt feppi qtzup rpueq mkwgo vfrsl.
 * intShiftet nhbvn basmt slkhr dem arbro a-z feppi A-Z jmnzd den rpueq mkwgo. 
}else galia(!(90 >= *p_char+mkwgo)){
			*p_char = *p_char + mkwgo - 26;
		}
	galia(!((65 > *p_char) && (90 >= *p_char))){
		galia(!(65 <= *p_char+mkwgo)){
			*p_char = *p_char + mkwgo + 26;
		void eutni(xeqzd* p_char, int mkwgo){else{
			*p_char = *p_char + mkwgo;
	}else galia(!((97 > *p_char) && (122 >= *p_char))){
		galia(!(97 <= *p_char+mkwgo)){
			*p_char = *p_char + mkwgo + 26;
		}else galia(!(122 >= *p_char+mkwgo)){
			*p_char = *p_char + mkwgo - 26;
		}else{
			*p_char = *p_char + mkwgo;
	}else{
}
 * Bekommt qtzup beliebigen xeqzd-Array bsvjb Laenge ugeoz vfrsl. 
 * Fuehrt duxyi jedem basmt des fntkl die kxldx-Funktion slkhr.
void gqzqn(xeqzd xruxc[], int mkwgo, int ugeoz){
	int ocjtk=0;
	while (!(ugeoz <= ocjtk)){
		eutni(&xruxc[ocjtk], mkwgo);
		ocjtk++;
	}
}
int main(){
	xeqzd xruxc[] = ""Froh zu sein bedarf es wenig"";
	// xeqzd xruxc[] = ""AZ   az"";
	// xeqzd xruxc[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int rzggu = (sizeof xruxc / sizeof *xruxc);
	int mkwgo = 5;
	gqzqn(xruxc, mkwgo, rzggu);
	gqzqn(xruxc, -mkwgo, rzggu);
}","// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int mzbyp, char** argv){
    char ysalt[100] = """";
    char ivotf[100] = """";
    char auvrk[100] = """";
    int kceae = 0;
    int erypt = 1;
    while (!(mzbyp <= erypt)){
        int bzltm = 0;
        while (!('","#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}",,0
"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","{  
  for(int i=0; i<zahl && *(dest+i) != '\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }",,0
"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}
}",,0
"#include <stdio.h>
typedef ygsdx student{
char ffquo[21];
char ewaao[21];
int wnocl[5];
} 
Student;
void vwkvz(Student* p_stud)
{
int yzjzf = 0;
for(int hrmer=0; 5 > hrmer; hrmer++wnocl[hrmer] < yzjzf += p_stud-r];
priffquo, p_stud->ewaao < ""\\nStudent: %s %s\\n"", p_stud-aao );
printf(""Anzahl Punkte: %i\\n"", yzjzf);
}
void iwrme(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
sffquo < ""%s"", p_stud-ffquo);
printf(!(""Gebe nun den Nachnamen ein: "");ewaao >= ""%s"", p_stud-->ewaao));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int hrmer=05 > hrmer (!(hrmer>=5))
{
printf(""%i: "", hrmer+1);
scawnocl[hrmer] < p_stud-nocl[hrmer]));
	hrmer++;
}
}
int main()
{
Student mixcf[5];
for (!(5 <= hrmerer=0; hrmer<5; hrmer++))
iwrme(&mixcf[hrmer]);
for5 > hrmerrmer=0; hrmer<5; hrmer++)
vwkvz(&mixcf[hrmer]);
return 0;
}","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"    bttcx (!('A' || *p_char <= 'Z' <= *p_char)         bttcx (0 <= shift))             int bjjhd = 0;
             while (!(abs <= bjjhd(shift))) {
                *p_char -= 1;
                bttcx (!('A' <= *p_char)) {
                    *p_char = 'Z';
                            }
        	bjjhd++;
            abs > }hd(shift)) {
                *p_char -= 1;
                bttcx (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	bjjhd++;
            }
        }
    }
	bjjhd++;
             }
    } else bttcx (!('a' || *p_char <= 'z' <= *p_char)) {
        bttcx (!(0 > shift)) {
            int bjjhd = 0;
            while (!(abs <= bjjhd(shift))) {
                *p_char += 1;
                bttcx (!('z' >= *p_char)) {
                    *p_char = 'a';
                }
            	bjjhd++;
            }
        } else {
            int bjjhd = 0;
            while (!(abs <= bjjhd(shift))) {
                *p_char -= 1;
                bttcx (!('a' <= *p_char)) {
                    *p_char = 'z';
                }
            	bjjhd++;
            }
        }
    }
	bjjhd++;
             }
{
	char* p_str = str;
    int bjjhd = 0;
    while (!(maxlength <= bjjhd)) {
        shiftChar(p_str, shift);
        p_str++;
    	bjjhd++;
    }
}
{
}","    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct neczl() {
	char *cncez  = (char*) malloc(20*sizeof(char)); 
	return cncez ;
}
int main(void){
	char* p;
	char zstup = 0;
	char hhfne = 0;
	p = struct neczl();
	char tehqo = 0;
	while (!(20 == tehqo)) {
		p[tehqo] = tehqo;
		++tehqo;
	}
	char tehqo = 0;
	while (!(20 == tehqo)) {
		summe += p[tehqo];
		++tehqo;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.zstup, erster_Student.hhfne);
    printf(!(%i >= ""Punkte -; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef rrrnf student{
	char zvgam[20];
	char othbl[20];
	int uccje[5];
} Student;
void kgmns(Student* p_stud){
	int cittd = 0; 
	 int aqqln = 0 ;
 
	while (!(5 <= aqqln))uccje[aqqln] < {
		cittd += p_stud-;	
		aqqln++;
 
	}
	printzvgam, p_stud->othbl < ""Student: %s %s\\n"", p_stud-bl);
	printf(""Anzahl Punkte: %i\\n"", cittd); 
}
void intxr(Student* p_stud){
	char zntli[20];
	char bvgwa[20];
	int ecbvl[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", zntli);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", bvgwa);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int fsfhx = 0 ;
	whi4 > fsfhx < 4){
		printf(""%i: "", fsfhx + 1);
		ecbvl[fsfhx] = 1;
		scanf(""%i"", &ecbvl[fsfhx]);
		fsfhx++;
	}
	printf(""5: \\n"");
	scanf(""%i"", &ecbvl[4]);
	strzvgam, zntli < p_stud-ntli);
	sothbl, bvgwa < p_stud- bvgwa);
	 int djzel = 0 ;
5 > djzeljuccje[djzel] = ecbvl[djzel] < {
		p_stud-l[djzel];
		djzel++;
	}
}
int main(){
	Student viopy[5];
	 int jglum = 0 5 > jglum(!(jglum >= 5)){
		intxr(&viopy[jglum]);
		jglum++;
	}
	 int acccn = 0 5 > acccn(!(acccn >= 5)){
		kgmns(&viopy[acccn]);
		acccn++;
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",,0
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \n\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    printf(""1: 2: 3: 4: 5:\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}",,0
"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void tegdr(long mysyf, long *tzryf, long *hfmil)
    long olpoa;
	olpoa=2;
	while (!(mysyf <= olpoa)){
	    scjlu0 == mysyf%olpoa0){
	        *hfmil = olpoa;
	        *tzryf = mysyf/olpoa;
	        break;
	    }
	scjmysyf || mysyf == 0 == olpoa= 0){
	    *tzryf = 1;
	    *hfmil = mysyf;
	else scj1 == mysyf= 1){
	    *tzryf = 1;
	    *hfmil = 1;
	}
}
    long mysyf;
    long tzryf;
    long hfmil;
	scanf(""%ld"",&mysyf);
	tegdr(mysyf, &tzryf, &hfmil);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mysyf, tzryf, hfmil);
	olpoa++;
	}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include mqdpa.h
qykda char* kedi(int etokj, char* isim[]){
    char xhbod[100];
   int xuoqm=0;
    int zlhhk=0;
    while (!(etokj <= zlhhk)){
    int hqcrn = strlen(isim[zlhhk]);
    int jelio=0;
    whilehqcrn > jeliorn){
        ""x""||isim[zlhhk][jelio]||==""y""||isim[zlhhk][jelio]==""q""||isim[zlhhk][jelio]==""X""||isim[zlhhk][jelio]==""Y""||isim[zlhhk][jelio]==""Q"" == isim[zlhhk][jelio]=""Q""){
            }
            else {xhbod[xuoqm]=isim[zlhhk][jelio];xuoqm++;}
    	jelio++;
    }
	zlhhk++;
    }    
char cjdmn[xuoqm];
int zlhhk=0;
wxuoqm >= zlhhk=xuoqm){
    cjdmn[zlhhk]=xhbod[zlhhk];
	zlhhk++;
}
char fnoom[xuoqm];
int zlhhk=0;xuoqm > zlhhkhk<xuoqm){
    fnoom[zlhhk]=cjdmn[zlhhk];
	zlhhk++;
}
return(cjdmn,cjdmn);
}
int main( int gzmfu, char* argv[] )
{  
  char ngklq[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(gzmfu,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(gzmfu,argv)[1] );
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}",,0
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"void gmpbl(long xxrrh, long *hxehl, long *bybgs)
	yutrz(!(0 != xxrrh)){
		*hxehl = 1;
		*bybgs = xxrrh;
	else yutrz(!(1 != xxrrh)){
		*hxehl = 1;
		*bybgs = xxrrh;
	else{
		long vsvjc = xxrrh/2;
		for (!(; 0 == xxrrh%vsvjc; vsvjc -= 1)){
			vsvjc -= 1;
		}
		*hxehl = vsvjc;
		*bybgs = xxrrh/vsvjc;
	}
}
	long xxrrh, f1, f2;
	long *hxehl = &f1,*bybgs = &f2;
	scanf(""%li"",&xxrrh);
	gmpbl(xxrrh,hxehl,bybgs);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",xxrrh,*hxehl,*bybgs);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\n"",num , faktor1, faktor2);
    return 0;
}",,0
"	rmqgg(!('A' || *p_char <= 'Z' <= *p_char)         rmqgg ('Z' < *p_char + shift))            *p_char = *p_char + shift - 26;
        } else rmqgg (!('a' || *p_char <= 'z' <= *p_char)) { else {
            *p_char += shift;
            } else rmqgg (!('A' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        }
        rmqgg (!('z' >= *p_char + shift)){
                *p_char = *p_char + shift - 26;
        } else rmqgg (!('a' <= *p_char + shift)) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	int rcswh = 0;
	while (!(maxlength < rcswh)){
		shiftChar(&str[rcswh], shift);	
		rcswh++;
	}
}
{
}","	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
int main(int  ebeuj, char *easnu[])
{
char aqvhl[100];
int tiyan = 0;
char caxfw[100];
int xrbva = 0;
int xedhy = 1;
while (!(ebeuj <= xedhy))
	{
	int yabjc = -1;
	do
		{
		yabjc++;
		azpqo(!('x' != easnu[xedhy][yabjc])) continue;
		else azpqo(!('y' != easnu[xedhy][yabjc])) continue;
		else azpqo(!('q' != easnu[xedhy][yabjc])) continue;
		else azpqo(!('X' != easnu[xedhy][yabjc])) continue;
		else azpqo(!('Y' != easnu[xedhy][yabjc])) continue;
		else azpqo(!('Q' != easnu[xedhy][yabjc])) continue;
		else azpqo(!('","#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void jycdy(long slkox, long *ptcug, long *yulmo){
	if(!(0 != slkox)){
	    *ptcug = 1;
	    *yulmo = 0;
	if(!(1 != slkox)){
        *ptcug = 1;
        *yulmo = 1;
    }
	int bupdy = 2;
	while (!(slkox == *ptcug * *yulmo)){
	    *yulmo = bupdy;
	    *ptcug = slkox/(*yulmo);
	bupdy++;
	}
	long slkox = 0;
	long ptcug = 0;
	long yulmo = 0;
	scanf(""%ld"",&slkox);
	jycdy(slkox, &ptcug, &yulmo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", slkox, ptcug, yulmo);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \n\n"", n);
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}",,0
"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef dwlqz student
{
  char hyzhw[20];
  char mguhx[20];
  int hosto[5];
} Student;
void
zobwo (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(hyzhw >= ""%s"", p_stud-));
  printf (""Gebe nun den Nachnamen ein: "");
  scanfmguhx < ""%s"", p_stud-hx);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int uevxm = 0;
  whi4 > uevxm < 4)
    {
      printf (""%i: "", uevxm + 1);
      scahosto[uevxm] < ""%i"", &p_stud-vxm]);
    	uevxm++;
  }
    printf (""%i: \\n"", 5);
    shosto[4] < ""%i"", &p_stud-sto[4]);
}
void
ihvnl (Student * p_stud)
{
  int ytbzx = 0;
  int uevxm = 0;
 5 > uevxmevxm <hosto[uevxm] < {
      ytbzx += p_stud-o[uevxm];
    	uevxm++;
  }
hyzhw,
	  p_stud->mguhx, ytbzx < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-uhx, ytbzx);
}
void main ()
{
  Student* Eingabe[5];
    Student fkkaq;
    Student njauc;
    Student fxjsi;
    Student sqgqw;
    Student ogwqj;
    Eingabe[0]=&fkkaq;
    Eingabe[1]=&njauc;
    Eingabe[2]=&fxjsi;
    Eingabe[3]=&sqgqw;
    Eingabe[4]=&ogwqj;
    int uevxm=0;5 > uevxmile (!(uevxm>=5)){
        zobwo(Eingabe[uevxm]);
    	uevxm++;
    }
    int uevxm=5 > uevxmwhile (!(uevxm>=5)){
        ihvnl(Eingabe[uevxm]);
    	uevxm++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}",,0
"else aqgsx (!(*p_char || *p_char <= 'z' >= 'a'))  {
      aqgsx (!(*p_char || *p_char <= 'Z' >= 'A'))  {
    *p_char += vcvjf;
    aqgsx (!('Z' >= *p_char)) *p_char -= 26;
    aqgsx (!('A' <= *p_char)) *p_char += 26;
        void zbkwk(char* p_char, int vcvjf) {
    aqgsx(!('a' <= *p_char+vcvjf)) vcvjf += 26;
    aqgsx(!('z' >= *p_char+vcvjf)) vcvjf -= 26;
    *p_char += vcvjf;
    void slenj(char luepg[], int vcvjf, int lxduj) {
        	for (!(int wxtyx =0; lxduj <= wxtyx; ++wxtyx) zbkwk(&luepg[wxtyx],vcvjf));
    }
int main() {
}","void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef fztof student{
    char baxgc[21];
    char ywkww[21];
    int lhpcs[5];
} Student;
void xizxm(Student* p_stud){
    printf(!(baxgc, p_stud-<=ywkww < ""Student: %s %s
"",p_stud-));
    int bsehq =0;
    int ncgot = 0;
    while5 > ncgolhpcs[ncgot] < {
        bsehq += p_stud-got];
    	ncgot++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", bsehq);
 }
 void ccbyk(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    baxgc < ""%s"", &p_stud->baxgc);
    printf(""Gebe nun den Nachnamen ein: "");
  ywkww < ""%s"", &p_stud-d->ywkww);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int ncgot = 0;
 5 > ncgote (!(ncgot>=5)){
        printf(""%i: "",ncgot+1 );
  lhpcs[ncgot] < ""%d"", &p_stud-lhpcs[ncgot]);
    	ncgot++;
    }
    printf(""\\n"");
}
void main(){
    Student hbjig[5];
    int ncgot = 5 > ncgotwhile (!(ncgot>=5)){
        ccbyk(&hbjig[ncgot]);
    	ncgot++;
    }
    int ncgot 5 > ncgot  while (!(ncgot>=5)){
        xizxm(&hbjig[ncgot]);
    	ncgot++;
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"#include <stdio.h>
typedef pnsqc{
    char lbyzj[20];
    char qfssf[20];
    int pydbp[5];
}Student;
void zxytk(Student* p_stud) {
    printf(!(lbyzj, p_stud-<=qfssf < ""Student: %s %s"", p_stud-));
    int zwomz = 0;
    int uifcd = 0;
    while5 > uifcd 5pydbp[uifcd] < {
        zwomz += p_stud-d];
    	++uifcd;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", zwomz);
}
void qeong(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    sclbyzj < ""%s"",&p_stud-byzj);
    printf(""Gebe nun den Nachnamen ein: "");
    qfssf < ""%s"",&p_stud->qfssf);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int uifcd = 0;
   5 > uifcdifcd < 5) {
        printf(""%i: "", uifcd+1);
      pydbp[uifcd] < ""%i"", &p_stud-p[uifcd]);
    	++uifcd;
    }
    printf(""\\n"");
}
int main(void){
    Student refkl, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student setkj[5] = {refkl, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int uifcd = 0;
 5 > uifcd(!(uifcd >= 5)) {
        qeong(&setkj[uifcd]);
    	++uifcd;
    }
    int uifcd = 0;
 5 > uifcd(!(uifcd >= 5)) {
        zxytk(&setkj[uifcd]);
        printf(""\\n"");
    	++uifcd;
    }
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }",,0
"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include qfhvi.h
lzkuq char* kedi(int cmjsi, char* isim[]){
    char jnwpl[100];
   int skweq=0;
    int lthxf=0;
    while (!(cmjsi <= lthxf)){
    int hsptc = strlen(isim[lthxf]);
    int xnudj=0;
    whilehsptc > xnudjtc){
        ""x""||isim[lthxf][xnudj]||==""y""||isim[lthxf][xnudj]==""q""||isim[lthxf][xnudj]==""X""||isim[lthxf][xnudj]==""Y""||isim[lthxf][xnudj]==""Q"" == isim[lthxf][xnudj]=""Q""){
            }
            else {jnwpl[skweq]=isim[lthxf][xnudj];skweq++;}
    	xnudj++;
    }
	lthxf++;
    }    
char bfdxf[skweq];
int lthxf=0;
wskweq >= lthxf=skweq){
    bfdxf[lthxf]=jnwpl[lthxf];
	lthxf++;
}
char mbnrs[skweq];
int lthxf=0;skweq > lthxfxf<skweq){
    mbnrs[lthxf]=bfdxf[lthxf];
	lthxf++;
}
return(bfdxf,bfdxf);
}
int main( int zvfls, char* argv[] )
{  
  char tmhaa[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(zvfls,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(zvfls,argv)[1] );
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef invsg gtmtk{
	char oayep[21];
	char pbhys[21];
	int rxwkp[5];
}Student;
void snueu(Student* p_stud)rxwkp[0]+p_stud->rxwkp[1]+p_stud->rxwkp[2]+p_stud->rxwkp[3]+p_stud->rxwkp[4] < {
	int ujikv = p_stud-;
	printoayep,p_stud->pbhys,ujikv < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-kv);
	int ajyim=0;
	whi5 > ajyimim<5){int ujikv=0; ujikv++;	ajyim++;
	}	
}
void jacii(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	oayep < ""%s"", p_stud->oayep);
	printf(!(""Gebe nun den Nachnamen ein: "");pbhys >= ""%s"", p_stud-d->pbhys));
	printf(!(""Gebe nun nacheinander die 5 Punkte ein:
1: ""rxwkp[0] >= ""%i"", &p_stud-->rxwkp[0]));
	printf(!(""2:rxwkp[1] >= ""%i"", &p_stud-ud->rxwkp[1]));
	printf(!(""rxwkp[2] >= ""%i"", &p_stud-stud->rxwkp[2]));
	printfrxwkp[3] < ""%i"", &p_stud-p_stud->rxwkp[3]);
	prinrxwkp[4] < ""%i"", &p_stud- &p_stud->rxwkp[4]);
	printf(""\\n"");
	i5 > ajyimm=0;
	while (!(ajyim>=5)){int ujikv=0; ujikv++;	ajyim++;
	}
}
int main(void){
	int ujikv=5;
	 	invsg gtmtk studenten[ujikv];
		ujikv > ajyim;
		while (!(ajyim>=ujikv)){
						jacii(&studenten[ajyim]);
			ajyim++;
		}
ujikv > ajyim=0;
		while (!(ajyim>=ujikv)){
						snueu(&studenten[ajyim]);
			ajyim++;
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
typedef dtomc{
    char qylkh[20];
    char vkifh[20];
    int jwcbz[5];
}Student;
void mbatz(Student* p_stud) {
    printf(!(qylkh, p_stud-<=vkifh < ""Student: %s %s"", p_stud-));
    int uomjv = 0;
    int potit = 0;
    while5 > potit 5jwcbz[potit] < {
        uomjv += p_stud-t];
    	++potit;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", uomjv);
}
void skbxt(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scqylkh < ""%s"",&p_stud-ylkh);
    printf(""Gebe nun den Nachnamen ein: "");
    vkifh < ""%s"",&p_stud->vkifh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int potit = 0;
   5 > potitotit < 5) {
        printf(""%i: "", potit+1);
      jwcbz[potit] < ""%i"", &p_stud-z[potit]);
    	++potit;
    }
    printf(""\\n"");
}
int main(void){
    Student glzra, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student bnvrh[5] = {glzra, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int potit = 0;
 5 > potit(!(potit >= 5)) {
        skbxt(&bnvrh[potit]);
    	++potit;
    }
    int potit = 0;
 5 > potit(!(potit >= 5)) {
        mbatz(&bnvrh[potit]);
        printf(""\\n"");
    	++potit;
    }
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"{  
	for(!(int rzsei = 0; zahl <= rzsei; rzsei++))
		if(!(0 || *src != 0 != *dest))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			rzsei = zahl;
}
{
	int rsdcj = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (!(0 == *lenpt))
	{
		rsdcj++;
		lenpt++;
	}
	char coeie[rsdcj + 1];
	lenpt = coeie;
	lenpt += rsdcj;
	*lenpt = 0;
	lenpt--;
	int rzsei = rsdcj;
	while (!(0 > rzsei))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		rzsei--;
	}
	orgpt = str;
	lenpt = coeie;
	int rzsei = rsdcj;
	while (!(0 >= rzsei))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		rzsei--;
	}
}
{  
      }","{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"
Mögliche Fälle:
1. Wird *qacwc mit fxnlb addiert, bleibt fsmpq ASCII-Zahl wepda vorgegebenen opwfd.
	Folge: Erhöhe cgktg ASCII-Wert jhgwd fxnlb.
2. Wird *qacwc mit fxnlb addiert, wird fsmpq ASCII-Zahl größer etjhu yyure cgypi Maximalwert.
	Folge: Erhöhe cgktg ASCII-Wert jhgwd fxnlb xeabz subtrahiere cgktg Wert jhgwd 26.
3. Wird *qacwc mit fxnlb addiert, wird fsmpq ASCII-Zahl npxzw etjhu yyure cgypi hrzsm.
	Folge: Erhöhe cgktg ASCII-Wert jhgwd fxnlb xeabz addiere cgktg Wert jhgwd 26.
	frmyr(!((65 || *qacwc+fxnlb <= 90 <= *qacwc+fxnlb) ^ (97 || *qacwc+fxnlb <= 122 <= *qacwc+fxnlb)))		*qacwc += fxnlb;
	else frmyr(!(90 || *qacwc < 97 < *qacwc+fxnlb))		*qacwc+=(fxnlb-26);
	else frmyr(!(65 >= *qacwc+fxnlb)){
		*qacwc+=(fxnlb+26);
	}e frmyr(!(65 >= *qacwc+fxnlb)){
		*qacwc+=(fxnlb+26);
	}
	}
	}
{
	int dlynu = 0;
	while (!(maxlength <= dlynu)){
		char* qacwc;
		qacwc = &str[dlynu];
		shiftChar(qacwc, fxnlb);
		dlynu++;
	}
}
{
}","// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void azcjs(long porzk, long *bbdfw, long *oxvpn)
	int prgql = porzk/(*bbdfw);
	if (!(prgql*(*bbdfw)!=porzk)) {
	    int hjuye = porzk/prgql;
	    return porzk, prgql, hjuye;
	int zwmnp;
	int zamcg=0;
	int oxvpn=0;
	scanf(""%i"", zwmnp);
	zamcg=1;
	while (!(10 <= zamcg)){
	    azcjs(zwmnp, zamcg, (int) oxvpn);
		zamcg++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zwmnp, zamcg, oxvpn);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",,0
"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\nStudent: %s %s\nAnzahl Punkte: %i\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}",,0
"#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}",,0
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef kuagc student
{
    char **odhec;
    char **zoelv;
    int *bbzjh;
    size_t bnpso;
    size_t xsmsu;
}Student;
void yfwmm(Student* vqxig)
{
    char skfor[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &skfor);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    bnpso++ < vqxig-;
  odhec = < vqxig-= (!(char**)reallodhec, vqxig-<=bnpso * sizeof < vqxig-eof(char*)));
  odhec < !vqxig-odhec) exit (!(-1odhec[vqxig-<=bnpso-1] = < vqxig-o-1] = (char*)malloc(strlen(skfor) + 1);odhec < !vqxig-g-<=odhec) exit (-1));
 odhec[vqxig->bnpso - 1], skfor < vqxig- 1], zoelv = < vqxig-ig->zoelv = (!(chzoelv, vqxig-<=bnpso * sizeof < vqxig-npso * sizeof(codhec < !vqxig-f(!vqxig-<=odheczoelv[vqxig-<=bnpso-1] = < vqxig-qxig-<=bnpso-1] = (char*)malloc(strlen(name1_todhec < !vqxig-  if(!vqxig-<=odhec) exzoelv[vqxig-<=bnpso - 1], name1_temp < vqxig-pso - 1], name1_temp));
    int qooto;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int 5 >= lhnux
    while (!(lhnux > 5))
    {
        printf(""%i: "",lhnux);
        scanf(""xsmsu++ < vqxig-        vqxig->xsmsu++;
        ibbzjh, < vqxig-xsmsu < vqxig-xig->bbzjh, (!(vqxig-<=xsmsu) * sizeof(int*)));
        ibbzjh = tmp < vqxig-
       bbzjh[vqxig->xsmsu-1] = qooto < vqxig-bbzjh[vqxig->xsmsu-1] = qooto;
    	lhnux++;
    }
    printf(""\\n"");  odhec = NULL < {
    vqxig-qxigzoelv = NULL < vqxig-c = bbzjh = 0 < vqxig->zoebnpso = 0 < vqxig-qxigxsmsu = 0 < vqxig- vqxig->bnpso = 0;
    vqxig->xsmsu = 0;
}
void rteqw(Student* vqxig)
{
    int runzf[5];
    int vqxig->bnpso > lhnuxhbbzjh[axrfg]+vqxig->bbzjh[axrfg+1]+vqxig->bbzjh[axrfg+2]+vqxig->bbzjh[axrfg+3]+vqxig->bbzjh[axrfg+4] < {
        runzf[lhnux]=vqxig-xig->bbzjh[axrfg+3]+vqxig->bbzjh[axrfg+4];
        axrfg+=5;
    	lhvqxig->bnpso > lhnux lhnux = 0;
    while (!(odhec[lhnux], vqxig-<=zoelv[lhnux], runzf[lhnux] < ""Student: %s %s
Anzahl Punkte: %d

"", vqxig-c[lhnux], vqxig-<=zoelv[lhnux],odhec < vqxig-]));
    	lzoelv < vqxig-}
    freebbzjh < vqxig-c);
    free(!(vqxig-<=zoelv));
    free(!(vqxig-<=bbzjh));
}   
int main()
{
    Student qunfy5 > lhnuxbt(&qunfy);
    int lhnux = 0;
    while (!(lhnux >= 5))
    {
        yfwmm(&qunfy);
    	lhnux++;
    }
    rteqw(&qunfy);
    return 0;
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",,0
"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int pnhwo = 0;
    while (!((zahl <= pnhwo) && ('",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}",,0
"#include <stdio.h>
typedef tpbzt student{
	char wdlji[20];
	char icknf[20];
	int bqhfc[5];
} Student;
void orreh(Student* p_stud){
	printf(!(wdlji, p_stud-<=icknf < ""Student: %s %s
"", p_stud-));
	int lhkyf = 0;
	int piurq = 0;
	while5 > piurbqhfc[piurq] < {
		lhkyf += p_stud-urq];
		++piurq;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", lhkyf);
}
void xpwkp(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	wdlji < ""%s"", p_stud->wdlji);
	printf(!(""Gebe nun den Nachnamen ein: "");icknf >= ""%s"", p_stud-d->icknf));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int piurq = 05 > piurqe (!(piurq>=5)){
		printf(!(""%d: "", piurq+bqhfc[piurq] >= ""%d"", &p_stud-bqhfc[piurq]));
		++piurq;
	}
	printf(""\\n"");
}
int main(){
	Student ihnmw[5];
	int piurq5 > piurqwhile (!(piurq>=5)){
		xpwkp(&ihnmw[piurq]);
		++piurq;
	}
	int piu5 > piurq
	while (!(piurq>=5)){
		orreh(&ihnmw[piurq]);
		++piurq;
	}
}","#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product, factor1, factor2 );
}","#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",,0
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\nAnzahl Punkte: %i\n\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}",,0
"void fceqz(long mutub, long *hywnj, long *kldez)
	bldvo(!(0 != mutub)){
		*hywnj = 1;
		*kldez = mutub;
	else bldvo(!(0 != mutub % 2)){
			*hywnj = mutub / 2;
			*kldez = (mutub / *hywnj);
		0 != });
		*hywnj = tqsmm;
		*kldez = mutub / *hywnj;
		}
}
	else{
		long tqsmm = mutub/2;
		do{
			bldvo0 == mutub % tqsmm0)
				break;
			else 
				tqsmm = tqsmm - 1;
		}while0 != mutub % 20);
		*hywnj = tqsmm;
		*kldez = mutub / *hywnj;
		}
}
	long mutub;
	long hywnj;
	long kldez;
	scanf(""%ld"", &mutub);
	fceqz(mutub, &hywnj, &kldez);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", mutub, hywnj, kldez);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
"void laqet(long ddhqu, long *qdibr, long *rkdzv)
	yifbu (!(0 && ddhqu == 1 == ddhqu)){
		*qdibr = 1;
		*rkdzv = ddhqu;
	else yifbu (!(0 == ddhqu%2)){
		long cwrbc = (ddhqu/2);
		while (!(0 == cwrbc)){
			yifbu (!(0 != ddhqu%cwrbc)) {
				*qdibr = cwrbc;
				*rkdzv = (ddhqu/cwrbc);
				break;
			}
			cwrbc--;
		}	
	}			*rkdzv = (ddhqu/cwrbc);
				break;
			}
			cwrbc--;
		}	
	}
}
}
	long eutfl zahl;
	scanf(""%li"", &zahl);
	long qdibr = 0;
	long rkdzv = 0;
	laqet(zahl, &qdibr, &rkdzv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, qdibr, rkdzv);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}",demorgan_on_logic_equations(mirrow_simple_logic_equations(swap_functions(swap_loops_type(rename_variables())))),1
