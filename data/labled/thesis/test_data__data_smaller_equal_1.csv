code1,code2,type,label
"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}",,0
"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(0 || ergebnis == 1 == ergebnis) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; 0 < i;i--) 
		{
            if(0 == ergebnis%i) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",mirrow_simple_logic_equations,1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud- > first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    p_stud-uf > strcplast_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(5 < int i =5 < i; i++){
		printf(""%i: "", (i+1));
		""%i"", &p_stud-s[i] > scpoints[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(5 < int i5 < i i; i++)
		p_stud-nts[i] > summpoints[i]);
""Student: %s "", p_stud-rst_name > first_name)last_name > last_name > ""%s\\n"", p_stud-);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;numb_stud < fornumb_stud < iud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");numb_stud < fornumb_stud < iud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}",mirrow_simple_logic_equations,1
"	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z')	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97)	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
{
	for (int i = 0; i<maxlength; ++i){
	shiftChar(&str[i], shift);
{
}","	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}",,1
"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(vorname < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scannachname < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i =5 < i i > 5; i++){
        printf(""%d: "", i+1);
      punkte[i] < """", &p_stud-kte[i]i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    forint5 < i= 0tpunkte[i] > punkte[i] > {
        sum += p_stud-i];
}vorname, p_stud- < nachname, sumtud- > ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-achname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten)i > 5 < iint i = 0 i > 5 < f5 05; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
      student_einleseir < i iir < 5 < int i =5 i < 5 < &studenten[i}
   5 > ir 5; i++){
        student_ausgeben(&studenten[i]);
    }
}",mirrow_simple_logic_equations,1
"int getStringLength(char x[])     int i = 0;
    while(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(x[i] == NULL))))))))))))))))         i++;
        return i;
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= zahl && i >= getStringLength(src) && i >= 10; ++i)))))))))))))))) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= z; ++i)))))))))))))))) {
        x[i] = str[i];
    }
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = z-1; i < 0; --i)))))))))))))))) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }",demorgan_on_logic_equations,1
"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}",,0
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",,0
"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 == product || 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; '\\0' != satz[i]; ++i) {
      while (!('a' && satz[i] <= 'p' <= satz[i])! && ('r' && satz[i] <= 'w' <= satz[i])! && ('z' == satz[i])! && ('A' && satz[i] <= 'P' <= satz[i])! && ('R' && satz[i] <= 'W' <= satz[i])! && ('Z' == satz[i])! && ('!' == satz[i])! && ('?' == satz[i])! && ('\\0' == satz[i])){
         for (j = i; '\\0' != satz[j]; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; '\\0' != satz[l]; ++l) satz[l] == {
        satz2[k];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; argc -1 > i; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length)'\\0' != ; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; a+1 > i; i++)
	{
		if (('x' == str[i]) || ('y' == str[i]) || ('q' == str[i]) || ('X' == str[i]) || ('Y' == str[i]) || ('Q' == str[i]))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if ('\\0' == str[i])
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0;  > i((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; '\\0' != str[length]; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}",mirrow_simple_logic_equations,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}",,0
"void factorize(long result, long *number1, long *number2){
	if(0 == result){
	    *number1 = 1;
	    *number2 = 0;
	if(1 == result){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; result != *number1 * *number2; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",mirrow_simple_logic_equations,1
"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}",,0
"#include <stdio.h>
void oaezg( char *gllnj, char *iojbn ){
	int slusk = 0;
	int bdioc = 0;
	for( int jcupg = 0 ; gllnj[jcupg] != 0 ; jcupg++ ){
		slusk = jcupg+1;	
	}
	for( int jcupg = 0 ; iojbn[jcupg] != 0 ; jcupg++ ){
		gllnj[slusk+jcupg] = iojbn[jcupg];
		bdioc = jcupg+1;
	}
	gllnj[slusk+bdioc] = iojbn[bdioc];
}
void jcsnb( char *gllnj, char *iojbn ){
	int glnfc = 0;
	int jcupg; 
	for( jcupg = 0 ; gllnj[jcupg] != 0 ; jcupg++){
		if((gllnj[jcupg] != 'x') && (gllnj[jcupg] != 'X') && (gllnj[jcupg] != 'slusk') &&
		(gllnj[jcupg] != 'Y') && (gllnj[jcupg] != 'q') && (gllnj[jcupg] != 'Q')){
			iojbn[glnfc] = gllnj[jcupg];
			glnfc++;
		}
	}
	iojbn[glnfc] = 0;
}	
void pvfwb( char *gllnj, char *iojbn ){
	int jcupg;
	int glnfc = 0;
	for( jcupg = 0 ; gllnj[jcupg] != 0 ; jcupg++ ){
		if ((jcupg % 3) == 0){
			iojbn[glnfc] = gllnj[jcupg];
			glnfc++;
		}	
	}
	iojbn[glnfc] = 0;
}
int main(int kzkjz, char *empdz[]){
	char vokjf[100];
	char dlukf[100];
	for(int jcupg = 0; jcupg < 100; jcupg++)
	{vokjf[jcupg] = 0x00; dlukf[jcupg] = 0x00;}
	for( int jcupg = 1 ; jcupg < kzkjz ; jcupg++ ){
		oaezg( vokjf, empdz[jcupg] );
	}
	jcsnb( vokjf, dlukf );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", dlukf);
	pvfwb( dlukf, vokjf );
	printf(""Der neue String lautet: %s\\n"", vokjf);
}","#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
#include <malloc.h>
typedef struct student{",,0
"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (int i = 0; (i < zahl)0 != &0 != dest[i]=00 != src[i]]); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  forl0 != str[l][l] != 0l]; l+i0/2i < l/2 i < {  foril/2 i; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }",mirrow_simple_logic_equations,1
"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}",,0
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	for (; product%i != 0; *factor2 = product/i){
		i -= 1;
	*factor1 = i;
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",swap_loops_type,1
"
	maxLength hvmae nyhhy
	eytms	hvmae tcxge
 * Bekommt rktbq Pointer egumg ein nuhgr ajwju etxjv rktbq mtxqc eytms akalr.
 * intShiftet euzyy ajwju rldsx dem jyrcf a-z etxjv A-Z uuixj den mtxqc eytms. 
void xkprn(btvos* p_char, int eytms){
	jvmsf((*p_char >= 65) && (*p_char <= 90)){
		jvmsf(*p_char+eytms < 65){
			*p_char = *p_char + eytms + 26;
		}else jvmsf(*p_char+eytms > 90){
			*p_char = *p_char + eytms - 26;
		}else{
			*p_char = *p_char + eytms;
	}else jvmsf((*p_char >= 97) && (*p_char <= 122)){
		jvmsf(*p_char+eytms < 97){
			*p_char = *p_char + eytms + 26;
		}else jvmsf(*p_char+eytms > 122){
			*p_char = *p_char + eytms - 26;
		}else{
			*p_char = *p_char + eytms;
	}else{
}
 * Bekommt rktbq beliebigen btvos-Array evcsv Laenge nyhhy akalr. 
 * Fuehrt egumg jedem ajwju des zfbug die wdmgl-Funktion rldsx.
void kdkwx(btvos mfabw[], int eytms, int nyhhy){
	for (int wtsdh=0;wtsdh<nyhhy;wtsdh++){
		xkprn(&mfabw[wtsdh], eytms);
	}
}
int main(){
	btvos mfabw[] = ""Froh zu sein bedarf es wenig"";
	// btvos mfabw[] = ""AZ   az"";
	// btvos mfabw[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int ghguz = (sizeof mfabw / sizeof *mfabw);
	int eytms = 5;
	kdkwx(mfabw, eytms, ghguz);
	kdkwx(mfabw, -eytms, ghguz);
}","// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",swap_functions,1
"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",swap_functions,1
"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    shift = shift % 26;
    int shifted = *p_char + shift;
    if (*p_char >= *p_char <= 'z' && 'a')         if ('z' < shifted)             *p_char = 'a' - 1 + shifted - 'z';
        } else if ('a' > shifted) {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if (*p_char >= *p_char <= 'Z' && 'A') {
        if ('Z' < shifted) {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if ('A' > shifted) {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; maxlength > i; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}",,1
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->first_name)))))))))))))))))));
printf(""Gebe nun den Nachnamen ein: "");
scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->last_name)))))))))))))))))));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
}
void student_ausgeben(Student* p_stud){
printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
printf(!(""Anzahl Punkte: %d

"", p_stud-<=points));
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",,0
"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 int i=0;
 while (i<argc-1){
	 int j=0;
	 for (; argv[i+1][j] != '\\0'; len++){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 	i++;
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 for (; erg[k] != '\\0'; j++){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}",swap_loops_type,1
"void factorize(long result, long *number1, long *number2){
	if(0 == result){
	    *number1 = 1;
	    *number2 = 0;
	if(1 == result){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; result != *number1 * *number2; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\nStudent: "");
    printf(""%s %s\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
void sort(char* str){
for(int i = 0; str[i] != '\0'; i++){
   if(str[i] == 'x' || str[i] == 'y' || str[i] == 'q' || str[i] == 'X' || str[i] == 'Y' || str[i] == 'Q'){ 
   for(int h = i; str[h] != '0'; h++) str[h] = str[h+1];
   }
 }
}
char* strc(char* str1, char* str2){
int i,h;
char* st = str1;
for(i = 0; st[i] != '\0'; i++){
}
for(h = 0; str2[h] != '\0'; h++){
str1[i+h] = str2[h];
}
str1[i+h]= '\0';
return str1;
}
int main( int argc, char* argv[] )
{  
sort(argv[1]);
sort(argv[2]);
sort(argv[3]);
sort(argv[4]);
printf(""x,y,q und X,Y,Q aussortiert: %s%s%s%s\n"",argv[1], argv[2], argv[3],argv[4]);
char* str = strc(argv[1], argv[2]);
char* str2 = strc(str, argv[3]);
char* str3 = strc(str2, argv[4]);
printf(""Der neue String lautet: lsonao\n"");
//
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\0'",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\n"",num , faktor1, faktor2);
    return 0;
}",,0
"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
    for (int i = 0;(i<zahl && dest[i] != '\0'  ) && src[i] != '\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\0' || src[i] == '\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\n"", str);
    int i = 0; 
    while(str[i] != '\0'){
        i++;
    }
    i +=1;
    //printf(""%i \n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud- > vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	p_stud-f2 > strcpnachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(i < int 5;5 > i;{4i4 == i=4 == i+if){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			sc}
		p_stud-e[i]=pkt > ""%d"",&punkte[i]=pkt=pkt;
		}
}
void student_ausgeben(Student* p_snachname < ""Student: %s %s\\n"",p_stud-- > nachname < vorname,p_stud-name);int sui < 5	{
		sum+=p_stud-tud-ui < punkte[i] < inpunkte[i]kte[i];
	}
	printf(i > ""Anzahl Punkte: %d\\n\\n"",su}
int i	for < {
	Student studenten[55 i	for	in5 < i=0 i > 5;i < 5 > {
		student_einlese5 i}
	for i < 5 > &studei}
	foroi i=0 > 5=5;i++){
			student_ausgeben(&studenten[i]);
		}
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}",,0
"//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",,0
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef whxlc student{
    char rzwcj[21];
    char beump[21];
    int cwspb[5];
} Student;
void ejprs(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->rzwcj);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->beump);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int ieacz=0; ieacz<5; ieacz++)
    {
        printf(""%i: "", ieacz+1);
        scanf(""%i"", &(p_stud->cwspb[ieacz]));
    }
}
void jbtoe(Student* p_stud)
{
    int bhobn =0;
    for(int ieacz=0; ieacz<5; ieacz++)
    bhobn += p_stud->cwspb[ieacz];
    printf(""\\nStudent: %s %s\\n"", p_stud->rzwcj, p_stud->beump);
    printf(""Anzahl Punkte: %i\\n"", bhobn);
}
int main()
{
    Student sodql[5];
    for (int ieacz=0; ieacz<5; ieacz++)
    ejprs(&sodql[ieacz]);
      for(int ieacz=0; ieacz<5; ieacz++)
    jbtoe(&sodql[ieacz]);
    return 0;
}",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(1 || produkt == 0 == produkt)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; 0 != produkt % teiler;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	for (; product%i != 0; *factor2 = product/i){
		i -= 1;
	*factor1 = i;
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",swap_loops_type,1
"	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}","	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}",,0
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    unsigned int punkte[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud->vorname, 21);              //Vornamen einlesen
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud->nachname, 21);             //Nachnamen einlesen
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int x = 0; x<5;x++){
        printf(""%i: "", x+1);
        scanf(""%i"", &p_stud->punkte[x]);
    }
    return;
}
void student_ausgeben(Student* p_stud){
    int sum = 0;
    for(int y = 0; y<5; y++){
        sum = sum + p_stud->punkte[y];
    }
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", sum);
    return;
}
int main() {
    Student studenten[5];
    for(int i = 0; i<5; i++){                   //Schleife zum Einlesen
        student_einlesen(&studenten[i]);
    }
    for(int j=0; j<5; j++){                     //Schleife zum Asugeben
        student_ausgeben(&studenten[j]);
    }
    return 0;
}
//WHY??? Ich habe mit typedef eine struct definiert. Davon wird dann ein Array erstellt. Von diesem Array werden dann die Adressen an die Funktion student_eingeben gegeben, und später an student_ausgeben.
//Woran kann es liegen, dass es NUR dann wirklich funktioniert, wenn ich EINEN studenten habe - nicht ein Array von studenten, und auch nicht fünf einzelne studenten.
//Sobald student_einlesen mehr als 1 mal ""benutzt"" wird, funktioniert es nicht mehr!",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",,1
"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->first_name)))))))))))))))))));
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->last_name)))))))))))))))))));
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i < 4; i++)))))))))))))))))))
    {
      printf (""%i: "", i + 1);
      scanf (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[i])))))))))))))))))));
    }
    printf (""%i: \\n"", 5);
    scanf (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[4])))))))))))))))))));
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i < 5; i++)))))))))))))))))))
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0;i<5;i++))))))))))))))))))){
        student_einlesen(Eingabe[i]);
    }
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0;i<5;i++))))))))))))))))))){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud- > first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	p_stud-20 > readLinlast_name, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (5 <= int i5 <= ii; i++){
		printf(""%i: "", i);
""%i"", &p_stud-s[i-1]1] > points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	points[i] > i5 < ii=0points[i]i""Student: %s %s\\n"", p_stud-d- > last_name < first_name, p_stud- > last_named- < for{
		summe += p_stud-);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main()int i=0i5555 > {
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Studenii < Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student5ii 55; i05 > i+Studierende[i]}5or > {
		student_einlesenioro5 i++ < 5int i=05){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",,0
"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   int i = 0, j;
   while (satz[i] != '\\0') {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         j = i;
         while (satz[j] != '\\0') {
            satz[j] = satz[j + 1];
         	++j;
         }
         satz[j] = '\\0';
      }
   	++i;
   	satz[j] = satz[j + 1];
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\n"",product,factor1,factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int i = 1;
	while (i < argc){
		int j = 0;
		while (argv[i][j] != '\\0'){
			if(argv[i][j] == 'x'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == 'X'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == 'y'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == 'Y'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == 'q'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == 'Q'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
			j++;
		}
		i++;
	}
	char b[100];
	int k = 0;
	int i = 0;
	while (i < u){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
		i++;
	}
	int i = 0;
	while (i < u){
		printf(""%c"", a[i]);
		i++;
	}
	printf(""\\nDer neue String lautet: "");
	int i = 0;
	while (i < k){
		printf(""%c"", b[i]);
		i++;
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte - > %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",mirrow_simple_logic_equations,1
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef cwrpm student {
    char bqxyu[20];
    char emxck[20];
    int npvyc[5];
}wwomi;
void fyuxt(wwomi* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->bqxyu);
    scanf(""%s"",p_stud->emxck);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int elvwk=0;elvwk<5;elvwk++){
    scanf(""%i"",&p_stud->npvyc[elvwk]);}
}
void xariq(wwomi* p_stud){
    int fupei=0;
    for (int qllqb=0;qllqb<5;qllqb++){
        fupei+=p_stud->npvyc[qllqb];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->bqxyu,p_stud->emxck);
    printf(""Anzahl Punkte: %i\\n"",fupei);
}
int main(){
    static wwomi ogrenci[5];
    for(int qllqb=0;qllqb<5;qllqb++){
        fyuxt(&ogrenci[qllqb]);
    }
    for(int qllqb=0;qllqb<5;qllqb++){
        xariq(&ogrenci[qllqb]);
    }
}",rename_variables,1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\n"",eingabe,z1,z2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}",,0
"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\0';
	printf(""Der neue String lautet: %s\n"", str2);
}","#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\0';
	printf(""Der neue String lautet: %s\n"", str2);
}",,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",swap_functions,1
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef rtukf Str20[21];
typedef idnkv Int5[5];
typedef adkpj student {
    Str20 hwmwz;
    Str20 fgbfq;
    Int5 hpzxn;
} Student;
void hwtxc(rtukf* strbuffer, unsigned idnkv buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    idnkv jlxrs = strlen(strbuffer);
    strbuffer[jlxrs-1] = '\\0';
}
void saomf(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    hwtxc(p_stud->hwmwz, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    hwtxc(p_stud->fgbfq, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( idnkv ihtdx = 0; ihtdx < 5; ihtdx++ ) {
        printf(""%i: "", ihtdx + 1);
        scanf(""%i"", &p_stud->hpzxn[ihtdx]);
    }
    getchar();
}
void gjldg(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->hwmwz), p_stud->hwmwz);
    printf(""%.*s\\n"", strlen(p_stud->fgbfq), p_stud->fgbfq);
    idnkv syyyo = 0;
    for ( idnkv ihtdx = 0; ihtdx < 5; ihtdx++ ) {
        syyyo += p_stud->hpzxn[ihtdx];
    }
    printf(""Anzahl Punkte: %i\\n"", syyyo);
}
idnkv main()
{
    Student gmlgr[5];
    for ( idnkv ihtdx = 0; ihtdx < 5; ihtdx++ ) {
        saomf(&gmlgr[ihtdx]);
    }
    for ( idnkv ihtdx = 0; ihtdx < 5; ihtdx++ ) {
        gjldg(&gmlgr[ihtdx]);
    }
}",rename_variables,1
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    	i++;
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    int i = 0;
    while (i < 5){
        sum += p_stud->points[i];
    	i++;
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    int i = 0;
    while (i < 5){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    	i++;
    }
    Student* student = students;
    while (student < students + 5){
        student_ausgeben(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef nceli student{
	char jugig[21];
	char kqoiw[21];
	int oafrr[5];
}ryjiw;
void vvzce(ryjiw* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->jugig);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->kqoiw);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->oafrr[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->oafrr[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->oafrr[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->oafrr[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->oafrr[4]);
	printf(""\\n"");
}
void nozdr(ryjiw* p_stud){
	int ygzcb = 0;
	for(int lnoft=0; lnoft<5; lnoft++){
		ygzcb += p_stud->oafrr[lnoft];
	} 
	printf(""Student: %s %s\\n"", p_stud->jugig, p_stud->kqoiw);
	printf(""Anzahl Punkte: %i\\n\\n"", ygzcb);
}
int main(){
	static ryjiw studenten[5];
	for(int lnoft=0; lnoft<5; lnoft++){
		vvzce(&studenten[lnoft]);
	}
	for(int lnoft=0; lnoft<5; lnoft++){
		nozdr(&studenten[lnoft]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	int i = 0;
	for (; i < 2; printf(""Gebe den Vornamen ein: ""))
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
		i++;
		scanf(""%s"", p_stud->first_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int i = 0;
	for (; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	int i = 0;
	for (; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	int i = 0;
	
	for (; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	
	}
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}",,0
"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(*p_char >= 90 && *p_char <= 65)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
  *p_char97 >= 122 && *p_char22 <= }
    i97)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    ingthngth < }
}
{
    int maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",mirrow_simple_logic_equations,1
"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}",swap_functions,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"{  
  for(int i=0; zahl < * && i( != dest+'\\0'; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i)'\\ != '\\0'++){
  n++;  n--;
  for(int i=0; ini i++ <= in
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
void mlxio(char* string)
{
  int fhizd = 0;
  for(char *wlfji = string; *wlfji!=0; wlfji++, fhizd++);
  for(int tobbk = 0,j = 0; tobbk<=fhizd; tobbk++){
    if(tobbk%3==0){
      string[j]=string[tobbk];
      j++;
    }
    if(tobbk==fhizd){
      string[j]=0;
    }
  }
}
void rhjhh(char* out,int *wlfji,char* in)
{ 
  char *oetjl=out;
  for(int tobbk = 0; tobbk<*wlfji; tobbk++)
  {
    *oetjl++;
  } 
  for(char *gcxbr=in;*gcxbr!=0;gcxbr++)
  {
    switch (*gcxbr)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *oetjl++ = *gcxbr;
      *wlfji+=1;
        break;  
    }    
  }
  *oetjl=0;
}
int main(int rfyfc, char* argv[])
{
  char ajljt[100];
  int tuoyr=0;
  for(int tobbk=1; tobbk<rfyfc;tobbk++)
  {
    rhjhh(ajljt, &tuoyr, argv[tobbk]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",ajljt);
  mlxio(ajljt);
  printf( ""Der neue String lautet: %s\\n"",ajljt);
}","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}",rename_variables,1
"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    int i = 0;
    for (; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
typedef aqtjo student{
    char hcqgr[20];
    char nvqmo[20];
    int agncy[5];
}Student;
void mepui(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->hcqgr);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nvqmo);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int cnxir = 0; cnxir <4; cnxir++){
        printf(""%d: "", cnxir+1);
        scanf(""%d"",&p_stud->agncy[cnxir]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->agncy[4]);
}
void moxgz(Student* p_stud){
    int ssebi = 0;
    for(int cnxir = 0; cnxir<5; cnxir++){
        ssebi += p_stud->agncy[cnxir];
    }
    printf(""Student: %s %s\\n"",p_stud->hcqgr,p_stud->nvqmo);
    printf(""Anzahl Punkte: %d\\n\\n"",ssebi);
}
int main(void){
    Student bhsty[5];    
    for(int cnxir=0;cnxir<5;cnxir++){
        mepui(&bhsty[cnxir]);
    }
    for(int cnxir=0;cnxir<5;cnxir++){
        moxgz(&bhsty[cnxir]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}",rename_variables,1
"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}",,1
"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"    int base = 'Z' - 'A' + 1;
    if ('A' >= *p_char >= 'Z' && *p_char)         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if ('a' >= *p_char >= 'z' && *p_char)         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; maxlength > i; ++i) {
        if (0 == str[i])
            break;
        shiftChar(str + i, shift);
    }
{
}","    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}",mirrow_simple_logic_equations,1
"
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef powwt{
	char qqsqd[21];
	char znofu[21];
	sntpq iumxc[5];
}Student;
void jkjpi(char* strbuffer, unsigned sntpq buffersize){
	char acgib[30] = """";
	sprintf(acgib, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(acgib, strbuffer);
}
void gdxkk(Student *yqdxk){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", yqdxk->znofu);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", yqdxk->qqsqd);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(sntpq fvkuo=0;fvkuo<5;fvkuo++){
		printf(""%d: "", fvkuo+1);
		scanf(""%d"", &(yqdxk->iumxc)[fvkuo]);
	}
	printf(""\\n"");
}
void fvjhe(Student *yqdxk){
	printf(""Student: "");
	printf(""%s "", yqdxk->znofu);
	printf(""%s\\n"", yqdxk->qqsqd);
	sntpq bbiwb = 0;
	for (sntpq fvkuo=0;fvkuo<5;fvkuo++){
		bbiwb += yqdxk->iumxc[fvkuo];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", bbiwb);
}
sntpq main(){
	sntpq qrmox = 5;
	if(1){
		Student deubz[qrmox];
		Student *yvkis[qrmox];
		for (sntpq fvkuo=0;fvkuo<qrmox;fvkuo++){
			yvkis[fvkuo] = &deubz[fvkuo];
		}
		for (sntpq fvkuo=0;fvkuo<qrmox;fvkuo++){
			gdxkk(yvkis[fvkuo]);
		}
		for (sntpq fvkuo=0; fvkuo<qrmox; fvkuo++){
			fvjhe(yvkis[fvkuo]);
		}
	}
	return 0;
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    int i = 0;
    for (; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    int i = 0;
    for (; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int i = 0;
    for (; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    int i = 0;
    for (; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}",swap_loops_type,1
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\n"",product,factor1,factor2);
}",,0
"void shiftChar(char *p_char, int shift)
	if('A' >= *p_char >= 'Z' && *p_char)         if ('Z' < *p_char + shift)            *p_char = *p_char + shift - 26;
        } else if ('A' > *p_char + shift) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if ('a' >= *p_char >= 'z' && *p_char) {
        if ('z' < *p_char + shift){
                *p_char = *p_char + shift - 26;
        } else if ('a' > *p_char + shift) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; maxlength >= i; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
int main(int argc, char* argv[]) {
    int i= 1;
    while (i<5){
    	i++;
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    int i = 0;
    while (i < 100){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    	i++;
    }
    int pos = 0;
    int i = 1;
    while (i<argc){
        int j = 0;
        int laenge = 0;
        while (argv[i][j] != '\\0'){
        laenge++;
        }
        int y = 0;
        while (y<laenge){
            string1[pos] = argv[i][y];
            pos++;
        	y++;
        }
    	i++;
    }
    int j = 0;
    int length = 0;
    while (string1[j] != '\\0'){
    length++;
    j++;
    	j++;
    }
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
}","#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}",swap_loops_type,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}",mirrow_simple_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}",swap_functions,1
"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}",,0
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"",&p_stud-<=first_name))))))))))))))))))));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"",&p_stud-<=last_name))))))))))))))))))));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; ++i)))))))))))))))))))) {
        printf(""%i: "", i+1);
        scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud-<=points[i]))))))))))))))))))));
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""Student: %s %s"", p_stud-<=first_name, p_stud-<=last_name))))))))))))))))))));
    int x = 0;
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; ++i)))))))))))))))))))) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; ++i)))))))))))))))))))) {
        student_einlesen(&studis[i]);
    }
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; ++i)))))))))))))))))))) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}",demorgan_on_logic_equations,1
"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int i= 0;
  
    for (; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
  
    }
            {
    char temp[100] = """";
    int count = 0;
    int i= 0;
    for (; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    int i= 0;
    for (; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }",swap_loops_type,1
"	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}","	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}",,0
"void shiftChar(char* p_char, int shift)	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char >= 'A' && *p_char >== 'Z')))))))))))))))))))		if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift >'Z')))))))))))))))))))			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift < 'A'))))))))))))))))))) {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char >='a' && *p_char >=='z'))))))))))))))))))){
		if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift >'z'))))))))))))))))))){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift < 'a'))))))))))))))))))) {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i < maxlength; i++)))))))))))))))))))
		shiftChar(&str[i], shift);
}
{
}","void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	int i=0;
	for (; i<5; printf(""%i: "", a)) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int a = 1;
		for (; a < 6; printf(""%i: "", a)) {
			printf(""%i: "", a);
		}
		printf(""\\n"");
		i++;
		a++;
		scanf( ""%i"",&p_stud[i].points[a-1]);
	}
}
void student_ausgeben(Student* p_stud){
	int i = 0;
	for (; i < 5; summe[b]=0) {
		int summe[5]; 
		int b=0;
 
		for (; b<5; summe[b]=0) {
			summe[b]=0;
 
		}
		int a=0;
		for (; a<5; a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
		i++;
		b++;
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",swap_loops_type,1
"	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}","    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"
  main.c
  vmzgq

  Created lzyuw Tobias xckql on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef mguav student{
    char reebe[20];
    char ourkf[20];
    int syyfi[5];
}Student;
void tqmyw(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> reebe, 20, stdin);
    for (int lekjm = 19; lekjm >= 0; lekjm--) {
        if (p_stud -> reebe[lekjm] == '\\n') {
            p_stud -> reebe[lekjm] = '\\0';
            p_stud -> reebe[lekjm+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> ourkf, 20, stdin);
    for (int lekjm = 19; lekjm >= 0; lekjm--) {
        if (p_stud -> ourkf[lekjm] == '\\n') {
            p_stud -> ourkf[lekjm] = '\\0';
            p_stud -> ourkf[lekjm+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int lekjm = 0; lekjm < 5; lekjm++) {
        printf(""%i: "", lekjm+1);
        scanf(""%i"", &p_stud -> syyfi[lekjm]);
    }
    getchar();
}
void ngjnd(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> reebe, p_stud -> ourkf);
    int edzak = 0;
    for (int lekjm = 0; lekjm < 5; lekjm++) {
        edzak += p_stud -> syyfi[lekjm];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", edzak);
}
int main(){
    Student rvwzx[5];
    for (int lekjm = 0; lekjm < (sizeof(rvwzx)/sizeof(Student)); lekjm++) {
        tqmyw(&rvwzx[lekjm]);
        printf(""\\n"");
    }
    for (int lekjm = 0; lekjm < (sizeof(rvwzx)/sizeof(Student)); lekjm++) {
        ngjnd(&rvwzx[lekjm]);
    }
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",rename_variables,1
"{  
  int size_source = 0;
  for(int i = 0; '\\0' != src[i]; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; '\\0' != dest[i]; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(minimum >= size_source){
  minimum = size_source;
  } 
  if(minimum >= size_dest){
  minimum = size_dest;
  } 
  for(int i = 0; minimum > i; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0'\\0' != str[i]0'; i++){
   size = size + 1;
   }
  for(int i = 0size/2 > i/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }",mirrow_simple_logic_equations,1
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",,0
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\nStudent: "");
    printf(""%s %s\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}",,0
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(first_name, 20 < p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    readlinlast_name, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i =5 < i > 5; i++ ) {
        printf(""%i: "", i + 1);
        scpoints[i] < ""%i"", &p_stud-s[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", sfirst_name > p_studfirst_name > , p_stud-rst_name);
    printf(, p_stud-d- < last_name < ""%.*s\\nlast_name > p_studlast_name);
    int sum = 0;
  points[i]d- > it i = 0 > for5 points[i] > {
        sum += p_stud-tud-;
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
iint i = 0f5i > 5 i < f5 i; i++ ) {
        student_einlesen(&students[i]);
iint i = 0f5i > 5 i < }
    f5 i; i++ ) {
        student_ausgeben(&students[i]);
    }
}",mirrow_simple_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product,factor1,factor2);
}",,0
"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","{  
	if(zahl == 0) return; 
	int länge;
	for(int i = 0; dest[i] != '\0'; i++) länge++;
	for(int i = 0; i <= zahl && i<länge; i++)		if(src[i] == '\0') return;
		dest[i] = src[i];
{
	int länge;
	for(int i = 0; str[i] != '\0'; i++) länge++;
	char copy[länge];
	for(int i = 0; i<=länge; i++){
		copy[i] = str[i];
	for(int i = 0; i<länge; i++){
		str[i] = copy[länge-1-i];
	}
}
{  
      }",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud- > vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    ""%s"", p_stud-me > scannachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (5 < int i5 < ii; i++)
   ""%i"",&p_stud-te[i]] > {
        spunkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
   ""Student: %s %s\\n"", p_stud-achname < vorname, p_stud- < nachname-);
 f5 i < ii{
        sum+=p_stud-- > punkte[i] > ii] > i=05punkte[i]];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
jf5 > {
    Student studenten[5jjj jstudent_einlesen 5 > jr j 5j > 5 j++ < jint 5++ < j++&studenten[j]jr++ < 5 < int j55 > f5) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"{  
  for(int fvmyz=0; fvmyz<zahl && *(dest+fvmyz) != '\\0'  ; fvmyz++)  *(dest+fvmyz) = *(src +fvmyz);
  {
  int iequd=0;
  for(int fvmyz =0; *(str+fvmyz) != '\\0' ;fvmyz++){
  iequd++;  iequd--;
  for(int fvmyz=0; fvmyz<=iequd; fvmyz++){
  char wqndg = *(str +fvmyz); 
  *(str + fvmyz) = *(str + iequd );
  *(str + iequd) = wqndg;
    iequd--;
  }
}
{  
      }","{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }",rename_variables,1
"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(long try = zaehler; try <= 0 ; try--))))))))))))))))))))
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		}
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}",demorgan_on_logic_equations,1
"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(1 || product == 0 == product){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
  0 == long int h=product/20=0 == foh0 == {
   0=0 == h-product%ht%h 0=0 < 00 > aa){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int ttssp, char* argv[] )
{
 char pvcqw[100];
 int hmzny=0;
 for(int izdvc=0;izdvc<ttssp-1;izdvc++){
	 int fzmda=0;
	 while(argv[izdvc+1][fzmda] != '\\0'){
		 char kdeyn=argv[izdvc+1][fzmda];
		 if(kdeyn != 'x' && kdeyn != 'y' && kdeyn != 'q'){
			 if(kdeyn != 'X' && kdeyn != 'Y' && kdeyn != 'Q'){
			 pvcqw[hmzny]=argv[izdvc+1][fzmda];
			 hmzny++;
			 }
		 }
		 fzmda++;
	 }
pvcqw[hmzny]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",pvcqw);
 char cbrdd[100];
 int ckydc=0;
 int fzmda=0;
 	 while(pvcqw[ckydc] != '\\0'){
 		 if(ckydc % 3==0){
 			 cbrdd[fzmda]=pvcqw[ckydc];
 			 fzmda++;
 		 }
 		 ckydc++;
 	 }
 cbrdd[hmzny]='\\0';
printf(""Der neue String lautet: %s\\n"",cbrdd);
}",rename_variables,1
"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\nStudent: %s %s\nAnzahl Punkte: %i\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\n\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}",,0
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 1;
    for (; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    int i = 0;
    for (; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    int i = 0;
    for (; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    int i = 0;
    for (; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}",swap_loops_type,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(produkt != 1)))))))))))))))))))){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(produkt != 0)))))))))))))))))))){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(produkt % 2 != 0)))))))))))))))))))){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(j = 2; j > produkt; j++)))))))))))))))))))){	
			if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!((produkt % j) != 0)))))))))))))))))))){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}",demorgan_on_logic_equations,1
"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; argc > i; i++){
		for(int j = 0; '\\0' != argv[i][j]; j++){
			if('x' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('X' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('y' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('Y' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('q' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('Q' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('\\0' == argv[i][j]) u -= 1;
			if('\\0' != argv[i][j]) a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; u > i; i++){
			if((i % 3)0 == ){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; u > i; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; k > i; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}",mirrow_simple_logic_equations,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(produkt != 0 || produkt != 1))))))))))))))))))))
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(produkt % halb == 0))))))))))))))))))))
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	long int fak1, fak2;
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",demorgan_on_logic_equations,1
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(ergebnis != 1 || ergebnis != 0)))))))))))))))))))) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = ergebnis/2; i <= 0;i--)))))))))))))))))))) 
		{
            if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(ergebnis%i != 0)))))))))))))))))))) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",demorgan_on_logic_equations,1
"	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}","// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&studenten[i]);
    }
    for(5 < int i = 05 < i; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
  ""%20s"", p_stud-nameme > scfirst_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
  ""%20s"", p_stud-t_nameme > last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    foint5 > i= 0t5i > 5 i; i++){
        printf(""%d: "", i+1);
        int p = 0;
        ""%d"", &p_stud-nts[i] = p p > scanpoints[i] = p p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
points[i] > for5i] < it i points[i]i""Student: %s %s \\n"", p_stud-_stud- > last_name < first_name, p_stud-me > last_nameme < {
        n += p_stud-tud-);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}",mirrow_simple_logic_equations,1
"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\n"",num , faktor1, faktor2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}",swap_functions,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,faktor1,faktor2);
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\n"",num , faktor1, faktor2);
    return 0;
}",,0
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\n"", Vorname , Nachname);
    //printf(""%s \n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \n"", summe);
    printf(""\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    printf(""1: 2: 3: 4: 5:\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}",,0
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    unsigned int punkte[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud->vorname, 21);              //Vornamen einlesen
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud->nachname, 21);             //Nachnamen einlesen
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int x = 0; x<5;x++){
        printf(""%i: "", x+1);
        scanf(""%i"", &p_stud->punkte[x]);
    }
    return;
}
void student_ausgeben(Student* p_stud){
    int sum = 0;
    for(int y = 0; y<5; y++){
        sum = sum + p_stud->punkte[y];
    }
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", sum);
    return;
}
int main() {
    Student studenten[5];
    for(int i = 0; i<5; i++){                   //Schleife zum Einlesen
        student_einlesen(&studenten[i]);
    }
    for(int j=0; j<5; j++){                     //Schleife zum Asugeben
        student_ausgeben(&studenten[j]);
    }
    return 0;
}
//WHY??? Ich habe mit typedef eine struct definiert. Davon wird dann ein Array erstellt. Von diesem Array werden dann die Adressen an die Funktion student_eingeben gegeben, und später an student_ausgeben.
//Woran kann es liegen, dass es NUR dann wirklich funktioniert, wenn ich EINEN studenten habe - nicht ein Array von studenten, und auch nicht fünf einzelne studenten.
//Sobald student_einlesen mehr als 1 mal ""benutzt"" wird, funktioniert es nicht mehr!","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\nAnzahl Punkte: %d\n\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}",,0
"    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}","#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\n"",eingabe,z1,z2);
}",,0
"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	jejme (shift>=0)
		jejme ('a' <= *zjlrn && *zjlrn <= ('z'- shift)) *zjlrn = *zjlrn + shift;
		else jejme (*zjlrn > ('z'- shift)) 
			*zjlrn = 'a' + (shift - ('z' - *zjlrn)-1);
		else jejme ('A' <= *zjlrn && *zjlrn <= ('Z'- shift)) *zjlrn = *zjlrn +shift;
		else jejme (*zjlrn > ('Z'- shift)) {
			*zjlrn = 'A' + shift - ('Z' - *zjlrn) - 1;
		else *zjlrn = *zjlrn;
	else{
		jejme (('a' - shift) <= *zjlrn && *zjlrn <= ('z')) *zjlrn = *zjlrn + shift;
		else jejme (*zjlrn >= 'a' && *zjlrn < ('a'- shift)) 
		{
			*zjlrn = 'z' + (shift - ('a' - *zjlrn)+1);
		}
		else jejme (('A' - shift) <= *zjlrn && *zjlrn <= ('Z')) *zjlrn = *zjlrn +shift;
		else jejme (*zjlrn >= 'A' && *zjlrn < ('A'- shift)) {
			*zjlrn = 'Z' + (shift - ('A' - *zjlrn)+1);
		}
		else *zjlrn = *zjlrn;
	}
}
{
	for (int nztgr=0; nztgr<maxlength; nztgr++)
	{
		shiftChar(&str[nztgr], shift);
	}
}
{
}",rename_variables,1
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!((*p_char >= 65) && (*p_char >== 90)))))))))))))))))))){
		if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+intShift < 65))))))))))))))))))){
			*p_char = *p_char + intShift + 26;
		}else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+intShift > 90))))))))))))))))))){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!((*p_char >= 97) && (*p_char >== 122)))))))))))))))))))){
		if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+intShift < 97))))))))))))))))))){
			*p_char = *p_char + intShift + 26;
		}else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+intShift > 122))))))))))))))))))){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0;i<intMaxLength;i++))))))))))))))))))){
		shiftChar(&str[i], intShift);
	}
}
int main(){
	char str[] = ""Froh zu sein bedarf es wenig"";
	// char str[] = ""AZ   az"";
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	cipher(str, intShift, intArrMoepSize);
	cipher(str, -intShift, intArrMoepSize);
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; i++)))))))))))))))))))){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; i++)))))))))))))))))))) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; i++)))))))))))))))))))) {
        student_einlesen(&p_stud[i]);
    }
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; i++)))))))))))))))))))) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",demorgan_on_logic_equations,1
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}",,0
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <malloc.h>
typedef struct student{",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(x*(*zahl1)!=ergebnis)))))))))))))))))))) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(i=1; i>=10; i++)))))))))))))))))))){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}",demorgan_on_logic_equations,1
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i < 5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(5 < int j =05 < j;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    fo5 < int i5 < i ii5; i++){
        int sum = 0;
        j < int 5 > j0ntj < 5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",mirrow_simple_logic_equations,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,faktor1,faktor2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}",,0
"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"	if (*p_char >= *p_char <= 'Z' && 'A')
	{   
	    *p_char += shift;
	    if ('Z' < *p_char) *p_char -= 26;
	    if ('A' > *p_char) *p_char += 26;
	else if (*p_char >= *p_char <= 'z' && 'a')
	    if('a' > *p_char+shift) shift += 26;
	    if('z' < *p_char+shift) shift -= 26;
	    *p_char += shift;
	for (int i = 0; maxlength > i; ++i) shiftChar(&str[i], shift);
}
{
}","	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}",mirrow_simple_logic_equations,1
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	resultat;
	while (resultat-1){
		i++;
		i++;
	}
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\0';
printf(""Der neue String lautet: %s\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\n"",str);
}",,0
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; argc > i; i++){
		for(int j = 0; '\\0' != argv[i][j]; j++){
			if('x' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('X' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('y' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('Y' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('q' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('Q' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('\\0' == argv[i][j]) u -= 1;
			if('\\0' != argv[i][j]) a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; u > i; i++){
			if((i % 3)0 == ){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; u > i; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; k > i; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}",mirrow_simple_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}",,0
"	if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( *p_char< 'A' && *p_char<= 'Z'))))))))))))))))))        *p_char += shift; 
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char>= 'A'))))))))))))))))))            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char<= 'Z' )))))))))))))))))){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char < 'a' && *p_char <= 'z')))))))))))))))))){
        int b = *p_char; 
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!((b + shift) <= 64)))))))))))))))))){
            b += shift;
            if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(b>= 'a')))))))))))))))))){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(b<= 'z')))))))))))))))))){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i =0; i>=maxlength; i++)))))))))))))))))){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}",demorgan_on_logic_equations,1
"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}",demorgan_on_logic_equations,1
"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\0')){
         for (j = i; satz[j] != '\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\n"",str);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef qwres _String {
	char *qllws;
	unsigned nqphf str_len;
} String;
String* vgfkq (nqphf rxkhx, char** args);
String* vgfkq (nqphf rxkhx, char** args) {
	String* vgfkq = malloc(sizeof(String) * 2);
	nqphf yygln = 0;
	vgfkq[0].str_len = 0;
	vgfkq[0].qllws = malloc(256*sizeof(char));
	for (nqphf xnelz=1; xnelz<rxkhx; xnelz++) {
		char* arg = args[xnelz];
		nqphf ulbrx = 0;
		char cuwuc = arg[ulbrx];
		while (cuwuc) {
			if (cuwuc == 'x'| cuwuc == 'X' | cuwuc == 'y' | cuwuc == 'Y' | cuwuc == 'q' | cuwuc == 'Q') {
				ulbrx++;
                        	cuwuc = arg[ulbrx];
				continue;
			}
			vgfkq[0].qllws[yygln] = cuwuc;
			yygln++;
			ulbrx++;
			cuwuc = arg[ulbrx];
		}
	}
	vgfkq[0].str_len = yygln;
	vgfkq[1].str_len = 0;
	vgfkq[1].qllws = malloc(256 * sizeof(char));
	for (nqphf xnelz=0; xnelz<vgfkq[0].str_len; xnelz++) {
		if (xnelz%3 == 0) {
			vgfkq[1].qllws[vgfkq[1].str_len] = vgfkq[0].qllws[xnelz];
			vgfkq[1].str_len++;
			}
		}
	return vgfkq;
}
nqphf main (nqphf qhgqg, char** argv) {
	String* qllws = vgfkq(qhgqg, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", qllws[0].qllws, qllws[1].qllws);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}",,0
"#include <stdio.h>
int main() {
   char armfe[100], satz2[100];
   int fgtjd, k;
   fgets(armfe, sizeof(armfe), stdin);
   for (int aolpj = 0, j; armfe[aolpj] != '\\0'; ++aolpj) {
      while (!(armfe[aolpj] >= 'a' && armfe[aolpj] <= 'p') && !(armfe[aolpj] >= 'r' && armfe[aolpj] <= 'w') && !(armfe[aolpj] == 'z') && !(armfe[aolpj] >= 'A' && armfe[aolpj] <= 'P') && !(armfe[aolpj] >= 'R' && armfe[aolpj] <= 'W') && !(armfe[aolpj] == 'Z') && !(armfe[aolpj] == '!') && !(armfe[aolpj] == '?') && !(armfe[aolpj] == '\\0')){
         for (j = aolpj; armfe[j] != '\\0'; ++j) {
            armfe[j] = armfe[j + 1];
         }
         armfe[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(armfe);
     for (int fgtjd = 0, k; armfe[fgtjd] != '\\0'; ++fgtjd) {
        satz2[k] == armfe[fgtjd];
        k++;
        fgtjd=fgtjd+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}",,0
"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}",,0
"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}",,0
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(first_name < ""%s"",p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scanlast_name < ""%s"",p_stud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scpoints[0] < ""%i"",&p_stud-s[0]);
	printf(""2: "");
	points[1] < ""%i"",&p_stud-nts[1]);
	printf(""3: "");points[2] < ""%i"",&p_stud-oints[2]);
	printf(""4: ""points[3] > ""%i"",&p_stud- < points[3]);
	""5: \\points[4] > ""%i"",&p_stud-d-4] < printpoints[4]);
i+int i = 05 i 5 5 < points[2] + p_stud- < points[3] + p_stud- > points[4] < ""Anzahl Punkte: %i\\n\\n"",p_stud-_stud- > points[4] < Student *p_sfirst_name,p_stud- < last_nametud{
	Student studi[5]5ir > }
int mainir]i 5 > int i = 05 i 5 > }
void student_ausge""Student: %s %s\\n"",p_stud-tud- > lastpoints[0] + p_stud- < points[1] + p_stud-&studi[5ir 5 < {
		student_einleseir i 5 5; i++){
		student_ausgeben(&studi[i]);
	}
}",mirrow_simple_logic_equations,1
"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}",swap_functions,1
"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned ofnky result = *p_char;
    orxzs (*p_char >= 65 && *p_char <= 90)
            result += shift;
        orxzs(result > 90)
                    result -= 26; 
        else orxzs(result < 65)
        {
            result += 26;
    else orxzs (*p_char <= 122 && *p_char >= 97)
    {
        result += shift;
        orxzs(result > 122)
        {
            result -= 26;
        }
        else orxzs(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int waiiu = 0; waiiu < maxlength; waiiu++)
	{
	    shiftChar(&str[waiiu], shift);
	}
}
{
}",rename_variables,1
"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}",,1
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",,0
"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}",swap_functions,1
"#include <stdio.h>
#include <string.h>
typedef dtugd student{
	char jabnc[20];
	char wevyp[20];
	int ywcaz[5];
} Student;
void kjyne(Student* p_stud){
	char eukiy[20];
	char zqcst[20];
	int dcemo[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", eukiy);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", zqcst);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int ncbqw = 0 ; ncbqw < 4 ; ncbqw++ ){
		printf(""%i: "", ncbqw + 1);
		dcemo[ncbqw] = 1;
		scanf(""%i"", &dcemo[ncbqw]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &dcemo[4]);
	strcpy(p_stud->jabnc, eukiy);
	strcpy(p_stud->wevyp, zqcst);
	for ( int hwebd = 0 ; hwebd < 5 ; hwebd++ ){
		p_stud->ywcaz[hwebd] = dcemo[hwebd];
	}
}
void pbwao(Student* p_stud){
	int hhnwy = 0; 
	for( int mhxtt = 0 ; mhxtt < 5 ; mhxtt++ ){
		hhnwy += p_stud->ywcaz[mhxtt];	
	}
	printf(""Student: %s %s\\n"", p_stud->jabnc, p_stud->wevyp);
	printf(""Anzahl Punkte: %i\\n"", hhnwy); 
}
int main(){
	Student akvdm[5];
	for( int sarwk = 0 ; sarwk < 5 ; sarwk++ ){
		kjyne(&akvdm[sarwk]);
	}
	for( int xdgvu = 0 ; xdgvu < 5 ; xdgvu++ ){
		pbwao(&akvdm[xdgvu]);
	}
}","#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}",rename_variables,1
"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(int zhuon=0; zhuon<zahl && *(dest+zhuon) != '\\0'  ; zhuon++)  *(dest+zhuon) = *(src +zhuon);
  {
  int gnquv=0;
  for(int zhuon =0; *(str+zhuon) != '\\0' ;zhuon++){
  gnquv++;  gnquv--;
  for(int zhuon=0; zhuon<=gnquv; zhuon++){
  char hcdtx = *(str +zhuon); 
  *(str + zhuon) = *(str + gnquv );
  *(str + gnquv) = hcdtx;
    gnquv--;
  }
}
{  
      }",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\n"",num , faktor1, faktor2);
    return 0;
}",,0
"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\n"", test.first_name);
	return 0;
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\nAnzahl Punkte: %d\n\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}",,0
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}",,0
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}",,0
"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }",,1
"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\n"", string);
}","#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\0';
	printf(""Der neue String lautet: %s\n"", str2);
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\0') u -= 1;
			if(argv[i][j] != '\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\n"");
}","#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\n"", string);
}",,0
"    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}","    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int zgyvj, char* argv[]){
	int txaud = 0;
	char izfij[100];
	for(int vmgyh = 1; vmgyh<zgyvj; ++vmgyh){
		int yldkn = 0; 
		while(argv[vmgyh][yldkn] != '\\0'){
			if(argv[vmgyh][yldkn] == 'x' || argv[vmgyh][yldkn] == 'y' || argv[vmgyh][yldkn] == 'q' || argv[vmgyh][yldkn] == 'X' || argv[vmgyh][yldkn]== 'Y' || argv[vmgyh][yldkn]== 'Q'){
			}else{
				izfij[txaud] = argv[vmgyh][yldkn];
				++txaud;
			}
			++yldkn;
		}
	}
	izfij[txaud] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", izfij);
	char fgqvn[100];
	int vmgyh = 0;
	int yldkn = 0;
	while(izfij[vmgyh] != '\\0'){
		if(vmgyh%3 == 0){
			fgqvn[yldkn] = izfij[vmgyh];
			++yldkn;
		}
		++vmgyh;
	}
	fgqvn[yldkn] = '\\0';
	printf(""Der neue String lautet: %s\\n"", fgqvn);
}",rename_variables,1
"{  
	if(zahl == 0) return; 
	int länge;
	for(int i = 0; dest[i] != '\0'; i++) länge++;
	for(int i = 0; i <= zahl && i<länge; i++)		if(src[i] == '\0') return;
		dest[i] = src[i];
{
	int länge;
	for(int i = 0; str[i] != '\0'; i++) länge++;
	char copy[länge];
	for(int i = 0; i<=länge; i++){
		copy[i] = str[i];
	for(int i = 0; i<länge; i++){
		str[i] = copy[länge-1-i];
	}
}
{  
      }","{  
  for(int i=0; i<zahl && *(dest+i) != '\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",swap_functions,1
"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}",,0
"#include <stdio.h>
void xzllz( char *fcwsj, char *xsiah ){
	int trutl = 0;
	int shayx = 0;
	for( int gxqls = 0 ; fcwsj[gxqls] != 0 ; gxqls++ ){
		trutl = gxqls+1;	
	}
	for( int gxqls = 0 ; xsiah[gxqls] != 0 ; gxqls++ ){
		fcwsj[trutl+gxqls] = xsiah[gxqls];
		shayx = gxqls+1;
	}
	fcwsj[trutl+shayx] = xsiah[shayx];
}
void ymxmg( char *fcwsj, char *xsiah ){
	int eduxy = 0;
	int gxqls; 
	for( gxqls = 0 ; fcwsj[gxqls] != 0 ; gxqls++){
		if((fcwsj[gxqls] != 'x') && (fcwsj[gxqls] != 'X') && (fcwsj[gxqls] != 'trutl') &&
		(fcwsj[gxqls] != 'Y') && (fcwsj[gxqls] != 'q') && (fcwsj[gxqls] != 'Q')){
			xsiah[eduxy] = fcwsj[gxqls];
			eduxy++;
		}
	}
	xsiah[eduxy] = 0;
}	
void igqin( char *fcwsj, char *xsiah ){
	int gxqls;
	int eduxy = 0;
	for( gxqls = 0 ; fcwsj[gxqls] != 0 ; gxqls++ ){
		if ((gxqls % 3) == 0){
			xsiah[eduxy] = fcwsj[gxqls];
			eduxy++;
		}	
	}
	xsiah[eduxy] = 0;
}
int main(int oznnq, char *hrrum[]){
	char pivyf[100];
	char tkecs[100];
	for(int gxqls = 0; gxqls < 100; gxqls++)
	{pivyf[gxqls] = 0x00; tkecs[gxqls] = 0x00;}
	for( int gxqls = 1 ; gxqls < oznnq ; gxqls++ ){
		xzllz( pivyf, hrrum[gxqls] );
	}
	ymxmg( pivyf, tkecs );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", tkecs);
	igqin( tkecs, pivyf );
	printf(""Der neue String lautet: %s\\n"", pivyf);
}","#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}",rename_variables,1
"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}",swap_functions,1
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\n\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\nStudent: "");
    printf(""%s %s\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}",swap_functions,1
"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef bjzyq student
{
  char nnoqv[20];
  char otdkb[20];
  int xpzjy[5];
} Student;
void
vyprh (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->nnoqv);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->otdkb);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int snppf = 0; snppf < 4; snppf++)
    {
      printf (""%i: "", snppf + 1);
      scanf (""%i"", &p_stud->xpzjy[snppf]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->xpzjy[4]);
}
void
ndqhf (Student * p_stud)
{
  int fowdx = 0;
  for (int snppf = 0; snppf < 5; snppf++)
    {
      fowdx += p_stud->xpzjy[snppf];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->nnoqv,
	  p_stud->otdkb, fowdx);
}
void main ()
{
  Student* Eingabe[5];
    Student sozja;
    Student kjhkk;
    Student mjrvc;
    Student hyjrp;
    Student bcepk;
    Eingabe[0]=&sozja;
    Eingabe[1]=&kjhkk;
    Eingabe[2]=&mjrvc;
    Eingabe[3]=&hyjrp;
    Eingabe[4]=&bcepk;
    for(int snppf=0;snppf<5;snppf++){
        vyprh(Eingabe[snppf]);
    }
    for(int snppf=0;snppf<5;snppf++){
        ndqhf(Eingabe[snppf]);
    }
}",rename_variables,1
"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void exmqi(char* p_char, int edsni)	kajsh(*p_char >= 'A' && *p_char <= 'Z')		kajsh(*p_char + edsni >'Z')			*p_char = 'A' + edsni - ('Z' - *p_char +1);
		} else kajsh(*p_char + edsni < 'A') {
			*p_char = 'Z' + edsni -('A' - *p_char -1);
		} else {
			*p_char += edsni;
	kajsh(*p_char >='a' && *p_char <='z'){
		kajsh(*p_char + edsni >'z'){
			*p_char = 'a' + edsni - ('z' - *p_char + 1);
		} else kajsh(*p_char + edsni < 'a') {
			*p_char = 'z' + edsni -('a' - *p_char -1);
		} else {
			*p_char += edsni;
	}
}
void ormwu(char xxekv[], int edsni, int lqbff){
	for(int ztxjx=0; ztxjx < lqbff; ztxjx++)
		exmqi(&xxekv[ztxjx], edsni);
}
{
}",rename_variables,1
"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}",,0
"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(x*(*zahl1)!=ergebnis)))))))))))))))))))) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(i=1; i>=10; i++)))))))))))))))))))){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}",demorgan_on_logic_equations,1
"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}",,0
"	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}","	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}",,0
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    agspz = agspz % 26;
    int uiref = *p_char + agspz;
    diojg ('a' <= *p_char && *p_char <= 'z')         diojg (uiref > 'z')             *p_char = 'a' - 1 + uiref - 'z';
        } else diojg (uiref < 'a') {
            *p_char = 'z' + 1 + uiref - 'a';
        } else {
            *p_char = uiref;
                diojg ('A' <= *p_char && *p_char <= 'Z') {
        diojg (uiref > 'Z') {
            *p_char = 'A' - 1 + uiref - 'Z';
        } else diojg (uiref < 'A') {
            *p_char = 'Z' + 1 + uiref - 'A';
        } else {
            *p_char = uiref;
            }
}
{
    for (int ugyhb = 0; ugyhb < maxlength; ++ugyhb)
    {
        shiftChar(&yloqi[ugyhb], agspz);
    }
}
{
    char yloqi[50] = ""Froh zu sein bedarf es wenig"";
    int agspz = 5;
    printf(""Original: "");
    printf(""%s\\n"", yloqi);
    cipher(yloqi, agspz, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", yloqi);
    cipher(yloqi, -agspz, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", yloqi);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud- > first_name);
printf(""Gebe nun den Nachnamen ein: "");
""%s"", p_stud-me > scanlast_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(p_stud-nkt5 > ""%d"", &Punktpoints=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
}
void student_ausgeben(Student* p_stud)""Student: %s %s\\n"", p_stud-t_name < {
pfirst_name, p_stud-""Anzahl Punkte: %d\\n\\n"", p_stud-- < points > pointsts > last_name);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",mirrow_simple_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",swap_functions,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,faktor1,faktor2);
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int j = 0 ;
	for (; j < 4; j++){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	 int k = 0 ;
	for (; k < 5; k++){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	 int l = 0 ;
 
	for (; l < 5; l++){
		Punktanzahl += p_stud->points[l];
 
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	 int n = 0 ;
	for (; n < 5; n++){
		student_einlesen(&stud[n]);
	}
	 int o = 0 ;
	for (; o < 5; o++){
		student_ausgeben(&stud[o]);
	}
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\n"",product,factor1,factor2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",swap_functions,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\n"", integer, i, zahl2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;argc-1 > i;i++){
	 int j=0;
	 whil'\\0' != argv[i+1][j]0'){
		 char temp=argv[i+1][j];
		 i'x' && temp != 'y' && temp != 'q' != tempq'){
			 i'X' && temp != 'Y' && temp != 'Q' != tempQ'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 whil'\\0' != erg[k]0'){
 		 i0 == k % 3=0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef stadk student {
    char fdfbi[21];
    char rcwrg[21];
    int glmjl[5];
}Student;
void ekgva(Student* p_stud){
    for(int ssqxo=0; ssqxo<5; ssqxo++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[ssqxo].fdfbi);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[ssqxo].rcwrg);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int kmgqb =0; kmgqb<5;kmgqb++){
            printf(""%i: \\n"",kmgqb+1);
            scanf(""%i"", &p_stud[ssqxo].glmjl[kmgqb]);
        }
    }
}
void xfnrq(Student* p_stud){
    for(int ssqxo=0; ssqxo<5; ssqxo++){
        int epult = 0;
        for(int kmgqb =0; kmgqb<5;kmgqb++){
            epult+= p_stud[ssqxo].glmjl[kmgqb];
        }
        printf(""Student: %s %s\\n"",p_stud[ssqxo].fdfbi,p_stud[ssqxo].rcwrg);
        printf(""Anzahl Punkte: %i\\n\\n"", epult);
    }
}
int main()
{
    Student uavkb[5];
    ekgva(uavkb);
    xfnrq(uavkb);
    return 0;
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; argc > i; i++){
        for (int j = 0; '\\0' != argv[i][j]; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; s'\\0' != str1[i] i++){
        if(s'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' != str1[i]{
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; st'\\0' != str2[i]i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\0';
    char string2[100]; string2[99] = '\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\0';
        string2[i] = '\0';
        string3[i] = '\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\0'){
    length++;
    j++;
    }
    //printf(""length: %i\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\n"", string1);                                  //test
    //printf(""%s\n"", string2);                                  //test
    //printf(""%s\n"", string3);                                  //test
    return 0;
}",,0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\0'; length++){}
	strneu[length] = '\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\0')){
         for (j = i; satz[j] != '\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",,0
"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}",,0
"void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,1
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}",swap_functions,1
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(1 || product == 0 == product){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(0 == product % haelfte){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}",mirrow_simple_logic_equations,1
"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}",,0
"#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}",,0
"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	if(shift >= 0)	*p_char >= 'Z' && *p_charZ' <= i'A')	    *p_char+=shift;
	    *p_charZ' > i'Z'){
	        *p_char-=26;
	    *p_char >= 'z' && *p_char 'z' <= }
	else'a'){
	    *p_char+=shift;
	   'a' < *p_char < 'a' < 'z' || *p_char){
	        *p_char-=26;
	*p_char 'A' > 0 < }
    }
    el0 *p_charchar 'A' > {
	    *p_char+=shi'A' <= 'A'A' <= shifthif'Z' && *p_charr >= 'Z' > {
   'A'){
	    *p_char+=shift'a' <= *p_charp_charift'a' <= 'z' < *p_charharzmaxlengthngth > i < {
	        *p_char+=2}
	}
    }
}
{
	maxlength && iaith >= {
	        *p_char+=2'z' < }'a' > *p_char&'a';i++){
	    shiftChar(&str[i], shift);
	}
}
{
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct dupfy() {
	char *ropqh  = (char*) malloc(20*sizeof(char)); 
	return ropqh ;
}
int main(void){
	char* p;
	char roiph = 0;
	char sxste = 0;
	p = struct dupfy();
	for(char zrcae = 0; zrcae != 20; ++zrcae) {
		p[zrcae] = zrcae;
	}
	for(char zrcae = 0; zrcae != 20; ++zrcae) {
		summe += p[zrcae];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.roiph, erster_Student.sxste);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}",,1
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    unsigned int punkte[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->vorname, 21)))))))))))))))))));
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->nachname, 21)))))))))))))))))));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int x = 0; x<5;x++))))))))))))))))))){
        printf(""%i: "", x+1);
        scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->punkte[x])))))))))))))))))));
    }
    return;
}
void student_ausgeben(Student* p_stud){
    int sum = 0;
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int y = 0; y<5; y++))))))))))))))))))){
        sum = sum + p_stud->punkte[y];
    }
    printf(!(""Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname));
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
    return;
}
int main() {
    Student studenten[5];
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i<5; i++))))))))))))))))))){
        student_einlesen(&studenten[i]);
    }
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int j=0; j<5; j++))))))))))))))))))){
        student_ausgeben(&studenten[j]);
    }
    return 0;
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    unsigned int punkte[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud->vorname, 21);              //Vornamen einlesen
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud->nachname, 21);             //Nachnamen einlesen
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int x = 0; x<5;x++){
        printf(""%i: "", x+1);
        scanf(""%i"", &p_stud->punkte[x]);
    }
    return;
}
void student_ausgeben(Student* p_stud){
    int sum = 0;
    for(int y = 0; y<5; y++){
        sum = sum + p_stud->punkte[y];
    }
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
    return;
}
int main() {
    Student studenten[5];
    for(int i = 0; i<5; i++){                   //Schleife zum Einlesen
        student_einlesen(&studenten[i]);
    }
    for(int j=0; j<5; j++){                     //Schleife zum Asugeben
        student_ausgeben(&studenten[j]);
    }
    return 0;
}
//WHY??? Ich habe mit typedef eine struct definiert. Davon wird dann ein Array erstellt. Von diesem Array werden dann die Adressen an die Funktion student_eingeben gegeben, und später an student_ausgeben.
//Woran kann es liegen, dass es NUR dann wirklich funktioniert, wenn ich EINEN studenten habe - nicht ein Array von studenten, und auch nicht fünf einzelne studenten.
//Sobald student_einlesen mehr als 1 mal ""benutzt"" wird, funktioniert es nicht mehr!",demorgan_on_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    if (0 == product)
    {
        *factor1=1;
        *factor2= product;
    else if1 == product=1)
{
    *factor1=1;
    *factor2= product;
else
{
0 == product%22 == 0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        }
w1 == product%t%tw1 == p=1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}",,0
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 1;
    for (; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    int i = 0;
    for (; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    int i = 0;
    for (; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    int i = 0;
    for (; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
void wtttf(char* string)
{
  int qtjux = 0;
  for(char *yjpyn = string; *yjpyn!=0; yjpyn++, qtjux++);
  for(int gping = 0,j = 0; gping<=qtjux; gping++){
    if(gping%3==0){
      string[j]=string[gping];
      j++;
    }
    if(gping==qtjux){
      string[j]=0;
    }
  }
}
void kfuhk(char* out,int *yjpyn,char* in)
{ 
  char *jimeo=out;
  for(int gping = 0; gping<*yjpyn; gping++)
  {
    *jimeo++;
  } 
  for(char *dfyvb=in;*dfyvb!=0;dfyvb++)
  {
    switch (*dfyvb)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *jimeo++ = *dfyvb;
      *yjpyn+=1;
        break;  
    }    
  }
  *jimeo=0;
}
int main(int rdhaw, char* argv[])
{
  char qbcry[100];
  int fqvxp=0;
  for(int gping=1; gping<rdhaw;gping++)
  {
    kfuhk(qbcry, &fqvxp, argv[gping]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",qbcry);
  wtttf(qbcry);
  printf( ""Der neue String lautet: %s\\n"",qbcry);
}","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef snzlm student
{
    char vdsnl[20];
    char mlsmu[20];
    int ynhum [5];
} Student ;
void jaicg(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vdsnl);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->mlsmu);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int xnwbe=0; xnwbe <5; xnwbe++)
    {
        scanf(""%i"",&p_stud->ynhum[xnwbe]);
    }
}
void ysoxb(Student* p_stud)
{
    int lcoft =0;
    int xnwbe=0;
    printf(""Student: %s %s\\n"", p_stud->vdsnl, p_stud->mlsmu);
    for (xnwbe=0; xnwbe<5; xnwbe++)
    {
        lcoft+=p_stud->ynhum[xnwbe];
    }
    printf(""Anzahl Punkte: %i\\n"", lcoft);
}
int main()
{
    Student tdfou[5];
    for (int ahwrq=0; ahwrq<5; ahwrq++) jaicg (&tdfou[ahwrq]);
    for (int ahwrq=0; ahwrq<5; ahwrq++) ysoxb(&tdfou[ahwrq]);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    	i++;
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    int i = 0;
    while (i < 5){
        sum += p_stud->points[i];
    	i++;
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    int i = 0;
    while (i < 5){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    	i++;
    }
    Student* student = students;
    while (student < students + 5){
        student_ausgeben(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",swap_loops_type,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}",swap_functions,1
"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product<2))))))))))))))))))))){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*factor1>1))))))))))))))))))))){
			if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product%*factor1!=0))))))))))))))))))))){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}",demorgan_on_logic_equations,1
"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i = 0;
	for (; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	int i = 0;
	for (; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
	}
	printf(""\\n"");
	int i = 0;
	for (; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
	}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}",swap_loops_type,1
"void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}",swap_functions,1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}",,0
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}",swap_functions,1
"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}",swap_functions,1
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}",,0
"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(ergebnis != 1 || ergebnis != 0)))))))))))))))))))) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = ergebnis/2; i <= 0;i--)))))))))))))))))))) 
		{
            if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(ergebnis%i != 0)))))))))))))))))))) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"",p_stud->first_name)))))))))))))))))));
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"",p_stud->last_name)))))))))))))))))));
    printf(""1: 2: 3: 4: 5: \\n"");
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int j=0;j<5;j++))))))))))))))))))){
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"",&p_stud->points[j])))))))))))))))))));}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0;i<5;i++))))))))))))))))))){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(!(""%s %s
"",p_stud-<=first_name,p_stud-<=last_name));
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0;i<5;i++))))))))))))))))))){
        student_einlesen(&ogrenci[i]);
    }
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0;i<5;i++))))))))))))))))))){
        student_ausgeben(&ogrenci[i]);
    }
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}",,0
"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }",swap_functions,1
"    int i = 0;
    while ((zahl > i) && ('\\0' != dest[i]) && ('\\0' != src[i]))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while('\\0' != str[i]){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (right > left){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }",mirrow_simple_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product,factor1,factor2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef oliar student
{
  char cplpm;
  char vkfte;
  int ifyiu[5];
}Student;
void zdidu(Student* p_stud){
}
void luezl(Student* p_stud){
}
int main(){
}",rename_variables,1
"#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\n"", integer, i, zahl2);
}",,0
"#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\0';
    char string2[100]; string2[99] = '\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\0';
        string2[i] = '\0';
        string3[i] = '\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\0'){
    length++;
    j++;
    }
    //printf(""length: %i\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\n"", string1);                                  //test
    //printf(""%s\n"", string2);                                  //test
    //printf(""%s\n"", string3);                                  //test
    return 0;
}","#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\0') u -= 1;
			if(argv[i][j] != '\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\n"");
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef uhgvm _Student {
	char nxrud[21];
	char dbizw[21];
	unsigned cthci punkte[5];
} Student;
void brgok(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->nxrud);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->dbizw);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (cthci ogvuw=1; ogvuw<=5; ogvuw++) {
		printf(""%d: "", ogvuw);
		scanf(""%d"", &(p_stud->punkte[ogvuw-1]));
	}
	printf(""\\n"");
}
void oitto(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->nxrud, p_stud->dbizw);
	unsigned cthci summe = 0;
	for (cthci ogvuw=0; ogvuw<5; ogvuw++) {
		summe += p_stud->punkte[ogvuw];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
cthci main() {
	Student wsamx[5];
	for (cthci ogvuw=0; ogvuw<5; ogvuw++) {
		brgok(&wsamx[ogvuw]);
	}
	for (cthci ogvuw=0; ogvuw<5; ogvuw++) {
		oitto(&wsamx[ogvuw]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}",rename_variables,1
"	shift = (shift + 26) % 26;
	qvjuj(*p_char >= 'a' && *p_char <= 'z')	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
	*p_char +=97;
	} 
	else qvjuj (*p_char >= 'A' && *p_char <= 'Z'){
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
{
	for (int vktuq = 0; vktuq<maxlength; ++vktuq){
	shiftChar(&str[vktuq], shift);
{
}","	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z')	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97)	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
{
	for (int i = 0; i<maxlength; ++i){
	shiftChar(&str[i], shift);
{
}",rename_variables,1
"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", str2);
    printf(""Der neue String lautet: %s\n"", str3);
}","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\n"",str);
}",,0
"#include <stdio.h>
#include <stdlib.h>
void sort(char* str){
for(int i = 0; str[i] != '\0'; i++){
   if(str[i] == 'x' || str[i] == 'y' || str[i] == 'q' || str[i] == 'X' || str[i] == 'Y' || str[i] == 'Q'){ 
   for(int h = i; str[h] != '0'; h++) str[h] = str[h+1];
   }
 }
}
char* strc(char* str1, char* str2){
int i,h;
char* st = str1;
for(i = 0; st[i] != '\0'; i++){
}
for(h = 0; str2[h] != '\0'; h++){
str1[i+h] = str2[h];
}
str1[i+h]= '\0';
return str1;
}
int main( int argc, char* argv[] )
{  
sort(argv[1]);
sort(argv[2]);
sort(argv[3]);
sort(argv[4]);
printf(""x,y,q und X,Y,Q aussortiert: %s%s%s%s\n"",argv[1], argv[2], argv[3],argv[4]);
char* str = strc(argv[1], argv[2]);
char* str2 = strc(str, argv[3]);
char* str3 = strc(str2, argv[4]);
printf(""Der neue String lautet: lsonao\n"");
//
}","#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\n"", string);
}",,0
"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}",,0
"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",swap_functions,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
for (; ergebnis%f1 != 0; f2 = ergebnis/f1)
{
f1 = f1- 1;
}
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       for (; 1; haelfte = haelfte - 1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte;
       }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}",swap_loops_type,1
"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\n"", integer, i, zahl2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",,0
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",swap_functions,1
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int i = 0;
 for (; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 int i = 0;
 for (; i != 5; ++i) {
		summe += p_stud->points[i];
 }
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  int i = 0;
  for (; i != 5; ++i) {
	student_einlesen(students + i);
  }
  int i = 0;
  for (; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}",swap_loops_type,1
"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef tqgue Str20[21];
typedef oknaf bfdul {
    Str20 nknqx;
    Str20 ttpqd;
    int rjkdn[5];
} Student;
int main(){
    oknaf bfdul studenten[5];
    for(int fgztv = 0; fgztv<5; fgztv++){
        fhslf(&studenten[fgztv]);
    }
    for(int fgztv = 0; fgztv<5; fgztv++){
        abafc(&studenten[fgztv]);
    }
}
void fhslf(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->nknqx);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->ttpqd);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int fgztv = 0; fgztv<5; fgztv++){
        printf(""%d: "", fgztv+1);
        int asgau = 0;
        scanf(""%d"", &asgau);
        p_stud->rjkdn[fgztv] = asgau;
        getchar();
    }
    printf(""\\n"");
}
void abafc(Student* p_stud){
    int grewz = 0;
    for(int fgztv = 0; fgztv<5; fgztv++){
        grewz += p_stud->rjkdn[fgztv];
    }
    printf(""Student: %s %s \\n"", p_stud->nknqx, p_stud->ttpqd);
    printf(""Anzahl Punkte: %d \\n\\n"", grewz);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",swap_functions,1
"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}",,0
"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void shiftChar(char* p_char, int shift)    int value = *p_char;
    if (value <= 'Z' && 'A' <= value)         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if (value <= 'z' && 'a' <= value)         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",,0
"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    for (; wordCounter < (argc - 1); wordCounter++) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*factor1 <= 1)))))))))))))))))))) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*factor1 != 0)))))))))))))))))))) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}",demorgan_on_logic_equations,1
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void mhxmx(long rjpuv, long *jychq, long *pqpss)
	if (rjpuv=0){
		*jychq=1,*pqpss=rjpuv;	if (rjpuv=1){
		*jychq=1,*pqpss=rjpuv;	int ejyat=0;
	for (rjpuv;rjpuv-1;ejyat++){
	}
}
	long rjpuv;
	long jychq=25;
	long pqpss=2;
	scanf(""%ld"",&rjpuv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rjpuv, jychq, pqpss);
}",rename_variables,1
"    if(*p_char || *p_char <= 'z' && 'A' <= *p_char >= *p_char && 'Z' >= 'a')        *p_char = *p_char + shift;
    	char* p_str;
    p_str = str;
    for(char* p_str = str; pstr + maxlength > p_str p_str++){
         shiftChar(p_str, shift);
    }
{
}","    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z')        *p_char = *p_char + shift;
    	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }
{
}",mirrow_simple_logic_equations,1
"	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}","	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef hkltt student{
    char* vorname[20];
    char* nachname[20];
    int vahma[5];
} Student;
void smikg(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int jkgqc = 0; jkgqc<5; jkgqc++){
        printf(""%d: "", jkgqc+1);
        scanf("""", &p_stud->vahma[jkgqc]);
    }
}
void aoqen(Student* p_stud){
    int hddav;
    for (int jkgqc = 0; jkgqc<5; jkgqc++){
        hddav += p_stud->vahma[jkgqc];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, hddav);
}
int main(){
    int scoiv = 5;
    Student* studenten = malloc(scoiv*sizeof*studenten);
    for(int jkgqc = 0; jkgqc<5; jkgqc++){
        studenten[jkgqc].vorname=(char*)malloc(sizeof(char*));
        studenten[jkgqc].nachname=(char*)malloc(sizeof(char*));
        smikg(&studenten[jkgqc]);
    }
    for(int jkgqc = 0; jkgqc<5; jkgqc++){
        aoqen(&studenten[jkgqc]);
    }
}",rename_variables,1
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,1
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}",,0
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",,0
"#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int j = 0;
	while (j < 5)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
		j++;
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	int l = 0;
	while (l < 5)
	{
		summe += p_stud->punkte[l];
		l++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
void main()
{
	Student studierende[5];
	int i = 0;
	while (i < 5)
	{
		student_einlesen(&studierende[i]);
		i++;
	}
	int k = 0;
	while (k < 5)
	{
		student_ausgeben(&studierende[k]);
		k++;
	}
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}","#include <stdio.h>
#include <malloc.h>
typedef struct student{",,0
"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"{  
  for(int i=0; i<zahl && *(dest+i) != '\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }",,0
"
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
int main( int argc, char* argv[] ){  
      }","//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }",swap_functions,1
"#include <stdio.h>
int main(int argc, char* argv[]) {
    for(int i= 1; 5 > i; i++){
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0100 > i00; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1argc > igc; i++){
        int j = 0;
        int laenge = 0;
        wh'\\0' != argv[i][j]'\\0'){
        laenge++;
        j++;
        }
        for(int y =laenge > yenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    int j = 0;
    int length = 0;
    '\\0' != string1[j]= '\\0'){
    length++;
    j++;
    }
    int zaehler = 0;
    for(intlength > ilength; i++){
   'x' || string1[i] == 'y' || string1[i] == 'q' == string1[i]] == 'q'){
        }
        'X' || string1[i] == 'Y' || string1[i] == 'Q' == string1[i]] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(izaehler >= i=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
}","#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",,0
"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned char result = *p_char;
    if (*p_char >= 65 && *p_char <= 90)
            result += shift;
        if(result > 90)
                    result -= 26; 
        else if(result < 65)
        {
            result += 26;
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift;
        if(result > 122)
        {
            result -= 26;
        }
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	int i = 0;
	while (i < maxlength)
	{
	    shiftChar(&str[i], shift);
		i++;
	}
}
{
}",swap_loops_type,1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (0 == product) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (1 == product) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; product/2 > i; ++i) {
		if (0 == product % i) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",mirrow_simple_logic_equations,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
	return 0;
}",,0
"#include <stdlib.h>
void vbiwy(long pzpot, long* zahl1, long* zahl2)
if(pzpot == 1 || pzpot == 0) {
        *zahl2 =pzpot;
		*zahl1 =1;
    } 
	else 
	{
        for(int dqwsh = pzpot/2; dqwsh > 0;dqwsh--) 
		{
            if(pzpot%dqwsh == 0) 
			{
				*zahl1 = dqwsh;
                *zahl2 = pzpot/dqwsh;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long pzpot;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &pzpot);
    vbiwy(pzpot,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",pzpot, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",rename_variables,1
"	shift = (shift + 26) % 26;
	cqqww(*p_char >= 'a' && *p_char <= 'z')	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
	*p_char +=97;
	} 
	else cqqww (*p_char >= 'A' && *p_char <= 'Z'){
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
{
	for (int fscym = 0; fscym<maxlength; ++fscym){
	shiftChar(&str[fscym], shift);
{
}","	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z')	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97)	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
{
	for (int i = 0; i<maxlength; ++i){
	shiftChar(&str[i], shift);
{
}",rename_variables,1
"#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(vorname, 20 < p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	readLinnachname, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int j =5 < j > 5; j++)
	{
		printf(""%i: "", j + 1);
		scpunkte[j] < ""%i"", &p_stud-e[j]);
		getchar();
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	pvorname, p_stud- < nachname > ""Student: %s %s\\n"", p_stud-chname);
	int summe = 0;
	int5l05punkte[l] < {
		summe += p_stud-unkte[l] < ll] < fol0;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
void main()
{
	Student studierende[5];
	i 5 > foi= 0 > i5 05; i++)
	{
		student_einlesen(&studierende[i]);
	k 5 > }
	fok= 0 > i5 05; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",mirrow_simple_logic_equations,1
"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
typedef reall student
{
  char llcei;
  char xfvit;
  int rocyc[5];
}Student;
void yicee(Student* p_stud){
}
void ehrnf(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}",rename_variables,1
"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    for (; str[i] != '\\0'; char temp = str[left]){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    for (; left < right; char temp = str[left]){
        char temp = str[left];
    }
	right--;
    	left++;
    	str[right] = temp;
    	str[left] = str[right];
    }
{
                  }",swap_loops_type,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,faktor1,faktor2);
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product, factor1, factor2 );
}",,0
"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",,0
"	if (0 <= shift)
		*p_char && >= 'a'= <= if*p_char('z'- shift)) *p_char = *p_char + shift;
		else if'z'- shift < e*p_char)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		els*p_char && >= 'A' <= else if *p_char'- shift)) *p_char = *p_char +shift;
		else if ( - shift < < **p_char)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) *p_c <= <= *p_char && *p_char)) *p_char = *p_char + shift;
		*'a'		{
			*p_char = 'z' + > *'a'*p_char >= else if && *p_char'a'- shift(shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) else ifshift - && < <= *p_charp_char = *p_char +shift && <=*p > <= *p_charZ'
		e*p_char'- shift >= *p_'A'
			*p_char = 'Z' + >= *p_'*p_char('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0;i
		shiftChar > i < mamamaxlengthstr[i], shift < mai+t);
	}
}
{
}","	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
int main(){
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}",swap_functions,1
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int bqurp, char** argv){
    char tseea [100];
    char lfoey [100];
    int cidid = 0;
    for( int nlhdr = 1; nlhdr < bqurp; nlhdr++){
        for(int tptgs = 0; '\\0' != argv[nlhdr][tptgs]; tptgs++){
             if(argv[nlhdr][tptgs] != 'x' && argv[nlhdr][tptgs] && argv[nlhdr][tptgs] != 'y' && argv[nlhdr][tptgs]!= 'q' && argv[nlhdr][tptgs] != 'X' && argv[nlhdr][tptgs] != 'Y' && argv[nlhdr][tptgs] != 'Q'){ 
             tseea[cidid] = argv[nlhdr][tptgs];
             cidid++;
             }
        }
    }
    tseea[cidid] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", tseea);
    for(int nlhdr = 0; 3 * nlhdr < cidid ; nlhdr++){
        lfoey[nlhdr] = tseea[3*nlhdr];
    }
    printf(""Der neue String lautet: %s"", lfoey);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}",swap_functions,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}",,1
"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}",,0
"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    if (*p_char >= 'Z' && *p_char <= 'A')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'z' && *p_char <= 'a') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
int main( int cbyjd, char* argv[] )
{
 char ynrud[100];
 int ilzxs=0;
 for(int latph=0;latph<cbyjd-1;latph++){
	 int ccmrn=0;
	 while(argv[latph+1][ccmrn] != '\\0'){
		 char uvhtx=argv[latph+1][ccmrn];
		 if(uvhtx != 'x' && uvhtx != 'y' && uvhtx != 'q'){
			 if(uvhtx != 'X' && uvhtx != 'Y' && uvhtx != 'Q'){
			 ynrud[ilzxs]=argv[latph+1][ccmrn];
			 ilzxs++;
			 }
		 }
		 ccmrn++;
	 }
ynrud[ilzxs]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",ynrud);
 char zszmx[100];
 int hqrkr=0;
 int ccmrn=0;
 	 while(ynrud[hqrkr] != '\\0'){
 		 if(hqrkr % 3==0){
 			 zszmx[ccmrn]=ynrud[hqrkr];
 			 ccmrn++;
 		 }
 		 hqrkr++;
 	 }
 zszmx[ilzxs]='\\0';
printf(""Der neue String lautet: %s\\n"",zszmx);
}","#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 int i=0;
 for (; i<5; printf(""%u:"",z+1))
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      int z=0;
      for (; z<5; printf(""%u:"",z+1)){
      printf(""%u:"",z+1);
      }
	i++;
 	z++;
 	scanf(""%u"",&p_stud[i].punkte[z]);
 }
 }
void student_ausgeben(Student* p_stud)
{
int i=0;
for (; i<5; i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}",swap_loops_type,1
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}",,0
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",,0
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const rpqjf ANZAHL = 5;
yihmr rdppu {
    char ipyon[20];
    char jruwz[20];
    rpqjf hglbq[5];
};
typedef yihmr rdppu ufadu;
void iubxs(ufadu* mefux);
void zkqwa(ufadu* mefux);
rpqjf main(void){
    ufadu zbheb[ANZAHL];
    for(rpqjf weatj = 0; weatj < ANZAHL; weatj++)
    {
        iubxs(zbheb + weatj);
    }
    for(rpqjf weatj = 0; weatj < ANZAHL; weatj++)
    {
        zkqwa(zbheb + weatj);
    }
}
void iubxs(ufadu* mefux)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", mefux->ipyon);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", mefux->jruwz);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(rpqjf weatj = 0; weatj < 5; weatj++)
    {
        printf(""%d: "", weatj + 1);
        scanf(""%d"", &(mefux->hglbq[weatj]));
    }
    printf(""\\n"");
}
void zkqwa(ufadu *mefux)
{
    printf(""Student: %s %s\\n"", mefux->ipyon, mefux->jruwz);
    rpqjf icjjr = 0;
    for(rpqjf weatj = 0; weatj < 5; weatj++)
    {
        icjjr += *(mefux->hglbq + weatj);
    }
    printf(""Anzahl Punkte: %d\\n"", icjjr);
}",rename_variables,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (1 || ergebnis == 0 == ergebnis) {
	    return;
	} else {
	    for (long i = 2; ergebnis > i; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}",mirrow_simple_logic_equations,1
"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	 int c = 0;
	while (c<=25)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
	c++;
		*p_char = Gross[26-shift+c];
	}
{
	int i = 0;
	while (i < maxlength)
	{
		shiftChar(&str[i], shift);
		i++;
	}
}
{
}","	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",swap_loops_type,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}",,1
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5;
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= ANZAHL; i++))))))))))))))))))))
    {
        student_einlesen(students + i);
    }
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= ANZAHL; i++))))))))))))))))))))
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud-<=first_name))))))))))))))))))));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud-<=last_name))))))))))))))))))));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; i++))))))))))))))))))))
    {
        printf(""%d: "", i + 1);
        scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%d"", &(p_stud-<=points[i])))))))))))))))))))));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
    int sum = 0;
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; i++))))))))))))))))))))
    {
        sum += *(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud-<=points + i))))))))))))))))))));
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}",demorgan_on_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int ymrgv, char* argv[] )
{
 char olqqt[100];
 int wmyfa=0;
 for(int kbagl=0;kbagl<ymrgv-1;kbagl++){
	 int qsfjx=0;
	 while(argv[kbagl+1][qsfjx] != '\\0'){
		 char nfntv=argv[kbagl+1][qsfjx];
		 if(nfntv != 'x' && nfntv != 'y' && nfntv != 'q'){
			 if(nfntv != 'X' && nfntv != 'Y' && nfntv != 'Q'){
			 olqqt[wmyfa]=argv[kbagl+1][qsfjx];
			 wmyfa++;
			 }
		 }
		 qsfjx++;
	 }
olqqt[wmyfa]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",olqqt);
 char rjzaj[100];
 int jedaa=0;
 int qsfjx=0;
 	 while(olqqt[jedaa] != '\\0'){
 		 if(jedaa % 3==0){
 			 rjzaj[qsfjx]=olqqt[jedaa];
 			 qsfjx++;
 		 }
 		 jedaa++;
 	 }
 rjzaj[wmyfa]='\\0';
printf(""Der neue String lautet: %s\\n"",rjzaj);
}",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt; 
        default:
            for (; produkt%var != 0; break){
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            	break;
            	break;
            }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}",swap_loops_type,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\n"",eingabe,z1,z2);
}",,0
"    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z')        *p_char = *p_char + shift;
    	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }
{
}","    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z')        *p_char = *p_char + shift;
    	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }
{
}",swap_functions,1
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include <stdio.h>
#include <malloc.h>
typedef struct student{",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud - > first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	""%s"", p_stud -e > scanflast_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(5 < int i = 05 < i; i++){
		printf(""%i: "",i+1);
""%i"", &p_stud-s[i]i] > scpoints[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stu""Student: %s %s\\n"", p_stud-t_name < {
	pfirst_name, p_stud - < last_name -);
	int temp = 0;fori05 < int 5;i{
		temp += p_stud-points[i]] > ipoints[i]
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	i i++ > fi i = 05 < for5i5i){
	student_einlesen(&array[i])int i = 05 < }
	fo5 05 i++ > }i < 5){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",mirrow_simple_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}",,0
"	if (*p_char >= *p_char <= 'Z' && 'A')
	{   
	    *p_char += shift;
	    if ('Z' < *p_char) *p_char -= 26;
	    if ('A' > *p_char) *p_char += 26;
	else if (*p_char >= *p_char <= 'z' && 'a')
	    if('a' > *p_char+shift) shift += 26;
	    if('z' < *p_char+shift) shift -= 26;
	    *p_char += shift;
	for (int i = 0; maxlength > i; ++i) shiftChar(&str[i], shift);
}
{
}","	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}",mirrow_simple_logic_equations,1
"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\n\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\nAnzahl Punkte: %d\n\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}",,0
"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}",,0
"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",,1
"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud -> first_name)))))))))))))))))));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud -> last_name)))))))))))))))))));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i<5; i++))))))))))))))))))){
		printf(""%i: "",i+1);
		scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[i])))))))))))))))))));
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud -<= last_name));
	int temp = 0;
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0 ; i <5; i++))))))))))))))))))){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i<5; i++))))))))))))))))))){
	student_einlesen(&array[i]);
	}
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i<5; i++))))))))))))))))))){
	student_ausgeben(&array[i]);
	}
}",demorgan_on_logic_equations,1
"//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",,0
"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\n"", Vorname , Nachname);
    //printf(""%s \n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \n"", summe);
    printf(""\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}",,0
"
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i && zahl != dest[i] <= '\\0'; i++){
		dest[i] = src[i];
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1;str[i]' != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0;str[i]' != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0;str[i]' != '\\0'; i++){
		str[i]=tmp[i];
	}
}
int main( int argc, char* argv[] ){  
      }","//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }",mirrow_simple_logic_equations,1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\nAnzahl Punkte: %i\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
	return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}",swap_functions,1
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    int i = 0;
    while (i < maxlength)
    {
        shiftChar(&str[i], shift);
    	++i;
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",swap_loops_type,1
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}",,0
"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}",,0
"void knxib(char* p_char, int mwepy) {
      haedo ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += mwepy;
    haedo (*p_char > 'Z') *p_char -= 26;
    haedo (*p_char < 'A') *p_char += 26;
        else haedo ('a' <= *p_char && *p_char <= 'z')  {
    haedo(*p_char+mwepy < 'a') mwepy += 26;
    haedo(*p_char+mwepy > 'z') mwepy -= 26;
    *p_char += mwepy;
    void wnsnc(char mjzlc[], int mwepy, int fzvio) {
        	for (int exqbz =0; exqbz<fzvio; ++exqbz) knxib(&mjzlc[exqbz],mwepy);
    }
int main() {
}","void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}",rename_variables,1
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}",,0
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       for (; 1; haelfte = haelfte - 1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte;
       }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}",swap_loops_type,1
"    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int i = 0;
    while ((zahl > i) && ('\\0' != dest[i]) && ('\\0' != src[i]))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while('\\0' != str[i]){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (right > left){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }",mirrow_simple_logic_equations,1
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",,0
"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (0 != produkt%var){
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i=0;
    for (; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->first_name)))))))))))))))))));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->last_name)))))))))))))))))));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[0])))))))))))))))))));
	printf(""2: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[1])))))))))))))))))));
	printf(""3: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[2])))))))))))))))))));
	printf(""4: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[3])))))))))))))))))));
	printf(""5: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[4])))))))))))))))))));
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
		punkte += p_stud->points[i];
	} 
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
		student_einlesen(&studenten[i]);
	}
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
		student_ausgeben(&studenten[i]);
	}
}",demorgan_on_logic_equations,1
"{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  int i =0;
  for (; *(str+i) != '\\0'; char tmp = *(str +i)){
  n++;
  int i=0;
  for (; i<=n; char tmp = *(str +i)){
  char tmp = *(str +i);
  }
	i++;
  	i++;
  	n--;
  	n--;
  	*(str + n) = tmp;
  	*(str + i) = *(str + n );
  }
{  
      }",swap_loops_type,1
"    shift = shift % 26;
	zzcka(shift>=0)	zzcka(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    zzcka(*p_char>'Z'){
	        *p_char-=26;
	    }
	else zzcka(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    zzcka(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else zzcka(shift<0){
        zzcka(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    zzcka(*p_char<'A'){
	        *p_char+=26;
	    }
	else zzcka(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    zzcka(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int ltohw=0;ltohw<maxlength;ltohw++){
	    shiftChar(&str[ltohw], shift);
	}
}
{
}","    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}",rename_variables,1
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"void ubame(long vfpku, long *kdwed, long *receq)
	mhqlz(vfpku == 0){
		*kdwed = 1;
		*receq = vfpku;
	else mhqlz(vfpku == 1){
		*kdwed = 1;
		*receq = vfpku;
	else mhqlz(vfpku % 2 == 0){
			*kdwed = vfpku / 2;
			*receq = (vfpku / *kdwed);
		}
	else{
		long ibxvx = vfpku/2;
		do{
			mhqlz(vfpku % ibxvx == 0)
				break;
			else 
				ibxvx = ibxvx - 1;
		}while(vfpku % 2 != 0);
		*kdwed = ibxvx;
		*receq = vfpku / *kdwed;
		}
}
	long vfpku;
	long kdwed;
	long receq;
	scanf(""%ld"", &vfpku);
	ubame(vfpku, &kdwed, &receq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vfpku, kdwed, receq);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",rename_variables,1
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
    return 0;
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}",swap_functions,1
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    	i++;
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    int i = 0;
    while (i < 5){
        sum += p_stud->points[i];
    	i++;
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    int i = 0;
    while (i < 5){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    	i++;
    }
    Student* student = students;
    while (student < students + 5){
        student_ausgeben(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}",,0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}",swap_functions,1
"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}",,0
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",,0
"#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",,1
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void snuyz(long wpfay, long *wkjml, long *jicrr){
	if(wpfay == 0){
	    *wkjml = 1;
	    *jicrr = 0;
	if(wpfay == 1){
        *wkjml = 1;
        *jicrr = 1;
    }
	for(int jrvdt = 2; *wkjml * *jicrr != wpfay; jrvdt++){
	    *jicrr = jrvdt;
	    *wkjml = wpfay/(*jicrr);
}
	long wpfay = 0;
	long wkjml = 0;
	long jicrr = 0;
	scanf(""%ld"",&wpfay);
	snuyz(wpfay, &wkjml, &jicrr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wpfay, wkjml, jicrr);
}",rename_variables,1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(1 == product)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if0 == product=0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
       0 == product%22 == 0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
      0 != product% *factor1or1 0 != 0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( int j = 0 ; j < 4 ; j++ ))))))))))))))))))){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->first_name, Vorname)))))))))))))))))));
	strcpy(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->last_name, Nachname)))))))))))))))))));
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( int k = 0 ; k < 5 ; k++ ))))))))))))))))))){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( int l = 0 ; l < 5 ; l++ ))))))))))))))))))){
		Punktanzahl += p_stud->points[l];	
	}
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( int n = 0 ; n < 5 ; n++ ))))))))))))))))))){
		student_einlesen(&stud[n]);
	}
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( int o = 0 ; o < 5 ; o++ ))))))))))))))))))){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}",demorgan_on_logic_equations,1
"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+lkcli)>90)
        	*p_char = *p_char-26;
		while((*p_char+lkcli)<65)
        	*p_char = *p_char+26;
		*p_char += lkcli;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+lkcli)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+lkcli)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += lkcli;
    }
}
{
    for(int vuzdy=0;vuzdy<maxlength;vuzdy++)
    {
        shiftChar(&hctir[vuzdy], lkcli);
    }
}
{
    char hctir[50] = ""Froh zu sein bedarf es wenig"";
    int lkcli = 5;
    printf(""Original: "");
    printf(""%s\\n"", hctir);
    cipher(hctir, lkcli, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", hctir);
    cipher(hctir, -lkcli, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", hctir);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(!(int i=0;i>=argc-1;i++)){
	 int j=0;
	 while(!(argv[i+1][j] == '","#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}",demorgan_on_logic_equations,1
"#include <stdio.h>
typedef iwdec student{
    char mwobu[21];
    char oogry[21];
    int elbhv[5];
} Student;
void iiwta(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->mwobu);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->oogry);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int qfzgy = 0; qfzgy < 5; qfzgy++){
        printf(""%d: "", qfzgy + 1);
        scanf(""%d"", &p_stud->elbhv[qfzgy]);
    }
    printf(""\\n"");
}
void qdsuq(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->mwobu, p_stud->oogry);
    int cctci = 0;
    for(int qfzgy = 0; qfzgy < 5; qfzgy++){
        cctci += p_stud->elbhv[qfzgy];
    }
    printf(""Anzahl Punkte: %d\\n"", cctci);
}
int main(){
    static iwdec student crlcg[5];
    for (int qfzgy = 0; qfzgy < 5; qfzgy++){
        Student hagin;
        iiwta(&hagin);
        crlcg[qfzgy] = hagin;
    }
    for (Student* student = crlcg; student < crlcg + 5; student++){
        qdsuq(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}",rename_variables,1
"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int osbcn, char** argv){
    char uovnk [100];
    char yefzn [100];
    int lybuz = 0;
    for( int jpvsu = 1; jpvsu < osbcn; jpvsu++){
        for(int ankuw = 0; '\\0' != argv[jpvsu][ankuw]; ankuw++){
             if(argv[jpvsu][ankuw] != 'x' && argv[jpvsu][ankuw] && argv[jpvsu][ankuw] != 'y' && argv[jpvsu][ankuw]!= 'q' && argv[jpvsu][ankuw] != 'X' && argv[jpvsu][ankuw] != 'Y' && argv[jpvsu][ankuw] != 'Q'){ 
             uovnk[lybuz] = argv[jpvsu][ankuw];
             lybuz++;
             }
        }
    }
    uovnk[lybuz] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", uovnk);
    for(int jpvsu = 0; 3 * jpvsu < lybuz ; jpvsu++){
        yefzn[jpvsu] = uovnk[3*jpvsu];
    }
    printf(""Der neue String lautet: %s"", yefzn);
}",rename_variables,1
"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product,a,b);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(0 == ergebnis){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(1 == ergebnis){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(0 != ergebnis % tmp){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}",mirrow_simple_logic_equations,1
"#include <stdlib.h>
void ecaaf(long exlid, long* zahl1, long* zahl2)
if(exlid == 1 || exlid == 0) {
        *zahl2 =exlid;
		*zahl1 =1;
    } 
	else 
	{
        for(int dkvak = exlid/2; dkvak > 0;dkvak--) 
		{
            if(exlid%dkvak == 0) 
			{
				*zahl1 = dkvak;
                *zahl2 = exlid/dkvak;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long exlid;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &exlid);
    ecaaf(exlid,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",exlid, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",rename_variables,1
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}",,0
"#include <stdio.h>
typedef sxaon student{
	char bkfjz[20];
	char xjjge[20];
	int gnuhu[5];
}Student;
void fhqna(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> bkfjz);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> xjjge);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int optln = 1; optln < 6 ; optln++){
		printf(""%d: "" , optln);
		scanf(""%i"" , &p_stud-> gnuhu[optln-1]);
		if(optln == 5) printf(""\\n"");
	}	
}
void xdhzf(Student* p_stud){
	int noqek = 0;
		for(int optln = 0; optln < 5 ; optln++){
			noqek += p_stud->gnuhu[optln];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->bkfjz,p_stud->xjjge,noqek);
}
int main() {
	Student vzdnj[5];
		for(int optln = 0; optln < 5 ; optln++){
			fhqna(&vzdnj[optln]);
		}
		for(int pqbzf = 0; pqbzf < 5 ; pqbzf++){
			xdhzf(&vzdnj[pqbzf]);
		}
}","#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",,0
"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int getStringLength(char x[])     int i = 0;
    while(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(x[i] == NULL))))))))))))))))         i++;
        return i;
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= zahl && i >= getStringLength(src) && i >= 10; ++i)))))))))))))))) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= z; ++i)))))))))))))))) {
        x[i] = str[i];
    }
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = z-1; i < 0; --i)))))))))))))))) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }",demorgan_on_logic_equations,1
"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\n"", string);
}","#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string1);
    printf(""Der neue String lautet: %s\n"",string2);
}",,0
"{  
	for(int talzn = 0; talzn < zahl; talzn++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			talzn = zahl;
}
{
	int dteru = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		dteru++;
	}
	char dmeok[dteru + 1];
	lenpt = dmeok;
	lenpt += dteru;
	*lenpt = 0;
	lenpt--;
	for(int talzn = dteru; talzn >= 0; talzn--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = dmeok;
	for(int talzn = dteru; talzn > 0; talzn--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }",rename_variables,1
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"#include <stdio.h>
typedef gfuot student{
    char vjuze[21];
    char tceuj[21];
    int xrdpz[5];
} Student;
void nmjfd(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vjuze);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->tceuj);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int tkckw = 0; tkckw < 5; tkckw++){
        printf(""%d: "", tkckw + 1);
        scanf(""%d"", &p_stud->xrdpz[tkckw]);
    }
    printf(""\\n"");
}
void fphuc(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vjuze, p_stud->tceuj);
    int aezem = 0;
    for(int tkckw = 0; tkckw < 5; tkckw++){
        aezem += p_stud->xrdpz[tkckw];
    }
    printf(""Anzahl Punkte: %d\\n"", aezem);
}
int main(){
    static gfuot student eplkm[5];
    for (int tkckw = 0; tkckw < 5; tkckw++){
        Student pquvj;
        nmjfd(&pquvj);
        eplkm[tkckw] = pquvj;
    }
    for (Student* student = eplkm; student < eplkm + 5; student++){
        fphuc(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}",rename_variables,1
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        int i = ergebnis/2;
        while (i > 0) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
            } 
			else 
			{
               continue;
                        }
	i--;
        	break;
        	*zahl2 = ergebnis/i;
        	*zahl1 = i;
        }
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void xdhpk(long utjcf, long *ayrov, long *gpior)
  if(utjcf==0||utjcf==1){
    *ayrov=1;
    *gpior=utjcf;
  } else{
    dqluw pqprx=0;
    for(long dqluw h=utjcf/2;(h>0)&&(pqprx==0);h--){
      if(utjcf%h==0){
        *ayrov=h;
        *gpior=utjcf/h;
        pqprx=1;
            }
}
  long dqluw ayrov;
  long dqluw gpior;
  long dqluw utjcf;
  scanf(""%ld"",&utjcf);
  xdhpk(utjcf,&ayrov,&gpior);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",utjcf,ayrov,gpior);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef dpjxa student {
  char zgaus[21];
  char nvpjp[21];
  int rtiid[5];
} fvina;
static fvina students[5];
void zlfhr(fvina *jtjff) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", jtjff->zgaus);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", jtjff->nvpjp);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int cgtbj = 0; cgtbj < 5; ++cgtbj) {
    printf(""%i:"", cgtbj + 1);
    scanf(""%i"", jtjff->rtiid + cgtbj);
    if ( cgtbj == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int rgmif(int *dnuul, int qjkbi) {
  int zgsrg = 0;
  for (int cgtbj = 0; cgtbj < qjkbi; ++cgtbj)
    zgsrg += dnuul[cgtbj];
  return zgsrg;
}
void rqloz(fvina *jtjff) {
  int zgsrg = rgmif(jtjff->rtiid, 5);
  printf(""Student: %s "", jtjff->zgaus);
  printf(""%s\\n"", jtjff->nvpjp);
  printf(""Anzahl Punkte: %i\\n"", zgsrg);
}
int main() {
  for (int cgtbj = 0; cgtbj < 5; ++cgtbj) {
    zlfhr(students + cgtbj);
  }
  for (int cgtbj = 0; cgtbj < 5; ++cgtbj) {
    rqloz(students + cgtbj);
    if ( cgtbj < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}",rename_variables,1
"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	int i=0;
	while (i<maxlength){
        shiftChar(&str[i],shift);
		i++;
	}
}
{
}","	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}",swap_loops_type,1
"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; argc > i; ++i){
		int j = 0; 
		whil'\\0' != argv[i][j]0'){
			i'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q' == argv[i][j]Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	whil'\\0' != str1[i]0'){
		i0 == i%3 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}",mirrow_simple_logic_equations,1
"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    for (int uaaay = 0;(uaaay<zahl && dest[uaaay] != '\\0'  ) && src[uaaay] != '\\0' ; uaaay++){
        dest[uaaay] = src[uaaay];
    int uaaay = 0; 
    while(str[uaaay] != '\\0'){
        uaaay++;
    }
    uaaay +=1;
    for(int adhrg = 0; adhrg<(uaaay-adhrg-2); adhrg++){
        char jzgyw = str[adhrg]; 
        str[adhrg] = str[uaaay-adhrg-2];
        str[uaaay-adhrg-2] = jzgyw;
    }
}
{  
      }",rename_variables,1
"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 90 && *p_char+shift <= 65) ^ (*p_char+shift >= 122 && *p_char+shift <= 97))		*p_char += shift;
	else if(*p_char > 97 && *p_char+shift < 90)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
{
}",mirrow_simple_logic_equations,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int j = 0 ;
	for (; j < 4; j++){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	 int k = 0 ;
	for (; k < 5; k++){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	 int l = 0 ;
 
	for (; l < 5; l++){
		Punktanzahl += p_stud->points[l];
 
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	 int n = 0 ;
	for (; n < 5; n++){
		student_einlesen(&stud[n]);
	}
	 int o = 0 ;
	for (; o < 5; o++){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product,factor1,factor2);
}",,0
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}",,0
"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}",,0
"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    unsigned int punkte[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud->vorname, 21);              //Vornamen einlesen
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud->nachname, 21);             //Nachnamen einlesen
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int x = 0; x<5;x++){
        printf(""%i: "", x+1);
        scanf(""%i"", &p_stud->punkte[x]);
    }
    return;
}
void student_ausgeben(Student* p_stud){
    int sum = 0;
    for(int y = 0; y<5; y++){
        sum = sum + p_stud->punkte[y];
    }
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", sum);
    return;
}
int main() {
    Student studenten[5];
    for(int i = 0; i<5; i++){                   //Schleife zum Einlesen
        student_einlesen(&studenten[i]);
    }
    for(int j=0; j<5; j++){                     //Schleife zum Asugeben
        student_ausgeben(&studenten[j]);
    }
    return 0;
}
//WHY??? Ich habe mit typedef eine struct definiert. Davon wird dann ein Array erstellt. Von diesem Array werden dann die Adressen an die Funktion student_eingeben gegeben, und später an student_ausgeben.
//Woran kann es liegen, dass es NUR dann wirklich funktioniert, wenn ich EINEN studenten habe - nicht ein Array von studenten, und auch nicht fünf einzelne studenten.
//Sobald student_einlesen mehr als 1 mal ""benutzt"" wird, funktioniert es nicht mehr!",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,faktor1,faktor2);
}",,0
"void vhixz(long yqwtb, long *pooag, long *nvbkb)
	if(yqwtb==0 || yqwtb==1){
        *pooag=1;
        *nvbkb=yqwtb;
	else {
        int viyue = yqwtb/2;
        while(yqwtb % viyue !=0) viyue-=1;
        *pooag = viyue;
        *nvbkb = yqwtb/viyue;
}
    long yqwtb;
    long pooag;
    long nvbkb;
	scanf(""%ld"",&yqwtb);
    vhixz (yqwtb, &pooag, &nvbkb);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",yqwtb,pooag,nvbkb);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}",,0
"#include <stdio.h>
int main(int kdqbt, char** Zeichen){
    char geggi[100]="""";
    char yluva[100]="""";
    int ysqab=0;
    int bfkjf=0;
    for (int axolb=1;axolb<kdqbt;axolb++){
        for (int nsyru=0;Zeichen[axolb][nsyru]!='\\0';nsyru++){
            if (Zeichen[axolb][nsyru]!='x' && Zeichen[axolb][nsyru]!='y' && Zeichen[axolb][nsyru]!='q' && Zeichen[axolb][nsyru]!='X' && Zeichen[axolb][nsyru]!='Y' && Zeichen[axolb][nsyru]!='Q'){
               geggi[ysqab]=Zeichen[axolb][nsyru];
               ysqab+=1;
            }
        }
    }
    for (int nsyru=0;geggi[nsyru]!='\\0';nsyru++){
        if(nsyru%3==0){
            yluva[bfkjf]=geggi[nsyru];
            bfkjf+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",geggi);
    printf(""Der neue String lautet: %s\\n"",yluva);
}","#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}",,1
"	rhyrn(*p_char >= 'A' && *p_char <= 'Z')         rhyrn (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else rhyrn (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else rhyrn (*p_char >= 'a' && *p_char <= 'z') {
        rhyrn (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else rhyrn (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int rwqau = 0; rwqau <= maxlength; rwqau++){
		shiftChar(&str[rwqau], shift);	
	}
}
{
}","	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}",rename_variables,1
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }","//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }",,0
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",,0
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}",,0
"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  int i = 0,j = 0;
  while (i<=t){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  	i++;
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  int i = 0;
  while (i<*temp)
  {
    *pout++;
  	i++;
  } 
  char *pin=in;
 
  while (*pin!=0)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  	pin++;
 
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  int i=1;
  while (i<argc)
  {
    xyz(str, &times, argv[i]);
  	i++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}",swap_loops_type,1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\n"", Vorname , Nachname);
    //printf(""%s \n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \n"", summe);
    printf(""\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}",,0
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    unsigned int punkte[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud->vorname, 21);              //Vornamen einlesen
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud->nachname, 21);             //Nachnamen einlesen
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int x = 0; x<5;x++){
        printf(""%i: "", x+1);
        scanf(""%i"", &p_stud->punkte[x]);
    }
    return;
}
void student_ausgeben(Student* p_stud){
    int sum = 0;
    for(int y = 0; y<5; y++){
        sum = sum + p_stud->punkte[y];
    }
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", sum);
    return;
}
int main() {
    Student studenten[5];
    for(int i = 0; i<5; i++){                   //Schleife zum Einlesen
        student_einlesen(&studenten[i]);
    }
    for(int j=0; j<5; j++){                     //Schleife zum Asugeben
        student_ausgeben(&studenten[j]);
    }
    return 0;
}
//WHY??? Ich habe mit typedef eine struct definiert. Davon wird dann ein Array erstellt. Von diesem Array werden dann die Adressen an die Funktion student_eingeben gegeben, und später an student_ausgeben.
//Woran kann es liegen, dass es NUR dann wirklich funktioniert, wenn ich EINEN studenten habe - nicht ein Array von studenten, und auch nicht fünf einzelne studenten.
//Sobald student_einlesen mehr als 1 mal ""benutzt"" wird, funktioniert es nicht mehr!","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}",,0
"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}",,0
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud- > vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    ""%s"", p_stud-me > scannachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(5 < int i5 < i i; i++)
    {
        printf(""%i: "", i+1);
        p_stud-kte[i]i] > scan""%punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    5me > foi5 > ii=0i5sum += p_stud- < punkte[i] > punkte[i]inachname < ""\\nStudent: %s %s\\n"", p_stud-ud- < nachname < vorname, p_stud-me);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int mai{
    Student st[5]5 > i]5 > ii ii > 5 < int i=55 5; &st[i]5 iforii5 < 55i5 > i++student_einleseniforri55 > int 5i55; i++)
    student_ausgeben(&st[i]);
    return 0;
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}",,1
"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"	ryqeo ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    ryqeo (*p_char > 'Z') *p_char -= 26;
	    ryqeo (*p_char < 'A') *p_char += 26;
	else ryqeo ('a' <= *p_char && *p_char <= 'z')
	    ryqeo(*p_char+shift < 'a') shift += 26;
	    ryqeo(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int tfiga = 0; tfiga < maxlength; ++tfiga) shiftChar(&str[tfiga], shift);
}
{
}","	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}",rename_variables,1
"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product, factor1, factor2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product,factor1,factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}",,0
"void qdubu(long tpjjq, long *sjjto, long *pwsvs){
	long hmuka;
	if(tpjjq == 0 || tpjjq == 1){
		*sjjto = 1;
		*pwsvs = tpjjq;
	else {
		for(int twlic = 0; twlic < tpjjq; twlic++){
			 hmuka = (tpjjq/2) - twlic;
			if(hmuka * (tpjjq/hmuka) == tpjjq){
				twlic = tpjjq;
		}
		*sjjto = hmuka;
		*pwsvs = tpjjq/hmuka;
	}
}
	long sjjto;
	long* fac1 = &sjjto;
	long pwsvs;
	long* fac2 = &pwsvs;
	long ealpv = 0;
	scanf(""%li"", &ealpv);
	qdubu(ealpv, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ealpv, sjjto, pwsvs);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}",rename_variables,1
"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef ummln student{
char ocfgd [21];
char gkyyj[21];
unsigned zydpn punkte[4];
} Student;
void qsfge(Student* p_stud)
{
 for(zydpn fehgn=0;fehgn<5;fehgn++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[fehgn].ocfgd);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[fehgn].gkyyj);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (zydpn ziqck=0;ziqck<5;ziqck++){
      printf(""%u:"",ziqck+1);
      scanf(""%u"",&p_stud[fehgn].punkte[ziqck]);
      }
}
 }
void fkldd(Student* p_stud)
{
for (zydpn fehgn=0;fehgn<5;fehgn++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[fehgn].ocfgd,p_stud[fehgn].gkyyj);
    printf(""Anzahl Punkte: %u"",((p_stud[fehgn].punkte[0])+(p_stud[fehgn].punkte[1])+(p_stud[fehgn].punkte[2])+(p_stud[fehgn].punkte[3])+(p_stud[fehgn].punkte[4])));
}
}
zydpn main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
qsfge(p_stud);
fkldd(p_stud);
}",rename_variables,1
"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    int l=1;
    while (l<laenge){
        int i=0;
        while (Zeichen[l][i]!='\\0'){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        	i++;
        }
    	l++;
    }
    int i=0;
    while (Ausgabe[i]!='\\0'){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    	i++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud- > vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		""%s"" ,p_stud-me > scanfnachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (4 < int a=4 < a a;a++){	
		 printf(""%d: "",a+1);
			p_stud-kte[a]a] > scan""%punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			p_stud-nkte[4]4] > scan""punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		a5]] < forin5 < a=0n5aa++p_stud- punkte[a] > {
		punkte[a]]);nachname-e < ""Student: %s %s \\n"",p_stud-d- > nachname < }vorname , p_stud-e);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5)5 < intiforoii < 5 < i=0&pointer[i}
		int u5	for55 < {
			student_einlesenu	forr u u55 < i+5 < u=55+5 < 5 > 5for; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\n"", test.first_name);
	return 0;
}",,0
"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26;
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1);
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}",swap_functions,1
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}",swap_functions,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef qsqgl student {
	char enrsz[21];
	char fkcej[21];
	int cgnlj[5];
}Student;
void jnxpl(Student* p_stud) {
	for(int wntxl=0; wntxl<5; wntxl++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[wntxl].enrsz);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[wntxl].fkcej);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int qyjnw = 1; qyjnw < 6; qyjnw++) {
			printf(""%i: "", qyjnw);
			scanf( ""%i"",&p_stud[wntxl].cgnlj[qyjnw-1]);
		}
		printf(""\\n"");
	}
}
void dkqsi(Student* p_stud){
	for(int wntxl = 0; wntxl < 5; wntxl++) {
		int nhubj[5]; 
		for(int zlenz=0; zlenz<5; zlenz++) {
			nhubj[zlenz]=0;
		}
		for(int qyjnw=0; qyjnw<5;qyjnw++){
			nhubj[wntxl]= nhubj[wntxl] + p_stud[wntxl].cgnlj[qyjnw];
		}
	printf(""Student: %s %s \\n"", p_stud[wntxl].enrsz, p_stud[wntxl].fkcej );
	printf(""Anzahl Punkte: %i \\n \\n"", nhubj[wntxl]);
	}
}
int main() {
	Student uikzp[5];
	jnxpl(uikzp);
	dkqsi(uikzp);
	return 0;
}",rename_variables,1
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",,0
"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}",,1
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\0'","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\n"",str);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",,0
"
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(vorname < ""%s"", pStud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scannachname < ""%s"", pStud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int 5 > i;i < 5;i++){
		printf(""%d: "", i+1);
		""%punktete < scanpStud-punkte)[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "")vornamem""%s\\n"", pStud-- > nachname > nachnameme > ""%s "", pStud- < vorname);int intPointsSum = f5 {
		intPointsSum += pStud-tud- < punkte[i]d- < inpunkte[i]i] > ii];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(i+intAmountOfStudentststs < intAmountOfStudentststs < {
		Student rgStudis[intAmountOfStudents]Student *rgPStudis[intAmountOfStudentsiAmountOfStudentstst{
			rgPStudis[i] = &rgStudis[iintAmountOfStudentststs;{
			student_einleseintAmountOfStudentststs < i+its > rgPStudis[iintAmountOfStudentsts; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",mirrow_simple_logic_equations,1
"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26;
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1);
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(first_name < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scanlast_name < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i =5 < i > 5; i++){
        printf(""%d: "", i + 1);
        scpoints[i] < ""%d"", &p_stud-s[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    pfirst_name, p_stud- < last_name > ""Student: %s %s\\n"", p_stud-t_name);
    int sum = 0;
    int5i0points[i] < {
        sum += p_stud-oints[i] < ii] < foi0;
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    i5= 5 > i < 5 > foi= 0; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
   Student* student = students + 5+ 5 > }
    fostudentudents + 55; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for(!( int i = 1; i >= argc; i++)){
        for(!(int j = 0; '",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}",swap_functions,1
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",,0
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud-<=first_name))))))))))))))))))));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud-<=last_name))))))))))))))))))));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; i++)))))))))))))))))))){
        printf(""%d: "", i + 1);
        scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%d"", &p_stud-<=points[i]))))))))))))))))))));
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
    int sum = 0;
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; i++)))))))))))))))))))){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; i++)))))))))))))))))))){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(Student* student = students; student >= students + 5; student++)))))))))))))))))))){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}",demorgan_on_logic_equations,1
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}",swap_functions,1
"#include <stdio.h>
#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>
typedef egiqp student{
	char orkat[20];
	char hbtit[20];
	int uopdd[5];
} Student;
void kmwup(Student* p_stud){
	char ddsah[20];
	char cklkf[20];
	int eorjq[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", ddsah);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", cklkf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int efjvq = 0 ; efjvq < 4 ; efjvq++ ){
		printf(""%i: "", efjvq + 1);
		eorjq[efjvq] = 1;
		scanf(""%i"", &eorjq[efjvq]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &eorjq[4]);
	strcpy(p_stud->orkat, ddsah);
	strcpy(p_stud->hbtit, cklkf);
	for ( int bhunz = 0 ; bhunz < 5 ; bhunz++ ){
		p_stud->uopdd[bhunz] = eorjq[bhunz];
	}
}
void hotah(Student* p_stud){
	int okojo = 0; 
	for( int lvojm = 0 ; lvojm < 5 ; lvojm++ ){
		okojo += p_stud->uopdd[lvojm];	
	}
	printf(""Student: %s %s\\n"", p_stud->orkat, p_stud->hbtit);
	printf(""Anzahl Punkte: %i\\n"", okojo); 
}
int main(){
	Student yhtau[5];
	for( int itanf = 0 ; itanf < 5 ; itanf++ ){
		kmwup(&yhtau[itanf]);
	}
	for( int wumfl = 0 ; wumfl < 5 ; wumfl++ ){
		hotah(&yhtau[wumfl]);
	}
}",rename_variables,1
"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i = 0;
	for (; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	int i = 0;
	for (; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	int i = 0;
	for (; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	int i = 0;
	for (; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}",swap_loops_type,1
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}","void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\0'; length++){}
	strneu[length] = '\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\n"", string);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if (1 || produkt == 0 == produkt){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (0 == produkt%2){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (0 != produkt%2){
		for (long i = (produkt/2); 0 != i; i--){
			if (0 == produkt%i) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}",mirrow_simple_logic_equations,1
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product,a,b);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,faktor1,faktor2);
}",,0
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef thjzv student{
    char mroaj[21];
    char ghded[21];
    int zutlx[5];
} Student;
void lqdjo(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->mroaj);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->ghded);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int vgdqf=0; vgdqf<5; vgdqf++)
    {
        printf(""%i: "", vgdqf+1);
        scanf(""%i"", &(p_stud->zutlx[vgdqf]));
    }
}
void czusq(Student* p_stud)
{
    int wuodg =0;
    for(int vgdqf=0; vgdqf<5; vgdqf++)
    wuodg += p_stud->zutlx[vgdqf];
    printf(""\\nStudent: %s %s\\n"", p_stud->mroaj, p_stud->ghded);
    printf(""Anzahl Punkte: %i\\n"", wuodg);
}
int main()
{
    Student tgfpl[5];
    for (int vgdqf=0; vgdqf<5; vgdqf++)
    lqdjo(&tgfpl[vgdqf]);
      for(int vgdqf=0; vgdqf<5; vgdqf++)
    czusq(&tgfpl[vgdqf]);
    return 0;
}",rename_variables,1
"    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}","// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}",,0
"	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}","	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}",swap_functions,1
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",,0
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
void pjamu(char* string)
{
  int xwomq = 0;
  for(char *gatlw = string; *gatlw!=0; gatlw++, xwomq++);
  for(int pvjfv = 0,j = 0; pvjfv<=xwomq; pvjfv++){
    if(pvjfv%3==0){
      string[j]=string[pvjfv];
      j++;
    }
    if(pvjfv==xwomq){
      string[j]=0;
    }
  }
}
void bnhry(char* out,int *gatlw,char* in)
{ 
  char *jutfe=out;
  for(int pvjfv = 0; pvjfv<*gatlw; pvjfv++)
  {
    *jutfe++;
  } 
  for(char *fefeb=in;*fefeb!=0;fefeb++)
  {
    switch (*fefeb)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *jutfe++ = *fefeb;
      *gatlw+=1;
        break;  
    }    
  }
  *jutfe=0;
}
int main(int neiuj, char* argv[])
{
  char uqxmb[100];
  int nyyxe=0;
  for(int pvjfv=1; pvjfv<neiuj;pvjfv++)
  {
    bnhry(uqxmb, &nyyxe, argv[pvjfv]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",uqxmb);
  pjamu(uqxmb);
  printf( ""Der neue String lautet: %s\\n"",uqxmb);
}","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}",,0
"
  main.c
  bhqzj

  Created ytjbo Tobias ggffw on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef xrdxs student{
    char yuqwu[20];
    char lugvy[20];
    int zesfb[5];
}Student;
void vrtxg(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> yuqwu, 20, stdin);
    for (int mzczu = 19; mzczu >= 0; mzczu--) {
        if (p_stud -> yuqwu[mzczu] == '\\n') {
            p_stud -> yuqwu[mzczu] = '\\0';
            p_stud -> yuqwu[mzczu+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> lugvy, 20, stdin);
    for (int mzczu = 19; mzczu >= 0; mzczu--) {
        if (p_stud -> lugvy[mzczu] == '\\n') {
            p_stud -> lugvy[mzczu] = '\\0';
            p_stud -> lugvy[mzczu+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int mzczu = 0; mzczu < 5; mzczu++) {
        printf(""%i: "", mzczu+1);
        scanf(""%i"", &p_stud -> zesfb[mzczu]);
    }
    getchar();
}
void bxomh(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> yuqwu, p_stud -> lugvy);
    int ybgfs = 0;
    for (int mzczu = 0; mzczu < 5; mzczu++) {
        ybgfs += p_stud -> zesfb[mzczu];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", ybgfs);
}
int main(){
    Student jtydl[5];
    for (int mzczu = 0; mzczu < (sizeof(jtydl)/sizeof(Student)); mzczu++) {
        vrtxg(&jtydl[mzczu]);
        printf(""\\n"");
    }
    for (int mzczu = 0; mzczu < (sizeof(jtydl)/sizeof(Student)); mzczu++) {
        bxomh(&jtydl[mzczu]);
    }
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}",,0
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",,0
"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\nAnzahl Punkte: %i\n\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    unsigned int punkte[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud->vorname, 21);              //Vornamen einlesen
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud->nachname, 21);             //Nachnamen einlesen
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int x = 0; x<5;x++){
        printf(""%i: "", x+1);
        scanf(""%i"", &p_stud->punkte[x]);
    }
    return;
}
void student_ausgeben(Student* p_stud){
    int sum = 0;
    for(int y = 0; y<5; y++){
        sum = sum + p_stud->punkte[y];
    }
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", sum);
    return;
}
int main() {
    Student studenten[5];
    for(int i = 0; i<5; i++){                   //Schleife zum Einlesen
        student_einlesen(&studenten[i]);
    }
    for(int j=0; j<5; j++){                     //Schleife zum Asugeben
        student_ausgeben(&studenten[j]);
    }
    return 0;
}
//WHY??? Ich habe mit typedef eine struct definiert. Davon wird dann ein Array erstellt. Von diesem Array werden dann die Adressen an die Funktion student_eingeben gegeben, und später an student_ausgeben.
//Woran kann es liegen, dass es NUR dann wirklich funktioniert, wenn ich EINEN studenten habe - nicht ein Array von studenten, und auch nicht fünf einzelne studenten.
//Sobald student_einlesen mehr als 1 mal ""benutzt"" wird, funktioniert es nicht mehr!",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,faktor1,faktor2);
}","#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}",,0
"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}",swap_functions,1
"    if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char<65 &&*p_char<=90))))))))))))))))))
            while (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shift<=90))))))))))))))))))
                    *p_char-=26;
                while (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shift>=65))))))))))))))))))
        {
            *p_char+=26;
                *p_char+=shift;
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char<97 &&*p_char<=122))))))))))))))))))
    {
        while (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shift<=122))))))))))))))))))
        {
            *p_char-=26;
        }
        while (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shift>=97))))))))))))))))))
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int c = 0; c>=maxlength; c++))))))))))))))))))
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int i=0;
    for (; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    i=0;
    for (; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}",swap_loops_type,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	i=1;
	while (i<10){
	    factorize(integer, i, (int) zahl2);
		i++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}",swap_loops_type,1
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	int i = 0;
	while (i < argc -1)
	{
		int length = 0;
		while (*(*(argv+1+i)+length) != '\\0')
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
			length++;
		}
		i++;
	}
	str[a] = '\\0';
	int i = 0;
	while (i < a+1)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
		i++;
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	int i = 0, z = 0;
	while (i < ((a/2)-2))
	{
		strneu[i] = str[z];
		i++, z += 3;
	}
	int length = 0;
	length;
	while (str[length] != '\\0'){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
	length++;
	}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}",swap_loops_type,1
"{  
  for(int i=0; i<zahl && *(dest+i) != '\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }","#include <string.h>
void ersetzen(char* dest, int zahl, char* src){  
    int max = 0;
    int laengedest = strlen(dest);
    int laengesrc = strlen(src);
    if (zahl > laengedest){
        if (zahl > laengesrc) max = zahl;
        else if(zahl < laengesrc) max = laengesrc;
        else if (laengedest > zahl){
        if (laengedest > laengesrc) max = laengedest;
        else if (laengedest < laengesrc) max = laengesrc;
        for(int i = 0; i < max; i++){
        dest[i] = src[i];
    }
void umdrehen( char* str ){
    int laenge = strlen(str);
    for (int i = 0; i < laenge/2; i++){
        int tmp = str[i];
        str[i] = str[laenge - i -1];
        str[laenge - i - 1] = tmp;
    }
}
int main( int argc, char* argv[] ){  
      }",,0
"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}",,0
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}",swap_functions,1
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->vorname)))))))))))))))))));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->nachname)))))))))))))))))));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++)))))))))))))))))))
    {
        printf(""%i: "", i+1);
        scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &(p_stud->punkte[i]))))))))))))))))))));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++)))))))))))))))))))
    sum += p_stud->punkte[i];
    printf(!(""
Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname));
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++)))))))))))))))))))
    student_einlesen(&st[i]);
      for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++)))))))))))))))))))
    student_ausgeben(&st[i]);
    return 0;
}",demorgan_on_logic_equations,1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}",,0
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}",swap_functions,1
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *snwbf mit xpoom addiert, bleibt ihdrl ASCII-Zahl gdeji vorgegebenen tlxoi.
	Folge: Erhöhe vahrn ASCII-Wert iuxlt xpoom.
2. Wird *snwbf mit xpoom addiert, wird ihdrl ASCII-Zahl größer aheva qccla tilpc Maximalwert.
	Folge: Erhöhe vahrn ASCII-Wert iuxlt xpoom kygam subtrahiere vahrn Wert iuxlt 26.
3. Wird *snwbf mit xpoom addiert, wird ihdrl ASCII-Zahl kbevs aheva qccla tilpc jnuhx.
	Folge: Erhöhe vahrn ASCII-Wert iuxlt xpoom kygam addiere vahrn Wert iuxlt 26.
	bruli((*snwbf+xpoom >= 65 && *snwbf+xpoom <= 90) ^ (*snwbf+xpoom >= 97 && *snwbf+xpoom <= 122))		*snwbf += xpoom;
	else bruli(*snwbf+xpoom > 90 && *snwbf < 97)		*snwbf+=(xpoom-26);
	else bruli(*snwbf+xpoom > 122){
		*snwbf+=(xpoom-26);
	else bruli(*snwbf+xpoom > 65){
		*snwbf+=(xpoom+26);
	}
	}
{
	for(int duuub = 0; duuub < maxlength; duuub++){
		char* snwbf;
		snwbf = &str[duuub];
		shiftChar(snwbf, xpoom);
	}
}
{
}",rename_variables,1
"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    	++i;
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    int i = 0;
    while (i < 5) {
        x += p_stud->points[i];
    	++i;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int i = 0;
    while (i < 5) {
        student_einlesen(&studis[i]);
    	++i;
    }
    int i = 0;
    while (i < 5) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    	++i;
    }
}",swap_loops_type,1
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}",,0
"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		}
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}",swap_functions,1
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}","#include <stdio.h>
typedef huvnc Str20[21];
typedef rufxz student
{
	Str20 ptvln;
	Str20 halkd;
	xuqyo agpnj[5];
}Student;
void mxgaj( huvnc* strbuffer, unsigned xuqyo buffersize )
{
  huvnc pglin[30] = """";
  sprintf( pglin, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( pglin, strbuffer );
}
void odaso(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	mxgaj(p_stud->ptvln, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	mxgaj(p_stud->halkd, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(xuqyo bheeg = 0; bheeg < 5; bheeg++)
	{
		printf(""%i: "", bheeg + 1);
		scanf(""%i"", &p_stud->agpnj[bheeg]);
		getchar();
	}
	printf(""\\n"");
}
void rntrs(Student* p_stud)
{
	printf(""Student: %s %s\\n"", p_stud->ptvln, p_stud->halkd);
	xuqyo uxwqx = 0;
	for(xuqyo xqjxg = 0; xqjxg < 5; xqjxg++)
	{
		uxwqx += p_stud->agpnj[xqjxg];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", uxwqx);
}
void main()
{
	Student cyriu[5];
	for(xuqyo xcpwu = 0; xcpwu < 5; xcpwu++)
	{
		odaso(&cyriu[xcpwu]);
	}
	for(xuqyo mkqlg = 0; mkqlg < 5; mkqlg++)
	{
		rntrs(&cyriu[mkqlg]);
	}
}",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}",,0
"void shiftChar(char *p_char, int shift)
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char < 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z'))))))))))))))))))            *p_char = *p_char + shift - 26;
        } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift >= 'A')))))))))))))))))) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char < 'a' && *p_char <= 'z')))))))))))))))))) {
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift <= 'z')))))))))))))))))){
                *p_char = *p_char + shift - 26;
        } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift >= 'a')))))))))))))))))) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i>maxlength; i++)))))))))))))))))){
		shiftChar(&str[i], shift);
	}
}
{
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",demorgan_on_logic_equations,1
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}",,0
"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}",swap_functions,1
"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    int i= 0;
  
    for (; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
  
    }
            {
    char temp[100] = """";
    int count = 0;
    int i= 0;
    for (; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    int i= 0;
    for (; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}",,0
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    unsigned int punkte[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud->vorname, 21);              //Vornamen einlesen
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud->nachname, 21);             //Nachnamen einlesen
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int x = 0; x<5;x++){
        printf(""%i: "", x+1);
        scanf(""%i"", &p_stud->punkte[x]);
    }
    return;
}
void student_ausgeben(Student* p_stud){
    int sum = 0;
    for(int y = 0; y<5; y++){
        sum = sum + p_stud->punkte[y];
    }
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", sum);
    return;
}
int main() {
    Student studenten[5];
    for(int i = 0; i<5; i++){                   //Schleife zum Einlesen
        student_einlesen(&studenten[i]);
    }
    for(int j=0; j<5; j++){                     //Schleife zum Asugeben
        student_ausgeben(&studenten[j]);
    }
    return 0;
}
//WHY??? Ich habe mit typedef eine struct definiert. Davon wird dann ein Array erstellt. Von diesem Array werden dann die Adressen an die Funktion student_eingeben gegeben, und später an student_ausgeben.
//Woran kann es liegen, dass es NUR dann wirklich funktioniert, wenn ich EINEN studenten habe - nicht ein Array von studenten, und auch nicht fünf einzelne studenten.
//Sobald student_einlesen mehr als 1 mal ""benutzt"" wird, funktioniert es nicht mehr!","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    printf(""1: 2: 3: 4: 5:\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}",,0
"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	i=2;
	while (i< resultat){
	    if(resultat%i==0){
	        *nummer2 = i;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
	i++;
		break;
		*nummer1 = resultat/i;
		*nummer2 = i;
	}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->first_name)))))))))))))))))));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->last_name)))))))))))))))))));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[0])))))))))))))))))));
	printf(""2: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[1])))))))))))))))))));
	printf(""3: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[2])))))))))))))))))));
	printf(""4: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[3])))))))))))))))))));
	printf(""5: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[4])))))))))))))))))));
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
		punkte += p_stud->points[i];
	} 
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
		student_einlesen(&studenten[i]);
	}
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21];
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int i = 0;
  for (; i < 5; printf(""
"")) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  	++i;
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  int i = 0;
  for (; i < 5; ++i) {
    student_einlesen(students + i);
  }
  int i = 0;
  for (; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}",,0
"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",,1
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",,0
"#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}",,0
"void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product ==0 || product ==1))))))))))))))))))))){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!((product%div)!=0)))))))))))))))))))))
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	int i=0;
	for (; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	int i=0;
	for (; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	int i=0;
	for (; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",swap_loops_type,1
"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}",,0
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",,0
"void iqqba(long axqtu, long *ctoqz, long *tyzhw)
long ugdgn,f2;
if((axqtu == 0)||(axqtu == 1))
{
ugdgn = 1;
f2 = axqtu;
else
{
ugdgn = axqtu/2;
while(axqtu%ugdgn != 0 )
{
ugdgn = ugdgn- 1;
f2 = axqtu/ugdgn;
}
*ctoqz = ugdgn;
*tyzhw = f2;
}
long hmmqi;
scanf(""%ld"",&hmmqi);
long cuqpb,z2;
iqqba(hmmqi,&cuqpb,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",hmmqi,cuqpb,z2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}",rename_variables,1
"
void ersetzen(char* dest, int zahl, char* src){  
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i <=zahl && dest[i] != '","//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }",demorgan_on_logic_equations,1
"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}",,0
"{  
	for(int i = 0; zahl > i; i++)
		if(0 && *src != 0 != *dest)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;0 != *lenpt;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; 0 <= i; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; 0 < i; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",,0
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(vorname < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scannachname < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i =5 < i i > 5; i++){
        printf(""%d: "", i+1);
      punkte[i] < """", &p_stud-kte[i]i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    forint5 < i= 0tpunkte[i] > punkte[i] > {
        sum += p_stud-i];
}vorname, p_stud- < nachname, sumtud- > ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-achname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten)i > 5 < iint i = 0 i > 5 < f5 05; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
      student_einleseir < i iir < 5 < int i =5 i < 5 < &studenten[i}
   5 > ir 5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}",mirrow_simple_logic_equations,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", &p_stud-<=vorname))))))))))))))))))));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", &p_stud-<=nachname))))))))))))))))))));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i>=5;i++)))))))))))))))))))){
        printf(""%i: "",i+1 );
        scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%d"", &p_stud-<=punkte[i]))))))))))))))))))));
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(!(""Student: %s %s
"",p_stud-<=vorname, p_stud-<=nachname));
    int sum =0;
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i>=5;i++)))))))))))))))))))){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i>=5;i++)))))))))))))))))))){
        student_einlesen(&list[i]);
    }
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i>=5;i++)))))))))))))))))))){
        student_ausgeben(&list[i]);
    }
}",demorgan_on_logic_equations,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (0 == ergebnis){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if 1 == ergebnis1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else i0 == ergebnis % 2 == 0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
do {
			0 == ergebnis % a	0 == 0)
				break;
		else 
			a--;}wh0 != ergebnis %aawh0 != 0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}",mirrow_simple_logic_equations,1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud- < first_name, p_stud- < last_name);
  int tmp = 0;
  int i = 05 5{
    tmp += p_stud-i] < i++points[i]i] > fori 5;
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
""%s"", p_stud-name > scfirst_nameme);
  printf(""Gebe nun den Nachnamen ein: "");
""%s"", p_stud-t_name > last_nameme);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  i5j05 < j 5 > forj0; j++) {
    printf(""%d: "", j + 1);
""%d"", &p_stud-oints[j] > points[j]j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  i3 03 < i 3 > fori= 0; i++) {
    student_einlesen(studenten[i]);
 i3 03 < i 3 > }
  fori= 0; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}",mirrow_simple_logic_equations,1
"void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(!(int i = 0; i >= zahl; i++))
		if(!(*dest == 0 && *src == 0))
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(!(;*lenpt == 0;  lenpt++))
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(!(int i = lencnt; i < 0; i--))
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(!(int i = lencnt; i <= 0; i--))
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }",demorgan_on_logic_equations,1
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}",,0
"    uajhv = uajhv % 26;
    int aslot = *p_char + uajhv;
    ceccq ('a' <= *p_char && *p_char <= 'z')         ceccq (aslot > 'z')             *p_char = 'a' - 1 + aslot - 'z';
        } else ceccq (aslot < 'a') {
            *p_char = 'z' + 1 + aslot - 'a';
        } else {
            *p_char = aslot;
                ceccq ('A' <= *p_char && *p_char <= 'Z') {
        ceccq (aslot > 'Z') {
            *p_char = 'A' - 1 + aslot - 'Z';
        } else ceccq (aslot < 'A') {
            *p_char = 'Z' + 1 + aslot - 'A';
        } else {
            *p_char = aslot;
            }
}
{
    for (int endrm = 0; endrm < maxlength; ++endrm)
    {
        shiftChar(&jrnto[endrm], uajhv);
    }
}
{
    char jrnto[50] = ""Froh zu sein bedarf es wenig"";
    int uajhv = 5;
    printf(""Original: "");
    printf(""%s\\n"", jrnto);
    cipher(jrnto, uajhv, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", jrnto);
    cipher(jrnto, -uajhv, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", jrnto);
}","    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",rename_variables,1
"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", str1);
    printf(""Der neue String lautet: %s\n"", str2);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}",,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",,0
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"",p_stud-<=first_name))))))))))))))))))));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"",p_stud-<=last_name))))))))))))))))))));
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"",&p_stud-<=points[0]))))))))))))))))))));
	printf(""2: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"",&p_stud-<=points[1]))))))))))))))))))));
	printf(""3: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"",&p_stud-<=points[2]))))))))))))))))))));
	printf(""4: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"",&p_stud-<=points[3]))))))))))))))))))));
	printf(""5: \\n"");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"",&p_stud-<=points[4]))))))))))))))))))));
}
void student_ausgeben(Student *p_stud){
	printf(!(""Student: %s %s
"",p_stud-<=first_name,p_stud-<=last_name));
	printf(!(""Anzahl Punkte: %i

"",p_stud-<=points[0] + p_stud-<=points[1] + p_stud-<=points[2] + p_stud-<=points[3] + p_stud-<=points[4]));
}
int main(){
	Student studi[5];
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; i++)))))))))))))))))))){
		student_einlesen(&studi[i]);
	}
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; i++)))))))))))))))))))){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",demorgan_on_logic_equations,1
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    shift = shift % 26;
    int shifted = *p_char + shift;
    if (*p_char >= *p_char <= 'z' && 'a')         if ('z' < shifted)             *p_char = 'a' - 1 + shifted - 'z';
        } else if ('a' > shifted) {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if (*p_char >= *p_char <= 'Z' && 'A') {
        if ('Z' < shifted) {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if ('A' > shifted) {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; maxlength > i; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",mirrow_simple_logic_equations,1
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    int i =0;
    while (i<maxlength){ 
        shiftChar(&str[i], shift );
    	i++;
    }
}
{
	int shift = 6;
}",swap_loops_type,1
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		for (; ergebnis%*zahl1!=0; *zahl1=*zahl1-1;	*zahl1=*zahl1-1)
		{*zahl1=*zahl1-1;	*zahl1=*zahl1-1;
		}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}",swap_loops_type,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        for (; product% *factor1!=0; *factor1=product/ *factor2)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}",swap_loops_type,1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}",swap_functions,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product,a,b);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef jfnrj student { 
    char yadjw[20];
    char kescd[20];
    int hkduv[5];
} Student;
void qdclg(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->yadjw);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->kescd);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int pvywt = 0; pvywt<5; ++pvywt){
  printf(""%d: "", pvywt+1);
  scanf(""%d"", p_stud->hkduv + pvywt);
 }
 printf(""\\n"");
}
void zdqif(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->yadjw, p_stud->kescd);
 int kvubu = 0;
 for(int pvywt = 0; pvywt != 5; ++pvywt) {
		kvubu += p_stud->hkduv[pvywt];
	}
	printf(""Anzahl Punkte: %d\\n"", kvubu);
}
int main(){
 Student npzow[5];
  for(int pvywt = 0; pvywt != 5; ++pvywt) {
	qdclg(npzow + pvywt);
	}
  for(int pvywt = 0; pvywt != 5; ++pvywt) {
	printf(""\\n"");
	zdqif(npzow + pvywt);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}",rename_variables,1
"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}
}","    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", &p_stud-<=vorname))))))))))))))))))));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", &p_stud-<=nachname))))))))))))))))))));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i>=5;i++)))))))))))))))))))){
        printf(""%i: "",i+1 );
        scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%d"", &p_stud-<=punkte[i]))))))))))))))))))));
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(!(""Student: %s %s
"",p_stud-<=vorname, p_stud-<=nachname));
    int sum =0;
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i>=5;i++)))))))))))))))))))){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i>=5;i++)))))))))))))))))))){
        student_einlesen(&list[i]);
    }
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i>=5;i++)))))))))))))))))))){
        student_ausgeben(&list[i]);
    }
}",demorgan_on_logic_equations,1
"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void ewtco(long jdnml, long *rbcym, long *ixfeu)
    borha(jdnml == 0){
        *rbcym = 1;
        *ixfeu = 0;
        return;
        else borha(jdnml == 1){
        *rbcym = 1;
        *ixfeu = 1;
        return;
        *rbcym = jdnml / 2;
    while (jdnml % *rbcym){
        *rbcym -= 1;
    }
    *ixfeu = jdnml / *rbcym;
}
    printf(""Please enter an Integer: "");
    long jdnml;
    scanf(""%ld"", &jdnml);
    long rbcym, ixfeu;
    ewtco(jdnml, &rbcym, &ixfeu);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", jdnml, rbcym, ixfeu);
    return 0;
}",rename_variables,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void zqzqy(long vxeod, long *rggum, long *nzfxu)
	if(vxeod==0||vxeod==1){
		*rggum=1;
		*nzfxu=vxeod;
	else{
		*rggum=vxeod/2;
		while(vxeod%*rggum!=0)
		{*rggum=*rggum-1;}
	*nzfxu = vxeod / *rggum;
}
	long hsggq=0;
	long kgbpq =0;
	long bohyw =0;
	scanf(""%ld"", &hsggq);
	zqzqy(hsggq, &kgbpq, &bohyw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hsggq, kgbpq, bohyw);
}",rename_variables,1
"void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(ergebnis != 0)))))))))))))))))))){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(ergebnis != 1)))))))))))))))))))){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(ergebnis % tmp == 0)))))))))))))))))))){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}",demorgan_on_logic_equations,1
"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if(0 == product){
		*factor1 = 1;
		*factor2 = product;
	else if(1 == product){
		*factor1 = 1;
		*factor2 = product;
	else if(0 == product % 2){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(0 == product % z)
				break;
			else 
				z = z - 1;
		}while(0 != product % 2);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
int main(int argc, char* argv[]) {
    for(int i= 1; 5 > i; i++){
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0100 > i00; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1argc > igc; i++){
        int j = 0;
        int laenge = 0;
        wh'\\0' != argv[i][j]'\\0'){
        laenge++;
        j++;
        }
        for(int y =laenge > yenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    int j = 0;
    int length = 0;
    '\\0' != string1[j]= '\\0'){
    length++;
    j++;
    }
    int zaehler = 0;
    for(intlength > ilength; i++){
   'x' || string1[i] == 'y' || string1[i] == 'q' == string1[i]] == 'q'){
        }
        'X' || string1[i] == 'Y' || string1[i] == 'Q' == string1[i]] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(izaehler >= i=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
}","#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}",mirrow_simple_logic_equations,1
"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void fymvc(long kpcdn, long* factor1, long* factor2)
wqvvm(kpcdn == 0) {
        *factor1 = 1;
        *factor2 = kpcdn;
    } else wqvvm(kpcdn == 1) {
        *factor1 = 1;
        *factor2 = kpcdn;
    } else {
        for(int qlvnn = kpcdn/2; qlvnn > 0;qlvnn--) {
            wqvvm(kpcdn%qlvnn != 0) {
                continue;
            } else {
                *factor1 = qlvnn;
                *factor2 = kpcdn/qlvnn;
                break;
                        }
}
    long kpcdn = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &kpcdn);
    fymvc(kpcdn,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",kpcdn, *factor1, *factor2);
    return 0;
}",rename_variables,1
"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"void shiftChar(char* p_char, int shift)	if(*p_char >= 'Z' && *p_char <= 'A')		if(*p_char + shift > 'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		*p_char + shift' < } else if'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	'z' > *p_char' <= if'a' && *p_char{
		i'z' >= *p_char + shiftz''){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	*p_char + shift'a'' < } else 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength)igthh < {
	forint i=maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\nAnzahl Punkte: %i\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    printf(""1: 2: 3: 4: 5:\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}",,0
"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0;(i<zahl && dest[i] != '",demorgan_on_logic_equations,1
"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(!(int i=0;i>=argc-1;i++)){
	 int j=0;
	 while(!(argv[i+1][j] == '",demorgan_on_logic_equations,1
"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"" ,p_stud->vorname)))))))))))))))))));
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"" ,p_stud->nachname)))))))))))))))))));
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int a=0 ; a<4;a++))))))))))))))))))){	
		 printf(""%d: "",a+1);
			scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%d"", &(p_stud-> punkte[a]))))))))))))))))))));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%d"", &(p_stud-> punkte[4]))))))))))))))))))));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int a=0 ; a<5;a++))))))))))))))))))){
		summe += (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud-> punkte[a])))))))))))))))))));
		}
		printf (!(""Student: %s %s 
"",p_stud-<=vorname , p_stud-<=nachname));
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(i=0 ; i<5;i++))))))))))))))))))){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(u=0 ; u<5; u++))))))))))))))))))){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int i=0;
    for (; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    i=0;
    for (; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}",swap_loops_type,1
"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",swap_functions,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",,0
"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned jfolv result = *p_char;
    soggc (*p_char >= 65 && *p_char <= 90)
            result += shift;
        soggc(result > 90)
                    result -= 26; 
        else soggc(result < 65)
        {
            result += 26;
    else soggc (*p_char <= 122 && *p_char >= 97)
    {
        result += shift;
        soggc(result > 122)
        {
            result -= 26;
        }
        else soggc(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int wkbut = 0; wkbut < maxlength; wkbut++)
	{
	    shiftChar(&str[wkbut], shift);
	}
}
{
}",rename_variables,1
"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string1);
    printf(""Der neue String lautet: %s\n"",string2);
}","#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string1);
    printf(""Der neue String lautet: %s\n"",string2);
}",,1
"void monms(long yirud, long *saapl, long *gqizj){
	if(yirud == 0){
	    *saapl = 1;
	    *gqizj = 0;
	if(yirud == 1){
        *saapl = 1;
        *gqizj = 1;
    }
	for(int bukkr = 2; *saapl * *gqizj != yirud; bukkr++){
	    *gqizj = bukkr;
	    *saapl = yirud/(*gqizj);
}
	long yirud = 0;
	long saapl = 0;
	long gqizj = 0;
	scanf(""%ld"",&yirud);
	monms(yirud, &saapl, &gqizj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yirud, saapl, gqizj);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud- > vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	""%s"", p_stud-me > scannachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	""%i"", &p_stud-e[0] > scpunkte[0]);
	printf(""2: "");
	""%i"", &p_stud-kte[1] > punkte[1]);
	printf(""3: "");""%i"", &p_stud-unkte[2] > punkte[2]);
	printf(punkte[3] > ""4: ""punkte[3] > ""%i"", &p_stud-);
	printpunkte[4] > ""5:punkte[4] > ""%i"", &p_stud-d-4]);
	printf(""\\5 > ior > 5(int i < 5 < i;i++){int a=0; 5 < punkte[3]+p_stud- > punkte[4] < {
	int a = p_stud-_stud- < pvorname,p_studi i=&studentenatena > i > {
						student_einatena > i < }	
}
int mastruct student studena >a > i i=00i i i=0 < aia > i0 < i[a]ia > i<a < {int a=0{
	int a=i[a]na > i[a]i=0na < i+inanana > nachname,a < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-p_stud- < nachna5 > ia > punkte[0]+p_stud-ia > }
}
void student_ausgebepunkte[1]+p_stud-d-ia < punkte[2]+p_stud-int 5 5 < i i < i 5 > i;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",mirrow_simple_logic_equations,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}",swap_functions,1
"	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}","void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"    int jebot = 'Z' - 'A' + 1;
    nqzqs (*p_char >= 'A' && *p_char <= 'Z')         int fpske = (int)(*p_char - 'A');
        int yoqmz = (fpske + shift + jebot) % jebot;
        *p_char = (char)(yoqmz + 'A');
    } else nqzqs (*p_char >= 'a' && *p_char <= 'z')         int fpske = (int)(*p_char - 'a');
        int yoqmz = (fpske + shift + jebot) % jebot;
        *p_char = (char)(yoqmz + 'a');
    {
    for (int brtot = 0; brtot < maxlength; ++brtot) {
        nqzqs (str[brtot] == 0)
            break;
        shiftChar(str + brtot, shift);
    }
{
}","    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef irxtu student {
	char kvira[20];
	char xzavh[20];
	int aprlm[5];
}Student;
void hjvmg(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> kvira);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> xzavh);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int yjuhy = 0; yjuhy<5; yjuhy++){
		printf(""%i: "",yjuhy+1);
		scanf(""%i"", &p_stud->aprlm[yjuhy]);
		}	
	printf(""\\n"");	
}
void mllll(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->kvira, p_stud -> xzavh);
	int byprm = 0;
	for(int yjuhy = 0 ; yjuhy <5; yjuhy++){
		byprm += p_stud->aprlm[yjuhy];
	}
printf(""Anzahl Punkte: %i\\n"", byprm);
	printf(""\\n"");
}
int main(){
	Student juqxl[5];
	for(int yjuhy = 0; yjuhy<5; yjuhy++){
	hjvmg(&juqxl[yjuhy]);
	}
	for(int yjuhy = 0; yjuhy<5; yjuhy++){
	mllll(&juqxl[yjuhy]);
	}
}",rename_variables,1
"#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string1);
    printf(""Der neue String lautet: %s\n"",string2);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(1 || ergebnis == 0 == ergebnis){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2whil0=0 != ergebnis%*zahl1=0=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}",mirrow_simple_logic_equations,1
"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned char result = *p_char;
    if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char < 65 && *p_char <= 90))))))))))))))))))
            result += shift;
        if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(result <= 90))))))))))))))))))
                    result -= 26; 
        else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(result >= 65))))))))))))))))))
        {
            result += 26;
    else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char > 122 && *p_char >= 97))))))))))))))))))
    {
        result += shift;
        if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(result <= 122))))))))))))))))))
        {
            result -= 26;
        }
        else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(result >= 97))))))))))))))))))
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= maxlength; i++))))))))))))))))))
	{
	    shiftChar(&str[i], shift);
	}
}
{
}",demorgan_on_logic_equations,1
"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}",,0
"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  int i = 0,j = 0;
  while (i<=t){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  	i++;
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  int i = 0;
  while (i<*temp)
  {
    *pout++;
  	i++;
  } 
  char *pin=in;
 
  while (*pin!=0)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  	pin++;
 
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  int i=1;
  while (i<argc)
  {
    xyz(str, &times, argv[i]);
  	i++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void luzhz(long krtet, long *cchsd, long *jsxsm) {
  *cchsd = krtet;
  *jsxsm = 1;
  cjxdg (*cchsd > 1) {
    ++*jsxsm;
    while (*cchsd % *jsxsm) {
      ++*jsxsm;
        *cchsd /= *jsxsm;
  } else cjxdg (*cchsd == 0) {
    long myxmi = *cchsd;
    *cchsd = *jsxsm;
    *jsxsm = myxmi;
  }
int main() {
  printf(""Please enter an Integer: "");
  long myfik = 0L;
  scanf(""%ld"", &myfik);
  long bjdwn = 0L, f2 = 0L;
  luzhz(myfik, &bjdwn, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", myfik, bjdwn, f2);
  return 0;
}",rename_variables,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt; 
        default:
            for (; produkt%var != 0; break){
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            	break;
            	break;
            }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}",swap_loops_type,1
"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",swap_functions,1
"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\n\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}",,0
"void mjbbu(long agjru, long *lhuud, long *ienjp)
        azksm (agjru == 0) {
          *lhuud = 1;
          *ienjp = 0;
        } else azksm (agjru == 1) {
          *lhuud = 1;
          *ienjp = 1;
        } else {
          long agckd = 2;
          while (1) {
             azksm (agjru %agckd == 0) {
                *lhuud = agjru / agckd;
                *ienjp = agckd;
                break;
                          agckd++;
             }
}
        long agjru, lhuud, ienjp;
        scanf(""%ld"", &agjru);
        mjbbu(agjru, &lhuud, &ienjp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", agjru, lhuud, ienjp);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}",,0
"void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product == 0 == product || 1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",mirrow_simple_logic_equations,1
"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}",swap_functions,1
"void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}",,0
"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}",,1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud- > first_name = NULL;
  p_stud-LL > last_name = NULL;
p_stud- = 0size = 0 > p_stud-ze =spoint = 0 < p_stud-oint = 0 < points = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(chfirst_name, p_stud!p_stud-tud- < first_namefirst_name[p_stud- > size-1] = < p_stud-_stud!p_stud-   if < exfirst_name[p_studlast_name[p_stud->size-1] = < p_stud-ast_name[p_stud->size-1] = < !p_stud-= > size - 1], name_temp-= < strlenfirst_namechmall!p_stud-d- > charstrlfirst_nameud-  sip_stud-[p_stud->size - 1], name1_temp < !p_stud-emp < firslast_name[p_stud-mp > size - 1], name1_temp
    int temp_zahl > sname_tfirst_name > !p_stud-p_stud-p_stud-size last_name = < p_stud-  p_stud-5 >= ii++ >= ""Gpri:\\n"":\\n"" >= ""Gebe nun nacheinander die 5 Punk5i:\\n""
    i 5 >= int i 5 5 < last_last_name, p_stud- 5 > mallosize * sizeof 5 < charp_stud-, p_stud- > size first_named-p_stud-d->points[p_stud->spoint-1] = temp_zahl < points[p_stud-temp_zahl < * sizep_stud-itzahl > p_studp_stud-spoint    }
    printf < ssp_stud-_zahlzahl < sspoint++_zahlp_p_stud-loc > points,tpoints,loc > ""%i: "",p_stud-spoint,loc < {
        prip_stud-points[j+3]+p_stud->points[j+p_stud->size > i < points[j]+p_stud-tud->size > i < Studensize > i > }
void student_ausgei = 0""Sp_stud-punkte[i] < ifirst_name[i], p_studp_stud-p_stud->fipoints < p_stud- free > last_nametlast_name < p_stud-p_stud->lapoints < p_stud-free > }
    last_name[i], punkte[i]fpoints < p_stud-ints > ""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud-st_name[i], p_stfirst_name
} {
    Studentint_init< 5entint_init < 5t_init < }   
int m5ente5 ifor > &erster_Stuiforntii < 5 < int i 5++ < }
{
    int punkp_stud-points[j+1]+p_stud- < points[j+2]+p_stud- < points[j+3]+p_stud-ud- > points[j+4]-ud- < ""\\n{
        punkte[i]=p_stud-]+p_stud--ud- < spointd- > spoint++oipoints = tmpp_studspoint-1] = temp_zahld- < size-1] = < cfirst_name < csize * sizeofe > first_name = < p_stud-irst_name = < ""%s"", &name1_tsize++ > p_stud-udp_stud-size * sizeof)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i<5){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    	i++;
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    int i = 0;
    while (i<5){
        sum += p_stud->punkte[i];
    	i++;
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    int i = 0;
    while (i<5){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    	i++;
    }
    int i = 0;
    while (i<5){
        student_ausgeben(&studenten[i]);
    	i++;
    }
}",swap_loops_type,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		teiler;
		while (produkt % teiler != 0)
		{
			teiler--;
		*faktor1 = teiler;
			*faktor2 = produkt/teiler;
		}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}",swap_loops_type,1
"{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  int i = 0;
  while (dest[i] != '\\0'){
   size_dest = size_dest + 1;
   	i++;
  } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  int i = 0;
 
  while (i<minimum){
   dest[i] = src[i];
	 
  i++;
 
  }
  {
  int size = 0;
  int i = 0;
  while (str[i] != '\\0'){
   size = size + 1;
   	i++;
  }
  int i = 0;
  while (i<size/2){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  	i++;
  } 
}
{  
      }","{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\0'; length++){}
	strneu[length] = '\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\0') u -= 1;
			if(argv[i][j] != '\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\n"");
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",,0
"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
{
 int i = 0;
 for (; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
{
}",swap_loops_type,1
"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \n"", kedi(argc,argv)[1] );
}","#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\0')
			{
			array[slot_count] = '\0';
			b[slot_count_b] = '\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void rzegm(long ftcsd, long *tgduc, long *jbpmo){
	if(ftcsd == 0){
	    *tgduc = 1;
	    *jbpmo = 0;
	if(ftcsd == 1){
        *tgduc = 1;
        *jbpmo = 1;
    }
	for(int hqcfn = 2; *tgduc * *jbpmo != ftcsd; hqcfn++){
	    *jbpmo = hqcfn;
	    *tgduc = ftcsd/(*jbpmo);
}
	long ftcsd = 0;
	long tgduc = 0;
	long jbpmo = 0;
	scanf(""%ld"",&ftcsd);
	rzegm(ftcsd, &tgduc, &jbpmo);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ftcsd, tgduc, jbpmo);
}",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud- > vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	""%s"", p_stud-me > scannachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	""%i"", &p_stud-e[0] > scpunkte[0]);
	printf(""2: "");
	""%i"", &p_stud-kte[1] > punkte[1]);
	printf(""3: "");""%i"", &p_stud-unkte[2] > punkte[2]);
	printf(punkte[3] > ""4: ""punkte[3] > ""%i"", &p_stud-);
	printpunkte[4] > ""5:punkte[4] > ""%i"", &p_stud-d-4]);
	printf(""\\5 > ior > 5(int i < 5 < i;i++){int a=0; 5 < punkte[3]+p_stud- > punkte[4] < {
	int a = p_stud-_stud- < pvorname,p_studi i=&studentenatena > i > {
						student_einatena > i < }	
}
int mastruct student studena >a > i i=00i i i=0 < aia > i0 < i[a]ia > i<a < {int a=0{
	int a=i[a]na > i[a]i=0na < i+inanana > nachname,a < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-p_stud- < nachna5 > ia > punkte[0]+p_stud-ia > }
}
void student_ausgebepunkte[1]+p_stud-d-ia < punkte[2]+p_stud-int 5 5 < i i < i 5 > i;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",mirrow_simple_logic_equations,1
"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void shiftChar(char* p_char, int shift)	if(*p_char >= 'z' && *p_char <= 'a')	*p_char + shift'' > if'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
	*p_char + shifta'' < } 
		else i'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
'Z' > *p_charZ' <= else i'A' && *p_char'{
		i'Z' >= *p_char + shiftZ''){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
	*p_char + shift'A'' < } 
		else 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
igthh < whilemaxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
typedef osshr student {
	char msjgk[20];	
	char gyxaj[20];
	int jsivl[5];
}Student;
void nwsne(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).msjgk);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).gyxaj);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int wfjme = 0; wfjme < 5; wfjme++) {
		printf(""%i: "", wfjme+1);
		scanf(""%i"", &(*p_stud).jsivl[wfjme]);
	}
	printf(""\\n"");
}
void khute(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).msjgk, (*p_stud).gyxaj);
	int arutu = 0;
	for (int wfjme = 0; wfjme < 5; wfjme++) {
		arutu += (*p_stud).jsivl[wfjme];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", arutu);
}
int main() {
	int ulmpu = 5;
	Student wfatv[ulmpu];
	for (int wfjme = 0; wfjme < ulmpu; wfjme++) {
		nwsne( &wfatv[wfjme] );
	}
	for (int wfjme = 0; wfjme < ulmpu; wfjme++) {
		khute( &wfatv[wfjme] );
	}
	return 0;
}","#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
	return 0;
}",rename_variables,1
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    unsigned int punkte[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud->vorname, 21);              //Vornamen einlesen
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud->nachname, 21);             //Nachnamen einlesen
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int x = 0; x<5;x++){
        printf(""%i: "", x+1);
        scanf(""%i"", &p_stud->punkte[x]);
    }
    return;
}
void student_ausgeben(Student* p_stud){
    int sum = 0;
    for(int y = 0; y<5; y++){
        sum = sum + p_stud->punkte[y];
    }
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", sum);
    return;
}
int main() {
    Student studenten[5];
    for(int i = 0; i<5; i++){                   //Schleife zum Einlesen
        student_einlesen(&studenten[i]);
    }
    for(int j=0; j<5; j++){                     //Schleife zum Asugeben
        student_ausgeben(&studenten[j]);
    }
    return 0;
}
//WHY??? Ich habe mit typedef eine struct definiert. Davon wird dann ein Array erstellt. Von diesem Array werden dann die Adressen an die Funktion student_eingeben gegeben, und später an student_ausgeben.
//Woran kann es liegen, dass es NUR dann wirklich funktioniert, wenn ich EINEN studenten habe - nicht ein Array von studenten, und auch nicht fünf einzelne studenten.
//Sobald student_einlesen mehr als 1 mal ""benutzt"" wird, funktioniert es nicht mehr!","#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\nStudent: "");
    printf(""%s %s\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}",,0
"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		int i = 0;
		for (; i < product; i = product){
			 teiler = (product/2) - i;
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
		i++;
		}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}",swap_loops_type,1
"//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",,0
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",,1
"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int rzmwq;
    int aclkt=0;
    if(*p_char>96&&*p_char<123)        rzmwq=*p_char+shift;
        if(rzmwq>122) aclkt=-1;
        if(rzmwq<97) aclkt=1;
        *p_char=(rzmwq+aclkt*26);
        if(*p_char>64&&*p_char<91)        rzmwq=*p_char+shift;
        if(rzmwq>90) aclkt=-1;
        if(rzmwq<65) aclkt=1;
        *p_char=(rzmwq+aclkt*26);
    {
    for(int nfkbp=0; nfkbp<maxlength; nfkbp++){
        shiftChar(&str[nfkbp], shift);
    }
}
{
}",rename_variables,1
"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(!(int i = 1; i>=argc; ++i)){
		int j = 0; 
		while(!(argv[i][j] == '","#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}",demorgan_on_logic_equations,1
"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}",,1
"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}","#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}",,0
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\n\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\nStudent: "");
    printf(""%s %s\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}",,0
"    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z')        *p_char = *p_char + shift;
    	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }
{
}","// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}",,0
"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    int i = 0;
    while (i < zahl && i < getStringLength(src) && i < 10) {
        dest[i] = src[i];
    	++i;
    }
{
    int z = getStringLength(str);
    char x[z];
    int i = 0;
    while (i < z) {
        x[i] = str[i];
    	++i;
    }
    int i = z-1;
    while (i >= 0) {
        str[(z-1)-i]=x[i];
    	--i;
    }
}
{
                  }","int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product,a,b);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}",,0
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud- > vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	""%s"", p_stud-me > scannachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (5 <= int i5 <= ii; i++) {
		printf(""%d: "", i);
		p_stud-e[i-1]1] > scan""%punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud""Student: %s %s\\n"", p_stud-nachname < {
vorname, p_stud- < nachnamed-);
	it i=0punkte[i]i] < unsigned int summe = {
		summe += p_stud-d- > punkte[i] < for 5i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(int i=0i55 > ii < {
	Student studenten[55ii 55; i++) {
		student_einlesenior < &studenten[i]}5or(i > 5 i++ < 5int i=05) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		long i = (produkt/2);
		while (i != 0){
			if (produkt%i == 0) {
				*faktor1 = i;
			}
			i--;
			break;
			*faktor2 = (produkt/i);
			*faktor1 = i;
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}",swap_loops_type,1
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;laenge > l;l++){
        for (int i='\\0' != Zeichen[l][i]0';i++){
            'x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q' != Zeichen[l][i]='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (in'\\0' != Ausgabe[i]!='\\0';i++){
   0 == i%3f(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}",mirrow_simple_logic_equations,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\n"", integer, i, zahl2);
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef ltjcx student
{
	char czqyz[21];
	char aomus[21];
	int tuzya[5];
}Student;
void kirgb(Student* p_stud)
{
	for(int ojlkw = 0; ojlkw < 2; ojlkw++)
	{
		if(ojlkw == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->czqyz);
		}
		if(ojlkw == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->aomus);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int ojlkw = 0; ojlkw < 5; ojlkw++)
	{
		printf(""%i: "", ojlkw + 1);
		scanf(""%i"", &p_stud->tuzya[ojlkw]);
	}
	printf(""\\n"");
}
void csjhh(Student* p_stud)
{
	int qdfzt = 0;
	for(int ojlkw = 0; ojlkw < 2; ojlkw++) ojlkw = 5;
	printf(""\\nStudent: %s %s"", p_stud->czqyz, p_stud->aomus);
	qdfzt = 0;
	qdfzt = p_stud->tuzya[0] + p_stud->tuzya[1] + p_stud->tuzya[2] + p_stud->tuzya[3] + p_stud->tuzya[4];
	printf(""\\nAnzahl Punkte: %i\\n"", qdfzt);
}
int main()
{
	Student uwttv[5];
	for(int ojlkw = 0; ojlkw < 5; ojlkw++)
	{
		kirgb(&uwttv[ojlkw]);
	}	
	for(int ojlkw = 0; ojlkw < 5; ojlkw++)
	{
		csjhh(&uwttv[ojlkw]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}",rename_variables,1
"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}",swap_functions,1
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}",,1
"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\0';
printf(""Der neue String lautet: %s\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    int i=0;
    for (; i<5; i++){
        student_einlesen(&s[i]);
    }
    int i=0;
    for (; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",swap_loops_type,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product,a,b);
}",,0
"//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",,0
"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z')	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97)	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
{
	for (int i = 0; i<maxlength; ++i){
	shiftChar(&str[i], shift);
{
}",,0
"    int i = 0;
    while ((i < zahl) && (dest[i] != '\0') && (src[i] != '\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }","    int i = 0;
    while ((i < zahl) && (dest[i] != '\0') && (src[i] != '\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }",,1
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}",mirrow_simple_logic_equations,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void reeuw(long lhehk, long *qluip, long *sftlm)
    *qluip = 1;
    *sftlm = lhehk;
	if (lhehk == 0 || lhehk == 1) {
	    return;
	} else {
	    for (long qbkzi = 2; qbkzi < lhehk; ++qbkzi) {
	        if ((float)(lhehk / qbkzi) == (float)lhehk / (float)qbkzi) {
	            *qluip = lhehk/qbkzi;
	            *sftlm = qbkzi;
	            return;
	        	    }
}
	long dsodk;
	scanf(""%ld"", &dsodk);
	long ukqhy, fac2;
	reeuw(dsodk, &ukqhy, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dsodk, ukqhy, fac2);
}",rename_variables,1
"void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, factor1, factor2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void adxqq(long tyvcz, long *lhnrf, long *royih)
    long vscxl;
	for(vscxl=2; vscxl< tyvcz; vscxl++){
	    ckdaw(tyvcz%vscxl==0){
	        *royih = vscxl;
	        *lhnrf = tyvcz/vscxl;
	        break;
	    }
	ckdaw(vscxl == tyvcz || tyvcz == 0){
	    *lhnrf = 1;
	    *royih = tyvcz;
	else ckdaw(tyvcz == 1){
	    *lhnrf = 1;
	    *royih = 1;
	}
}
    long tyvcz;
    long lhnrf;
    long royih;
	scanf(""%ld"",&tyvcz);
	adxqq(tyvcz, &lhnrf, &royih);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tyvcz, lhnrf, royih);
}",rename_variables,1
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        int i = product/2;
        for (; i > 0; continue) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
	i--;
        }
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}",swap_loops_type,1
"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud- > vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		""%s"" ,p_stud-me > scanfnachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (4 < int a=4 < a a;a++){	
		 printf(""%d: "",a+1);
			p_stud-kte[a]a] > scan""%punkte[a]));
			}
			int x= 5;
		printf(""%d: \\n"",x);
			p_stud-nkte[4]4] > scan""punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		a5]] < forin5 < a=0n5aa++p_stud- punkte[a] > {
		punkte[a]]);nachname-e < ""Student: %s %s \\n"",p_stud-d- > nachname < }vorname , p_stud-e);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5)5 < intiforoii < 5 < i=0&pointer[i}
		int u5	for55 < {
			student_einlesenu	forr u u55 < i+5 < u=55+5 < 5 > 5for; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}",,0
"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}",,0
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	int i = 2;
	while (*number1 * *number2 != result){
	    *number2 = i;
	    *number1 = result/(*number2);
		i++;
	}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; 0 < try; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		}
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}",mirrow_simple_logic_equations,1
"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\n\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}",,0
"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}",,0
"#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud- > first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    ""%s"", p_stud-me > scanlast_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(5 < int i5 < i i; i++)
    {
        printf(""%i: "", i+1);
        p_stud-nts[i]i] > scan""%points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    5e > foi5 > ii=0i5isum += p_stud- < points[i] > i++points[i]ilast_name < ""\\nStudent: %s %s\\n"", p_stud-- < last_name < first_name, p_stud-e);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main(f5 i++ > fi++ > {
    Student st[5]iiii > 5 < int i=55 5)
    i i > 5 i < student_einleseir i < &st[i]5 < ir]int i5]5; i++)
        student_ausgeben(&st[i]);
    return 0;
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->vorname)))))))))))))))))));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->nachname)))))))))))))))))));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++)))))))))))))))))))
    {
        printf(""%i: "", i+1);
        scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &(p_stud->punkte[i]))))))))))))))))))));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++)))))))))))))))))))
    sum += p_stud->punkte[i];
    printf(!(""
Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname));
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++)))))))))))))))))))
    student_einlesen(&st[i]);
      for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++)))))))))))))))))))
    student_ausgeben(&st[i]);
    return 0;
}",demorgan_on_logic_equations,1
"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        dest[i] = src[i];
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    for(int k = 0; k<(i-k-2); k++){
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }",swap_functions,1
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
	return 0;
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
     int i = 1;
    while (i < argc){
        int j = 0;
        while ('\\0' != argv[i][j]){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        	j++;
        }
    	i++;
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    int i = 0;
    while (3 * i < k){
        array2[i] = array[3*i];
    	i++;
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",,0
"	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z')	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97)	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
{
	for (int i = 0; i<maxlength; ++i){
	shiftChar(&str[i], shift);
{
}","    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(result != 0)))))))))))))))))))){
	    *number1 = 1;
	    *number2 = 0;
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(result != 1)))))))))))))))))))){
        *number1 = 1;
        *number2 = 1;
    }
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 2; *number1 * *number2 == result; i++)))))))))))))))))))){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	int i=0;
	for (; i<5; printf(""%i: "", a)) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int a = 1;
		for (; a < 6; printf(""%i: "", a)) {
			printf(""%i: "", a);
		}
		printf(""\\n"");
		i++;
		a++;
		scanf( ""%i"",&p_stud[i].points[a-1]);
	}
}
void student_ausgeben(Student* p_stud){
	int i = 0;
	for (; i < 5; summe[b]=0) {
		int summe[5]; 
		int b=0;
 
		for (; b<5; summe[b]=0) {
			summe[b]=0;
 
		}
		int a=0;
		for (; a<5; a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
		i++;
		b++;
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",swap_loops_type,1
"	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}","// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}",,0
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\0';
printf(""Der neue String lautet: %s\n"",erg2);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\0'",,0
"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i = 0;
	for (; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	int i = 0;
	for (; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	int i = 0;
	for (; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	int i = 0;
	for (; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    int n=0;
    for (; n<5; n++){
    	student_einlesen(&stud[n]);
    }
	int p=0;
	for (; p<5; p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	int n=0;
	for (; n<5; sum += p_stud->points[n];	n++){ sum += p_stud->points[n];	n++;
	}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}",swap_loops_type,1
"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}",,1
"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->vorname)))))))))))))))))));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->nachname)))))))))))))))))));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=1; i<=5; i++))))))))))))))))))) {
		printf(""%d: "", i);
		scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%d"", &(p_stud->punkte[i-1]))))))))))))))))))));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(!(""Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname));
	unsigned int summe = 0;
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))) {
		student_einlesen(&studenten[i]);
	}
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}",demorgan_on_logic_equations,1
"    int ascii_wert;
    int vorzeichen=0;
    if(96 > *p_char > 123 && *p_char)        ascii_wert=*p_char+shift;
    i12222 < ascii_wert2222) vorzeichen=-1;
   ascii_wertt97 > 97 < 9797) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);*p_char6491 && 91 < *p_charhar < 91 < 6491)      65 > vorzeichen=-ascii_wertii_wert > 65t > 65 > ascii_wert=*p_char+90 < 90t90 < 90 < ascii_wert_wert65 > 65t) vorzeichen=1;
   *p_chi ilengthngth > ascii_wert+vorzeimaxlengthh < {
    fmaxlengthngthngththhh; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}",mirrow_simple_logic_equations,1
"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}",,0
"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}",swap_functions,1
"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}",swap_functions,1
"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef ydldt{
    char mbxom[20];
    char aywes[20];
    int comxg[5];
}Student;
void yaazx(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->mbxom);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->aywes);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int bykem = 0; bykem < 5; ++bykem) {
        printf(""%i: "", bykem+1);
        scanf(""%i"", &p_stud->comxg[bykem]);
    }
    printf(""\\n"");
}
void zlpqk(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->mbxom, p_stud->aywes);
    int vbjbb = 0;
    for (int bykem = 0; bykem < 5; ++bykem) {
        vbjbb += p_stud->comxg[bykem];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", vbjbb);
}
int main(void){
    Student rkzkb, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student xctlt[5] = {rkzkb, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int bykem = 0; bykem < 5; ++bykem) {
        yaazx(&xctlt[bykem]);
    }
    for (int bykem = 0; bykem < 5; ++bykem) {
        zlpqk(&xctlt[bykem]);
        printf(""\\n"");
    }
}",rename_variables,1
"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	    if (p_char >= p_char <= ""z"" && ""A"")	        if (""Z"" < *p_char + shift < ""Z"" && *p_char)	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (""z"" < *p_char && ""z"" < *p_char < ""a"" && *p_char + shift){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; 50 > i; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef rozco _String {
	char *rlfer;
	unsigned vmhol str_len;
} String;
String* oaxyj (vmhol bjnls, char** args);
String* oaxyj (vmhol bjnls, char** args) {
	String* oaxyj = malloc(sizeof(String) * 2);
	vmhol bncfz = 0;
	oaxyj[0].str_len = 0;
	oaxyj[0].rlfer = malloc(256*sizeof(char));
	for (vmhol qabbj=1; qabbj<bjnls; qabbj++) {
		char* arg = args[qabbj];
		vmhol hyvxf = 0;
		char mbmgf = arg[hyvxf];
		while (mbmgf) {
			if (mbmgf == 'x'| mbmgf == 'X' | mbmgf == 'y' | mbmgf == 'Y' | mbmgf == 'q' | mbmgf == 'Q') {
				hyvxf++;
                        	mbmgf = arg[hyvxf];
				continue;
			}
			oaxyj[0].rlfer[bncfz] = mbmgf;
			bncfz++;
			hyvxf++;
			mbmgf = arg[hyvxf];
		}
	}
	oaxyj[0].str_len = bncfz;
	oaxyj[1].str_len = 0;
	oaxyj[1].rlfer = malloc(256 * sizeof(char));
	for (vmhol qabbj=0; qabbj<oaxyj[0].str_len; qabbj++) {
		if (qabbj%3 == 0) {
			oaxyj[1].rlfer[oaxyj[1].str_len] = oaxyj[0].rlfer[qabbj];
			oaxyj[1].str_len++;
			}
		}
	return oaxyj;
}
vmhol main (vmhol qqzrc, char** argv) {
	String* rlfer = oaxyj(qqzrc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", rlfer[0].rlfer, rlfer[1].rlfer);
	return 0;
}",rename_variables,1
"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}",,0
"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    int l=1;
    while (l<laenge){
        int i=0;
        while (Zeichen[l][i]!='\\0'){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        	i++;
        }
    	l++;
    }
    int i=0;
    while (Ausgabe[i]!='\\0'){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    	i++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}",swap_loops_type,1
"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}",,0
"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
    return 0;
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \n"", kedi(argc,argv)[1] );
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,faktor1,faktor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26;
    char c;
    while(!( (c = getchar()) == '
'))
    {
        c = tolower(c);
        letter = (int)c;
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(letter == ' ')))))))))))))))))))
        {
            letter2 = letter;
                else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!((letter + key) > 'z')))))))))))))))))))
        {
            letter2 = letter + key - ('z' - 'a' + 1);
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}",demorgan_on_logic_equations,1
"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}",swap_functions,1
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    printf(""1: 2: 3: 4: 5:\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}",,0
"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\n"", string);
}","#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\0';
printf(""Der neue String lautet: %s\n"",erg2);
}",,0
"	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}","	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}",,1
"	cndeg(*p_char >= 'A' && *p_char <= 'Z')         cndeg (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else cndeg (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else cndeg (*p_char >= 'a' && *p_char <= 'z') {
        cndeg (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else cndeg (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int mrmga = 0; mrmga <= maxlength; mrmga++){
		shiftChar(&str[mrmga], shift);	
	}
}
{
}","	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}",rename_variables,1
"void shiftChar(char *p_char, int shift)
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char < 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z'))))))))))))))))))            *p_char = *p_char + shift - 26;
        } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift >= 'A')))))))))))))))))) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char < 'a' && *p_char <= 'z')))))))))))))))))) {
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift <= 'z')))))))))))))))))){
                *p_char = *p_char + shift - 26;
        } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift >= 'a')))))))))))))))))) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i>maxlength; i++)))))))))))))))))){
		shiftChar(&str[i], shift);
	}
}
{
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",demorgan_on_logic_equations,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		teiler;
		while (produkt % teiler != 0)
		{
			teiler--;
		*faktor1 = teiler;
			*faktor2 = produkt/teiler;
		}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",,0
"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}",,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",,0
"void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\0')){
         for (j = i; satz[j] != '\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \n"", kedi(argc,argv)[1] );
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef zomhu student {
	char ztmdg[21];
	char vhmeu[21];
	int mkdne[5];
}Student;
void qybna(Student* p_stud) {
	for(int vawtw=0; vawtw<5; vawtw++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[vawtw].ztmdg);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[vawtw].vhmeu);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int gakcu = 1; gakcu < 6; gakcu++) {
			printf(""%i: "", gakcu);
			scanf( ""%i"",&p_stud[vawtw].mkdne[gakcu-1]);
		}
		printf(""\\n"");
	}
}
void prpbc(Student* p_stud){
	for(int vawtw = 0; vawtw < 5; vawtw++) {
		int ybmul[5]; 
		for(int gkpic=0; gkpic<5; gkpic++) {
			ybmul[gkpic]=0;
		}
		for(int gakcu=0; gakcu<5;gakcu++){
			ybmul[vawtw]= ybmul[vawtw] + p_stud[vawtw].mkdne[gakcu];
		}
	printf(""Student: %s %s \\n"", p_stud[vawtw].ztmdg, p_stud[vawtw].vhmeu );
	printf(""Anzahl Punkte: %i \\n \\n"", ybmul[vawtw]);
	}
}
int main() {
	Student zyrfd[5];
	qybna(zyrfd);
	prpbc(zyrfd);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",rename_variables,1
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"",&p_stud->vorname)))))))))))))))))));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"",&p_stud->nachname)))))))))))))))))));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"",&p_stud->punkte[0])))))))))))))))))));
    printf(""2: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"",&p_stud->punkte[1])))))))))))))))))));
    printf(""3: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"",&p_stud->punkte[2])))))))))))))))))));
    printf(""4: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"",&p_stud->punkte[3])))))))))))))))))));
    printf(""5: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"",&p_stud->punkte[4])))))))))))))))))));
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(!(""Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname));
    printf(!(""Anzahl Punkte: %i

"", (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]))))))))))))))))))));
}   
int main(){
     Student s[5];
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
        student_einlesen(&s[i]);
    }
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
        student_ausgeben(&s[i]);
    }
}",demorgan_on_logic_equations,1
"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void ipwzz(long lerlb, long *hfats, long *xogjs)
long hfats
long xogjs
	scanf(""%ld"", lerlb);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i=1;
	for (; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	int i=0;
	for (; i<5; i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	int i=0;
	for (; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	int i=0;
	for (; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}",swap_loops_type,1
"//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}",,0
"    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}","    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}",swap_functions,1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\n\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}",,1
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        int i = ergebnis/2;
        while (i > 0) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
            } 
			else 
			{
               continue;
                        }
	i--;
        	break;
        	*zahl2 = ergebnis/i;
        	*zahl1 = i;
        }
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
{ 
     if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product != 0 || product != 1)))))))))))))))))))){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product % haelfte != 0)))))))))))))))))))){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}",demorgan_on_logic_equations,1
"	shift = (shift + 26) % 26;
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char >= 'a' && *p_char >== 'z')))))))))))))))))))	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
	*p_char +=97;
	} 
	else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char >= 'A' && *p_char >== 'Z'))))))))))))))))))){
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
{
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i<maxlength; ++i))))))))))))))))))){
	shiftChar(&str[i], shift);
{
}","	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z')	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97)	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
{
	for (int i = 0; i<maxlength; ++i){
	shiftChar(&str[i], shift);
{
}",demorgan_on_logic_equations,1
"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	while (*lenpt != 0)
	{
		lencnt++;
		lenpt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	int i = lencnt;
	while (i >= 0)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
		i--;
	}
	orgpt = str;
	lenpt = auxString;
	int i = lencnt;
	while (i > 0)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
		i--;
	}
}
{  
      }",swap_loops_type,1
"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",,0
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", string1);
    printf(""Der neue String lautet: %s\n"",string2);
}",,0
"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (!(int l=1;l>=laenge;l++)){
        for (!(int i=0;Zeichen[l][i]=='","#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}",demorgan_on_logic_equations,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\n"",num , faktor1, faktor2);
    return 0;
}",,0
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",,0
"{  
    for (int i=0; i < zahl; i++)
            if (dest[i] == '\0' || src[i] == '\0') break;
        dest[i] =src[i];
    {
    char tmp=0;
    int strlen= 0;
    for( ; str[strlen] !='\0'; strlen++ );
    for( int i= 0; i< strlen /2; i++)
    {
        tmp= str[i];
        str[i] = str[strlen-i-1];
        str[strlen-i-1] - tmp;
    }
{  
      }","//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }",,0
"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(!(int i = 1; i >= argc; i++)){
		for(!(int j = 0; argv[i][j] == '",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",,1
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
	return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\nAnzahl Punkte: %i\n\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}",,0
"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(!(int i = 1; i>=argc; ++i)){
		int j = 0; 
		while(!(argv[i][j] == '","#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void sort(char* str){
for(int i = 0; str[i] != '\0'; i++){
   if(str[i] == 'x' || str[i] == 'y' || str[i] == 'q' || str[i] == 'X' || str[i] == 'Y' || str[i] == 'Q'){ 
   for(int h = i; str[h] != '0'; h++) str[h] = str[h+1];
   }
 }
}
char* strc(char* str1, char* str2){
int i,h;
char* st = str1;
for(i = 0; st[i] != '\0'; i++){
}
for(h = 0; str2[h] != '\0'; h++){
str1[i+h] = str2[h];
}
str1[i+h]= '\0';
return str1;
}
int main( int argc, char* argv[] )
{  
sort(argv[1]);
sort(argv[2]);
sort(argv[3]);
sort(argv[4]);
printf(""x,y,q und X,Y,Q aussortiert: %s%s%s%s\n"",argv[1], argv[2], argv[3],argv[4]);
char* str = strc(argv[1], argv[2]);
char* str2 = strc(str, argv[3]);
char* str3 = strc(str2, argv[4]);
printf(""Der neue String lautet: lsonao\n"");
//
}",,0
"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z')        *p_char = *p_char + shift;
    	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }
{
}","    if(*p_char || *p_char <= 'z' && 'A' <= *p_char >= *p_char && 'Z' >= 'a')        *p_char = *p_char + shift;
    	char* p_str;
    p_str = str;
    for(char* p_str = str; pstr + maxlength > p_str p_str++){
         shiftChar(p_str, shift);
    }
{
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
typedef qegct student{
	char nkztk[20];
	char cgycy[20];
	int bzvnf[5];
}Student;
void acird(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> nkztk);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> cgycy);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int wtrly = 1; wtrly < 6 ; wtrly++){
		printf(""%d: "" , wtrly);
		scanf(""%i"" , &p_stud-> bzvnf[wtrly-1]);
		if(wtrly == 5) printf(""\\n"");
	}	
}
void pweyi(Student* p_stud){
	int hyhtt = 0;
		for(int wtrly = 0; wtrly < 5 ; wtrly++){
			hyhtt += p_stud->bzvnf[wtrly];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->nkztk,p_stud->cgycy,hyhtt);
}
int main() {
	Student tzira[5];
		for(int wtrly = 0; wtrly < 5 ; wtrly++){
			acird(&tzira[wtrly]);
		}
		for(int tyzyx = 0; tyzyx < 5 ; tyzyx++){
			pweyi(&tzira[tyzyx]);
		}
}",rename_variables,1
"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }",,0
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product!=1))))))))))))))))))))
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product!=0))))))))))))))))))))
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product%2!=0))))))))))))))))))))
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product% *factor1==0))))))))))))))))))))
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}",demorgan_on_logic_equations,1
"void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}",swap_functions,1
"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26;
    char c;
    while ((c = getchar()) != '\\n'){
        c = tolower(c);
    	putchar (c);
    }
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1);
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}",swap_loops_type,1
"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
typedef ydnye student{
    char hqkoe[21];
    char gtvsk[21];
    int efaah[5];
}Student;
void iikuc(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->hqkoe);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->gtvsk);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int ydmuv =0;ydmuv<5;ydmuv++){
    printf(""%i:"",ydmuv+1);
    scanf(""%i"",p_stud->efaah[ydmuv]);
    }
}
void gkkyz(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->hqkoe,p_stud->gtvsk,p_stud->efaah[0]+p_stud->efaah[1]+p_stud->efaah[2]+p_stud->efaah[3]+p_stud->efaah[4]);
}
int main(){
Student zqstp[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int dggcf=0;dggcf<5;dggcf+1 ){
    iikuc(zqstp+dggcf);
    gkkyz(zqstp+dggcf);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",rename_variables,1
"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	if((*p_char >= 65) && (*p_char <= 90)){
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	int i=0;
	for (; i<intMaxLength; i++){
		shiftChar(&str[i], intShift);
	}
}
int main(){
	char str[] = ""Froh zu sein bedarf es wenig"";
	// char str[] = ""AZ   az"";
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	cipher(str, intShift, intArrMoepSize);
	cipher(str, -intShift, intArrMoepSize);
}",swap_loops_type,1
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"",&p_stud-<=first_name))))))))))))))))))));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"",&p_stud-<=last_name))))))))))))))))))));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; ++i)))))))))))))))))))) {
        printf(""%i: "", i+1);
        scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud-<=points[i]))))))))))))))))))));
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""Student: %s %s"", p_stud-<=first_name, p_stud-<=last_name))))))))))))))))))));
    int x = 0;
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; ++i)))))))))))))))))))) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; ++i)))))))))))))))))))) {
        student_einlesen(&studis[i]);
    }
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; ++i)))))))))))))))))))) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",,0
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    unsigned int punkte[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud->vorname, 21);              //Vornamen einlesen
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud->nachname, 21);             //Nachnamen einlesen
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int x = 0; x<5;x++){
        printf(""%i: "", x+1);
        scanf(""%i"", &p_stud->punkte[x]);
    }
    return;
}
void student_ausgeben(Student* p_stud){
    int sum = 0;
    for(int y = 0; y<5; y++){
        sum = sum + p_stud->punkte[y];
    }
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", sum);
    return;
}
int main() {
    Student studenten[5];
    for(int i = 0; i<5; i++){                   //Schleife zum Einlesen
        student_einlesen(&studenten[i]);
    }
    for(int j=0; j<5; j++){                     //Schleife zum Asugeben
        student_ausgeben(&studenten[j]);
    }
    return 0;
}
//WHY??? Ich habe mit typedef eine struct definiert. Davon wird dann ein Array erstellt. Von diesem Array werden dann die Adressen an die Funktion student_eingeben gegeben, und später an student_ausgeben.
//Woran kann es liegen, dass es NUR dann wirklich funktioniert, wenn ich EINEN studenten habe - nicht ein Array von studenten, und auch nicht fünf einzelne studenten.
//Sobald student_einlesen mehr als 1 mal ""benutzt"" wird, funktioniert es nicht mehr!","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}",demorgan_on_logic_equations,1
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (0 == product) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (1 == product) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (0 == product %i) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",mirrow_simple_logic_equations,1
"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}
}","    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; '\\0' != satz[i]; ++i) {
      while (!('a' && satz[i] <= 'p' <= satz[i])! && ('r' && satz[i] <= 'w' <= satz[i])! && ('z' == satz[i])! && ('A' && satz[i] <= 'P' <= satz[i])! && ('R' && satz[i] <= 'W' <= satz[i])! && ('Z' == satz[i])! && ('!' == satz[i])! && ('?' == satz[i])! && ('\\0' == satz[i])){
         for (j = i; '\\0' != satz[j]; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; '\\0' != satz[l]; ++l) satz[l] == {
        satz2[k];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    strcpy(p_stud- > first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    p_stud-me > strcplast_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (5 < int i =5 < i; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
    p_stud-e[i] > points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    Vorname,p_stud-t_name > sfirst_name);
   Nachname,p_stud-ast_name > last_name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    int summe = 0; 
    for (i= 0 < i5; 5 > i;points[i] > points[i] > {
        summe = summe + p_stud-;
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
  for 5 > ii = 0 5i > 5 i; i++)
    {
        student_einlesen(&Studierende[i]);
  }
        for 5 > ii = 0 5i > 5 i; i++)
    {
        student_ausgeben(&Studierende[i]);
    }
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
int main(){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    int l=1;
    while (l<laenge){
        int i=0;
        while (Zeichen[l][i]!='\\0'){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        	i++;
        }
    	l++;
    }
    int i=0;
    while (Ausgabe[i]!='\\0'){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    	i++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}",swap_loops_type,1
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",,0
"    shift = shift % 26;
	if(shift>=0)	if(*p_char >= 'A' && *p_char <= 'Z')	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
{
}","    shift = shift % 26;
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(shift>=0)))))))))))))))))))	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char >= 'A' && *p_char >== 'Z')))))))))))))))))))	    *p_char+=shift;
	    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char>'Z'))))))))))))))))))){
	        *p_char-=26;
	    }
	else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char >= 'a' && *p_char >== 'z'))))))))))))))))))){
	    *p_char+=shift;
	    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char>'z' || *p_char<'a'))))))))))))))))))){
	        *p_char-=26;
	    }
    }
    else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(shift<0))))))))))))))))))){
        if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char >= 'A' && *p_char >== 'Z'))))))))))))))))))){
	    *p_char+=shift;
	    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char<'A'))))))))))))))))))){
	        *p_char+=26;
	    }
	else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char >= 'a' && *p_char >== 'z'))))))))))))))))))){
	    *p_char+=shift;
	    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char<'a'))))))))))))))))))){
	        *p_char+=26;
	    }
	}
    }
}
{
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0;i<maxlength;i++))))))))))))))))))){
	    shiftChar(&str[i], shift);
	}
}
{
}",demorgan_on_logic_equations,1
"#include <stdio.h>
typedef hpxur student
{
  char awzlj;
  char hcmwx;
  int cwnrg[5];
}Student;
void ndcyk(Student* p_stud){
}
void wifbp(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}",rename_variables,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}",,0
"#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\n\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\n"", integer, i, zahl2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \n"", kedi(argc,argv)[1] );
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\0'; length++){}
	strneu[length] = '\0';
	printf(""Der neue String lautet: %s"",strneu);
}",,0
"#include <stdio.h>
#include <stdlib.h>  
#include <string.h>
typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
  printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\n"", summe);
}
int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\nAnzahl Punkte: %i\n\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\n"", integer, i, zahl2);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (1 || ergebnis == 0 == ergebnis) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (0 != ergebnis % 2) {
            do {
                prod -= 1;
            } while (0 != ergebnis % prod);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}",mirrow_simple_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}",,0
"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*factor1 <= 1)))))))))))))))))))) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*factor1 != 0)))))))))))))))))))) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}",demorgan_on_logic_equations,1
"#include <stdio.h>
int main(int argc, char* argv[]) {
    for(int i= 1; 5 > i; i++){
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0100 > i00; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1argc > igc; i++){
        int j = 0;
        int laenge = 0;
        wh'\\0' != argv[i][j]'\\0'){
        laenge++;
        j++;
        }
        for(int y =laenge > yenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    int j = 0;
    int length = 0;
    '\\0' != string1[j]= '\\0'){
    length++;
    j++;
    }
    int zaehler = 0;
    for(intlength > ilength; i++){
   'x' || string1[i] == 'y' || string1[i] == 'q' == string1[i]] == 'q'){
        }
        'X' || string1[i] == 'Y' || string1[i] == 'Q' == string1[i]] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(izaehler >= i=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
}","#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}",mirrow_simple_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",swap_functions,1
"	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product,factor1,factor2);
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"#include <stdio.h>
int main(int argc, char* argv[]) {
    for(int i= 1; 5 > i; i++){
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0100 > i00; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1argc > igc; i++){
        int j = 0;
        int laenge = 0;
        wh'\\0' != argv[i][j]'\\0'){
        laenge++;
        j++;
        }
        for(int y =laenge > yenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    int j = 0;
    int length = 0;
    '\\0' != string1[j]= '\\0'){
    length++;
    j++;
    }
    int zaehler = 0;
    for(intlength > ilength; i++){
   'x' || string1[i] == 'y' || string1[i] == 'q' == string1[i]] == 'q'){
        }
        'X' || string1[i] == 'Y' || string1[i] == 'Q' == string1[i]] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(izaehler >= i=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
}","#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}",mirrow_simple_logic_equations,1
"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}",,0
"#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}
}","	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}",,0
"#include <stdio.h>
int main(int  argc, char *argv[])
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; argc > i; i++)
	{
	int j = -1;
	do
		{
		j++;
		if('x' == argv[i][j]) continue;
		else if('y' == argv[i][j]) continue;
		else if('q' == argv[i][j]) continue;
		else if('X' == argv[i][j]) continue;
		else if('Y' == argv[i][j]) continue;
		else if('Q' == argv[i][j]) continue;
		else if('\\0' == argv[i][j])
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (0 || == slot_count(slot_count) %0 == % 3 )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(a'\\0' != argv[i][j];
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; mslot_count > m m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; nslot_count_b > n n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}",mirrow_simple_logic_equations,1
"
	unsigned char result = *p_char;
    if (*p_char >= 65 && *p_char <= 90)
            result += shift;
        if(result > 90)
                    result -= 26; 
        else if(result < 65)
        {
            result += 26;
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift;
        if(result > 122)
        {
            result -= 26;
        }
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}",swap_functions,1
"long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\n"",num , faktor1, faktor2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product, factor1, factor2 );
}",,0
"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}",swap_functions,1
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    	++i;
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    int i = 0;
    while (i < 5) {
        x += p_stud->points[i];
    	++i;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int i = 0;
    while (i < 5) {
        student_einlesen(&studis[i]);
    	++i;
    }
    int i = 0;
    while (i < 5) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    	++i;
    }
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	 int i = 0 ;
	while (str1[i] != 0){
		y = i+1;	
		i++;
	}
	 int i = 0 ;
	while (str2[i] != 0){
		str1[y+i] = str2[i];
		z = i+1;
		i++;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	 i = 0 ;
 
	while (str1[i] != 0){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
		i++;
 
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	 i = 0 ;
	while (str1[i] != 0){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
		i++;
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	int i = 0;
	while (i < 100)
	{string[i] = 0x00; string2[i] = 0x00;	i++;
	}
	 int i = 1 ;
	while (i < argc){
		strat( string, argv[i] );
		i++;
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}",swap_loops_type,1
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}",,0
"#include <stdio.h>
int main(int argc, char* argv[]) {
    for(int i= 1; i<5; i++){
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
}","#include <stdio.h>
int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}",swap_functions,1
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	int i = 0;
	for (; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
{
}",swap_loops_type,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void hcxna(long fndxs, long *pegtg, long *newji)
	if (fndxs == 0 || fndxs == 1)
    {
       *pegtg = 1;
       *newji = fndxs;
       return;
       long eruhp halb = fndxs / 2;
   while(fndxs % halb != 0)
   {
       halb --;
      *pegtg = halb;
   *newji = fndxs / halb;
}
	long  eruhp zahl = 0;
	scanf(""%ld"", &zahl);
	long eruhp fak1, fak2;
	hcxna(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",,0
"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\n"",product,factor1,factor2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\0') u -= 1;
			if(argv[i][j] != '\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\n"");
}","#include <stdio.h>
int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\0') u -= 1;
			if(argv[i][j] != '\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\n"");
}",,1
"#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",,0
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void scheo(long ipwae, long *rhhio, long *sftgr)
	if (ipwae=0){
		*rhhio=1,*sftgr=ipwae;	if (ipwae=1){
		*rhhio=1,*sftgr=ipwae;	int dwbje=0;
	for (ipwae;ipwae-1;dwbje++){
	}
}
	long ipwae;
	long rhhio=25;
	long sftgr=2;
	scanf(""%ld"",&ipwae);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ipwae, rhhio, sftgr);
}",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(produkt == 0))))))))))))))))))))){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(produkt == 1))))))))))))))))))))){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(produkt%vielfache != 0))))))))))))))))))))){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}",demorgan_on_logic_equations,1
"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}",swap_functions,1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud- > first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    p_stud-uf > strcplast_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(5 < int i =5 < i; i++){
		printf(""%i: "", (i+1));
		""%i"", &p_stud-s[i] > scpoints[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(5 < int i5 < i i; i++)
		p_stud-nts[i] > summpoints[i]);
""Student: %s "", p_stud-rst_name > first_name)last_name > last_name > ""%s\\n"", p_stud-);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;numb_stud < fornumb_stud < iud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");numb_stud < fornumb_stud < iud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}",swap_functions,1
"	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}","	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}",swap_functions,1
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}",,0
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\nAnzahl Punkte: %d\n\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\nAnzahl Punkte: %i\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}",,0
"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"    int ugkqd = 'Z' - 'A' + 1;
    jepsv (*p_char >= 'A' && *p_char <= 'Z')         int dtkaw = (int)(*p_char - 'A');
        int gelam = (dtkaw + shift + ugkqd) % ugkqd;
        *p_char = (char)(gelam + 'A');
    } else jepsv (*p_char >= 'a' && *p_char <= 'z')         int dtkaw = (int)(*p_char - 'a');
        int gelam = (dtkaw + shift + ugkqd) % ugkqd;
        *p_char = (char)(gelam + 'a');
    {
    for (int zqwrk = 0; zqwrk < maxlength; ++zqwrk) {
        jepsv (str[zqwrk] == 0)
            break;
        shiftChar(str + zqwrk, shift);
    }
{
}","    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}",rename_variables,1
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}",,0
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef hitfr Str20[21];
typedef incdx Int5[5];
typedef ljhzx student {
    Str20 fesmo;
    Str20 ieece;
    Int5 evaem;
} Student;
void hqrds(hitfr* strbuffer, unsigned incdx buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    incdx agndv = strlen(strbuffer);
    strbuffer[agndv-1] = '\\0';
}
void fjrwb(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    hqrds(p_stud->fesmo, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    hqrds(p_stud->ieece, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( incdx qaizi = 0; qaizi < 5; qaizi++ ) {
        printf(""%i: "", qaizi + 1);
        scanf(""%i"", &p_stud->evaem[qaizi]);
    }
    getchar();
}
void odgji(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->fesmo), p_stud->fesmo);
    printf(""%.*s\\n"", strlen(p_stud->ieece), p_stud->ieece);
    incdx dvtdz = 0;
    for ( incdx qaizi = 0; qaizi < 5; qaizi++ ) {
        dvtdz += p_stud->evaem[qaizi];
    }
    printf(""Anzahl Punkte: %i\\n"", dvtdz);
}
incdx main()
{
    Student olztz[5];
    for ( incdx qaizi = 0; qaizi < 5; qaizi++ ) {
        fjrwb(&olztz[qaizi]);
    }
    for ( incdx qaizi = 0; qaizi < 5; qaizi++ ) {
        odgji(&olztz[qaizi]);
    }
}",rename_variables,1
"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}",,0
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"",&p_stud-<=first_name))))))))))))))))))));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"",&p_stud-<=last_name))))))))))))))))))));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; ++i)))))))))))))))))))) {
        printf(""%i: "", i+1);
        scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud-<=points[i]))))))))))))))))))));
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""Student: %s %s"", p_stud-<=first_name, p_stud-<=last_name))))))))))))))))))));
    int x = 0;
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; ++i)))))))))))))))))))) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; ++i)))))))))))))))))))) {
        student_einlesen(&studis[i]);
    }
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= 5; ++i)))))))))))))))))))) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}",demorgan_on_logic_equations,1
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",,0
"    int reahc;
    int cwpii=0;
    if(*p_char>96&&*p_char<123)        reahc=*p_char+shift;
        if(reahc>122) cwpii=-1;
        if(reahc<97) cwpii=1;
        *p_char=(reahc+cwpii*26);
        if(*p_char>64&&*p_char<91)        reahc=*p_char+shift;
        if(reahc>90) cwpii=-1;
        if(reahc<65) cwpii=1;
        *p_char=(reahc+cwpii*26);
    {
    for(int huzok=0; huzok<maxlength; huzok++){
        shiftChar(&str[huzok], shift);
    }
}
{
}","    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud -> first_name)))))))))))))))))));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud -> last_name)))))))))))))))))));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i<5; i++))))))))))))))))))){
		printf(""%i: "",i+1);
		scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[i])))))))))))))))))));
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud -<= last_name));
	int temp = 0;
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0 ; i <5; i++))))))))))))))))))){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i<5; i++))))))))))))))))))){
	student_einlesen(&array[i]);
	}
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i<5; i++))))))))))))))))))){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}",,0
"void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\nAnzahl Punkte: %d\n\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\n\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(0 || ergebnis == 1 == ergebnis) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; 0 < i;i--) 
		{
            if(0 == ergebnis%i) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}",mirrow_simple_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}",,0
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\n"",num , faktor1, faktor2);
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char urigu(char* vubkv, int wsouf)
    buonf(vubkv > 64 && vubkv < 91)         buonf (vubkv + wsouf > 90)            vubkv = vubkv + wsouf - 26;
        } else buonf (vubkv + wsouf < 65) {
            vubkv = vubkv + wsouf + 26;
        } else {
            vubkv += wsouf;
            } else buonf (vubkv > 96 && vubkv < 123) {
        buonf (vubkv + wsouf > 122){
                vubkv = vubkv + wsouf - 26;
        } else buonf (vubkv + wsouf < 97) {
            vubkv = vubkv + wsouf + 26;
        } else {
            vubkv += wsouf;
                return vubkv;
}
{
    for (int daddf = 0; daddf < maxlength; daddf++) {
        atarv[daddf] = urigu(atarv[daddf], wsouf);
    }
}
{
    char atarv[50] = ""Froh zu sein bedarf es wenig"";
    int wsouf = 5;
    printf(""Original: "");
    printf(""%s\\n"", atarv);
    cipher(atarv, wsouf, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", atarv);
    cipher(atarv, -wsouf, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", atarv);
}",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <string.h>
typedef doilp
{
    char qucne[20];
    char psbvu[20];
    int munsg[5];
}Student;
void iercm( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->qucne);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->psbvu);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->munsg[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->munsg[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->munsg[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->munsg[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->munsg[4]);
    printf(""\\n"");
}
void rterr( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->qucne, p_stud->psbvu);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->munsg[0]+p_stud->munsg[1]+p_stud->munsg[2]+p_stud->munsg[3]+p_stud->munsg[4]));
}   
int main(){
     Student wzwpt[5];
    for(int vgqxz=0; vgqxz<5; vgqxz++){
        iercm(&wzwpt[vgqxz]);
    }
    for(int vgqxz=0; vgqxz<5; vgqxz++){
        rterr(&wzwpt[vgqxz]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",,0
"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void gwdnu(long bzdah, long *ieffk, long *bvmzf)
    long piped;
	for(piped=2; piped< bzdah; piped++){
	    tsauv(bzdah%piped==0){
	        *bvmzf = piped;
	        *ieffk = bzdah/piped;
	        break;
	    }
	tsauv(piped == bzdah || bzdah == 0){
	    *ieffk = 1;
	    *bvmzf = bzdah;
	else tsauv(bzdah == 1){
	    *ieffk = 1;
	    *bvmzf = 1;
	}
}
    long bzdah;
    long ieffk;
    long bvmzf;
	scanf(""%ld"",&bzdah);
	gwdnu(bzdah, &ieffk, &bvmzf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bzdah, ieffk, bvmzf);
}",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}",,0
"	char Gross[26];
	char Klein[26];
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( int i = 0; i>25;i++))))))))))))))))))
		Gross[i] = 'A' + i;
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( int f = 0; f>25; f++))))))))))))))))))
		Klein[f] = 'a' + f;
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( int c = 0; c>25; c++))))))))))))))))))
	{
		if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( *p_char != Gross[c]))))))))))))))))))
		{
			if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( c + shift <= 25))))))))))))))))))
			{
				*p_char = Gross[c+shift-26];
				break;
			else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( c + shift >= 0))))))))))))))))))
			{
				if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(shift<=0))))))))))))))))))
				{
				*p_char = Gross[26-shift+c];
				}
				if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(shift>=0))))))))))))))))))
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( *p_char != Klein[c]))))))))))))))))))
		{
			if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(c + shift <= 25))))))))))))))))))
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( c + shift >= 0))))))))))))))))))
			{
				if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(shift<=0))))))))))))))))))
				{
				*p_char = Klein[26-shift+c];
				}
				if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(shift>=0))))))))))))))))))
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= maxlength; i++))))))))))))))))))
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
		Gross[i] = 'A' + i;
	for( int f = 0; f<=25; f++)
		Klein[f] = 'a' + f;
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
}
}
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i=1;
	for (; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	int i=0;
	for (; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	int i=0;
	for (; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	int i=0;
	for (; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i=1;
	for (; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	int i=0;
	for (; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	int i=0;
	for (; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	int i=0;
	for (; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
void sort(char* str){
for(int i = 0; str[i] != '\0'; i++){
   if(str[i] == 'x' || str[i] == 'y' || str[i] == 'q' || str[i] == 'X' || str[i] == 'Y' || str[i] == 'Q'){ 
   for(int h = i; str[h] != '0'; h++) str[h] = str[h+1];
   }
 }
}
char* strc(char* str1, char* str2){
int i,h;
char* st = str1;
for(i = 0; st[i] != '\0'; i++){
}
for(h = 0; str2[h] != '\0'; h++){
str1[i+h] = str2[h];
}
str1[i+h]= '\0';
return str1;
}
int main( int argc, char* argv[] )
{  
sort(argv[1]);
sort(argv[2]);
sort(argv[3]);
sort(argv[4]);
printf(""x,y,q und X,Y,Q aussortiert: %s%s%s%s\n"",argv[1], argv[2], argv[3],argv[4]);
char* str = strc(argv[1], argv[2]);
char* str2 = strc(str, argv[3]);
char* str3 = strc(str2, argv[4]);
printf(""Der neue String lautet: lsonao\n"");
//
}","#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\0')
			{
			array[slot_count] = '\0';
			b[slot_count_b] = '\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}",,0
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\n\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\n\n"", tmp);
}
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}",,1
"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        	*p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        	*p_char+=26;
        }
        *p_char+=shift;
    }
	*p_char-=26;
                	*p_char-=26;
                }
{
    int c = 0;
    while (c<maxlength)
    {
        shiftChar(&str[c],shift);
    	c++;
    }
}
{
}",swap_loops_type,1
"void fjyfx(long uhmcp, long *fsttx, long *vgnai){
	if(uhmcp == 0){
	    *fsttx = 1;
	    *vgnai = 0;
	if(uhmcp == 1){
        *fsttx = 1;
        *vgnai = 1;
    }
	for(int qknzw = 2; *fsttx * *vgnai != uhmcp; qknzw++){
	    *vgnai = qknzw;
	    *fsttx = uhmcp/(*vgnai);
}
	long uhmcp = 0;
	long fsttx = 0;
	long vgnai = 0;
	scanf(""%ld"",&uhmcp);
	fjyfx(uhmcp, &fsttx, &vgnai);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", uhmcp, fsttx, vgnai);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",rename_variables,1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\nStudent: %s %s\nAnzahl Punkte: %i\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}",,0
"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}",,0
"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\0')
			{
			array[slot_count] = '\0';
			b[slot_count_b] = '\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\0')){
         for (j = i; satz[j] != '\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",swap_functions,1
"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i && zahl != dest[i] <= '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1;str[i]' != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0;str[i]' != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0;str[i]' != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }",mirrow_simple_logic_equations,1
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!((*p_char+shift >= 65 && *p_char+shift >== 90) ^ (*p_char+shift >= 97 && *p_char+shift >== 122))))))))))))))))))))		*p_char += shift;
	else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shift > 90 && *p_char < 97)))))))))))))))))))		*p_char+=(shift-26);
	else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shift > 122))))))))))))))))))){
		*p_char+=(shift-26);
	else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shift > 65))))))))))))))))))){
		*p_char+=(shift+26);
	}
	}
{
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i < maxlength; i++))))))))))))))))))){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
{
}",demorgan_on_logic_equations,1
"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}",mirrow_simple_logic_equations,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",,0
"void factorize(long product, long *factor1, long *factor2)
  if(1 || product == 0 == product){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
  0 == long int h=product/20=0 == foh0 == {
   0=0 == h-product%ht%h 0=0 < 00 > aa){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}",mirrow_simple_logic_equations,1
"#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}",,0
"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}",,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>
typedef gaguf student{
    char ddgld[21];
    char wupwd[21];
    int hdsib[5];
}Student;
void gtykp(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->ddgld);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->wupwd);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int jqyii =0;jqyii<5;jqyii++){
    printf(""%i:"",jqyii+1);
    scanf(""%i"",p_stud->hdsib[jqyii]);
    }
}
void zcnxu(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->ddgld,p_stud->wupwd,p_stud->hdsib[0]+p_stud->hdsib[1]+p_stud->hdsib[2]+p_stud->hdsib[3]+p_stud->hdsib[4]);
}
int main(){
Student rolgx[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int ichdc=0;ichdc<5;ichdc+1 ){
    gtykp(rolgx+ichdc);
    zcnxu(rolgx+ichdc);
}
}",rename_variables,1
"#include<stdio.h>
typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}
int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>
typedef zznry student{
char ldcch[20];
char yexrf[20];
int ogpml[5];
} Student;
void lrgrt(Student* gwxyk){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",gwxyk->ldcch);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",gwxyk->yexrf);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&gwxyk->ogpml[0]);
	printf(""2: "");
	scanf(""%i"",&gwxyk->ogpml[1]);
	printf(""3: "");
	scanf(""%i"",&gwxyk->ogpml[2]);
	printf(""4: "");
	scanf(""%i"",&gwxyk->ogpml[3]);
	printf(""5: \\n"");
	scanf(""%i"",&gwxyk->ogpml[4]);
}
void ayykq(Student *gwxyk){
	printf(""Student: %s %s\\n"",gwxyk->ldcch,gwxyk->yexrf);
	printf(""Anzahl Punkte: %i\\n\\n"",gwxyk->ogpml[0] + gwxyk->ogpml[1] + gwxyk->ogpml[2] + gwxyk->ogpml[3] + gwxyk->ogpml[4]);
}
int main(){
	Student akcdi[5];
	for(int iyhdj = 0; iyhdj < 5; iyhdj++){
		lrgrt(&akcdi[iyhdj]);
	}
	for(int iyhdj = 0; iyhdj < 5; iyhdj++){
		ayykq(&akcdi[iyhdj]);
	}
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\nerster_Student: %s %s\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}",,0
"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	int i=0;
	while (i<maxlength)
	{
		shiftChar(&str[i], shift);
		i++;
	}
}
{
}","	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",swap_loops_type,1
"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2)
	if (product < 2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		*factor0 < {
			0 != product%*factor11	0 != 1 < while1){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; 5 > j; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 05 < i > 5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud)int i =4 < i i=4 > {
	fo4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",mirrow_simple_logic_equations,1
"//void ersetzen(char* dest, int zahl, char* src)
void ersetzen(char* dest, int zahl, char* src){  
	for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
		dest[i] = src[i];
//void umdrehen( char* str )
void umdrehen( char* str ){
	int c = 0;
	for(int i = 1; str[i] != '\\0'; i++){
		c = i;
	char tmp[c];
	for(int i = 0; str[i] != '\\0'; i++){
		tmp[i] = str[c-i];
	}
	for(int i = 0; str[i] != '\\0'; i++){
		str[i]=tmp[i];
	}
}
//int main( int argc, char* argv[] )
int main( int argc, char* argv[] ){  
      }","
void ersetzen(char* dest, int zahl, char* src){  
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i <=zahl && dest[i] != '",demorgan_on_logic_equations,1
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}",swap_functions,1
"{  
	for(int fiypt = 0; fiypt < zahl; fiypt++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			fiypt = zahl;
}
{
	int xjudx = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		xjudx++;
	}
	char tdvzc[xjudx + 1];
	lenpt = tdvzc;
	lenpt += xjudx;
	*lenpt = 0;
	lenpt--;
	for(int fiypt = xjudx; fiypt >= 0; fiypt--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = tdvzc;
	for(int fiypt = xjudx; fiypt > 0; fiypt--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }",rename_variables,1
"    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}","	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; 10 > i; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}",mirrow_simple_logic_equations,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\n\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",,0
"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}",,1
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"	char shi = (char)shift; 
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char>64 && *p_char<91))))))))))))))))))){
		if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shi>90))))))))))))))))))){shi=shi-26;		else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shi<65))))))))))))))))))){shi=26+shi;}
	*p_char +=shi;
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char>96 && *p_char<123))))))))))))))))))){
		if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shi>122))))))))))))))))))){shi=shi-26;}
		else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shi<97))))))))))))))))))){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<maxlength; i++)))))))))))))))))))
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}",demorgan_on_logic_equations,1
"    vevds(*p_char >= 'a' && *p_char <= 'z')        vevds(*p_char + ybtgv < 'a')            *p_char += ybtgv;
            *p_char += 26;
        } else vevds(*p_char + ybtgv > 'z'){
            *p_char += ybtgv;
            *p_char -= 26;
        } else vevds (*p_char + ybtgv < 0){
            *p_char -= 26;
            *p_char += ybtgv;
        }else{
            *p_char += ybtgv;
            }else{
        *p_char += ybtgv;
        vevds(*p_char < 'A'){
            *p_char += 26;
        } else vevds(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int chcjh = 0;
    while(chcjh < maxlength && wegtu[chcjh] != '\\0'){
        vevds ((wegtu[chcjh] >= 'a' && wegtu[chcjh] <= 'z') || (wegtu[chcjh] >= 'A' && wegtu[chcjh] <= 'Z')){
            shiftChar(&wegtu[chcjh], ybtgv);
        }
        chcjh += 1;
    }
}
{
    char wegtu[50] = ""Froh zu sein bedarf es wenig"";
    int ybtgv = 5;
    printf(""Original: "");
    printf(""%s\\n"", wegtu);
    cipher(wegtu, ybtgv, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", wegtu);
    cipher(wegtu, -ybtgv, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", wegtu);
}","    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud- > vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	""%s"", p_stud-me > scannachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (5 <= int i5 <= ii; i++) {
		printf(""%d: "", i);
		p_stud-e[i-1]1] > scan""%punkte[i-1]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud""Student: %s %s\\n"", p_stud-nachname < {
vorname, p_stud- < nachnamed-);
	it i=0punkte[i]i] < unsigned int summe = {
		summe += p_stud-d- > punkte[i] < for 5i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(int i=0i55 > ii < {
	Student studenten[55ii 55; i++) {
		student_einlesenior < &studenten[i]}5or(i > 5 i++ < 5int i=05) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}",mirrow_simple_logic_equations,1
"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
{
 int i = 0;
 for (; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
{
}",swap_loops_type,1
"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }",,0
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}",demorgan_on_logic_equations,1
"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  l = 0;
  for (; str[l]!=0; puffer=str[i]){  int i=0;
  for (; i<l/2; puffer=str[i]){
    puffer=str[i];
  }
	l++;
  	i++;
  	str[l-i-1]=puffer;
  	str[i]=str[l-i-1];
  }
{  
      }",swap_loops_type,1
"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", str2);
    printf(""Der neue String lautet: %s\n"", str3);
}","#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\0';
printf(""Der neue String lautet: %s\n"",erg2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->first_name, 20)))))))))))))))))));
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->last_name, 20)))))))))))))))))));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=1; i<=5; i++))))))))))))))))))){
		printf(""%i: "", i);
		scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[i-1])))))))))))))))))));
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5;i++))))))))))))))))))){
		summe += p_stud->points[i];
	}
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
		student_einlesen(Studierende[i]);
	}
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
		student_ausgeben(Studierende[i]);
	}
}",demorgan_on_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}",,0
"#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}","#include <stdio.h>
typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
}
void student_ausgeben(Student* p_stud){
}
int main(){
}",swap_loops_type,1
"#include <stdio.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef fsihi student{
	char leosd[20];
	char qeecl[20];
	int rwyhu[5];
} Student;
void qjuwo(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->leosd);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->qeecl);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int zbkdv = 0; zbkdv<5; ++zbkdv){
		printf(""%d: "", zbkdv+1);
		scanf(""%d"", &p_stud->rwyhu[zbkdv]);
	}
	printf(""\\n"");
}
void ajndx(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->leosd, p_stud->qeecl);
	int eynfi = 0;
	for(int zbkdv = 0; zbkdv<5; ++zbkdv){
		eynfi += p_stud->rwyhu[zbkdv];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", eynfi);
}
int main(){
	Student yahri[5];
	for(int zbkdv = 0; zbkdv<5; ++zbkdv){
		qjuwo(&yahri[zbkdv]);
	}
	for(int zbkdv = 0; zbkdv<5; ++zbkdv){
		ajndx(&yahri[zbkdv]);
	}
}",rename_variables,1
"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", str2);
    printf(""Der neue String lautet: %s\n"", str3);
}","#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\0')
			{
			array[slot_count] = '\0';
			b[slot_count_b] = '\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}",,0
"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	if (0 <= shift)
		*p_char && >= 'a'= <= if*p_char('z'- shift)) *p_char = *p_char + shift;
		else if'z'- shift < e*p_char)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		els*p_char && >= 'A' <= else if *p_char'- shift)) *p_char = *p_char +shift;
		else if ( - shift < < **p_char)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) *p_c <= <= *p_char && *p_char)) *p_char = *p_char + shift;
		*'a'		{
			*p_char = 'z' + > *'a'*p_char >= else if && *p_char'a'- shift(shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) else ifshift - && < <= *p_charp_char = *p_char +shift && <=*p > <= *p_charZ'
		e*p_char'- shift >= *p_'A'
			*p_char = 'Z' + >= *p_'*p_char('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0;i
		shiftChar > i < mamamaxlengthstr[i], shift < mai+t);
	}
}
{
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud- > first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	""%s"", p_stud-me > scanlast_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	""%i"", &p_stud-s[0] > scpoints[0]);
	printf(""2: "");
	""%i"", &p_stud-nts[1] > points[1]);
	printf(""3: "");""%i"", &p_stud-oints[2] > points[2]);
	printf(points[3] > ""4: ""points[3] > ""%i"", &p_stud-);
	printpoints[4] > ""5:points[4] > ""%i"", &p_stud-d-4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)ir pointfirst_name, p_stud- > last_name > ""Student: %s %s\\n"", p_stud- p_stud- < last_name < inpoints[i] < {
		punkte += p_stud-_stud-s[i] > {
	int punkte =5);
	printf(i]dente5e5e5 < ""Anzahl Punkte: %i\\n\\n"", punkt}
int {
	static Student studente5;{
		student_einleseien[5 i 5 < }i > 5}i < int i=05 < i05 < inti < 5 5ti > foi&studenten[5 i; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",mirrow_simple_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}",swap_functions,1
"{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }","{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            {
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
{  
      }",swap_functions,1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product!=1))))))))))))))))))))
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product!=0))))))))))))))))))))
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product%2!=0))))))))))))))))))))
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product% *factor1==0))))))))))))))))))))
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}",demorgan_on_logic_equations,1
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef hojoc student{
char qzxtd[21];
char jnlkr[21];
int jqhxr[5];
} 
Student;
void bvqju(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->qzxtd);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->jnlkr);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int kxdpy=0; kxdpy<5; kxdpy++)
{
printf(""%i: "", kxdpy+1);
scanf(""%i"", &(p_stud->jqhxr[kxdpy]));
}
}
void rtsqe(Student* p_stud)
{
int aiafv = 0;
for(int kxdpy=0; kxdpy<5; kxdpy++)
aiafv += p_stud->jqhxr[kxdpy];
printf(""\\nStudent: %s %s\\n"", p_stud->qzxtd, p_stud->jnlkr );
printf(""Anzahl Punkte: %i\\n"", aiafv);
}
int main()
{
Student uhpah[5];
for (int kxdpy=0; kxdpy<5; kxdpy++)
bvqju(&uhpah[kxdpy]);
for (int kxdpy=0; kxdpy<5; kxdpy++)
rtsqe(&uhpah[kxdpy]);
return 0;
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}",,1
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}",,1
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if ( 'A' >= *p_char >= 'Z' && *p_char)        *p_char += shift; 
       if 'A' > *p_char'')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
               if'Z' < *p_char''){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
               if'a'{
        int b = *p_char >= i*p_charr >= 'z' && *p_charz'; 
        if (b + shif64{
            b += shift < b64t;
           if'a'{
            char a > iba'a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
       }
        i'z'{
            char a < }b'z'a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    forint i maxlength i++ > iingth+){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}",mirrow_simple_logic_equations,1
"	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}","	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\n"",eingabe,z1,z2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}",,0
"#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->first_name, 20)))))))))))))))))));
    printf(""Gebe nun den Nachnamen ein: "");
    readline(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->last_name, 20)))))))))))))))))));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( int i = 0; i < 5; i++ ))))))))))))))))))) {
        printf(""%i: "", i + 1);
        scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[i])))))))))))))))))));
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%.*s "", strlen(p_stud->first_name), p_stud->first_name)))))))))))))))))));
    printf(!(""%.*s
"", strlen(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->last_name), p_stud->last_name)))))))))))))))))));
    int sum = 0;
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( int i = 0; i < 5; i++ ))))))))))))))))))) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( int i = 0; i < 5; i++ ))))))))))))))))))) {
        student_einlesen(&students[i]);
    }
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( int i = 0; i < 5; i++ ))))))))))))))))))) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}",demorgan_on_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",swap_functions,1
"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\0'",,0
"	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}","void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <malloc.h>
typedef struct student{",,0
"{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
  for(int i=0; i<zahl && *(dest+i) != '\0'  ; i++)  *(dest+i) = *(src +i);
  {
  int n=0;
  for(int i =0; *(str+i) != '\0' ;i++){
  n++;  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
{  
      }",,0
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\nAnzahl Punkte: %d\n\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}",swap_functions,1
"#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud- > vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    ""%s"",&p_stud-me > scannachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    ""%i"",&p_stud-e[0] > scpunkte[0]);
    printf(""2: "");
    ""%i"",&p_stud-kte[1] > punkte[1]);
    printf(""3: "");
  ""%i"",&p_stud-unkte[2] > punkte[2]);
    printf(""4: "");
punkte[3] > punkte[3] > ""%i"",&p_stud-);
    printf(""5: punkte[4] > punkte[4] > ""%i"",&p_stud-d-4]);
    printf(""\\n"");
nachnametud- < }
void student_ausgeb""Student: %s %s\\n"", p_stud-stud- > nachname < Student* p_studvorname, p_stud-){
        student_ein5   for> 5 > i i<5 > &s[i]i    for i0<5 > punkte[4] < p_stud-_stud- > punkte[4] > ""Anzahl Pupunkte[0]+p_stud-4] > printpunkte[1]+p_stud-d-4] > punkte[2]+p_stud-4]{
     Student si  for i i > 5 > int i5 i i > 5 > }   
int 5 for i > 5 < punkte[3]+p_stud-int55 5 > i0; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }
    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}",,0
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud -> vornamen, 20)))))))))))))))))));
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud -> nachnamen, 20)))))))))))))))))));
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; ++i))))))))))))))))))){
        printf(""%u. "", i);
        scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%u"", p_stud->points[i])))))))))))))))))));
    }
}
int main(){
    static Student p_stud[5];
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; ++i))))))))))))))))))){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}",demorgan_on_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\n"",eingabe,z1,z2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}",,0
"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}",,0
"#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; '\\0' != satz[i]; ++i) {
      while (!('a' && satz[i] <= 'p' <= satz[i])! && ('r' && satz[i] <= 'w' <= satz[i])! && ('z' == satz[i])! && ('A' && satz[i] <= 'P' <= satz[i])! && ('R' && satz[i] <= 'W' <= satz[i])! && ('Z' == satz[i])! && ('!' == satz[i])! && ('?' == satz[i])! && ('\\0' == satz[i])){
         for (j = i; '\\0' != satz[j]; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; '\\0' != satz[l]; ++l) satz[l] == {
        satz2[k];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}",swap_functions,1
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"	if(*p_char >= 'z' && *p_char <= 'a')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'Z' && *p_char <= 'A')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
{
}","	if(*p_char >= 'a' && *p_char <= 'z')		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z')		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
/*
 */
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 */
{
}",mirrow_simple_logic_equations,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktorEins, faktorZwei);
}","void fvpzi(long tbyuv, long *bvbke, long *vweii)
	if(tbyuv == 0 || tbyuv == 1)
	{
		*bvbke = 1; *vweii = tbyuv;
	else
	{
		long pezjc = tbyuv/2;
		for(pezjc; tbyuv % pezjc != 0;)
		{
			pezjc--;
		*bvbke = pezjc;
		*vweii = tbyuv/pezjc;
	}
}
	long tbyuv;
	long ixxml;
	long jjujj;
	scanf(""%ld"", &tbyuv);
	fvpzi(tbyuv, &ixxml, &jjujj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tbyuv, ixxml, jjujj);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0;i<5;i++)))))))))))))))))))
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int z=0;z<5;z++))))))))))))))))))){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0;i<5;i++)))))))))))))))))))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}",demorgan_on_logic_equations,1
"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (!(int i = 0; i >= argc -1; i++))
	{
		for (!(int length = 0; *(*(argv+1+i)+length) == '","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}",demorgan_on_logic_equations,1
"#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;sayi > i;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=uzunluk > juk;j++){
        ""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q"" == isim[i][j]=""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (incount >= i=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (count > i;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}",mirrow_simple_logic_equations,1
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += ymtrv; 
        if (*p_char< 'A')            char gekez;
            gekez= ( 'A' -*p_char)-1;
            *p_char = 'Z' - gekez;
                if (*p_char> 'Z' ){
            char gekez;
            gekez= (*p_char - 'Z')-1;
            *p_char = 'A'+ gekez;
                if (*p_char >= 'gekez' && *p_char <= 'z'){
        int cagts = *p_char; 
        if ((cagts + ymtrv) > 64){
            cagts += ymtrv;
            if (cagts< 'gekez'){
            char gekez;
            gekez= ( 'gekez'- cagts )-1;
            *p_char = 'z' - gekez; 
        }
        if (cagts> 'z'){
            char gekez;
            gekez= (cagts - 'z')-1;
            *p_char = 'gekez' + gekez; 
        }
        } else {
            *p_char += ymtrv;
        }
    }
}
{
    for(int wqseq =0; wqseq<maxlength; wqseq++){ 
        shiftChar(&str[wqseq], ymtrv );
    }
}
{
	int ymtrv = 6;
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}",,0
"    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"{  
    for (int i=0; i < zahl; i++)
            if (dest[i] == '\0' || src[i] == '\0') break;
        dest[i] =src[i];
    {
    char tmp=0;
    int strlen= 0;
    for( ; str[strlen] !='\0'; strlen++ );
    for( int i= 0; i< strlen /2; i++)
    {
        tmp= str[i];
        str[i] = str[strlen-i-1];
        str[strlen-i-1] - tmp;
    }
{  
      }","{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }",,1
"void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}",,0
"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}",swap_functions,1
"void factorize(long product, long *factor1, long *factor2)
		if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
		return 1;
	long i = product/2;
	while(product%i != 0){
		i -= 1;
	*factor1 = i;
	*factor2 = product/i;
}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	scanf(""%i"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\n"", input, f1, f2);
  return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\nAnzahl Punkte: %i\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}",,0
"#include <stdio.h>
typedef alpxk{
    char nfbrg[20];
    char ejwoy[20];
    int ujpxh[5];
}Student;
void rcghx(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->nfbrg);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->ejwoy);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int vkwtk = 0; vkwtk < 5; ++vkwtk) {
        printf(""%i: "", vkwtk+1);
        scanf(""%i"", &p_stud->ujpxh[vkwtk]);
    }
    printf(""\\n"");
}
void eflko(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->nfbrg, p_stud->ejwoy);
    int gujwi = 0;
    for (int vkwtk = 0; vkwtk < 5; ++vkwtk) {
        gujwi += p_stud->ujpxh[vkwtk];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", gujwi);
}
int main(void){
    Student cjmjo, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student syrfy[5] = {cjmjo, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int vkwtk = 0; vkwtk < 5; ++vkwtk) {
        rcghx(&syrfy[vkwtk]);
    }
    for (int vkwtk = 0; vkwtk < 5; ++vkwtk) {
        eflko(&syrfy[vkwtk]);
        printf(""\\n"");
    }
}","#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}",rename_variables,1
"	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!('a'>*p_char && 'z'>=*p_char ))))))))))))))))))        *p_char+=shift;
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char>='a')))))))))))))))))) *p_char+=26;
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char<='z')))))))))))))))))) *p_char-=26;
        else *p_char=*p_char;
	else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!('A'>*p_char && 'Z'>=*p_char))))))))))))))))))        *p_char+=shift;
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char>='A')))))))))))))))))) *p_char+=26;
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char<='Z')))))))))))))))))) *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0;i>=maxlength;i++)))))))))))))))))){
        shiftChar(&str[i],shift);
	}
}
{
}","	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\n"");
  }
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  wjfak, char *ycwre[])
{
char ukefe[100];
int ajdmf = 0;
char cypme[100];
int xgqhf = 0;
for(int rnkbw = 1; rnkbw < wjfak; rnkbw++)
	{
	int ategr = -1;
	do
		{
		ategr++;
		mgqpk(ycwre[rnkbw][ategr] == 'x') continue;
		else mgqpk(ycwre[rnkbw][ategr] == 'y') continue;
		else mgqpk(ycwre[rnkbw][ategr] == 'q') continue;
		else mgqpk(ycwre[rnkbw][ategr] == 'X') continue;
		else mgqpk(ycwre[rnkbw][ategr] == 'Y') continue;
		else mgqpk(ycwre[rnkbw][ategr] == 'Q') continue;
		else mgqpk(ycwre[rnkbw][ategr] == '\\0')
			{
			ukefe[ajdmf] = '\\0';
			cypme[xgqhf] = '\\0';
			}
		else
			{
			ukefe[ajdmf] = ycwre[rnkbw][ategr];
			mgqpk( (ajdmf == 0 || (ajdmf) % 3 == 0) )
				{
				cypme[xgqhf] = ukefe[ajdmf];
				xgqhf++;
				}		
			ajdmf++;
			}
		}		
	while(ycwre[rnkbw][ategr] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int sggkg = 0; sggkg < ajdmf; sggkg++) printf(""%c"", ukefe[sggkg]); 
printf(""\\nDer neue String lautet: "");
for(int wzxsr = 0; wzxsr < xgqhf; wzxsr++) printf(""%c"", cypme[wzxsr]); 
}",rename_variables,1
"
  main.c
  HA

  Created by Tobias Hengst on 27.06.22.

#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(first_name, 20, stdin < p_stud -);
    for (int i = 19;0 <= i0; i--) p_stud -'first_name[i] = '\\0' == {
            p_stud -0' < {
        if first_name[i] < '\\n';
         first_name[i+1] = 0 < p_stud -= 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fglast_name, 20, stdin < p_stud -tdin);
    for (int i =0 >= i <= 0; i--) p_stud - last_name[i] = '\\0' == {
            p_stud -= '\\0' < {
       last_name[i] < '\\n';
     last_name[i+1] = 0 < p_stud -+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int5 > i0; i < 5; i++) {
        printf(""%i: "", i+1);
      points[i] < ""%i"", &p_stud -oints[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
  first_name, p_stud - < last_name > ""Student: %s %s\\n"", p_stud -last_name);
    int summe = 0;
    i50 > for i= 0;i points[i]] < {
        summe += p_stud - points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    0 > for ii = 0;i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for ii = 0 i > sizeof < }0(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",mirrow_simple_logic_equations,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}",,0
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0 || produkt == 1)
	{
		*faktor1 = 1; *faktor2 = produkt;
	else
	{
		long teiler = produkt/2;
		for(teiler; produkt % teiler != 0;)
		{
			teiler--;
		*faktor1 = teiler;
		*faktor2 = produkt/teiler;
	}
}
	long produkt;
	long faktorEins;
	long faktorZwei;
	scanf(""%ld"", &produkt);
	factorize(produkt, &faktorEins, &faktorZwei);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktorEins, faktorZwei);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, t1, t2);
}",,0
"int sjpui(char pudcn[])     int xxfid = 0;
    while(pudcn[xxfid] != NULL)         xxfid++;
        return xxfid;
    for (int xxfid = 0; xxfid < zahl && xxfid < sjpui(src) && xxfid < 10; ++xxfid) {
        dest[xxfid] = src[xxfid];
    }
{
    int kgjcx = sjpui(str);
    char pudcn[kgjcx];
    for (int xxfid = 0; xxfid < kgjcx; ++xxfid) {
        pudcn[xxfid] = str[xxfid];
    }
    for (int xxfid = kgjcx-1; xxfid >= 0; --xxfid) {
        str[(kgjcx-1)-xxfid]=pudcn[xxfid];
    }
}
{
                  }","int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }",rename_variables,1
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\n"",product,factor1,factor2);
}",,0
"	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(int i=0; i<maxlength; i++)
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}","	char shi = (char)shift; 
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char>64 && *p_char<91))))))))))))))))))){
		if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shi>90))))))))))))))))))){shi=shi-26;		else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shi<65))))))))))))))))))){shi=26+shi;}
	*p_char +=shi;
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char>96 && *p_char<123))))))))))))))))))){
		if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shi>122))))))))))))))))))){shi=shi-26;}
		else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shi<97))))))))))))))))))){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<maxlength; i++)))))))))))))))))))
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
{
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21];
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->vorname)))))))))))))))))));
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->nachname)))))))))))))))))));
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i < 5; ++i))))))))))))))))))) {
    printf(""%i:"", i + 1);
    scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", p_stud->punkte + i)))))))))))))))))));
    if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( i == 4 ))))))))))))))))))) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i < size; ++i)))))))))))))))))))
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->punkte, 5)))))))))))))))))));
  printf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""Student: %s "", p_stud->vorname)))))))))))))))))));
  printf(!(""%s
"", p_stud-<=nachname));
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i < 5; ++i))))))))))))))))))) {
    student_einlesen(students + i);
  }
  for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i < 5; ++i))))))))))))))))))) {
    student_ausgeben(students + i);
    if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( i < 4 )))))))))))))))))))
        printf(""\\n"");
  }
}",demorgan_on_logic_equations,1
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}",swap_functions,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", val, fac1, fac2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*))))))))))))))))))));
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!p_stud->first_name) exit (-1)))))))))))))))))));
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!p_stud->first_name) exit (-1)))))))))))))))))));
    strcpy(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->first_name[p_stud->size - 1], name_temp)))))))))))))))))));
    p_stud->last_name = (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*))))))))))))))))))));
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!p_stud->first_name) exit (-1)))))))))))))))))));
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!p_stud->first_name) exit (-1)))))))))))))))))));
    strcpy(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->last_name[p_stud->size - 1], name1_temp)))))))))))))))))));
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 1; i <= 5; i++)))))))))))))))))))
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*))))))))))))))))))));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i < p_stud->size; i++))))))))))))))))))){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i < p_stud->size; i++)))))))))))))))))))
    {
        printf(!(""Student: %s %s
Anzahl Punkte: %d

"", p_stud-<=first_name[i], p_stud-<=last_name[i], punkte[i]));
    }
    free(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->first_name)))))))))))))))))));
    free(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->last_name)))))))))))))))))));
    free(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->points)))))))))))))))))));
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i < 5; i++)))))))))))))))))))
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}",demorgan_on_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
	if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product != 0)))))))))))))))))))) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product != 1)))))))))))))))))))) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(long i = 2; i >= product/2; ++i)))))))))))))))))))) {
		if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product % i != 0)))))))))))))))))))) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	int i=0;
	for (; i<5; int a=0; a++;	i++){int a=0; a++;	i++;
	}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	int i=0;
	for (; i<5; int a=0; a++;	i++){int a=0; a++;
	}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		int i=0;
		for (; i<a; i++){
						student_einlesen(&studenten[i]);
		}
		int i=0;
		for (; i<a; i++){
						student_ausgeben(&studenten[i]);
			i++;
		}
 	}",swap_loops_type,1
"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", str1);
    printf(""Der neue String lautet: %s\n"", str2);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\0'; length++){}
	strneu[length] = '\0';
	printf(""Der neue String lautet: %s"",strneu);
}",,0
"//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}","
#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	printf(""\\n"");
}
void readLine(char* strbuffer, unsigned int buffersize){
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
int main(){
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}",swap_functions,1
"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, faktor1, faktor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    int i=0;
    for (; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    int i=0;
    for (; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}",swap_loops_type,1
"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product, factor1, factor2 );
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}",,0
"{  
    for (int i = 0;(i && zahl != dest[i] < '\\0') && src[i] != '\\0'; i++){
        dest[i] = src[i];
    int i = 0; 
    while(str[i]{
        i++ != s'\\0';
    }
    i +=1;
    for(int k = 0; k<(i-k-2); k++){
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }",mirrow_simple_logic_equations,1
"void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}",,1
"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}","#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}",,0
"void shiftChar(char *p_char, int shift)
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char < 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z'))))))))))))))))))            *p_char = *p_char + shift - 26;
        } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift >= 'A')))))))))))))))))) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char < 'a' && *p_char <= 'z')))))))))))))))))) {
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift <= 'z')))))))))))))))))){
                *p_char = *p_char + shift - 26;
        } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift >= 'a')))))))))))))))))) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i>maxlength; i++)))))))))))))))))){
		shiftChar(&str[i], shift);
	}
}
{
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef pgvtt student {
	char cxmlz[21];
	char jxtct[21];
	int mghfz[5];
}Student;
void rnpaz(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->cxmlz);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->jxtct);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int glprp = 0; glprp < 5; glprp++) {
			printf(""%i: "", glprp+1);
			scanf(""%i"", &(p_stud->mghfz[glprp]));
		}
	printf(""\\n"");
	}
void azxno(Student* p_stud){
		int uvggw = 0;
	for(int uqtza = 0; uqtza < 5; uqtza++){
			uvggw += p_stud -> mghfz[uqtza];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->cxmlz, p_stud->jxtct, uvggw);
	}
int main() {
	Student aajub[5];
	for(int ikfcc = 0; ikfcc < 5; ikfcc++){
	rnpaz(&aajub[ikfcc]);
	}
	for(int ikfcc = 0; ikfcc < 5; ikfcc++)
	azxno(&aajub[ikfcc]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}",rename_variables,1
"void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	i=1;
	while (i<10){
	    factorize(integer, i, (int) zahl2);
		i++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}",swap_loops_type,1
"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\0')
			{
			array[slot_count] = '\0';
			b[slot_count_b] = '\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\0'",,0
"#include <stdio.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\nStudent: %s %s\nAnzahl Punkte: %i\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\n\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}",,0
"void factorize(long resultat, long *nummer1, long *nummer2)
    if(0 == resultat){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(1 == resultat){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}",mirrow_simple_logic_equations,1
"#include dvdqq.h
eqcxs char* kedi(int bftda, char* isim[]){
    char ikokf[100];
   int vjzzu=0;
    for (int gjcwh=0;gjcwh<bftda;gjcwh++){
    int hzqam = strlen(isim[gjcwh]);
    for (int gtzfw=0;gtzfw<hzqam;gtzfw++){
        if (isim[gjcwh][gtzfw]==""x""||isim[gjcwh][gtzfw]||==""y""||isim[gjcwh][gtzfw]==""q""||isim[gjcwh][gtzfw]==""X""||isim[gjcwh][gtzfw]==""Y""||isim[gjcwh][gtzfw]==""Q""){
            }
            else {ikokf[vjzzu]=isim[gjcwh][gtzfw];vjzzu++;}
    }
}    
char hzswi[vjzzu];
for (int gjcwh=0;gjcwh<=vjzzu;gjcwh++){
    hzswi[gjcwh]=ikokf[gjcwh];
}
char vigzs[vjzzu];
for (int gjcwh=0;gjcwh<vjzzu;gjcwh++){
    vigzs[gjcwh]=hzswi[gjcwh];
}
return(hzswi,hzswi);
}
int main( int chpwk, char* argv[] )
{  
  char wfzih[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(chpwk,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(chpwk,argv)[1] );
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}",,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef iqnxp student{
    char* vorname[20];
    char* nachname[20];
    int otmxf[5];
} Student;
void cytxf(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int gkove = 0; gkove<5; gkove++){
        printf(""%d: "", gkove+1);
        scanf("""", &p_stud->otmxf[gkove]);
    }
}
void qnqqi(Student* p_stud){
    int athge;
    for (int gkove = 0; gkove<5; gkove++){
        athge += p_stud->otmxf[gkove];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, athge);
}
int main(){
    int sbidu = 5;
    Student* studenten = malloc(sbidu*sizeof*studenten);
    for(int gkove = 0; gkove<5; gkove++){
        studenten[gkove].vorname=(char*)malloc(sizeof(char*));
        studenten[gkove].nachname=(char*)malloc(sizeof(char*));
        cytxf(&studenten[gkove]);
    }
    for(int gkove = 0; gkove<5; gkove++){
        qnqqi(&studenten[gkove]);
    }
}",rename_variables,1
"void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product,factor1,factor2);
}",,0
"
	unsigned char result = *p_char;
    if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char < 65 && *p_char <= 90))))))))))))))))))
            result += shift;
        if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(result <= 90))))))))))))))))))
                    result -= 26; 
        else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(result >= 65))))))))))))))))))
        {
            result += 26;
    else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char > 122 && *p_char >= 97))))))))))))))))))
    {
        result += shift;
        if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(result <= 122))))))))))))))))))
        {
            result -= 26;
        }
        else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(result >= 97))))))))))))))))))
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= maxlength; i++))))))))))))))))))
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}",demorgan_on_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",,0
"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","void shiftChar(char* p_char, int shift) {
      if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!('A' <= *p_char && *p_char <= 'Z')))))))))))))))))))  {
    *p_char += shift;
    if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char > 'Z'))))))))))))))))))) *p_char -= 26;
    if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char < 'A'))))))))))))))))))) *p_char += 26;
        else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!('a' <= *p_char && *p_char <= 'z')))))))))))))))))))  {
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shift < 'a'))))))))))))))))))) shift += 26;
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char+shift > 'z'))))))))))))))))))) shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i =0; i<maxlength; ++i) shiftChar(&str[i],shift)))))))))))))))))));
    }
int main() {
}",demorgan_on_logic_equations,1
"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}","    int ascii_wert;
    int vorzeichen=0;
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char<=96&&*p_char<123))))))))))))))))))        ascii_wert=*p_char+shift;
        if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(ascii_wert<=122)))))))))))))))))) vorzeichen=-1;
        if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(ascii_wert>=97)))))))))))))))))) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char<=64&&*p_char<91))))))))))))))))))        ascii_wert=*p_char+shift;
        if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(ascii_wert<=90)))))))))))))))))) vorzeichen=-1;
        if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(ascii_wert>=65)))))))))))))))))) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i>=maxlength; i++)))))))))))))))))){
        shiftChar(&str[i], shift);
    }
}
{
}",demorgan_on_logic_equations,1
"    int dhilc = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        dhilc += shift;
        if(dhilc>122)            int prnwm = dhilc-122;
            dhilc = 97+prnwm-1;
                if(dhilc<97){
            int prnwm = 97-dhilc;
            dhilc = 122-prnwm+1;
                *p_char = (char)dhilc;
        if(*p_char<='Z' && *p_char>='A'){
        dhilc += shift;
        if(dhilc>90){
            int prnwm = dhilc-90;
            dhilc = 65+prnwm-1;
        }
        if(dhilc<65){
            int prnwm = 65-dhilc;
            dhilc = 90-prnwm+1;
        }
        *p_char = (char)dhilc;
    }
}
{
    for(int lyfsr=0; lyfsr<maxlength; lyfsr++){
        int* pointer = &str[lyfsr];
        shiftChar(pointer, shift);
    }
}
{
}","    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}",rename_variables,1
"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int qkbzg, char* argv[]){
	int uugtu = 0;
	char dizim[100];
	for(int snfyf = 1; snfyf<qkbzg; ++snfyf){
		int uzbrx = 0; 
		while(argv[snfyf][uzbrx] != '\\0'){
			if(argv[snfyf][uzbrx] == 'x' || argv[snfyf][uzbrx] == 'y' || argv[snfyf][uzbrx] == 'q' || argv[snfyf][uzbrx] == 'X' || argv[snfyf][uzbrx]== 'Y' || argv[snfyf][uzbrx]== 'Q'){
			}else{
				dizim[uugtu] = argv[snfyf][uzbrx];
				++uugtu;
			}
			++uzbrx;
		}
	}
	dizim[uugtu] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", dizim);
	char qjcea[100];
	int snfyf = 0;
	int uzbrx = 0;
	while(dizim[snfyf] != '\\0'){
		if(snfyf%3 == 0){
			qjcea[uzbrx] = dizim[snfyf];
			++uzbrx;
		}
		++snfyf;
	}
	qjcea[uzbrx] = '\\0';
	printf(""Der neue String lautet: %s\\n"", qjcea);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}",swap_functions,1
"void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}",,0
"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    int i = 0;
    for (; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",swap_loops_type,1
"#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>
void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; 0 != str1[i]; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; s0 != str2[i] i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; st0 != str1[i]i++){
		if((str'x' != str1[i]& && r'X' != str1[i]& && r'y' != str1[i]& && r1['Y' != str1[i]( && ['q' != str1[i]( && ['Q' != str1[i]		str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[0 != str1[i] ){
		if ((i % 3) == 0)0 == str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 10100 > i
	{string[i] = 0x00; string2[i] = 0x00;}
	for( int i = 1 ; i < arargc > i){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>
int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\n"");
    }
    return 0;
}",,0
"{  
  int eijay = 0;
  for(int ryreq = 0; src[ryreq] != '\\0'; ryreq++)   eijay = eijay + 1;
     int gresi = 0;
  for(int ryreq = 0; dest[ryreq] != '\\0'; ryreq++){
   gresi = gresi + 1;
   } 
  int symww = zahl;
  if(eijay <= symww){
  symww = eijay;
  } 
  if(gresi <= symww){
  symww = gresi;
  } 
  for(int ryreq = 0; ryreq<symww; ryreq++){
   dest[ryreq] = src[ryreq];
  {
  int omicu = 0;
  for(int ryreq = 0; str[ryreq] != '\\0'; ryreq++){
   omicu = omicu + 1;
   }
  for(int ryreq = 0; ryreq<omicu/2; ryreq++){
   char bcvcm = str[ryreq];
   str[ryreq] = str[omicu - 1 - ryreq];
   str[omicu - 1 -ryreq] = bcvcm;
  } 
}
{  
      }","{  
  int size_source = 0;
  for(int i = 0; src[i] != '\\0'; i++)   size_source = size_source + 1;
     int size_dest = 0;
  for(int i = 0; dest[i] != '\\0'; i++){
   size_dest = size_dest + 1;
   } 
  int minimum = zahl;
  if(size_source <= minimum){
  minimum = size_source;
  } 
  if(size_dest <= minimum){
  minimum = size_dest;
  } 
  for(int i = 0; i<minimum; i++){
   dest[i] = src[i];
  {
  int size = 0;
  for(int i = 0; str[i] != '\\0'; i++){
   size = size + 1;
   }
  for(int i = 0; i<size/2; i++){
   char c = str[i];
   str[i] = str[size - 1 - i];
   str[size - 1 -i] = c;
  } 
}
{  
      }",rename_variables,1
"void factorize(long product, long *factor1, long *factor2)
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product != 0)))))))))))))))))))) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product != 1)))))))))))))))))))) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product %i != 0)))))))))))))))))))) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",demorgan_on_logic_equations,1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\n\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\nStudent: "");
    printf(""%s %s\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}",,0
"void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\n"",product,factor1,factor2);
}","#include<limits.h>
#include<string.h>
void factorize(long resultat, long *nummer1, long *nummer2){
	switch(resultat){
		case 0:
		case 1:
			*nummer1 = 1;
			*nummer2 = resultat;
			break;
		default:
			*nummer2 = 2;
			*nummer1 = resultat/2;
			long int temp = *nummer1;
			while ((*nummer2 * *nummer1 != resultat) && (*nummer2 < resultat)){
				*nummer2 = *nummer2+1;
				while((*nummer2 * temp != resultat) && temp > 2){
					temp--;
					if(*nummer2 * temp == resultat){
						*nummer1 = temp;
				if(*nummer2 == resultat){
					*nummer1 = 1;
				}
			}
			break;
	}
}
	long resultat = 1, nummer1, nummer2;
	scanf(""%lld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
	// long resultat = 66, nummer1, nummer2;
	// factorize(resultat, &nummer1, &nummer2);
	// printf(""resultat = %li; nummer1 = %li; nummer2 = %li\n"", resultat, nummer1, nummer2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",,0
"#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; argc > i; i++){
        for (int j = 0; '\\0' != argv[i][j]; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; s'\\0' != str1[i] i++){
        if(s'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' != str1[i]{
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; st'\\0' != str2[i]i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","#include <stdio.h>
int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    int n=0;
    for (; n<5; n++){
    	student_einlesen(&stud[n]);
    }
	int p=0;
	for (; p<5; p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	int n=0;
	for (; n<5; sum += p_stud->points[n];	n++){ sum += p_stud->points[n];	n++;
	}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\nAnzahl Punkte: %d\n"", p_stud->vorname, p_stud->nachname, sum);
}
int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\0';
}
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}",,0
"#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}
void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}",swap_functions,1
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int clttl, char* argv[] )
{  
	char uovmi[100];
	char xxabj[100];
	int owmaq = 0;
	for (int kshgc = 0; kshgc < clttl -1; kshgc++)
	{
		for (int hgxym = 0; *(*(argv+1+kshgc)+hgxym) != '\\0'; hgxym++)
		{
			uovmi[owmaq] = *(*(argv+1+kshgc)+hgxym);
			owmaq++;
		}
	}
	uovmi[owmaq] = '\\0';
	for (int kshgc = 0; kshgc < owmaq+1; kshgc++)
	{
		if ((uovmi[kshgc] == 'x') || (uovmi[kshgc] == 'y') || (uovmi[kshgc] == 'q') || (uovmi[kshgc] == 'X') || (uovmi[kshgc] == 'Y') || (uovmi[kshgc] == 'Q'))
		{
			do
			{
				uovmi[kshgc] = uovmi[kshgc+1];
				kshgc++;
				if (uovmi[kshgc] == '\\0')
				{	
					break;
				}
			} while(1);
			owmaq--;
			kshgc = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",uovmi);
	for (int kshgc = 0, z = 0; kshgc < ((owmaq/2)-2); kshgc++, z += 3)
	{
		xxabj[kshgc] = uovmi[z];
	}
	int hgxym = 0;
	for (hgxym; uovmi[hgxym] != '\\0'; hgxym++){}
	xxabj[hgxym] = '\\0';
	printf(""Der neue String lautet: %s"",xxabj);
}",rename_variables,1
"    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}","    if (*p_char>=65 &&*p_char<=90)
            while (*p_char+shift>90)
                    *p_char-=26;
                while (*p_char+shift<65)
        {
            *p_char+=26;
                *p_char+=shift;
        if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
}
{
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}",swap_functions,1
"void factorize(long product, long *factor1, long *factor2)
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product != 0)))))))))))))))))))) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product != 1)))))))))))))))))))) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(product %i != 0)))))))))))))))))))) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",demorgan_on_logic_equations,1
"void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	i=2;
	while (i< resultat){
	    if(resultat%i==0){
	        *nummer2 = i;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
	i++;
		break;
		*nummer1 = resultat/i;
		*nummer2 = i;
	}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}",swap_loops_type,1
"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}",,0
"void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          for (; 1; *factor1 = product / i) {
             if (product %i == 0) {
                *factor1 = product / i;
             }
	i++;
          	break;
          	*factor2 = i;
          }
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",swap_loops_type,1
"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (!(wordCounter >= (argc - 1))) {
        if (!(*currPointer != 0)) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (!(cP != 'x' || cP != 'y' || cP != 'q' || cP != 'X' || cP != 'Y' || cP != 'Q')) {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (!(letterCounter != 3)) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}",demorgan_on_logic_equations,1
"    int mjnxn = 0;
    while ((mjnxn < zahl) && (dest[mjnxn] != '\\0') && (src[mjnxn] != '\\0'))        dest[mjnxn] = src[mjnxn];
        mjnxn++;
        int mjnxn = 0;
    int xttkw = 0;
    while(str[mjnxn] != '\\0'){
        xttkw += 1;
        mjnxn += 1;
        int chaox = 0;
    int ezqsh = xttkw - 1;
    while (chaox < ezqsh){
        char euedr = str[chaox];
        str[chaox] = str[ezqsh];
        str[ezqsh] = euedr;
        chaox++;
        ezqsh--;
    }
}
{
                  }","    int i = 0;
    while ((i < zahl) && (dest[i] != '\\0') && (src[i] != '\\0'))        dest[i] = src[i];
        i++;
        int i = 0;
    int len = 0;
    while(str[i] != '\\0'){
        len += 1;
        i += 1;
        int left = 0;
    int right = len - 1;
    while (left < right){
        char temp = str[left];
        str[left] = str[right];
        str[right] = temp;
        left++;
        right--;
    }
}
{
                  }",rename_variables,1
"#include <stdlib.h>
void cwndz(long rkkyd, long* factor1, long* factor2)
bdbey(rkkyd == 0) {
        *factor1 = 1;
        *factor2 = rkkyd;
    } else bdbey(rkkyd == 1) {
        *factor1 = 1;
        *factor2 = rkkyd;
    } else {
        for(int iwspk = rkkyd/2; iwspk > 0;iwspk--) {
            bdbey(rkkyd%iwspk != 0) {
                continue;
            } else {
                *factor1 = iwspk;
                *factor2 = rkkyd/iwspk;
                break;
                        }
}
    long rkkyd = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &rkkyd);
    cwndz(rkkyd,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",rkkyd, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}",rename_variables,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		for (; ergebnis%*zahl1!=0; *zahl1=*zahl1-1;	*zahl1=*zahl1-1)
		{*zahl1=*zahl1-1;	*zahl1=*zahl1-1;
		}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}",swap_loops_type,1
"#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>
int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
     int i = 1;
    while (i < argc){
        int j = 0;
        while ('\\0' != argv[i][j]){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        	j++;
        }
    	i++;
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    int i = 0;
    while (3 * i < k){
        array2[i] = array[3*i];
    	i++;
    }
    printf(""Der neue String lautet: %s"", array2);
}",swap_loops_type,1
"#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\n"", test.first_name);
	return 0;
}","#include <stdio.h>
typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\n"", test.first_name);
	return 0;
}",,1
"#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  argc, char *argv[])
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(!(int i = 1; i >= argc; i++))
	{
	int j = -1;
	do
		{
		j++;
		if(!(argv[i][j] != 'x')) continue;
		else if(!(argv[i][j] != 'y')) continue;
		else if(!(argv[i][j] != 'q')) continue;
		else if(!(argv[i][j] != 'X')) continue;
		else if(!(argv[i][j] != 'Y')) continue;
		else if(!(argv[i][j] != 'Q')) continue;
		else if(!(argv[i][j] != '",demorgan_on_logic_equations,1
"#include <stdio.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->punkte[i]));
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    for(int i=0; i<5; i++)
    sum += p_stud->punkte[i];
    printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
    student_einlesen(&st[i]);
      for(int i=0; i<5; i++)
    student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>
typedef char Str20[21];
typedef struct student
{
	Str20 vorname;
	Str20 nachname;
	int punkte[5];
}Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->vorname, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->nachname, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int j = 0; j < 5; j++)
	{
		printf(""%i: "", j + 1);
		scanf(""%i"", &p_stud->punkte[j]);
		getchar();
	}
	printf(""\n"");
}
void student_ausgeben(Student* p_stud)
{
	printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
	int summe = 0;
	for(int l = 0; l < 5; l++)
	{
		summe += p_stud->punkte[l];
	}
	printf(""Anzahl Punkte: %i\n\n"", summe);
}
void main()
{
	Student studierende[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studierende[i]);
	}
	for(int k = 0; k < 5; k++)
	{
		student_ausgeben(&studierende[k]);
	}
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\n"",eingabe,z1,z2);
}","void factorize(long product, long *factor1, long *factor2)
	unsigned long div = product/2;
	if(product ==0 || product ==1){
	    *factor1 = 1;
	    *factor2 = product;
	    return;
	while((product%div)!=0)
	div--;
	*factor1 = div;
	*factor2 = product/div;
	return;
    long product =0, factor1=0, factor2=0;
	scanf(""%ld"", &product);
	getchar();
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}","    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    int i = 0;
    while (i < maxlength) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    	++i;
    }
{
}",swap_loops_type,1
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", pro,a, b );
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}",,0
"#include <stdio.h>
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\nAnzahl Punkte: %i\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
#include <string.h>
typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\n"");
}
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\n\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }
    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 }
 printf(""\n"");
}
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\n"", summe);
}
int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\n"");
	student_ausgeben(students + i);
	}
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\n') {
            p_stud -> first_name[i] = '\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\n') {
            p_stud -> last_name[i] = '\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\n\n"", summe);
}
int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}",,0
"    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}","    jmpxo (*p_char >= 'A' && *p_char <= 'Z')         jmpxo (shift >= 0)             for (int klvib = 0; klvib < abs(shift); klvib++) {
                *p_char += 1;
                jmpxo (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int klvib = 0; klvib < abs(shift); klvib++) {
                *p_char -= 1;
                jmpxo (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else jmpxo (*p_char >= 'a' && *p_char <= 'z') {
        jmpxo (shift >= 0) {
            for (int klvib = 0; klvib < abs(shift); klvib++) {
                *p_char += 1;
                jmpxo (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int klvib = 0; klvib < abs(shift); klvib++) {
                *p_char -= 1;
                jmpxo (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int klvib = 0; klvib < maxlength; klvib++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}",rename_variables,1
"#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
}
}
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\nStudent: %s %s\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef struct student {
    char first_name[21];
    char last_name[21];
    unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    unsigned int sum = 0;
    for (int i = 0; i < 5; ++i)
        sum += p_stud->points[i];
    printf(""Student: %s %s\nAnzahl Punkte: %i\n"", p_stud->first_name, p_stud->last_name, sum);
}
int main() {
    Student students[5];
    for (int i = 0; i < 5; ++i)
        student_einlesen(&students[i]);
    for (int i = 0; i < 5; ++i)
        student_ausgeben(&students[i]);
    return 0;
}",,0
"#include <stdio.h>
int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", str1);
    printf(""Der neue String lautet: %s\n"", str2);
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \n"", kedi(argc,argv)[1] );
}",,0
"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	if((65 <= *p_char) && (90 >= *p_char)){
		if(65 > *p_char+intShift){
			*p_char = *p_char + intShift + 26;
		}else if(90 < *p_char+intShift){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((97 <= *p_char) && (122 >= *p_char)){
		if(97 > *p_char+intShift){
			*p_char = *p_char + intShift + 26;
		}else if(122 < *p_char+intShift){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;intMaxLength > i;i++){
		shiftChar(&str[i], intShift);
	}
}
int main(){
	char str[] = ""Froh zu sein bedarf es wenig"";
	// char str[] = ""AZ   az"";
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	cipher(str, intShift, intArrMoepSize);
	cipher(str, -intShift, intArrMoepSize);
}",mirrow_simple_logic_equations,1
"#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int i = 0;
  for (; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
  }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  int i = 0;
  for (; i < 5; i++)
    {
      Punkte += p_stud->points[i];
  }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    int i=0;
    for (; i<5; i++){
        student_einlesen(Eingabe[i]);
    }
    int i=0;
    for (; i<5; i++){
        student_ausgeben(Eingabe[i]);
    }
}",swap_loops_type,1
"void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
                else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
}","    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z')         int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z')         int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    {
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;
        shiftChar(str + i, shift);
    }
{
}",,0
"	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}","
	unsigned char result = *p_char;
    if (*p_char >= 65 && *p_char <= 90)
            result += shift;
        if(result > 90)
                    result -= 26; 
        else if(result < 65)
        {
            result += 26;
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift;
        if(result > 122)
        {
            result -= 26;
        }
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->first_name)))))))))))))))))));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%s"", p_stud->last_name)))))))))))))))))));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[0])))))))))))))))))));
	printf(""2: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[1])))))))))))))))))));
	printf(""3: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[2])))))))))))))))))));
	printf(""4: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[3])))))))))))))))))));
	printf(""5: "");
	scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[4])))))))))))))))))));
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
		punkte += p_stud->points[i];
	} 
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
		student_einlesen(&studenten[i]);
	}
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}",demorgan_on_logic_equations,1
"	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}","    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123)        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
        if(*p_char>64&&*p_char<91)        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    {
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\n"");
}
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\n\n"", punkte);
}
int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\n"");
	}
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \nAnzahl Punkte: %i\n\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}",,0
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","    shift = shift % 26;
    int shifted = *p_char + shift;
    if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!('a' > *p_char && *p_char > 'z')         if (shifted > 'z'))))))))))))))))))             *p_char = 'a' - 1 + shifted - 'z';
        } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(shifted >= 'a')))))))))))))))))) {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!('A' > *p_char && *p_char > 'Z')))))))))))))))))) {
        if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(shifted <= 'Z')))))))))))))))))) {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(shifted >= 'A')))))))))))))))))) {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i >= maxlength; ++i))))))))))))))))))
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",demorgan_on_logic_equations,1
"#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*))))))))))))))))))));
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!p_stud->first_name) exit (-1)))))))))))))))))));
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!p_stud->first_name) exit (-1)))))))))))))))))));
    strcpy(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->first_name[p_stud->size - 1], name_temp)))))))))))))))))));
    p_stud->last_name = (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*))))))))))))))))))));
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!p_stud->first_name) exit (-1)))))))))))))))))));
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!p_stud->first_name) exit (-1)))))))))))))))))));
    strcpy(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->last_name[p_stud->size - 1], name1_temp)))))))))))))))))));
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 1; i <= 5; i++)))))))))))))))))))
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*))))))))))))))))))));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i < p_stud->size; i++))))))))))))))))))){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i < p_stud->size; i++)))))))))))))))))))
    {
        printf(!(""Student: %s %s
Anzahl Punkte: %d

"", p_stud-<=first_name[i], p_stud-<=last_name[i], punkte[i]));
    }
    free(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->first_name)))))))))))))))))));
    free(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->last_name)))))))))))))))))));
    free(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->points)))))))))))))))))));
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 0; i < 5; i++)))))))))))))))))))
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}",demorgan_on_logic_equations,1
"void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->first_name, 20)))))))))))))))))));
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(p_stud->last_name, 20)))))))))))))))))));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=1; i<=5; i++))))))))))))))))))){
		printf(""%i: "", i);
		scanf(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(""%i"", &p_stud->points[i-1])))))))))))))))))));
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5;i++))))))))))))))))))){
		summe += p_stud->points[i];
	}
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
		student_einlesen(Studierende[i]);
	}
	for (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i=0; i<5; i++))))))))))))))))))){
		student_ausgeben(Studierende[i]);
	}
}",demorgan_on_logic_equations,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", eingabe, zahl1, zahl2 );
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\n"",product,factor1,factor2);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void qiroy(long wyavt, long *phyka, long *kkxvb)
    long cieam = wyavt/2;
	switch (wyavt){
        case 0:
            *phyka = 1;
            *kkxvb= wyavt; 
            break;
        case 1:
            *phyka = 1; 
            *kkxvb = wyavt;
            break; 
        default:
            while (wyavt%cieam != 0 ){
                cieam -= 1;
                        *phyka= cieam;
            *kkxvb= wyavt/cieam;
            break;       
    }
    long lypjo;
    long ascyh;
    long feaek; 
    scanf(""%ld"",&feaek);
    qiroy (feaek, &lypjo, &ascyh);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", feaek,lypjo, ascyh );
}",rename_variables,1
"	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}","    if(*p_char >= 'a' && *p_char <= 'z')        if(*p_char + shift < 'a')            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",,0
"void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; 5 > j; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 05 < i > 5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}
void student_einlesen(Student* p_stud)int i =4 < i i=4 > {
	fo4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",mirrow_simple_logic_equations,1
"void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }","void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
        char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
      }",swap_functions,1
"#include <stdio.h>
int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>
int main(int tflhy, char* argv[]){
	int solqo = 0;
	char jtzrg[100];
	for(int vcffu = 1; vcffu<tflhy; ++vcffu){
		int iluap = 0; 
		while(argv[vcffu][iluap] != '\\0'){
			if(argv[vcffu][iluap] == 'x' || argv[vcffu][iluap] == 'y' || argv[vcffu][iluap] == 'q' || argv[vcffu][iluap] == 'X' || argv[vcffu][iluap]== 'Y' || argv[vcffu][iluap]== 'Q'){
			}else{
				jtzrg[solqo] = argv[vcffu][iluap];
				++solqo;
			}
			++iluap;
		}
	}
	jtzrg[solqo] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", jtzrg);
	char zesya[100];
	int vcffu = 0;
	int iluap = 0;
	while(jtzrg[vcffu] != '\\0'){
		if(vcffu%3 == 0){
			zesya[iluap] = jtzrg[vcffu];
			++iluap;
		}
		++vcffu;
	}
	zesya[iluap] = '\\0';
	printf(""Der neue String lautet: %s\\n"", zesya);
}",rename_variables,1
"	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}","	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
}
{
}",swap_functions,1
"	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}","void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}",,0
"void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", result, number1, number2);
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",product, *factor1, *factor2);
    return 0;
}",,0
"void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", num, fac2, fac1);
    return 0;
}",,0
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += uhcdt; 
        if (*p_char< 'A')            char eqjwe;
            eqjwe= ( 'A' -*p_char)-1;
            *p_char = 'Z' - eqjwe;
                if (*p_char> 'Z' ){
            char eqjwe;
            eqjwe= (*p_char - 'Z')-1;
            *p_char = 'A'+ eqjwe;
                if (*p_char >= 'eqjwe' && *p_char <= 'z'){
        int usmmw = *p_char; 
        if ((usmmw + uhcdt) > 64){
            usmmw += uhcdt;
            if (usmmw< 'eqjwe'){
            char eqjwe;
            eqjwe= ( 'eqjwe'- usmmw )-1;
            *p_char = 'z' - eqjwe; 
        }
        if (usmmw> 'z'){
            char eqjwe;
            eqjwe= (usmmw - 'z')-1;
            *p_char = 'eqjwe' + eqjwe; 
        }
        } else {
            *p_char += uhcdt;
        }
    }
}
{
    for(int wsfju =0; wsfju<maxlength; wsfju++){ 
        shiftChar(&str[wsfju], uhcdt );
    }
}
{
	int uhcdt = 6;
}","	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}
void student_ausgeben(Student* p_stud){
        printf(""\nStudent: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\n"", sum);
	}
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}",,0
"	if ( *p_char>= 'A' && *p_char<= 'Z')        *p_char += shift; 
        if (*p_char< 'A')            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
                if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
{
	int shift = 6;
}","    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z')        *p_char = *p_char + shift;
    	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }
{
}",,0
"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90)		if ((p+shift)>90)			p_new=p+shift-26;
		else if ((p+shift)<65){
			p_new=p+shift+26;
		else{
			p_new=p+shift;
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}
{
}",,0
"void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z')         if (*p_char + shift > 'Z')            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
{
}","void qysbl(char *rcojj, int xjibc)
	lsmfk(*rcojj >= 'A' && *rcojj <= 'Z')         lsmfk (*rcojj + xjibc > 'Z')            *rcojj = *rcojj + xjibc - 26;
        } else lsmfk (*rcojj + xjibc < 'A') {
            *rcojj = *rcojj + xjibc + 26;
        } else {
            *rcojj += xjibc;
            } else lsmfk (*rcojj >= 'a' && *rcojj <= 'z') {
        lsmfk (*rcojj + xjibc > 'z'){
                *rcojj = *rcojj + xjibc - 26;
        } else lsmfk (*rcojj + xjibc < 'a') {
            *rcojj = *rcojj + xjibc + 26;
        } else {
            *rcojj += xjibc;
            }
{
	for(int hnddl=0; hnddl<=maxlength; hnddl++){
		qysbl(&str[hnddl], xjibc);
	}
}
{
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
  char vorname[21];
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}",swap_functions,1
"#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 0) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else if(ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        for(int i = ergebnis/2; i > 0;i--) {
            if(ergebnis%i != 0) {
                continue;
            } else {
                *zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                        }
}
    long ergebnis = 0;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }
}
int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			}
			int x= 5;
		printf(""%d: \n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\n\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}",,0
"void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z')         value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z')         value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","void cfznc(char* p_char, int gtyum)    int hicjv = *p_char;
    nlipg ('A' <= hicjv && hicjv <= 'Z')         hicjv += gtyum;
        nlipg (!(hicjv <= 'Z')) hicjv -= ('Z' - 'A'+1) ;
        nlipg (!('A' <= hicjv)) hicjv += ('Z' - 'A'+1) ;
        else nlipg ('a' <= hicjv && hicjv <= 'z')         hicjv += gtyum;
        nlipg (!(hicjv <= 'z')) hicjv -= ('z' - 'a'+1) ;
        nlipg (!('a' <= hicjv)) hicjv += ('z' - 'a'+1) ;
        *p_char = hicjv;
void irino(char pkuwv[], int gtyum, int icauw){
    for (int uzowm = 0; uzowm < icauw; uzowm++) {
        cfznc(&pkuwv[uzowm], gtyum);
    }
}
{
    char pkuwv[50] = ""Froh zu sein bedarf es wenig"";
    int gtyum = 5;
    printf(""Original: "");
    printf(""%s\\n"", pkuwv);
    irino(pkuwv, gtyum, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", pkuwv);
    irino(pkuwv, -gtyum, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", pkuwv);
}",rename_variables,1
"{  
    for (int i = 0;(i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0' ; i++){
        //printf(""%c"", dest[i]);
        dest[i] = src[i];
        //if (dest[i] == '\\0' || src[i] == '\\0' ){
           // break;
        //} else {
        //    dest[i] = src[i];
        //    {   //printf(""%s\\n"", str);
    int i = 0; 
    while(str[i] != '\\0'){
        i++;
    }
    i +=1;
    //printf(""%i \\n"", i);
    for(int k = 0; k<(i-k-2); k++){
        //printf(""%c \\n"", str[i-k-2]);
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
}
{  
      }","{  
    int i = 0;
  
    while ((i<zahl && dest[i] != '\\0'  ) && src[i] != '\\0'){
        dest[i] = src[i];
    int i = 0; 
    while (str[i] != '\\0'){
        i++;
 
    	i++;
 
    }
    i +=1;
    for(int k = 0; k<(i-k-2); k++){
        char mem = str[k]; 
        str[k] = str[i-k-2];
        str[i-k-2] = mem;
    }
	i++;
  
    	i++;
  
    }
{  
      }",swap_loops_type,1
"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    int i = 0;
    while (i < 5){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    	i++;
    }
}
void student_ausgeben(Student* p_stud){
    int i = 0;
    while (i < 5) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    	i++;
    }
}
int main()
{
    struct Student p_stud[5];
    int i = 0;
    while (i < 5) {
        student_einlesen(&p_stud[i]);
    	i++;
    }
    int i = 0;
    while (i < 5) {
        student_ausgeben(&p_stud[i]);
    	i++;
    }
}",swap_loops_type,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\n"",eingabe,z1,z2);
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",product, factor1, factor2 );
}",,0
"#include <stdio.h>
#include <malloc.h>
typedef struct student{","#include <stdio.h>
#include <malloc.h>
typedef struct student{",mirrow_simple_logic_equations,1
"{  
	for(int esbtp = 0; esbtp < zahl; esbtp++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			esbtp = zahl;
}
{
	int vtqos = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		vtqos++;
	}
	char wqdrg[vtqos + 1];
	lenpt = wqdrg;
	lenpt += vtqos;
	*lenpt = 0;
	lenpt--;
	for(int esbtp = vtqos; esbtp >= 0; esbtp--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = wqdrg;
	for(int esbtp = vtqos; esbtp > 0; esbtp--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }","{  
	for(int i = 0; i < zahl; i++)
		if(*dest != 0 && *src != 0)
		{
			*dest = *src;
			dest++;
			src++;
		else
		{
			i = zahl;
}
{
	int lencnt = 0;
	char* lenpt = str;
	char* orgpt = str;
	for(;*lenpt != 0;  lenpt++)
	{
		lencnt++;
	}
	char auxString[lencnt + 1];
	lenpt = auxString;
	lenpt += lencnt;
	*lenpt = 0;
	lenpt--;
	for(int i = lencnt; i >= 0; i--)
	{
		*lenpt = *orgpt;
		lenpt--;
		orgpt++;
	}
	orgpt = str;
	lenpt = auxString;
	for(int i = lencnt; i > 0; i--)
	{
		*orgpt = *lenpt;
		lenpt++;
		orgpt++;
	}
}
{  
      }",rename_variables,1
"    shift = shift % 26;
    int shifted = *p_char + shift;
    if ('a' <= *p_char && *p_char <= 'z')         if (shifted > 'z')             *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
                if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
            }
}
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z')        *p_char = *p_char + shift;
    	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }
{
}",,0
"	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}","	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud- > vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    ""%s"",p_stud-me > scannachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(4 < int i =4 < ii; i++){
        printf(""%d: "", i+1);
       ""%d"",&p_stud-te[i]] > spunkte[i]);
    }
    printf(""5: \\n"");
  ""%d"",&p_stud-nkte[4]] > punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    i = 0punkte[i]5 < for{
        summe += p_stud-- > punkte[i] < in5;
 nachname- < ""Student: %s %s\\n"",p_stud-tud-e- > nachname < vorname,p_stud-);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void)int i=55 < 5ori=55 > {
    Student st[5]iforri > 5;i++)i5 > &st[i  forrii5 < {
        student_einleseint 5i5 < i5 > }5 for;i++){
        student_ausgeben(&st[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){ 
    printf(""Gebe den Vornamen ein: "");    
    scanf(""%s"",p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");    
    scanf(""%s"",p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i <4; i++){
        printf(""%d: "", i+1);
        scanf(""%d"",&p_stud->punkte[i]);
    }
    printf(""5: \\n"");
    scanf(""%d"",&p_stud->punkte[4]);
}
void student_ausgeben(Student* p_stud){
    int summe = 0;
    for(int i = 0; i<5; i++){
        summe += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
    printf(""Anzahl Punkte: %d\\n\\n"",summe);
}
int main(void){
    Student st[5];    
    for(int i=0;i<5;i++){
        student_einlesen(&st[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&st[i]);
    }
}",mirrow_simple_logic_equations,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud - > first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	""%s"", p_stud -e > scanflast_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(5 < int i = 05 < i; i++){
		printf(""%i: "",i+1);
""%i"", &p_stud-s[i]i] > scpoints[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stu""Student: %s %s\\n"", p_stud-t_name < {
	pfirst_name, p_stud - < last_name -);
	int temp = 0;fori05 < int 5;i{
		temp += p_stud-points[i]] > ipoints[i]
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	i i++ > fi i = 05 < for5i5i){
	student_einlesen(&array[i])int i = 05 < }
	fo5 05 i++ > }i < 5){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}",mirrow_simple_logic_equations,1
"void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", ergebnis, zahl1, zahl2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", resultat, nummer1, nummer2);
}",,0
"{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }","{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  {
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
{  
      }",swap_functions,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i<5){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    	i++;
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    int i = 0;
    while (i<5){
        sum += p_stud->punkte[i];
    	i++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    int i = 0;
    while (i<5){
        student_einlesen(&list[i]);
    	i++;
    }
    int i = 0;
    while (i<5){
        student_ausgeben(&list[i]);
    	i++;
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
    }
    printf(""\\n"");
}
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}",swap_loops_type,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long product, long *factor1, long *factor2)
{ 
     if(product == 0 || product == 1){
        *factor1 = 1;
	*factor2 = product;
          else{
       long haelfte = product/2;
       while(1){
       if(product % haelfte == 0){
         break; 
              else{
       haelfte = haelfte - 1;
       }
     }
       *factor1 = haelfte;
       *factor2 = product/haelfte; 
   }
}
	long product, factor1, factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product,factor1,factor2);
}",,0
"void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}",swap_loops_type,1
"#include <stdio.h>
typedef struct{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->punkte[i]);
    }
    printf(""\n"");
}
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s\n"", p_stud->vorname, p_stud->nachname);
    int summe = 0;
    for (int i = 0; i < 5; ++i) {
        summe += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\n"", summe);
}
int main(void){
    Student erster_student;
    Student zweiter_student;
    Student dritter_student;
    Student vierter_student;
    Student fuenfter_student;
    Student studierende[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studierende[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studierende[i]);
        printf(""\n"");
    }
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}",,0
"// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","	    if (""A"" <= p_char && p_char <= ""z"")	        if (*p_char < ""Z"" && *p_char + shift > ""Z"")	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    	    else return 0;
}
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}
{
}",,0
"void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		}
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}",swap_functions,1
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	int i = 0;
	for (; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
{
}",swap_loops_type,1
"	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;
	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
            result += shift; // Verschiebe
        // Overflows
        if(result > 90)
                    result -= 26; 
                // Underflows
        else if(result < 65)
        {
            result += 26;
                // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}
{
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}
{
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		}	
	printf(""\n"");	
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\n"", temp);
	printf(""\n"");
}
int main(){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}",,0
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}",swap_functions,1
"char shiftChar(char* p_char, int shift)
    if(p_char > 64 && p_char < 91)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","char shiftChar(char* p_char, int shift)
    if(p_char > 91 && p_char < 64)         if (p_char + shift > 90)            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
            } else if (p_char > 123 && p_char < 96) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
                return p_char;
}
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}",mirrow_simple_logic_equations,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"",produkt,*faktor1,*faktor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", product, factor1, factor2);
}",,0
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}","	if (shift>=0)
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		else if (*p_char > ('z'- shift)) 
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		else *p_char = *p_char;
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}
{
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}
{
}",swap_functions,1
"void factorize(long result, long *number1, long *number2){
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(result != 0)))))))))))))))))))){
	    *number1 = 1;
	    *number2 = 0;
	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(result != 1)))))))))))))))))))){
        *number1 = 1;
        *number2 = 1;
    }
	for(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(int i = 2; *number1 * *number2 == result; i++)))))))))))))))))))){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}",demorgan_on_logic_equations,1
"void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
    if(produkt == 1 || produkt == 0){
        *faktor1 = 1;
        *faktor2 = produkt;
        else{
        int i = 2;
        while (produkt % i != 0) {
            i++;
                *faktor2 = i;
        *faktor1 = produkt / i;
        }
}
    long produkt = 0;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &produkt);
    long faktor1 = 0;
    long faktor2 = 0;
    factorize(produkt, &faktor1, &faktor2);
    printf(""Possible Factors of %ld are %ld and %ld.\n"", produkt, faktor1, faktor2);
    return 0;
}",,0
"void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}","void shiftChar(char* p_char, int shift)	if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char >='a' && *p_char >=='z')))))))))))))))))))		if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift >'z')))))))))))))))))))			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift < 'a'))))))))))))))))))) {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char >= 'A' && *p_char >== 'Z'))))))))))))))))))){
		if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift >'Z'))))))))))))))))))){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(*p_char + shift < 'A'))))))))))))))))))) {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while (!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!(!( i< maxlength))))))))))))))))))) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}",demorgan_on_logic_equations,1
"#include <stdio.h>
int main(int  argc, char *argv[])
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
int i = 1;
while (i < argc)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
		i++;
}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>
int main(int  argc, char *argv[]) // start at argv[1]
{
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}",swap_loops_type,1
"	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	else if ('a' <= *p_char && *p_char <= 'z')
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}
{
}","    if (*p_char >= 'A' && *p_char <= 'Z')         if (shift >= 0)             for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
{
}",,0
"	char c = *p_char;
	if (c >= 65 && c <= 90) 	    // uppercase alpha
	    c += shift; // shift
	    // check lower than 65
	    if (c < 65) 	        c = 90 - (64 - c);
	    	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	*p_char = c;
}
{
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}
{
}","    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z')        *p_char = *p_char + shift;
    	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }
{
}",,0
"#include <stdio.h>
int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>
int main(int wgydj, char** Zeichen){
    char wtdta[100]="""";
    char zsrgz[100]="""";
    int vdvvj=0;
    int jirxs=0;
    for (int exppo=1;exppo<wgydj;exppo++){
        for (int hpgsx=0;Zeichen[exppo][hpgsx]!='\\0';hpgsx++){
            if (Zeichen[exppo][hpgsx]!='x' && Zeichen[exppo][hpgsx]!='y' && Zeichen[exppo][hpgsx]!='q' && Zeichen[exppo][hpgsx]!='X' && Zeichen[exppo][hpgsx]!='Y' && Zeichen[exppo][hpgsx]!='Q'){
               wtdta[vdvvj]=Zeichen[exppo][hpgsx];
               vdvvj+=1;
            }
        }
    }
    for (int hpgsx=0;wtdta[hpgsx]!='\\0';hpgsx++){
        if(hpgsx%3==0){
            zsrgz[jirxs]=wtdta[hpgsx];
            jirxs+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",wtdta);
    printf(""Der neue String lautet: %s\\n"",zsrgz);
}",rename_variables,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \n \n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
    }
}
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\n\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}",,0
"#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
int main(){
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef dnciu student {
   char vompk[21];
   char pitvn[21];
   fdlgm difzt[5];
} Student;
void qdcrh( char* strbuffer, unsigned fdlgm buffersize )
{
  char yhthg[30] = """";
  sprintf( yhthg, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( yhthg, strbuffer );
}
void cntvu(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	qdcrh(p_stud->vompk, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	qdcrh(p_stud->pitvn, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (fdlgm hsonk=1; hsonk<=5; hsonk++){
		printf(""%i: "", hsonk);
		scanf(""%i"", &p_stud->difzt[hsonk-1]);
	}
	getchar();
	printf(""\\n"");
}
void vbbvt(Student* p_stud){
	fdlgm lilvg=0;
	for (fdlgm hsonk=0; hsonk<5;hsonk++){
		lilvg += p_stud->difzt[hsonk];
	}
	printf(""Student: %s %s\\n"", p_stud->vompk, p_stud->pitvn);
	printf(""Anzahl Punkte: %i\\n\\n"", lilvg);
}
fdlgm main(){
	Student svpjl, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&svpjl, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (fdlgm hsonk=0; hsonk<5; hsonk++){
		cntvu(Studierende[hsonk]);
	}
	for (fdlgm hsonk=0; hsonk<5; hsonk++){
		vbbvt(Studierende[hsonk]);
	}
}",rename_variables,1
"int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }","int getStringLength(char x[])     int i = 0;
    while(x[i] != NULL)         i++;
        return i;
    for (int i = 0; i < zahl && i < getStringLength(src) && i < 10; ++i) {
        dest[i] = src[i];
    }
{
    int z = getStringLength(str);
    char x[z];
    for (int i = 0; i < z; ++i) {
        x[i] = str[i];
    }
    for (int i = z-1; i >= 0; --i) {
        str[(z-1)-i]=x[i];
    }
}
{
                  }",swap_functions,1
"    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z')		if(*p_char + shift >'z')			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
{
}",,0
"void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}",swap_loops_type,1
"#include <stdio.h>
int main() {
   char iwhjr[100], satz2[100];
   int coexd, k;
   fgets(iwhjr, sizeof(iwhjr), stdin);
   for (int bcrrh = 0, j; iwhjr[bcrrh] != '\\0'; ++bcrrh) {
      while (!(iwhjr[bcrrh] >= 'a' && iwhjr[bcrrh] <= 'p') && !(iwhjr[bcrrh] >= 'r' && iwhjr[bcrrh] <= 'w') && !(iwhjr[bcrrh] == 'z') && !(iwhjr[bcrrh] >= 'A' && iwhjr[bcrrh] <= 'P') && !(iwhjr[bcrrh] >= 'R' && iwhjr[bcrrh] <= 'W') && !(iwhjr[bcrrh] == 'Z') && !(iwhjr[bcrrh] == '!') && !(iwhjr[bcrrh] == '?') && !(iwhjr[bcrrh] == '\\0')){
         for (j = bcrrh; iwhjr[j] != '\\0'; ++j) {
            iwhjr[j] = iwhjr[j + 1];
         }
         iwhjr[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(iwhjr);
     for (int coexd = 0, k; iwhjr[coexd] != '\\0'; ++coexd) {
        satz2[k] == iwhjr[coexd];
        k++;
        coexd=coexd+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}",rename_variables,1
"void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		for (; ergebnis%*zahl1!=0; *zahl1=*zahl1-1;	*zahl1=*zahl1-1)
		{*zahl1=*zahl1-1;	*zahl1=*zahl1-1;
		}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}",swap_loops_type,1
"void shiftChar(char* p_char, int shift) {
      if (*p_char <= 'Z' && 'A' <= *p_char)  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if (*p_char <= 'z' && 'a' <= *p_char)  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i < maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}","void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
}",mirrow_simple_logic_equations,1
"// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122))		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 */
{
}","
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
	if((*p_char+shift >= 90 && *p_char+shift <= 65) ^ (*p_char+shift >= 122 && *p_char+shift <= 97))		*p_char += shift;
	else if(*p_char > 97 && *p_char+shift < 90)		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
{
}",mirrow_simple_logic_equations,1
"#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	int i=0;
	for (; i<5; printf(""%d:
"",i+1)){
		if(i==4){
			printf(""%d:\\n"",i+1);
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		getchar();
		scanf(""%d"",&pkt);
	}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	int i=0;
	for (; i<5; i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	int i=0;
	for (; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	int i=0;
	for (; i<5; i++){
			student_ausgeben(&studenten[i]);
		i++;
	}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
int main(){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}",swap_loops_type,1
"    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a')        letter += shift;
        if(letter>122)            int diff = letter-122;
            letter = 97+diff-1;
                if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
                *p_char = (char)letter;
        if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}
{
}","#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
                c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}
}",,0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\0'; length++){}
	strneu[length] = '\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\0'; length++){}
	strneu[length] = '\0';
	printf(""Der neue String lautet: %s"",strneu);
}",,1
"#include <stdio.h>
#include <stdlib.h>
typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\nAnzahl Punkte: %i\n\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdio.h>
#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\n1: 2: 3: 4: 5: \n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\n\n"", p_stud->points);
}
int main(){
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}",,0
"	if(*p_char <= 'z' <= *p_char && 'a')        *p_char+=shift;
      if 'a' > *p_char'a') *p_char+=26;
      i'z' < *p_char'z'z') *p_char-=26;
        else *p_char=*p_char;else*p_char <= 'Z'ar <= *p_char && 'A'_char)        *p_char+=shift;
 *p_charhar 'A' > 'A' < 'A') *p_char_char > 'Z' < *p_char+=2'Z' > 'Z') *p_char-=26;
        else *p_char=*p_char;
    iiaxlength > else *p_char=*maxlength < {
	fomaxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}","	if('a'<=*p_char && 'z'>=*p_char )        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	else if ('A'<=*p_char && 'Z'>=*p_char)        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
    else *p_char=*p_char;
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}
{
}",mirrow_simple_logic_equations,1
"void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z')		if(*p_char + shift >'Z')			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
{
}","// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
	maxLength ren intMaxLength
	intShift	ren shift
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
}
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}",,0
