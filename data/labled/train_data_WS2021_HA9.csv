code1,code2,label
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int zhrzk, char** argv)
{
    char eeiox[100] = ""lasse roland max ivo"";
    char cdbjo[100];
    char tfllh[100];
    int eafzk = 0;
    int kswul = 0;
    int uvnpo = 1;
    int wrkdr;
    for ( wrkdr = 0; *(argv+wrkdr) != '\0'; wrkdr++)
    {
        if (*(argv+wrkdr) == ' ' || *(argv+wrkdr) == 'x' || *(argv+wrkdr) == 'y' || *(argv+wrkdr) == 'q'|| *(argv+wrkdr) == 'X'|| *(argv+wrkdr) == 'Y'|| *(argv+wrkdr) == 'Q')
            uvnpo++;
            continue;
        cdbjo[eafzk++] = *(argv+wrkdr);
    }
    cdbjo[eafzk] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", cdbjo );
    for ( wrkdr = 0; cdbjo[wrkdr] != '\0'; wrkdr++)
    {
        if (wrkdr == 0 || wrkdr % 3 == 0)
        tfllh[kswul++] = cdbjo[wrkdr];
        continue;
    }
    tfllh[kswul] = 0;
    printf( ""Der neue String lautet: %s \n"", tfllh);
}",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int fhghl, char** argv)
{
    char zpebr[100] = ""lasse roland max ivo"";
    char fwunl[100];
    char sacax[100];
    int ezbrh = 0;
    int ymjnv = 0;
    int rurmm = 1;
    int ryweh;
    for ( ryweh = 0; *(argv+ryweh) != '\0'; ryweh++)
    {
        if (*(argv+ryweh) == ' ' || *(argv+ryweh) == 'x' || *(argv+ryweh) == 'y' || *(argv+ryweh) == 'q'|| *(argv+ryweh) == 'X'|| *(argv+ryweh) == 'Y'|| *(argv+ryweh) == 'Q')
            rurmm++;
            continue;
        fwunl[ezbrh++] = *(argv+ryweh);
    }
    fwunl[ezbrh] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", fwunl );
    for ( ryweh = 0; fwunl[ryweh] != '\0'; ryweh++)
    {
        if (ryweh == 0 || ryweh % 3 == 0)
        sacax[ymjnv++] = fwunl[ryweh];
        continue;
    }
    sacax[ymjnv] = 0;
    printf( ""Der neue String lautet: %s \n"", sacax);
}",1.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
{
	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int lftnb, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int yddgs = 0;
for(int nguei=1; nguei < lftnb; nguei++){
	int bdmjj = 0;
while(*(argv[nguei]+bdmjj) != '\0'){
if((*(argv[nguei]+bdmjj) != 'yddgs') && (*(argv[nguei]+bdmjj)!= 'qhozw') && (*(argv[nguei]+bdmjj) != 'q')&& (*(argv[nguei]+bdmjj) != 'X')&& (*(argv[nguei]+bdmjj) != 'Y')&& (*(argv[nguei]+bdmjj) != 'Q')){
			*(compactstring+yddgs) = *(argv[nguei]+bdmjj);
			yddgs++;
	}
	bdmjj++;
}
}
compactstring = (char*) realloc(compactstring,yddgs+sizeof(char));
int ixcdy=(yddgs+1)/3;
char* shortend = (char*) malloc(ixcdy * sizeof(char));
int qhozw = 0;
for (int nguei=0;nguei<yddgs+1;nguei++){
if((nguei%3)==0){
	*(shortend+qhozw) = *(compactstring+nguei);
	qhozw++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int zecpb(char *aemym)
 int amawn = 0; 
    while (aemym[amawn] != '\0')
      amawn++;
  return amawn; 
{  
  int opyab = zecpb(src);
  int pedlz = zecpb(dest);
 /*     char vvume[opyab]; 
    for (int amawn = 0; amawn <= opyab-1; amawn++) 
        vvume [amawn] = src[amawn];
  for (int amawn = 0; amawn <= zahl-1; amawn++) {
    if (amawn <= pedlz && amawn <= opyab) {
        *dest = vvume[amawn]; 
      }*/
  int amawn = 1;
   while(*src && amawn <= opyab && amawn <= pedlz && amawn <= zahl) {
    *dest++ = *src++;
    amawn++;
 }
void vycwx(char* a, char* b){
    char hcnfw = *a;
    *a = *b;
    *b = hcnfw;
}
{
    if (!*str) 
        return;
    char* amawn = str;
    char* j = amawn + zecpb(str) - 1;
    while (amawn < j) {
        vycwx(amawn, j);
        amawn++;
        j--;
    }
}
{  
      }",1.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void sccbf (char* uszah)
{
	for(int iknxo = 0; uszah[iknxo] != '\0'; iknxo++)
	{
		if(uszah[iknxo] == 'x' || uszah[iknxo] == 'y' || uszah[iknxo] == 'q' || uszah[iknxo] == 'X' || uszah[iknxo] == 'Y' || uszah[iknxo] == 'Q' )
		{
			for(int erxoa = iknxo; uszah[erxoa] != '\0'; erxoa++)
			{
				uszah[erxoa] = uszah[erxoa+1];
			}
			iknxo = iknxo -1;
		}
	}
}
void scocd (char* uszah)
{
	int otckx = 0;
	while(uszah[otckx] != '\0')
	{
	otckx++;
	}
	char ydwcp[otckx]; 
	for(int pohic = 0; pohic < otckx; pohic++)
	{
		if(pohic % 3 == 0)
		{
			ydwcp[pohic] = uszah[pohic];
		}
		else ydwcp[pohic] = 0;
	}
	int tagtp =0;
	for(int iknxo = 0; iknxo < otckx; iknxo++)
	{
		if(ydwcp[iknxo] != 0)
		{
			uszah[tagtp] = ydwcp[iknxo];
			tagtp++;
		}
	}
	uszah[tagtp] = '\0';
}
int main(int opskv, char* argv[])
{
	int otckx = 0;
	for(int erxoa=1; erxoa < opskv; erxoa++)
	{
		for(int iknxo = 0; argv[erxoa][iknxo] != '\0'; iknxo++)
		{
			otckx++;		
		}				
	}
	char uszah[otckx+1];
	uszah[otckx] = '\0';
	int tagtp = 0;
	for(int erxoa=1; erxoa < opskv; erxoa++)
	{
		for(int iknxo = 0; argv[erxoa][iknxo] != '\0'; iknxo++)
		{
			uszah[tagtp] = argv[erxoa][iknxo];
			tagtp++;
		}
	}
	sccbf(uszah);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&uszah[0]);
	scocd(uszah);
	printf(""Der neue String lautet: %s \n"",&uszah[0]);
}",1.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }","    for (int ibgvf = 0;(ibgvf < zahl) && (ibgvf < 10) && (src[ibgvf] != '\0'); ibgvf++)
    {
        dest[ibgvf] = src[ibgvf];
    void upsqn(char* str )
{
    int ciqas;
    for (int roiur = 1; str[roiur] != '\0'; roiur++)
    {
        ciqas = roiur + 2;
        char ignqv[ciqas];
    for (int ibgvf = 0; ibgvf < (ciqas - 1); ibgvf++)
    {
        ignqv[ciqas - 2- ibgvf] = str[ibgvf];
    }
    for (int ibgvf = 0; ibgvf < ciqas; ibgvf++)
    {
        str[ibgvf] = ignqv[ibgvf];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int byfqv, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int bcnox = 0;
for(int nkidd=1; nkidd < byfqv; nkidd++){
	int iqawz = 0;
while(*(argv[nkidd]+iqawz) != '\0'){
if((*(argv[nkidd]+iqawz) != 'bcnox') && (*(argv[nkidd]+iqawz)!= 'atysh') && (*(argv[nkidd]+iqawz) != 'q')&& (*(argv[nkidd]+iqawz) != 'X')&& (*(argv[nkidd]+iqawz) != 'Y')&& (*(argv[nkidd]+iqawz) != 'Q')){
			*(compactstring+bcnox) = *(argv[nkidd]+iqawz);
			bcnox++;
	}
	iqawz++;
}
}
compactstring = (char*) realloc(compactstring,bcnox+sizeof(char));
int mnuuq=(bcnox+1)/3;
char* shortend = (char*) malloc(mnuuq * sizeof(char));
int atysh = 0;
for (int nkidd=0;nkidd<bcnox+1;nkidd++){
if((nkidd%3)==0){
	*(shortend+atysh) = *(compactstring+nkidd);
	atysh++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int gitpw, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int xxurs = 0;
	for(int amuip = 1; amuip < gitpw; amuip++){
		int fnfqr = 0;
		while(*(argv[amuip]+fnfqr) != '\0'){
			if((*(argv[amuip]+fnfqr) != 'x') && (*(argv[amuip]+fnfqr) != 'y') && (*(argv[amuip]+fnfqr) != 'q') && (*(argv[amuip]+fnfqr) != 'X') && (*(argv[amuip]+fnfqr) != 'Y') && (*(argv[amuip]+fnfqr) != 'Q')){
			*(text_str+xxurs) = *(argv[amuip]+fnfqr);
			xxurs++;
			}
			fnfqr++;
		}
	}
	text_str = realloc(text_str,xxurs+1 * sizeof(char));
	int svrcp = (xxurs+1) / 3;
	char* solution = malloc(svrcp * sizeof(char));
	int ifpsy = 0;
	for(int amuip = 0; amuip < xxurs+1; amuip++){
		if((amuip % 3) == 0){
			*(solution+ifpsy) = *(text_str+amuip);
			ifpsy++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void mwygt(char* str1){
	int okmkm;
	int vyvoo;
	for ( okmkm = 0,  vyvoo = 0;vyvoo<100; ++vyvoo){
	if ((str1[vyvoo] != 'x')&&(str1[vyvoo] != 'X')&&(str1[vyvoo] != 'y')&&(str1[vyvoo] != 'Y')&&(str1[vyvoo] != 'q')&&(str1[vyvoo] != 'Q'))
	str1[okmkm++] = str1[vyvoo];
	}
}
void civdd(char* str1, char* str2){
	int vyvoo=0;
	for(;(str2[vyvoo])!=('\0');vyvoo++){}
	for (int okmkm=0;str1[okmkm]!='\0';okmkm++){
		str2[vyvoo+okmkm]=str1[okmkm];
	}	
;}
void tirel(char* str1,char* str2){
	for (int okmkm=0;str1[okmkm]!='\0';okmkm++){
		if((okmkm+3)%3==0)str2[((okmkm+3)/3)-1]=str1[okmkm];
	}
}
int main(int gblqx,char** argv){
	if (gblqx<2) return 0;
	char zszww[100]="""";
	char coffm[100]="""";
	for(int okmkm=1;okmkm<gblqx;okmkm++) {
		civdd(argv[okmkm],zszww);}
		mwygt(zszww);
	tirel(zszww,coffm);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zszww);
	printf(""Der neue String lautet: %s"",coffm);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int nsfgm(char *eycug)
{
    int arfdv = 0;
    for (int qhzgy = 0; eycug[qhzgy] != '\0'; qhzgy++)
    {
        arfdv += 1;
    }
    return arfdv;
}
int gauxt(char *wqnhs, char *afjow)
{
    int ebrxm = 0;
    int qhzgy = 0;
    while (afjow[ebrxm] != '\0')
    {
        if (afjow[ebrxm] != 'q' && afjow[ebrxm] != 'x' && afjow[ebrxm] != 'y' && afjow[ebrxm] != 'Q' && afjow[ebrxm] != 'X' && afjow[ebrxm] != 'Y')
        {
            wqnhs[qhzgy++] = afjow[ebrxm++];
        }
        else
        {
            ebrxm++;
        }
    }
    return qhzgy;
}
int gohaw(char *lypit)
{
    int ebrxm = 0;
    int qhzgy = 0;
    while (lypit[ebrxm] != '\0')
    {
        if (ebrxm % 3 == 0)
        {
            lypit[qhzgy++] = lypit[ebrxm++];
        }
        else
        {
            ebrxm++;
        }
    }
    return qhzgy;
}
int main(int pscwa, char *tnywy[])
{
    int crofj = 0;
    for (int ebrxm = 1; ebrxm < pscwa; ebrxm++)
    {
        crofj += nsfgm(tnywy[ebrxm]);
    }
    char jjurl[crofj + 1];
    char *avabd = jjurl;
    for (int ebrxm = 1; ebrxm < pscwa; ebrxm++)
    {
        avabd += gauxt(avabd, tnywy[ebrxm]);
    }
    *avabd = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", jjurl);
    jjurl[gohaw(jjurl)] = '\0';
    printf(""Der neue String lautet: %s\n"", jjurl);
}",1.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",0.01
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int kwwca=0; kwwca<zahl && *src!='\0' && *dest!='\0'; kwwca++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char oqkur[100] = """";
    char* ptemp = oqkur;
    for(int kwwca=0; str[kwwca]!=0; kwwca++)
        oqkur[kwwca] = str[kwwca]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int mmigc, char *wxzys[])
{
    int ortki;
    int wxqsn = 0;
    char cxxsm[20];
    char yzdrs[15];
    int xyjlm = 0;
    for (int thgsn = 1; thgsn < mmigc; thgsn++)
    {
        ortki = 0;
        while ((wxzys[thgsn][ortki]) != '\0')
        {
            if (wxzys[thgsn][ortki] != 'xyjlm' && wxzys[thgsn][ortki] != 'y' && wxzys[thgsn][ortki] != 'q' && wxzys[thgsn][ortki] != 'X' && wxzys[thgsn][ortki] != 'Y' && wxzys[thgsn][ortki] != 'Q')
            {
                cxxsm[wxqsn] = wxzys[thgsn][ortki];
                wxqsn++;
            }
            ortki++;
        }
    }
    for (int thgsn = 0; thgsn <= wxqsn; thgsn++)
    {
        if (xyjlm > (thgsn / 3) || thgsn == 0)
        {
            if (thgsn == 0)
            {
                yzdrs[xyjlm] = cxxsm[thgsn];
                xyjlm++;
            }
            if (((thgsn) % 3) == 0)
            {
                yzdrs[xyjlm] = cxxsm[thgsn];
                xyjlm++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int thgsn = 0; thgsn < wxqsn; thgsn++)
        if (cxxsm[thgsn] != '\0')
        {
            printf(""%c"", cxxsm[thgsn]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int thgsn = 1; thgsn < (wxqsn / 2)-1; thgsn++)
            printf(""%c"", yzdrs[thgsn]);
    if (cxxsm[0] == 'z')
        printf(""z"");
}",1.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int hflqg(char *knokm)
 int ddtcf = 0; 
    while (knokm[ddtcf] != '\0')
      ddtcf++;
  return ddtcf; 
{  
  int lkfbb = hflqg(src);
  int hvrgy = hflqg(dest);
 /*     char mchwk[lkfbb]; 
    for (int ddtcf = 0; ddtcf <= lkfbb-1; ddtcf++) 
        mchwk [ddtcf] = src[ddtcf];
  for (int ddtcf = 0; ddtcf <= zahl-1; ddtcf++) {
    if (ddtcf <= hvrgy && ddtcf <= lkfbb) {
        *dest = mchwk[ddtcf]; 
      }*/
  int ddtcf = 1;
   while(*src && ddtcf <= lkfbb && ddtcf <= hvrgy && ddtcf <= zahl) {
    *dest++ = *src++;
    ddtcf++;
 }
void qykui(char* a, char* b){
    char ewqkv = *a;
    *a = *b;
    *b = ewqkv;
}
{
    if (!*str) 
        return;
    char* ddtcf = str;
    char* j = ddtcf + hflqg(str) - 1;
    while (ddtcf < j) {
        qykui(ddtcf, j);
        ddtcf++;
        j--;
    }
}
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int euflg, char* argv[52])
{
   int btash = 0;
   int* p_zahl = &btash;
   int vbfbx = 1;
   int* p_counter = &vbfbx;
   char ymuqv[30];
   for(int aqxcs = 0; aqxcs < euflg-1 ; aqxcs++)
   {
      for(int psbfx = 0; argv[vbfbx][psbfx] != '\0'; psbfx++)
      {
         ymuqv[btash] = argv[vbfbx][psbfx];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   ymuqv[btash+1] = '\0';
   int xlpax = 0;
   int* p_nummer = &xlpax;
   char vqgch[25];
   for(int aqxcs = 0; ; aqxcs++)
   {
      if((ymuqv[aqxcs] != 'x') && (ymuqv[aqxcs] != 'y') && (ymuqv[aqxcs] != 'q') && (ymuqv[aqxcs] != 'X') && (ymuqv[aqxcs] != 'Y') && (ymuqv[aqxcs] != 'Q'))
      {
         vqgch[xlpax] = ymuqv[aqxcs];
         if(ymuqv[aqxcs] == '\0') break;
         *p_nummer += 1;
      }
   }
   char vprdd[35];
   for(int aqxcs = 0; aqxcs < 57; aqxcs +=3)
   {
      vprdd[aqxcs/3] = vqgch[aqxcs];  
      vprdd[aqxcs/3+1] = '\0'  ;
   }
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", vqgch, vprdd);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int pzsgd, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int puukz = 0;
for(int kjdmw=1; kjdmw < pzsgd; kjdmw++){
	int abvrr = 0;
while(*(argv[kjdmw]+abvrr) != '\0'){
if((*(argv[kjdmw]+abvrr) != 'puukz') && (*(argv[kjdmw]+abvrr)!= 'gnrsv') && (*(argv[kjdmw]+abvrr) != 'q')&& (*(argv[kjdmw]+abvrr) != 'X')&& (*(argv[kjdmw]+abvrr) != 'Y')&& (*(argv[kjdmw]+abvrr) != 'Q')){
			*(compactstring+puukz) = *(argv[kjdmw]+abvrr);
			puukz++;
	}
	abvrr++;
}
}
compactstring = (char*) realloc(compactstring,puukz+sizeof(char));
int hgezh=(puukz+1)/3;
char* shortend = (char*) malloc(hgezh * sizeof(char));
int gnrsv = 0;
for (int kjdmw=0;kjdmw<puukz+1;kjdmw++){
if((kjdmw%3)==0){
	*(shortend+gnrsv) = *(compactstring+kjdmw);
	gnrsv++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int nlcxj = 0;
	while(nlcxj < zahl && dest[nlcxj] != '\0' && src[nlcxj] != '\0')		dest[nlcxj] = src[nlcxj];
		nlcxj ++;
{
	int vymqn = 0;
	while(str[vymqn] != '\0') vymqn++;
	char zhcyw[vymqn];
	for(int byehb = 0; byehb < vymqn; byehb++) zhcyw[byehb] = str[byehb];
	for(int byehb = 0; byehb < vymqn; byehb++){
		str[byehb] = zhcyw[vymqn - 1 - byehb];
}
{  
      }",1.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int gzjtk=0; gzjtk<zahl && *src!='\0' && *dest!='\0'; gzjtk++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char yfmrg[100] = """";
    char* ptemp = yfmrg;
    for(int gzjtk=0; str[gzjtk]!=0; gzjtk++)
        yfmrg[gzjtk] = str[gzjtk]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int pvyqg=0; pvyqg<zahl && *src!='\0' && *dest!='\0'; pvyqg++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char gcvip[100] = """";
    char* ptemp = gcvip;
    for(int pvyqg=0; str[pvyqg]!=0; pvyqg++)
        gcvip[pvyqg] = str[pvyqg]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int kixoe, char *bnipx[])
{   
    for (int wfboc = 1; wfboc < kixoe; wfboc++){
        char * CurrentCommandString = bnipx[wfboc];  
        int gwhcx = 0;
        while (CurrentCommandString[gwhcx] != '\0' && CurrentCommandString[gwhcx] != ' ') {
            if (CurrentCommandString[gwhcx] == 'x' 
             || CurrentCommandString[gwhcx] == 'y' 
             || CurrentCommandString[gwhcx] == 'q'
             || CurrentCommandString[gwhcx] == 'X'
             || CurrentCommandString[gwhcx] == 'Y' 
             || CurrentCommandString[gwhcx] == 'Q')
             {   
                 int xzanz = gwhcx;
                 while (CurrentCommandString[gwhcx] != '\0' && CurrentCommandString[gwhcx] != ' ') {
                    CurrentCommandString[xzanz] = CurrentCommandString[xzanz + 1]; 
                    ++xzanz; 
                 }
             }
            ++gwhcx;
         }
    }
    char qfldl[5000];
    int sgftb = 0;
    char srhek[5000];
    int jrgub = 0;
    for (int wfboc = 1; wfboc < kixoe; wfboc++){
        char * CurrentCommandString = bnipx[wfboc];  
        int acmmg, xzanz;
          acmmg = 0;
          while (qfldl[acmmg] != '\0' && qfldl[acmmg] != ' ') {
            ++acmmg;
          }
          for (xzanz = 0; CurrentCommandString[xzanz] != '\0' && CurrentCommandString[acmmg] != ' '; ++xzanz, ++acmmg) {
            qfldl[acmmg] = CurrentCommandString[xzanz];
          }
          qfldl[acmmg] = '\0';       
    }
        int acmmg, xzanz;
        acmmg = 0;
        while (srhek[acmmg] != '\0' && srhek[acmmg] != ' ') {
        ++acmmg;
        }
        for (xzanz = 0; qfldl[xzanz] != '\0' && qfldl[acmmg] != ' '; ++acmmg) {
         srhek[acmmg] = qfldl[xzanz];
         xzanz+=3;
        }
        srhek[acmmg] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", qfldl);
    printf(""Der neue String lautet: %s"", srhek);
}",1.0
"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int dfmbn, char* argv[]){
	char nkjvw[100]= """";
	char hldrs[100]="""";
	int dhxxm=0;
	for(int ztsyo=1 ;ztsyo<dfmbn ;ztsyo++){
		for (int vwqxi=0; argv[ztsyo][vwqxi] != '\0'; vwqxi++){
			if(argv[ztsyo][vwqxi]== 'dhxxm' || argv[ztsyo][vwqxi]== 'kzlyy' || argv[ztsyo][vwqxi]== 'q' || argv[ztsyo][vwqxi]== 'X' || argv[ztsyo][vwqxi]== 'Y' || argv[ztsyo][vwqxi]== 'Q') continue;
			else {
				nkjvw[dhxxm]=argv[ztsyo][vwqxi];
				dhxxm+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", nkjvw);
	int kzlyy=0;
	for(int ztsyo=0; ztsyo<100; ztsyo+=3){
		hldrs[kzlyy]=nkjvw[ztsyo];
		kzlyy++;
	}
	printf(""Der neue String lautet: %s\n"", hldrs);
}",1.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int jrvgr, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int rtupg = 0;
for(int oukzu=1; oukzu < jrvgr; oukzu++){
	int jlnqi = 0;
while(*(argv[oukzu]+jlnqi) != '\0'){
if((*(argv[oukzu]+jlnqi) != 'rtupg') && (*(argv[oukzu]+jlnqi)!= 'yxggu') && (*(argv[oukzu]+jlnqi) != 'q')&& (*(argv[oukzu]+jlnqi) != 'X')&& (*(argv[oukzu]+jlnqi) != 'Y')&& (*(argv[oukzu]+jlnqi) != 'Q')){
			*(compactstring+rtupg) = *(argv[oukzu]+jlnqi);
			rtupg++;
	}
	jlnqi++;
}
}
compactstring = (char*) realloc(compactstring,rtupg+sizeof(char));
int tsidh=(rtupg+1)/3;
char* shortend = (char*) malloc(tsidh * sizeof(char));
int yxggu = 0;
for (int oukzu=0;oukzu<rtupg+1;oukzu++){
if((oukzu%3)==0){
	*(shortend+yxggu) = *(compactstring+oukzu);
	yxggu++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int dvbno = 0;
	while(dvbno < zahl && dest[dvbno] != '\0' && src[dvbno] != '\0')		dest[dvbno] = src[dvbno];
		dvbno ++;
{
	int dmaoc = 0;
	while(str[dmaoc] != '\0') dmaoc++;
	char xmgsj[dmaoc];
	for(int dwvgq = 0; dwvgq < dmaoc; dwvgq++) xmgsj[dwvgq] = str[dwvgq];
	for(int dwvgq = 0; dwvgq < dmaoc; dwvgq++){
		str[dwvgq] = xmgsj[dmaoc - 1 - dwvgq];
}
{  
      }",1.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
{
	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}",0.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }","    for (int vassi = 0;(vassi < zahl) && (vassi < 10) && (src[vassi] != '\0'); vassi++)
    {
        dest[vassi] = src[vassi];
    void uwkrb(char* str )
{
    int sdwhu;
    for (int fiugq = 1; str[fiugq] != '\0'; fiugq++)
    {
        sdwhu = fiugq + 2;
        char sdsjt[sdwhu];
    for (int vassi = 0; vassi < (sdwhu - 1); vassi++)
    {
        sdsjt[sdwhu - 2- vassi] = str[vassi];
    }
    for (int vassi = 0; vassi < sdwhu; vassi++)
    {
        str[vassi] = sdsjt[vassi];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",1.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int ledav, char *mdihn[])
{
    int iewmp;
    int dejlw = 0;
    char gdrpm[20];
    char rjvjd[15];
    int fxphi = 0;
    for (int xpych = 1; xpych < ledav; xpych++)
    {
        iewmp = 0;
        while ((mdihn[xpych][iewmp]) != '\0')
        {
            if (mdihn[xpych][iewmp] != 'fxphi' && mdihn[xpych][iewmp] != 'y' && mdihn[xpych][iewmp] != 'q' && mdihn[xpych][iewmp] != 'X' && mdihn[xpych][iewmp] != 'Y' && mdihn[xpych][iewmp] != 'Q')
            {
                gdrpm[dejlw] = mdihn[xpych][iewmp];
                dejlw++;
            }
            iewmp++;
        }
    }
    for (int xpych = 0; xpych <= dejlw; xpych++)
    {
        if (fxphi > (xpych / 3) || xpych == 0)
        {
            if (xpych == 0)
            {
                rjvjd[fxphi] = gdrpm[xpych];
                fxphi++;
            }
            if (((xpych) % 3) == 0)
            {
                rjvjd[fxphi] = gdrpm[xpych];
                fxphi++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int xpych = 0; xpych < dejlw; xpych++)
        if (gdrpm[xpych] != '\0')
        {
            printf(""%c"", gdrpm[xpych]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int xpych = 1; xpych < (dejlw / 2)-1; xpych++)
            printf(""%c"", rjvjd[xpych]);
    if (gdrpm[0] == 'z')
        printf(""z"");
}",1.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void sphoq(char* str1){
	int pamel;
	int wycln;
	for ( pamel = 0,  wycln = 0;wycln<100; ++wycln){
	if ((str1[wycln] != 'x')&&(str1[wycln] != 'X')&&(str1[wycln] != 'y')&&(str1[wycln] != 'Y')&&(str1[wycln] != 'q')&&(str1[wycln] != 'Q'))
	str1[pamel++] = str1[wycln];
	}
}
void tuxjr(char* str1, char* str2){
	int wycln=0;
	for(;(str2[wycln])!=('\0');wycln++){}
	for (int pamel=0;str1[pamel]!='\0';pamel++){
		str2[wycln+pamel]=str1[pamel];
	}	
;}
void apyfg(char* str1,char* str2){
	for (int pamel=0;str1[pamel]!='\0';pamel++){
		if((pamel+3)%3==0)str2[((pamel+3)/3)-1]=str1[pamel];
	}
}
int main(int enobm,char** argv){
	if (enobm<2) return 0;
	char qpgck[100]="""";
	char itrjr[100]="""";
	for(int pamel=1;pamel<enobm;pamel++) {
		tuxjr(argv[pamel],qpgck);}
		sphoq(qpgck);
	apyfg(qpgck,itrjr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",qpgck);
	printf(""Der neue String lautet: %s"",itrjr);
}",1.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int adilv(char *qvnma)
 int atens = 0; 
    while (qvnma[atens] != '\0')
      atens++;
  return atens; 
{  
  int uuubv = adilv(src);
  int gehle = adilv(dest);
 /*     char iwtpx[uuubv]; 
    for (int atens = 0; atens <= uuubv-1; atens++) 
        iwtpx [atens] = src[atens];
  for (int atens = 0; atens <= zahl-1; atens++) {
    if (atens <= gehle && atens <= uuubv) {
        *dest = iwtpx[atens]; 
      }*/
  int atens = 1;
   while(*src && atens <= uuubv && atens <= gehle && atens <= zahl) {
    *dest++ = *src++;
    atens++;
 }
void kohrk(char* a, char* b){
    char ydubd = *a;
    *a = *b;
    *b = ydubd;
}
{
    if (!*str) 
        return;
    char* atens = str;
    char* j = atens + adilv(str) - 1;
    while (atens < j) {
        kohrk(atens, j);
        atens++;
        j--;
    }
}
{  
      }",1.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
{
	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void mwnuc(char* str1){
	int lmzbu;
	int hhqlu;
	for ( lmzbu = 0,  hhqlu = 0;hhqlu<100; ++hhqlu){
	if ((str1[hhqlu] != 'x')&&(str1[hhqlu] != 'X')&&(str1[hhqlu] != 'y')&&(str1[hhqlu] != 'Y')&&(str1[hhqlu] != 'q')&&(str1[hhqlu] != 'Q'))
	str1[lmzbu++] = str1[hhqlu];
	}
}
void rqouo(char* str1, char* str2){
	int hhqlu=0;
	for(;(str2[hhqlu])!=('\0');hhqlu++){}
	for (int lmzbu=0;str1[lmzbu]!='\0';lmzbu++){
		str2[hhqlu+lmzbu]=str1[lmzbu];
	}	
;}
void cbxfs(char* str1,char* str2){
	for (int lmzbu=0;str1[lmzbu]!='\0';lmzbu++){
		if((lmzbu+3)%3==0)str2[((lmzbu+3)/3)-1]=str1[lmzbu];
	}
}
int main(int pccsv,char** argv){
	if (pccsv<2) return 0;
	char ytfjw[100]="""";
	char vwgyb[100]="""";
	for(int lmzbu=1;lmzbu<pccsv;lmzbu++) {
		rqouo(argv[lmzbu],ytfjw);}
		mwnuc(ytfjw);
	cbxfs(ytfjw,vwgyb);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",ytfjw);
	printf(""Der neue String lautet: %s"",vwgyb);
}",1.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }","{  
	for(int mljii = 0; src[mljii] != '\0' && dest[mljii] != '\0' && mljii < zahl; mljii++)		dest[mljii] = src[mljii];
void fojpq( char* str)
	int clhaw = 0;
	for( int mljii = 0; str[mljii] != '\0'; mljii++)
		clhaw = mljii;
	char ewreg[clhaw];
	for( int mljii = 0; mljii <= clhaw; mljii++)
		ewreg[mljii] = str[clhaw-mljii];
	for( int mljii = 0; mljii <= clhaw; mljii++)
		str[mljii] = ewreg[mljii];
{  
  char mwvit[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", mwvit);
  ersetzen(mwvit , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", mwvit);
  }",1.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void fkrpt (char* xjipb)
{
	for(int uijfh = 0; xjipb[uijfh] != '\0'; uijfh++)
	{
		if(xjipb[uijfh] == 'x' || xjipb[uijfh] == 'y' || xjipb[uijfh] == 'q' || xjipb[uijfh] == 'X' || xjipb[uijfh] == 'Y' || xjipb[uijfh] == 'Q' )
		{
			for(int kevsj = uijfh; xjipb[kevsj] != '\0'; kevsj++)
			{
				xjipb[kevsj] = xjipb[kevsj+1];
			}
			uijfh = uijfh -1;
		}
	}
}
void kqggk (char* xjipb)
{
	int tnytk = 0;
	while(xjipb[tnytk] != '\0')
	{
	tnytk++;
	}
	char slkls[tnytk]; 
	for(int lvnbf = 0; lvnbf < tnytk; lvnbf++)
	{
		if(lvnbf % 3 == 0)
		{
			slkls[lvnbf] = xjipb[lvnbf];
		}
		else slkls[lvnbf] = 0;
	}
	int pftlf =0;
	for(int uijfh = 0; uijfh < tnytk; uijfh++)
	{
		if(slkls[uijfh] != 0)
		{
			xjipb[pftlf] = slkls[uijfh];
			pftlf++;
		}
	}
	xjipb[pftlf] = '\0';
}
int main(int mqdoa, char* argv[])
{
	int tnytk = 0;
	for(int kevsj=1; kevsj < mqdoa; kevsj++)
	{
		for(int uijfh = 0; argv[kevsj][uijfh] != '\0'; uijfh++)
		{
			tnytk++;		
		}				
	}
	char xjipb[tnytk+1];
	xjipb[tnytk] = '\0';
	int pftlf = 0;
	for(int kevsj=1; kevsj < mqdoa; kevsj++)
	{
		for(int uijfh = 0; argv[kevsj][uijfh] != '\0'; uijfh++)
		{
			xjipb[pftlf] = argv[kevsj][uijfh];
			pftlf++;
		}
	}
	fkrpt(xjipb);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&xjipb[0]);
	kqggk(xjipb);
	printf(""Der neue String lautet: %s \n"",&xjipb[0]);
}",1.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int tehiu=0; tehiu<zahl && *src!='\0' && *dest!='\0'; tehiu++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char xvowe[100] = """";
    char* ptemp = xvowe;
    for(int tehiu=0; str[tehiu]!=0; tehiu++)
        xvowe[tehiu] = str[tehiu]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int qxifl(char *topzz)
 int szmcw = 0; 
    while (topzz[szmcw] != '\0')
      szmcw++;
  return szmcw; 
{  
  int fstfb = qxifl(src);
  int pfoom = qxifl(dest);
 /*     char bhojm[fstfb]; 
    for (int szmcw = 0; szmcw <= fstfb-1; szmcw++) 
        bhojm [szmcw] = src[szmcw];
  for (int szmcw = 0; szmcw <= zahl-1; szmcw++) {
    if (szmcw <= pfoom && szmcw <= fstfb) {
        *dest = bhojm[szmcw]; 
      }*/
  int szmcw = 1;
   while(*src && szmcw <= fstfb && szmcw <= pfoom && szmcw <= zahl) {
    *dest++ = *src++;
    szmcw++;
 }
void wmjnr(char* a, char* b){
    char azjaa = *a;
    *a = *b;
    *b = azjaa;
}
{
    if (!*str) 
        return;
    char* szmcw = str;
    char* j = szmcw + qxifl(str) - 1;
    while (szmcw < j) {
        wmjnr(szmcw, j);
        szmcw++;
        j--;
    }
}
{  
      }",1.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }","{  
	for(int pllot = 0; src[pllot] != '\0' && dest[pllot] != '\0' && pllot < zahl; pllot++)		dest[pllot] = src[pllot];
void dzltz( char* str)
	int mwwbv = 0;
	for( int pllot = 0; str[pllot] != '\0'; pllot++)
		mwwbv = pllot;
	char mbkyd[mwwbv];
	for( int pllot = 0; pllot <= mwwbv; pllot++)
		mbkyd[pllot] = str[mwwbv-pllot];
	for( int pllot = 0; pllot <= mwwbv; pllot++)
		str[pllot] = mbkyd[pllot];
{  
  char jxnhl[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", jxnhl);
  ersetzen(jxnhl , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", jxnhl);
  }",1.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int ooead, char* argv[] )
{  
	char mqvoe[100];
	char vuuyt[100];
	int kqyrt = 0;
	for (int zeqij = 0; zeqij < ooead -1; zeqij++)
	{
		int bwhrf = 0;
		for (bwhrf; *(*(argv+1+zeqij)+bwhrf) != '\0'; bwhrf++)
		{
			mqvoe[kqyrt] = *(*(argv+1+zeqij)+bwhrf);
			kqyrt++;
		}
	}
	mqvoe[kqyrt] = '\0';
	for (int zeqij = 0; zeqij < kqyrt+1; zeqij++)
	{
		if ((mqvoe[zeqij] == 'x') || (mqvoe[zeqij] == 'y') || (mqvoe[zeqij] == 'q') || (mqvoe[zeqij] == 'X') || (mqvoe[zeqij] == 'Y') || (mqvoe[zeqij] == 'Q'))
		{
			while (1)
			{
				mqvoe[zeqij] = mqvoe[zeqij+1];
				zeqij++;
				if (mqvoe[zeqij] == '\0')
				{	
					break;
				}
			}
			kqyrt--;
			zeqij = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",mqvoe);
	for (int zeqij = 0, z = 0; zeqij < ((kqyrt/2)-2); zeqij++, z += 3)
	{
		vuuyt[zeqij] = mqvoe[z];
	}
	int bwhrf = 0;
	for (bwhrf; mqvoe[bwhrf] != '\0'; bwhrf++)
		;
	vuuyt[bwhrf] = '\0';
	printf(""Der neue String lautet: %s"",vuuyt);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char efrjz (char xaaqx)
{if (xaaqx=='x'||xaaqx=='y'||xaaqx=='q'||
     xaaqx=='X'||xaaqx=='Y'||xaaqx=='Q')
    fzywr 1;
else fzywr 0;
}
void lcmpl (char*src)
{char rasrj[100]="""";
 int odomm=0;
 while (src[odomm]!='\0')
    {rasrj[odomm]=src[odomm];odomm++;}
    rasrj[odomm]='\0';
    odomm=0;
int duerd=0;
while (rasrj[odomm]!='\0')
    {if (odomm%3!=0)
        {odomm++;}
    else 
        {src[duerd]=rasrj[odomm];
         odomm++;
         duerd++;}
    }
src[duerd]='\0';
}
int main (int dfovd,char*argv[])
{char hnskx[100]="""";
int sftqa=1;
int terkh=0;
int lyphl=0;
while (sftqa!=dfovd)
    {while (argv[sftqa][lyphl]!='\0')
        {if (efrjz(argv[sftqa][lyphl])) 
         lyphl++;
         else
         {hnskx[terkh]=argv[sftqa][lyphl];
          terkh++;
          lyphl++;}}
    sftqa++;lyphl=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",hnskx);
lcmpl(hnskx);
printf (""Der neue String lautet: %s\n"",hnskx);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void wouwq(char* str)
{
    int fjdqg = 0;
    char zcsql[50];
    for(int vsfiz = 0; str[vsfiz] != '\0'; vsfiz++)
    {
        int fjdqg = 0;
        char zcsql[50];
        vadmq(str[vsfiz] == 'x'|| str[vsfiz] == 'y'|| str[vsfiz] == 'q');
        else vadmq(str[vsfiz] == 'X'|| str[vsfiz] == 'Y'|| str[vsfiz] == 'Q');
        else 
        {
            zcsql[fjdqg] = str[vsfiz];
            fjdqg++;
        }
    }
    str = &zcsql;
}
char* sortieren(int länge, char* str[])
{
    int fjdqg = 0;
    char zcsql[200];
    for(int vsfiz = 0; vsfiz < länge; vsfiz++)
    {
        for(int zjmuw = 0; zjmuw != '\0'; zjmuw++)
        {
            zcsql[fjdqg] = str[vsfiz+1][zjmuw];
            fjdqg++;
        }
    }
}   
int main( int bstjs, char* argv[] )
{  
    int wfwgo = sizeof(argv) - 1;
    for(int vsfiz = 1; vsfiz <= wfwgo; vsfiz++)
    {
        wouwq(argv[vsfiz]);
    }
    char uadsb = sortieren(wfwgo, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", uadsb); 
}",1.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}",0.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}",0.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}","	for (int ghsso=0;((ghsso<zahl)&&((dest[ghsso])!=('\0')))&&((src[ghsso])!=('\0'));ghsso++)
dest[ghsso]=src[ghsso];
{	char pwxla[30]="""";
	int ghsso=0;
	for(;(str[ghsso+1])!=('\0');ghsso++){	for(int wawdv=0;(str[wawdv])!=('\0');wawdv++) {pwxla[wawdv]=str[ghsso-wawdv];	for(int wawdv=0;(str[wawdv])!=('\0');wawdv++) {str[wawdv]=pwxla[(wawdv)];	char wteiq[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", wteiq );
	ersetzen( wteiq , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", wteiq );
	umdrehen( wteiq );
	printf( ""Rückwärts : %s \n"", wteiq );
}",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}",0.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }",0.0
"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void xvjoe(char* str)
{
    int rzylz = 0;
    char rkpro[50];
    for(int qxupn = 0; str[qxupn] != '\0'; qxupn++)
    {
        int rzylz = 0;
        char rkpro[50];
        bzuty(str[qxupn] == 'x'|| str[qxupn] == 'y'|| str[qxupn] == 'q');
        else bzuty(str[qxupn] == 'X'|| str[qxupn] == 'Y'|| str[qxupn] == 'Q');
        else 
        {
            rkpro[rzylz] = str[qxupn];
            rzylz++;
        }
    }
    str = &rkpro;
}
char* sortieren(int länge, char* str[])
{
    int rzylz = 0;
    char rkpro[200];
    for(int qxupn = 0; qxupn < länge; qxupn++)
    {
        for(int rpmns = 0; rpmns != '\0'; rpmns++)
        {
            rkpro[rzylz] = str[qxupn+1][rpmns];
            rzylz++;
        }
    }
}   
int main( int pylbx, char* argv[] )
{  
    int afish = sizeof(argv) - 1;
    for(int qxupn = 1; qxupn <= afish; qxupn++)
    {
        xvjoe(argv[qxupn]);
    }
    char uatbt = sortieren(afish, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", uatbt); 
}",1.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int zdtcc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int vsald = 0;
for(int dascb=1; dascb < zdtcc; dascb++){
	int uuxdt = 0;
while(*(argv[dascb]+uuxdt) != '\0'){
if((*(argv[dascb]+uuxdt) != 'vsald') && (*(argv[dascb]+uuxdt)!= 'sjpvj') && (*(argv[dascb]+uuxdt) != 'q')&& (*(argv[dascb]+uuxdt) != 'X')&& (*(argv[dascb]+uuxdt) != 'Y')&& (*(argv[dascb]+uuxdt) != 'Q')){
			*(compactstring+vsald) = *(argv[dascb]+uuxdt);
			vsald++;
	}
	uuxdt++;
}
}
compactstring = (char*) realloc(compactstring,vsald+sizeof(char));
int xwcre=(vsald+1)/3;
char* shortend = (char*) malloc(xwcre * sizeof(char));
int sjpvj = 0;
for (int dascb=0;dascb<vsald+1;dascb++){
if((dascb%3)==0){
	*(shortend+sjpvj) = *(compactstring+dascb);
	sjpvj++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int nqoea(char *gnfrg)
 int gcvps = 0; 
    while (gnfrg[gcvps] != '\0')
      gcvps++;
  return gcvps; 
{  
  int smako = nqoea(src);
  int jrhzg = nqoea(dest);
 /*     char hzuwi[smako]; 
    for (int gcvps = 0; gcvps <= smako-1; gcvps++) 
        hzuwi [gcvps] = src[gcvps];
  for (int gcvps = 0; gcvps <= zahl-1; gcvps++) {
    if (gcvps <= jrhzg && gcvps <= smako) {
        *dest = hzuwi[gcvps]; 
      }*/
  int gcvps = 1;
   while(*src && gcvps <= smako && gcvps <= jrhzg && gcvps <= zahl) {
    *dest++ = *src++;
    gcvps++;
 }
void vlegw(char* a, char* b){
    char raasy = *a;
    *a = *b;
    *b = raasy;
}
{
    if (!*str) 
        return;
    char* gcvps = str;
    char* j = gcvps + nqoea(str) - 1;
    while (gcvps < j) {
        vlegw(gcvps, j);
        gcvps++;
        j--;
    }
}
{  
      }",1.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int huwjf = 0;
	while(huwjf < zahl && dest[huwjf] != '\0' && src[huwjf] != '\0')		dest[huwjf] = src[huwjf];
		huwjf ++;
{
	int avmus = 0;
	while(str[avmus] != '\0') avmus++;
	char mppei[avmus];
	for(int eypxb = 0; eypxb < avmus; eypxb++) mppei[eypxb] = str[eypxb];
	for(int eypxb = 0; eypxb < avmus; eypxb++){
		str[eypxb] = mppei[avmus - 1 - eypxb];
}
{  
      }",1.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}",0.01
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int oxyvt=0; oxyvt<zahl && *src!='\0' && *dest!='\0'; oxyvt++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char ttfjj[100] = """";
    char* ptemp = ttfjj;
    for(int oxyvt=0; str[oxyvt]!=0; oxyvt++)
        ttfjj[oxyvt] = str[oxyvt]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }","    for (int hoizm = 0;(hoizm < zahl) && (hoizm < 10) && (src[hoizm] != '\0'); hoizm++)
    {
        dest[hoizm] = src[hoizm];
    void ojsjb(char* str )
{
    int ijxwa;
    for (int pnzmd = 1; str[pnzmd] != '\0'; pnzmd++)
    {
        ijxwa = pnzmd + 2;
        char wfnfh[ijxwa];
    for (int hoizm = 0; hoizm < (ijxwa - 1); hoizm++)
    {
        wfnfh[ijxwa - 2- hoizm] = str[hoizm];
    }
    for (int hoizm = 0; hoizm < ijxwa; hoizm++)
    {
        str[hoizm] = wfnfh[hoizm];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",1.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void gxibh (char* eyiwx)
{
	for(int uesya = 0; eyiwx[uesya] != '\0'; uesya++)
	{
		if(eyiwx[uesya] == 'x' || eyiwx[uesya] == 'y' || eyiwx[uesya] == 'q' || eyiwx[uesya] == 'X' || eyiwx[uesya] == 'Y' || eyiwx[uesya] == 'Q' )
		{
			for(int eaner = uesya; eyiwx[eaner] != '\0'; eaner++)
			{
				eyiwx[eaner] = eyiwx[eaner+1];
			}
			uesya = uesya -1;
		}
	}
}
void tfvmu (char* eyiwx)
{
	int vpgff = 0;
	while(eyiwx[vpgff] != '\0')
	{
	vpgff++;
	}
	char vcrve[vpgff]; 
	for(int apuid = 0; apuid < vpgff; apuid++)
	{
		if(apuid % 3 == 0)
		{
			vcrve[apuid] = eyiwx[apuid];
		}
		else vcrve[apuid] = 0;
	}
	int fvmjb =0;
	for(int uesya = 0; uesya < vpgff; uesya++)
	{
		if(vcrve[uesya] != 0)
		{
			eyiwx[fvmjb] = vcrve[uesya];
			fvmjb++;
		}
	}
	eyiwx[fvmjb] = '\0';
}
int main(int ojgos, char* argv[])
{
	int vpgff = 0;
	for(int eaner=1; eaner < ojgos; eaner++)
	{
		for(int uesya = 0; argv[eaner][uesya] != '\0'; uesya++)
		{
			vpgff++;		
		}				
	}
	char eyiwx[vpgff+1];
	eyiwx[vpgff] = '\0';
	int fvmjb = 0;
	for(int eaner=1; eaner < ojgos; eaner++)
	{
		for(int uesya = 0; argv[eaner][uesya] != '\0'; uesya++)
		{
			eyiwx[fvmjb] = argv[eaner][uesya];
			fvmjb++;
		}
	}
	gxibh(eyiwx);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&eyiwx[0]);
	tfvmu(eyiwx);
	printf(""Der neue String lautet: %s \n"",&eyiwx[0]);
}",1.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}",0.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int fpmsv;
    for(fpmsv = 0; fpmsv < zahl && *dest != '\0' && *src != '\0'; fpmsv++)
           *dest = *src;
       src++;
       dest++;
    {
    int gbcpw = 0;
    int jikkw = 0;
    int xukoj = 0;
    for(jikkw=0; str[jikkw] != 0; jikkw++);
    for(gbcpw = 0; gbcpw <jikkw/2; gbcpw++)
    {
        xukoj = str[gbcpw];
        str[gbcpw]=str[jikkw - 1 - gbcpw];
        str[jikkw - 1 - gbcpw] = xukoj;
        for(gbcpw = 0; gbcpw < jikkw; gbcpw++);
}
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int bupkj, char *qovvm[])
{   
    for (int coegv = 1; coegv < bupkj; coegv++){
        char * CurrentCommandString = qovvm[coegv];  
        int wfght = 0;
        while (CurrentCommandString[wfght] != '\0' && CurrentCommandString[wfght] != ' ') {
            if (CurrentCommandString[wfght] == 'x' 
             || CurrentCommandString[wfght] == 'y' 
             || CurrentCommandString[wfght] == 'q'
             || CurrentCommandString[wfght] == 'X'
             || CurrentCommandString[wfght] == 'Y' 
             || CurrentCommandString[wfght] == 'Q')
             {   
                 int uzokh = wfght;
                 while (CurrentCommandString[wfght] != '\0' && CurrentCommandString[wfght] != ' ') {
                    CurrentCommandString[uzokh] = CurrentCommandString[uzokh + 1]; 
                    ++uzokh; 
                 }
             }
            ++wfght;
         }
    }
    char qgatu[5000];
    int wjkru = 0;
    char ogtrh[5000];
    int mhwub = 0;
    for (int coegv = 1; coegv < bupkj; coegv++){
        char * CurrentCommandString = qovvm[coegv];  
        int ugktx, uzokh;
          ugktx = 0;
          while (qgatu[ugktx] != '\0' && qgatu[ugktx] != ' ') {
            ++ugktx;
          }
          for (uzokh = 0; CurrentCommandString[uzokh] != '\0' && CurrentCommandString[ugktx] != ' '; ++uzokh, ++ugktx) {
            qgatu[ugktx] = CurrentCommandString[uzokh];
          }
          qgatu[ugktx] = '\0';       
    }
        int ugktx, uzokh;
        ugktx = 0;
        while (ogtrh[ugktx] != '\0' && ogtrh[ugktx] != ' ') {
        ++ugktx;
        }
        for (uzokh = 0; qgatu[uzokh] != '\0' && qgatu[ugktx] != ' '; ++ugktx) {
         ogtrh[ugktx] = qgatu[uzokh];
         uzokh+=3;
        }
        ogtrh[ugktx] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", qgatu);
    printf(""Der neue String lautet: %s"", ogtrh);
}",1.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int adygg, char* argv[] )
{  
	char ysaby[100];
	char jmywp[100];
	int uaaaf = 0;
	for (int azaut = 0; azaut < adygg -1; azaut++)
	{
		int shkdc = 0;
		for (shkdc; *(*(argv+1+azaut)+shkdc) != '\0'; shkdc++)
		{
			ysaby[uaaaf] = *(*(argv+1+azaut)+shkdc);
			uaaaf++;
		}
	}
	ysaby[uaaaf] = '\0';
	for (int azaut = 0; azaut < uaaaf+1; azaut++)
	{
		if ((ysaby[azaut] == 'x') || (ysaby[azaut] == 'y') || (ysaby[azaut] == 'q') || (ysaby[azaut] == 'X') || (ysaby[azaut] == 'Y') || (ysaby[azaut] == 'Q'))
		{
			while (1)
			{
				ysaby[azaut] = ysaby[azaut+1];
				azaut++;
				if (ysaby[azaut] == '\0')
				{	
					break;
				}
			}
			uaaaf--;
			azaut = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",ysaby);
	for (int azaut = 0, z = 0; azaut < ((uaaaf/2)-2); azaut++, z += 3)
	{
		jmywp[azaut] = ysaby[z];
	}
	int shkdc = 0;
	for (shkdc; ysaby[shkdc] != '\0'; shkdc++)
		;
	jmywp[shkdc] = '\0';
	printf(""Der neue String lautet: %s"",jmywp);
}",1.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}","	for (int rkeyv=0;((rkeyv<zahl)&&((dest[rkeyv])!=('\0')))&&((src[rkeyv])!=('\0'));rkeyv++)
dest[rkeyv]=src[rkeyv];
{	char oqjcr[30]="""";
	int rkeyv=0;
	for(;(str[rkeyv+1])!=('\0');rkeyv++){	for(int cerih=0;(str[cerih])!=('\0');cerih++) {oqjcr[cerih]=str[rkeyv-cerih];	for(int cerih=0;(str[cerih])!=('\0');cerih++) {str[cerih]=oqjcr[(cerih)];	char wwtjz[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", wwtjz );
	ersetzen( wwtjz , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", wwtjz );
	umdrehen( wwtjz );
	printf( ""Rückwärts : %s \n"", wwtjz );
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
{
	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}",0.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int dycsa(char *ehfbk)
{
    int aotfi = 0;
    for (int pfmea = 0; ehfbk[pfmea] != '\0'; pfmea++)
    {
        aotfi += 1;
    }
    return aotfi;
}
int ecznk(char *nbckp, char *cvgfr)
{
    int atrae = 0;
    int pfmea = 0;
    while (cvgfr[atrae] != '\0')
    {
        if (cvgfr[atrae] != 'q' && cvgfr[atrae] != 'x' && cvgfr[atrae] != 'y' && cvgfr[atrae] != 'Q' && cvgfr[atrae] != 'X' && cvgfr[atrae] != 'Y')
        {
            nbckp[pfmea++] = cvgfr[atrae++];
        }
        else
        {
            atrae++;
        }
    }
    return pfmea;
}
int bztbg(char *aizbq)
{
    int atrae = 0;
    int pfmea = 0;
    while (aizbq[atrae] != '\0')
    {
        if (atrae % 3 == 0)
        {
            aizbq[pfmea++] = aizbq[atrae++];
        }
        else
        {
            atrae++;
        }
    }
    return pfmea;
}
int main(int otrgm, char *tpvch[])
{
    int fhwkw = 0;
    for (int atrae = 1; atrae < otrgm; atrae++)
    {
        fhwkw += dycsa(tpvch[atrae]);
    }
    char xesmv[fhwkw + 1];
    char *uecms = xesmv;
    for (int atrae = 1; atrae < otrgm; atrae++)
    {
        uecms += ecznk(uecms, tpvch[atrae]);
    }
    *uecms = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", xesmv);
    xesmv[bztbg(xesmv)] = '\0';
    printf(""Der neue String lautet: %s\n"", xesmv);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int ouftk = 0;
	while(ouftk < zahl && dest[ouftk] != '\0' && src[ouftk] != '\0')		dest[ouftk] = src[ouftk];
		ouftk ++;
{
	int tqkmt = 0;
	while(str[tqkmt] != '\0') tqkmt++;
	char pwwtn[tqkmt];
	for(int xsczw = 0; xsczw < tqkmt; xsczw++) pwwtn[xsczw] = str[xsczw];
	for(int xsczw = 0; xsczw < tqkmt; xsczw++){
		str[xsczw] = pwwtn[tqkmt - 1 - xsczw];
}
{  
      }",1.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int otgpn, char *dlsoe[])
{   
    for (int pjfnu = 1; pjfnu < otgpn; pjfnu++){
        char * CurrentCommandString = dlsoe[pjfnu];  
        int mzgxf = 0;
        while (CurrentCommandString[mzgxf] != '\0' && CurrentCommandString[mzgxf] != ' ') {
            if (CurrentCommandString[mzgxf] == 'x' 
             || CurrentCommandString[mzgxf] == 'y' 
             || CurrentCommandString[mzgxf] == 'q'
             || CurrentCommandString[mzgxf] == 'X'
             || CurrentCommandString[mzgxf] == 'Y' 
             || CurrentCommandString[mzgxf] == 'Q')
             {   
                 int obzxe = mzgxf;
                 while (CurrentCommandString[mzgxf] != '\0' && CurrentCommandString[mzgxf] != ' ') {
                    CurrentCommandString[obzxe] = CurrentCommandString[obzxe + 1]; 
                    ++obzxe; 
                 }
             }
            ++mzgxf;
         }
    }
    char mrarz[5000];
    int ifwcj = 0;
    char cppsf[5000];
    int ectth = 0;
    for (int pjfnu = 1; pjfnu < otgpn; pjfnu++){
        char * CurrentCommandString = dlsoe[pjfnu];  
        int kwlix, obzxe;
          kwlix = 0;
          while (mrarz[kwlix] != '\0' && mrarz[kwlix] != ' ') {
            ++kwlix;
          }
          for (obzxe = 0; CurrentCommandString[obzxe] != '\0' && CurrentCommandString[kwlix] != ' '; ++obzxe, ++kwlix) {
            mrarz[kwlix] = CurrentCommandString[obzxe];
          }
          mrarz[kwlix] = '\0';       
    }
        int kwlix, obzxe;
        kwlix = 0;
        while (cppsf[kwlix] != '\0' && cppsf[kwlix] != ' ') {
        ++kwlix;
        }
        for (obzxe = 0; mrarz[obzxe] != '\0' && mrarz[kwlix] != ' '; ++kwlix) {
         cppsf[kwlix] = mrarz[obzxe];
         obzxe+=3;
        }
        cppsf[kwlix] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", mrarz);
    printf(""Der neue String lautet: %s"", cppsf);
}",1.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}",0.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }",0.0
"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int bwlxc(char *ovavc)
 int fmzbr = 0; 
    while (ovavc[fmzbr] != '\0')
      fmzbr++;
  return fmzbr; 
{  
  int lipdq = bwlxc(src);
  int tsgbv = bwlxc(dest);
 /*     char fxwlj[lipdq]; 
    for (int fmzbr = 0; fmzbr <= lipdq-1; fmzbr++) 
        fxwlj [fmzbr] = src[fmzbr];
  for (int fmzbr = 0; fmzbr <= zahl-1; fmzbr++) {
    if (fmzbr <= tsgbv && fmzbr <= lipdq) {
        *dest = fxwlj[fmzbr]; 
      }*/
  int fmzbr = 1;
   while(*src && fmzbr <= lipdq && fmzbr <= tsgbv && fmzbr <= zahl) {
    *dest++ = *src++;
    fmzbr++;
 }
void vkpxo(char* a, char* b){
    char jdonm = *a;
    *a = *b;
    *b = jdonm;
}
{
    if (!*str) 
        return;
    char* fmzbr = str;
    char* j = fmzbr + bwlxc(str) - 1;
    while (fmzbr < j) {
        vkpxo(fmzbr, j);
        fmzbr++;
        j--;
    }
}
{  
      }",1.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int xvbvi(char *bjvid)
 int tsjvr = 0; 
    while (bjvid[tsjvr] != '\0')
      tsjvr++;
  return tsjvr; 
{  
  int xrpwn = xvbvi(src);
  int acmkt = xvbvi(dest);
 /*     char snqsr[xrpwn]; 
    for (int tsjvr = 0; tsjvr <= xrpwn-1; tsjvr++) 
        snqsr [tsjvr] = src[tsjvr];
  for (int tsjvr = 0; tsjvr <= zahl-1; tsjvr++) {
    if (tsjvr <= acmkt && tsjvr <= xrpwn) {
        *dest = snqsr[tsjvr]; 
      }*/
  int tsjvr = 1;
   while(*src && tsjvr <= xrpwn && tsjvr <= acmkt && tsjvr <= zahl) {
    *dest++ = *src++;
    tsjvr++;
 }
void gzzpu(char* a, char* b){
    char mqfld = *a;
    *a = *b;
    *b = mqfld;
}
{
    if (!*str) 
        return;
    char* tsjvr = str;
    char* j = tsjvr + xvbvi(str) - 1;
    while (tsjvr < j) {
        gzzpu(tsjvr, j);
        tsjvr++;
        j--;
    }
}
{  
      }",1.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",0.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void jccnh(char* str1){
	int rzvin;
	int pnbmu;
	for ( rzvin = 0,  pnbmu = 0;pnbmu<100; ++pnbmu){
	if ((str1[pnbmu] != 'x')&&(str1[pnbmu] != 'X')&&(str1[pnbmu] != 'y')&&(str1[pnbmu] != 'Y')&&(str1[pnbmu] != 'q')&&(str1[pnbmu] != 'Q'))
	str1[rzvin++] = str1[pnbmu];
	}
}
void qyuun(char* str1, char* str2){
	int pnbmu=0;
	for(;(str2[pnbmu])!=('\0');pnbmu++){}
	for (int rzvin=0;str1[rzvin]!='\0';rzvin++){
		str2[pnbmu+rzvin]=str1[rzvin];
	}	
;}
void pbiul(char* str1,char* str2){
	for (int rzvin=0;str1[rzvin]!='\0';rzvin++){
		if((rzvin+3)%3==0)str2[((rzvin+3)/3)-1]=str1[rzvin];
	}
}
int main(int pjsqm,char** argv){
	if (pjsqm<2) return 0;
	char fsrre[100]="""";
	char afjan[100]="""";
	for(int rzvin=1;rzvin<pjsqm;rzvin++) {
		qyuun(argv[rzvin],fsrre);}
		jccnh(fsrre);
	pbiul(fsrre,afjan);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",fsrre);
	printf(""Der neue String lautet: %s"",afjan);
}",1.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int jjulv=0; jjulv<zahl && *src!='\0' && *dest!='\0'; jjulv++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char ctzbc[100] = """";
    char* ptemp = ctzbc;
    for(int jjulv=0; str[jjulv]!=0; jjulv++)
        ctzbc[jjulv] = str[jjulv]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void jscja(char* str1){
	int zsjpr;
	int qipuj;
	for ( zsjpr = 0,  qipuj = 0;qipuj<100; ++qipuj){
	if ((str1[qipuj] != 'x')&&(str1[qipuj] != 'X')&&(str1[qipuj] != 'y')&&(str1[qipuj] != 'Y')&&(str1[qipuj] != 'q')&&(str1[qipuj] != 'Q'))
	str1[zsjpr++] = str1[qipuj];
	}
}
void xvvvj(char* str1, char* str2){
	int qipuj=0;
	for(;(str2[qipuj])!=('\0');qipuj++){}
	for (int zsjpr=0;str1[zsjpr]!='\0';zsjpr++){
		str2[qipuj+zsjpr]=str1[zsjpr];
	}	
;}
void qpomn(char* str1,char* str2){
	for (int zsjpr=0;str1[zsjpr]!='\0';zsjpr++){
		if((zsjpr+3)%3==0)str2[((zsjpr+3)/3)-1]=str1[zsjpr];
	}
}
int main(int feicg,char** argv){
	if (feicg<2) return 0;
	char fsajp[100]="""";
	char gkosp[100]="""";
	for(int zsjpr=1;zsjpr<feicg;zsjpr++) {
		xvvvj(argv[zsjpr],fsajp);}
		jscja(fsajp);
	qpomn(fsajp,gkosp);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",fsajp);
	printf(""Der neue String lautet: %s"",gkosp);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void olaik(char* str)
{
    int hbssx = 0;
    char ojwly[50];
    for(int vhdfy = 0; str[vhdfy] != '\0'; vhdfy++)
    {
        int hbssx = 0;
        char ojwly[50];
        auhfx(str[vhdfy] == 'x'|| str[vhdfy] == 'y'|| str[vhdfy] == 'q');
        else auhfx(str[vhdfy] == 'X'|| str[vhdfy] == 'Y'|| str[vhdfy] == 'Q');
        else 
        {
            ojwly[hbssx] = str[vhdfy];
            hbssx++;
        }
    }
    str = &ojwly;
}
char* sortieren(int länge, char* str[])
{
    int hbssx = 0;
    char ojwly[200];
    for(int vhdfy = 0; vhdfy < länge; vhdfy++)
    {
        for(int gybcg = 0; gybcg != '\0'; gybcg++)
        {
            ojwly[hbssx] = str[vhdfy+1][gybcg];
            hbssx++;
        }
    }
}   
int main( int eertp, char* argv[] )
{  
    int dxsdl = sizeof(argv) - 1;
    for(int vhdfy = 1; vhdfy <= dxsdl; vhdfy++)
    {
        olaik(argv[vhdfy]);
    }
    char kcnyp = sortieren(dxsdl, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", kcnyp); 
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void kpree (char* uftxw)
{
	for(int pzfnn = 0; uftxw[pzfnn] != '\0'; pzfnn++)
	{
		if(uftxw[pzfnn] == 'x' || uftxw[pzfnn] == 'y' || uftxw[pzfnn] == 'q' || uftxw[pzfnn] == 'X' || uftxw[pzfnn] == 'Y' || uftxw[pzfnn] == 'Q' )
		{
			for(int crclw = pzfnn; uftxw[crclw] != '\0'; crclw++)
			{
				uftxw[crclw] = uftxw[crclw+1];
			}
			pzfnn = pzfnn -1;
		}
	}
}
void liqsl (char* uftxw)
{
	int blsea = 0;
	while(uftxw[blsea] != '\0')
	{
	blsea++;
	}
	char ghwkg[blsea]; 
	for(int fxbuo = 0; fxbuo < blsea; fxbuo++)
	{
		if(fxbuo % 3 == 0)
		{
			ghwkg[fxbuo] = uftxw[fxbuo];
		}
		else ghwkg[fxbuo] = 0;
	}
	int xkgch =0;
	for(int pzfnn = 0; pzfnn < blsea; pzfnn++)
	{
		if(ghwkg[pzfnn] != 0)
		{
			uftxw[xkgch] = ghwkg[pzfnn];
			xkgch++;
		}
	}
	uftxw[xkgch] = '\0';
}
int main(int kwwyl, char* argv[])
{
	int blsea = 0;
	for(int crclw=1; crclw < kwwyl; crclw++)
	{
		for(int pzfnn = 0; argv[crclw][pzfnn] != '\0'; pzfnn++)
		{
			blsea++;		
		}				
	}
	char uftxw[blsea+1];
	uftxw[blsea] = '\0';
	int xkgch = 0;
	for(int crclw=1; crclw < kwwyl; crclw++)
	{
		for(int pzfnn = 0; argv[crclw][pzfnn] != '\0'; pzfnn++)
		{
			uftxw[xkgch] = argv[crclw][pzfnn];
			xkgch++;
		}
	}
	kpree(uftxw);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&uftxw[0]);
	liqsl(uftxw);
	printf(""Der neue String lautet: %s \n"",&uftxw[0]);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int pwkpr, char *awqcq[])
{   
    for (int kusxe = 1; kusxe < pwkpr; kusxe++){
        char * CurrentCommandString = awqcq[kusxe];  
        int rpume = 0;
        while (CurrentCommandString[rpume] != '\0' && CurrentCommandString[rpume] != ' ') {
            if (CurrentCommandString[rpume] == 'x' 
             || CurrentCommandString[rpume] == 'y' 
             || CurrentCommandString[rpume] == 'q'
             || CurrentCommandString[rpume] == 'X'
             || CurrentCommandString[rpume] == 'Y' 
             || CurrentCommandString[rpume] == 'Q')
             {   
                 int wvdgi = rpume;
                 while (CurrentCommandString[rpume] != '\0' && CurrentCommandString[rpume] != ' ') {
                    CurrentCommandString[wvdgi] = CurrentCommandString[wvdgi + 1]; 
                    ++wvdgi; 
                 }
             }
            ++rpume;
         }
    }
    char tgzkr[5000];
    int slgao = 0;
    char foikg[5000];
    int nihhg = 0;
    for (int kusxe = 1; kusxe < pwkpr; kusxe++){
        char * CurrentCommandString = awqcq[kusxe];  
        int sdaho, wvdgi;
          sdaho = 0;
          while (tgzkr[sdaho] != '\0' && tgzkr[sdaho] != ' ') {
            ++sdaho;
          }
          for (wvdgi = 0; CurrentCommandString[wvdgi] != '\0' && CurrentCommandString[sdaho] != ' '; ++wvdgi, ++sdaho) {
            tgzkr[sdaho] = CurrentCommandString[wvdgi];
          }
          tgzkr[sdaho] = '\0';       
    }
        int sdaho, wvdgi;
        sdaho = 0;
        while (foikg[sdaho] != '\0' && foikg[sdaho] != ' ') {
        ++sdaho;
        }
        for (wvdgi = 0; tgzkr[wvdgi] != '\0' && tgzkr[sdaho] != ' '; ++sdaho) {
         foikg[sdaho] = tgzkr[wvdgi];
         wvdgi+=3;
        }
        foikg[sdaho] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", tgzkr);
    printf(""Der neue String lautet: %s"", foikg);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int jhfix, char *tbpuj[])
{   
    for (int rcvmy = 1; rcvmy < jhfix; rcvmy++){
        char * CurrentCommandString = tbpuj[rcvmy];  
        int yoxtx = 0;
        while (CurrentCommandString[yoxtx] != '\0' && CurrentCommandString[yoxtx] != ' ') {
            if (CurrentCommandString[yoxtx] == 'x' 
             || CurrentCommandString[yoxtx] == 'y' 
             || CurrentCommandString[yoxtx] == 'q'
             || CurrentCommandString[yoxtx] == 'X'
             || CurrentCommandString[yoxtx] == 'Y' 
             || CurrentCommandString[yoxtx] == 'Q')
             {   
                 int klikn = yoxtx;
                 while (CurrentCommandString[yoxtx] != '\0' && CurrentCommandString[yoxtx] != ' ') {
                    CurrentCommandString[klikn] = CurrentCommandString[klikn + 1]; 
                    ++klikn; 
                 }
             }
            ++yoxtx;
         }
    }
    char hdihh[5000];
    int eupxu = 0;
    char vqjni[5000];
    int lqbin = 0;
    for (int rcvmy = 1; rcvmy < jhfix; rcvmy++){
        char * CurrentCommandString = tbpuj[rcvmy];  
        int stdpp, klikn;
          stdpp = 0;
          while (hdihh[stdpp] != '\0' && hdihh[stdpp] != ' ') {
            ++stdpp;
          }
          for (klikn = 0; CurrentCommandString[klikn] != '\0' && CurrentCommandString[stdpp] != ' '; ++klikn, ++stdpp) {
            hdihh[stdpp] = CurrentCommandString[klikn];
          }
          hdihh[stdpp] = '\0';       
    }
        int stdpp, klikn;
        stdpp = 0;
        while (vqjni[stdpp] != '\0' && vqjni[stdpp] != ' ') {
        ++stdpp;
        }
        for (klikn = 0; hdihh[klikn] != '\0' && hdihh[stdpp] != ' '; ++stdpp) {
         vqjni[stdpp] = hdihh[klikn];
         klikn+=3;
        }
        vqjni[stdpp] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", hdihh);
    printf(""Der neue String lautet: %s"", vqjni);
}",1.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }",0.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
{
	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}",1.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }","{  
	for(int fjbge = 0; src[fjbge] != '\0' && dest[fjbge] != '\0' && fjbge < zahl; fjbge++)		dest[fjbge] = src[fjbge];
void avhqc( char* str)
	int aeiav = 0;
	for( int fjbge = 0; str[fjbge] != '\0'; fjbge++)
		aeiav = fjbge;
	char snztq[aeiav];
	for( int fjbge = 0; fjbge <= aeiav; fjbge++)
		snztq[fjbge] = str[aeiav-fjbge];
	for( int fjbge = 0; fjbge <= aeiav; fjbge++)
		str[fjbge] = snztq[fjbge];
{  
  char fsbqx[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", fsbqx);
  ersetzen(fsbqx , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", fsbqx);
  }",1.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",0.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int ogjsm;
    for(ogjsm = 0; ogjsm < zahl && *dest != '\0' && *src != '\0'; ogjsm++)
           *dest = *src;
       src++;
       dest++;
    {
    int gjugd = 0;
    int nyulk = 0;
    int njzst = 0;
    for(nyulk=0; str[nyulk] != 0; nyulk++);
    for(gjugd = 0; gjugd <nyulk/2; gjugd++)
    {
        njzst = str[gjugd];
        str[gjugd]=str[nyulk - 1 - gjugd];
        str[nyulk - 1 - gjugd] = njzst;
        for(gjugd = 0; gjugd < nyulk; gjugd++);
}
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int eusuc=0; eusuc<zahl && *src!='\0' && *dest!='\0'; eusuc++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char aiidd[100] = """";
    char* ptemp = aiidd;
    for(int eusuc=0; str[eusuc]!=0; eusuc++)
        aiidd[eusuc] = str[eusuc]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int yyexb, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int hllbn = 0;
	for(int bhztl = 1; bhztl < yyexb; bhztl++){
		int ejfaz = 0;
		while(*(argv[bhztl]+ejfaz) != '\0'){
			if((*(argv[bhztl]+ejfaz) != 'x') && (*(argv[bhztl]+ejfaz) != 'y') && (*(argv[bhztl]+ejfaz) != 'q') && (*(argv[bhztl]+ejfaz) != 'X') && (*(argv[bhztl]+ejfaz) != 'Y') && (*(argv[bhztl]+ejfaz) != 'Q')){
			*(text_str+hllbn) = *(argv[bhztl]+ejfaz);
			hllbn++;
			}
			ejfaz++;
		}
	}
	text_str = realloc(text_str,hllbn+1 * sizeof(char));
	int llpsc = (hllbn+1) / 3;
	char* solution = malloc(llpsc * sizeof(char));
	int lwnbd = 0;
	for(int bhztl = 0; bhztl < hllbn+1; bhztl++){
		if((bhztl % 3) == 0){
			*(solution+lwnbd) = *(text_str+bhztl);
			lwnbd++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }",0.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",0.75
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int gaibu, char* argv[52])
{
   int eqrms = 0;
   int* p_zahl = &eqrms;
   int ddwqu = 1;
   int* p_counter = &ddwqu;
   char isalo[30];
   for(int kcccy = 0; kcccy < gaibu-1 ; kcccy++)
   {
      for(int livvm = 0; argv[ddwqu][livvm] != '\0'; livvm++)
      {
         isalo[eqrms] = argv[ddwqu][livvm];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   isalo[eqrms+1] = '\0';
   int geoww = 0;
   int* p_nummer = &geoww;
   char kbyns[25];
   for(int kcccy = 0; ; kcccy++)
   {
      if((isalo[kcccy] != 'x') && (isalo[kcccy] != 'y') && (isalo[kcccy] != 'q') && (isalo[kcccy] != 'X') && (isalo[kcccy] != 'Y') && (isalo[kcccy] != 'Q'))
      {
         kbyns[geoww] = isalo[kcccy];
         if(isalo[kcccy] == '\0') break;
         *p_nummer += 1;
      }
   }
   char rxclg[35];
   for(int kcccy = 0; kcccy < 57; kcccy +=3)
   {
      rxclg[kcccy/3] = kbyns[kcccy];  
      rxclg[kcccy/3+1] = '\0'  ;
   }
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", kbyns, rxclg);
}",1.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void msbsg(char* str)
{
    int nvxoz = 0;
    char ysqii[50];
    for(int zdrdf = 0; str[zdrdf] != '\0'; zdrdf++)
    {
        int nvxoz = 0;
        char ysqii[50];
        fpdzj(str[zdrdf] == 'x'|| str[zdrdf] == 'y'|| str[zdrdf] == 'q');
        else fpdzj(str[zdrdf] == 'X'|| str[zdrdf] == 'Y'|| str[zdrdf] == 'Q');
        else 
        {
            ysqii[nvxoz] = str[zdrdf];
            nvxoz++;
        }
    }
    str = &ysqii;
}
char* sortieren(int länge, char* str[])
{
    int nvxoz = 0;
    char ysqii[200];
    for(int zdrdf = 0; zdrdf < länge; zdrdf++)
    {
        for(int ujgii = 0; ujgii != '\0'; ujgii++)
        {
            ysqii[nvxoz] = str[zdrdf+1][ujgii];
            nvxoz++;
        }
    }
}   
int main( int tonrs, char* argv[] )
{  
    int iytkf = sizeof(argv) - 1;
    for(int zdrdf = 1; zdrdf <= iytkf; zdrdf++)
    {
        msbsg(argv[zdrdf]);
    }
    char xqttk = sortieren(iytkf, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", xqttk); 
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int ficmi, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int avlor = 0;
	for(int ckcxe = 1; ckcxe < ficmi; ckcxe++){
		int dsinr = 0;
		while(*(argv[ckcxe]+dsinr) != '\0'){
			if((*(argv[ckcxe]+dsinr) != 'x') && (*(argv[ckcxe]+dsinr) != 'y') && (*(argv[ckcxe]+dsinr) != 'q') && (*(argv[ckcxe]+dsinr) != 'X') && (*(argv[ckcxe]+dsinr) != 'Y') && (*(argv[ckcxe]+dsinr) != 'Q')){
			*(text_str+avlor) = *(argv[ckcxe]+dsinr);
			avlor++;
			}
			dsinr++;
		}
	}
	text_str = realloc(text_str,avlor+1 * sizeof(char));
	int opihx = (avlor+1) / 3;
	char* solution = malloc(opihx * sizeof(char));
	int iikej = 0;
	for(int ckcxe = 0; ckcxe < avlor+1; ckcxe++){
		if((ckcxe % 3) == 0){
			*(solution+iikej) = *(text_str+ckcxe);
			iikej++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char pvzaz (char snqmu)
{if (snqmu=='x'||snqmu=='y'||snqmu=='q'||
     snqmu=='X'||snqmu=='Y'||snqmu=='Q')
    spmxj 1;
else spmxj 0;
}
void arhxm (char*src)
{char oioxs[100]="""";
 int rmovt=0;
 while (src[rmovt]!='\0')
    {oioxs[rmovt]=src[rmovt];rmovt++;}
    oioxs[rmovt]='\0';
    rmovt=0;
int rdgwh=0;
while (oioxs[rmovt]!='\0')
    {if (rmovt%3!=0)
        {rmovt++;}
    else 
        {src[rdgwh]=oioxs[rmovt];
         rmovt++;
         rdgwh++;}
    }
src[rdgwh]='\0';
}
int main (int wwctm,char*argv[])
{char cjijj[100]="""";
int yrlon=1;
int esfdk=0;
int uhlrn=0;
while (yrlon!=wwctm)
    {while (argv[yrlon][uhlrn]!='\0')
        {if (pvzaz(argv[yrlon][uhlrn])) 
         uhlrn++;
         else
         {cjijj[esfdk]=argv[yrlon][uhlrn];
          esfdk++;
          uhlrn++;}}
    yrlon++;uhlrn=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",cjijj);
arhxm(cjijj);
printf (""Der neue String lautet: %s\n"",cjijj);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char voree (char lxqrp)
{if (lxqrp=='x'||lxqrp=='y'||lxqrp=='q'||
     lxqrp=='X'||lxqrp=='Y'||lxqrp=='Q')
    dkrgq 1;
else dkrgq 0;
}
void zynmi (char*src)
{char lansr[100]="""";
 int itmks=0;
 while (src[itmks]!='\0')
    {lansr[itmks]=src[itmks];itmks++;}
    lansr[itmks]='\0';
    itmks=0;
int iqzmz=0;
while (lansr[itmks]!='\0')
    {if (itmks%3!=0)
        {itmks++;}
    else 
        {src[iqzmz]=lansr[itmks];
         itmks++;
         iqzmz++;}
    }
src[iqzmz]='\0';
}
int main (int pnhjh,char*argv[])
{char fatbl[100]="""";
int buncx=1;
int amaic=0;
int batas=0;
while (buncx!=pnhjh)
    {while (argv[buncx][batas]!='\0')
        {if (voree(argv[buncx][batas])) 
         batas++;
         else
         {fatbl[amaic]=argv[buncx][batas];
          amaic++;
          batas++;}}
    buncx++;batas=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",fatbl);
zynmi(fatbl);
printf (""Der neue String lautet: %s\n"",fatbl);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",0.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }","{  
	for(int uzhlz = 0; src[uzhlz] != '\0' && dest[uzhlz] != '\0' && uzhlz < zahl; uzhlz++)		dest[uzhlz] = src[uzhlz];
void ssxss( char* str)
	int cgrfb = 0;
	for( int uzhlz = 0; str[uzhlz] != '\0'; uzhlz++)
		cgrfb = uzhlz;
	char psssw[cgrfb];
	for( int uzhlz = 0; uzhlz <= cgrfb; uzhlz++)
		psssw[uzhlz] = str[cgrfb-uzhlz];
	for( int uzhlz = 0; uzhlz <= cgrfb; uzhlz++)
		str[uzhlz] = psssw[uzhlz];
{  
  char tdsut[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", tdsut);
  ersetzen(tdsut , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", tdsut);
  }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int aaafd, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int hncgn = 0;
	for(int lmtsk = 1; lmtsk < aaafd; lmtsk++){
		int cdgbn = 0;
		while(*(argv[lmtsk]+cdgbn) != '\0'){
			if((*(argv[lmtsk]+cdgbn) != 'x') && (*(argv[lmtsk]+cdgbn) != 'y') && (*(argv[lmtsk]+cdgbn) != 'q') && (*(argv[lmtsk]+cdgbn) != 'X') && (*(argv[lmtsk]+cdgbn) != 'Y') && (*(argv[lmtsk]+cdgbn) != 'Q')){
			*(text_str+hncgn) = *(argv[lmtsk]+cdgbn);
			hncgn++;
			}
			cdgbn++;
		}
	}
	text_str = realloc(text_str,hncgn+1 * sizeof(char));
	int najhg = (hncgn+1) / 3;
	char* solution = malloc(najhg * sizeof(char));
	int xerge = 0;
	for(int lmtsk = 0; lmtsk < hncgn+1; lmtsk++){
		if((lmtsk % 3) == 0){
			*(solution+xerge) = *(text_str+lmtsk);
			xerge++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",0.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int adlky = 0;
	while(adlky < zahl && dest[adlky] != '\0' && src[adlky] != '\0')		dest[adlky] = src[adlky];
		adlky ++;
{
	int rjgnj = 0;
	while(str[rjgnj] != '\0') rjgnj++;
	char jthya[rjgnj];
	for(int nnrey = 0; nnrey < rjgnj; nnrey++) jthya[nnrey] = str[nnrey];
	for(int nnrey = 0; nnrey < rjgnj; nnrey++){
		str[nnrey] = jthya[rjgnj - 1 - nnrey];
}
{  
      }",1.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void bupgb(char* str)
{
    int obpau = 0;
    char mebdx[50];
    for(int peoyr = 0; str[peoyr] != '\0'; peoyr++)
    {
        int obpau = 0;
        char mebdx[50];
        bfldn(str[peoyr] == 'x'|| str[peoyr] == 'y'|| str[peoyr] == 'q');
        else bfldn(str[peoyr] == 'X'|| str[peoyr] == 'Y'|| str[peoyr] == 'Q');
        else 
        {
            mebdx[obpau] = str[peoyr];
            obpau++;
        }
    }
    str = &mebdx;
}
char* sortieren(int länge, char* str[])
{
    int obpau = 0;
    char mebdx[200];
    for(int peoyr = 0; peoyr < länge; peoyr++)
    {
        for(int inapd = 0; inapd != '\0'; inapd++)
        {
            mebdx[obpau] = str[peoyr+1][inapd];
            obpau++;
        }
    }
}   
int main( int npofe, char* argv[] )
{  
    int bmiaa = sizeof(argv) - 1;
    for(int peoyr = 1; peoyr <= bmiaa; peoyr++)
    {
        bupgb(argv[peoyr]);
    }
    char vezxg = sortieren(bmiaa, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", vezxg); 
}",1.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int rwvir;
    for(rwvir = 0; rwvir < zahl && *dest != '\0' && *src != '\0'; rwvir++)
           *dest = *src;
       src++;
       dest++;
    {
    int rrgle = 0;
    int hfkyj = 0;
    int eekik = 0;
    for(hfkyj=0; str[hfkyj] != 0; hfkyj++);
    for(rrgle = 0; rrgle <hfkyj/2; rrgle++)
    {
        eekik = str[rrgle];
        str[rrgle]=str[hfkyj - 1 - rrgle];
        str[hfkyj - 1 - rrgle] = eekik;
        for(rrgle = 0; rrgle < hfkyj; rrgle++);
}
{  
      }",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}",0.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int afnen, char* argv[52])
{
   int jfyze = 0;
   int* p_zahl = &jfyze;
   int tneba = 1;
   int* p_counter = &tneba;
   char xhnwr[30];
   for(int kaalr = 0; kaalr < afnen-1 ; kaalr++)
   {
      for(int vxbyj = 0; argv[tneba][vxbyj] != '\0'; vxbyj++)
      {
         xhnwr[jfyze] = argv[tneba][vxbyj];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   xhnwr[jfyze+1] = '\0';
   int bvpal = 0;
   int* p_nummer = &bvpal;
   char cpwbj[25];
   for(int kaalr = 0; ; kaalr++)
   {
      if((xhnwr[kaalr] != 'x') && (xhnwr[kaalr] != 'y') && (xhnwr[kaalr] != 'q') && (xhnwr[kaalr] != 'X') && (xhnwr[kaalr] != 'Y') && (xhnwr[kaalr] != 'Q'))
      {
         cpwbj[bvpal] = xhnwr[kaalr];
         if(xhnwr[kaalr] == '\0') break;
         *p_nummer += 1;
      }
   }
   char msish[35];
   for(int kaalr = 0; kaalr < 57; kaalr +=3)
   {
      msish[kaalr/3] = cpwbj[kaalr];  
      msish[kaalr/3+1] = '\0'  ;
   }
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", cpwbj, msish);
}",1.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char nexoo (char exwjf)
{if (exwjf=='x'||exwjf=='y'||exwjf=='q'||
     exwjf=='X'||exwjf=='Y'||exwjf=='Q')
    jjcke 1;
else jjcke 0;
}
void zesqz (char*src)
{char eoiey[100]="""";
 int xucio=0;
 while (src[xucio]!='\0')
    {eoiey[xucio]=src[xucio];xucio++;}
    eoiey[xucio]='\0';
    xucio=0;
int jmmed=0;
while (eoiey[xucio]!='\0')
    {if (xucio%3!=0)
        {xucio++;}
    else 
        {src[jmmed]=eoiey[xucio];
         xucio++;
         jmmed++;}
    }
src[jmmed]='\0';
}
int main (int lcptv,char*argv[])
{char ajnlx[100]="""";
int tfxmr=1;
int ckyfx=0;
int hqefu=0;
while (tfxmr!=lcptv)
    {while (argv[tfxmr][hqefu]!='\0')
        {if (nexoo(argv[tfxmr][hqefu])) 
         hqefu++;
         else
         {ajnlx[ckyfx]=argv[tfxmr][hqefu];
          ckyfx++;
          hqefu++;}}
    tfxmr++;hqefu=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",ajnlx);
zesqz(ajnlx);
printf (""Der neue String lautet: %s\n"",ajnlx);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int vkddf, char** argv)
{
    char lsjca[100] = ""lasse roland max ivo"";
    char yinni[100];
    char iwqma[100];
    int vcins = 0;
    int gcmtw = 0;
    int esxls = 1;
    int ugdil;
    for ( ugdil = 0; *(argv+ugdil) != '\0'; ugdil++)
    {
        if (*(argv+ugdil) == ' ' || *(argv+ugdil) == 'x' || *(argv+ugdil) == 'y' || *(argv+ugdil) == 'q'|| *(argv+ugdil) == 'X'|| *(argv+ugdil) == 'Y'|| *(argv+ugdil) == 'Q')
            esxls++;
            continue;
        yinni[vcins++] = *(argv+ugdil);
    }
    yinni[vcins] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", yinni );
    for ( ugdil = 0; yinni[ugdil] != '\0'; ugdil++)
    {
        if (ugdil == 0 || ugdil % 3 == 0)
        iwqma[gcmtw++] = yinni[ugdil];
        continue;
    }
    iwqma[gcmtw] = 0;
    printf( ""Der neue String lautet: %s \n"", iwqma);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
{
	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char ivzds (char ywdsb)
{if (ywdsb=='x'||ywdsb=='y'||ywdsb=='q'||
     ywdsb=='X'||ywdsb=='Y'||ywdsb=='Q')
    yizjw 1;
else yizjw 0;
}
void tgktc (char*src)
{char igets[100]="""";
 int ddfvc=0;
 while (src[ddfvc]!='\0')
    {igets[ddfvc]=src[ddfvc];ddfvc++;}
    igets[ddfvc]='\0';
    ddfvc=0;
int gxygn=0;
while (igets[ddfvc]!='\0')
    {if (ddfvc%3!=0)
        {ddfvc++;}
    else 
        {src[gxygn]=igets[ddfvc];
         ddfvc++;
         gxygn++;}
    }
src[gxygn]='\0';
}
int main (int zxoju,char*argv[])
{char tzhla[100]="""";
int avinr=1;
int tcbtt=0;
int irjll=0;
while (avinr!=zxoju)
    {while (argv[avinr][irjll]!='\0')
        {if (ivzds(argv[avinr][irjll])) 
         irjll++;
         else
         {tzhla[tcbtt]=argv[avinr][irjll];
          tcbtt++;
          irjll++;}}
    avinr++;irjll=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",tzhla);
tgktc(tzhla);
printf (""Der neue String lautet: %s\n"",tzhla);
}",1.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int zfusv, char* argv[] )
{  
	char ayoac[100];
	char vpige[100];
	int yqxft = 0;
	for (int lqzcw = 0; lqzcw < zfusv -1; lqzcw++)
	{
		int rwman = 0;
		for (rwman; *(*(argv+1+lqzcw)+rwman) != '\0'; rwman++)
		{
			ayoac[yqxft] = *(*(argv+1+lqzcw)+rwman);
			yqxft++;
		}
	}
	ayoac[yqxft] = '\0';
	for (int lqzcw = 0; lqzcw < yqxft+1; lqzcw++)
	{
		if ((ayoac[lqzcw] == 'x') || (ayoac[lqzcw] == 'y') || (ayoac[lqzcw] == 'q') || (ayoac[lqzcw] == 'X') || (ayoac[lqzcw] == 'Y') || (ayoac[lqzcw] == 'Q'))
		{
			while (1)
			{
				ayoac[lqzcw] = ayoac[lqzcw+1];
				lqzcw++;
				if (ayoac[lqzcw] == '\0')
				{	
					break;
				}
			}
			yqxft--;
			lqzcw = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",ayoac);
	for (int lqzcw = 0, z = 0; lqzcw < ((yqxft/2)-2); lqzcw++, z += 3)
	{
		vpige[lqzcw] = ayoac[z];
	}
	int rwman = 0;
	for (rwman; ayoac[rwman] != '\0'; rwman++)
		;
	vpige[rwman] = '\0';
	printf(""Der neue String lautet: %s"",vpige);
}",1.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void vemak (char* ooaiu)
{
	for(int pnbzs = 0; ooaiu[pnbzs] != '\0'; pnbzs++)
	{
		if(ooaiu[pnbzs] == 'x' || ooaiu[pnbzs] == 'y' || ooaiu[pnbzs] == 'q' || ooaiu[pnbzs] == 'X' || ooaiu[pnbzs] == 'Y' || ooaiu[pnbzs] == 'Q' )
		{
			for(int axejp = pnbzs; ooaiu[axejp] != '\0'; axejp++)
			{
				ooaiu[axejp] = ooaiu[axejp+1];
			}
			pnbzs = pnbzs -1;
		}
	}
}
void oxpyw (char* ooaiu)
{
	int stvur = 0;
	while(ooaiu[stvur] != '\0')
	{
	stvur++;
	}
	char xsxdn[stvur]; 
	for(int utehi = 0; utehi < stvur; utehi++)
	{
		if(utehi % 3 == 0)
		{
			xsxdn[utehi] = ooaiu[utehi];
		}
		else xsxdn[utehi] = 0;
	}
	int xryvj =0;
	for(int pnbzs = 0; pnbzs < stvur; pnbzs++)
	{
		if(xsxdn[pnbzs] != 0)
		{
			ooaiu[xryvj] = xsxdn[pnbzs];
			xryvj++;
		}
	}
	ooaiu[xryvj] = '\0';
}
int main(int zbgvd, char* argv[])
{
	int stvur = 0;
	for(int axejp=1; axejp < zbgvd; axejp++)
	{
		for(int pnbzs = 0; argv[axejp][pnbzs] != '\0'; pnbzs++)
		{
			stvur++;		
		}				
	}
	char ooaiu[stvur+1];
	ooaiu[stvur] = '\0';
	int xryvj = 0;
	for(int axejp=1; axejp < zbgvd; axejp++)
	{
		for(int pnbzs = 0; argv[axejp][pnbzs] != '\0'; pnbzs++)
		{
			ooaiu[xryvj] = argv[axejp][pnbzs];
			xryvj++;
		}
	}
	vemak(ooaiu);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&ooaiu[0]);
	oxpyw(ooaiu);
	printf(""Der neue String lautet: %s \n"",&ooaiu[0]);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",0.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int tdtav, char* argv[] )
{  
	char kabgo[100];
	char klncj[100];
	int gsdcc = 0;
	for (int cssjd = 0; cssjd < tdtav -1; cssjd++)
	{
		int widjl = 0;
		for (widjl; *(*(argv+1+cssjd)+widjl) != '\0'; widjl++)
		{
			kabgo[gsdcc] = *(*(argv+1+cssjd)+widjl);
			gsdcc++;
		}
	}
	kabgo[gsdcc] = '\0';
	for (int cssjd = 0; cssjd < gsdcc+1; cssjd++)
	{
		if ((kabgo[cssjd] == 'x') || (kabgo[cssjd] == 'y') || (kabgo[cssjd] == 'q') || (kabgo[cssjd] == 'X') || (kabgo[cssjd] == 'Y') || (kabgo[cssjd] == 'Q'))
		{
			while (1)
			{
				kabgo[cssjd] = kabgo[cssjd+1];
				cssjd++;
				if (kabgo[cssjd] == '\0')
				{	
					break;
				}
			}
			gsdcc--;
			cssjd = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",kabgo);
	for (int cssjd = 0, z = 0; cssjd < ((gsdcc/2)-2); cssjd++, z += 3)
	{
		klncj[cssjd] = kabgo[z];
	}
	int widjl = 0;
	for (widjl; kabgo[widjl] != '\0'; widjl++)
		;
	klncj[widjl] = '\0';
	printf(""Der neue String lautet: %s"",klncj);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}",0.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
{
	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }","    for (int ytjht = 0;(ytjht < zahl) && (ytjht < 10) && (src[ytjht] != '\0'); ytjht++)
    {
        dest[ytjht] = src[ytjht];
    void oiwls(char* str )
{
    int stamt;
    for (int aojbg = 1; str[aojbg] != '\0'; aojbg++)
    {
        stamt = aojbg + 2;
        char djasa[stamt];
    for (int ytjht = 0; ytjht < (stamt - 1); ytjht++)
    {
        djasa[stamt - 2- ytjht] = str[ytjht];
    }
    for (int ytjht = 0; ytjht < stamt; ytjht++)
    {
        str[ytjht] = djasa[ytjht];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",1.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int webou, char *nqolo[])
{
    int ankvg;
    int mryuv = 0;
    char dwbyq[20];
    char exymi[15];
    int ordwd = 0;
    for (int gadbx = 1; gadbx < webou; gadbx++)
    {
        ankvg = 0;
        while ((nqolo[gadbx][ankvg]) != '\0')
        {
            if (nqolo[gadbx][ankvg] != 'ordwd' && nqolo[gadbx][ankvg] != 'y' && nqolo[gadbx][ankvg] != 'q' && nqolo[gadbx][ankvg] != 'X' && nqolo[gadbx][ankvg] != 'Y' && nqolo[gadbx][ankvg] != 'Q')
            {
                dwbyq[mryuv] = nqolo[gadbx][ankvg];
                mryuv++;
            }
            ankvg++;
        }
    }
    for (int gadbx = 0; gadbx <= mryuv; gadbx++)
    {
        if (ordwd > (gadbx / 3) || gadbx == 0)
        {
            if (gadbx == 0)
            {
                exymi[ordwd] = dwbyq[gadbx];
                ordwd++;
            }
            if (((gadbx) % 3) == 0)
            {
                exymi[ordwd] = dwbyq[gadbx];
                ordwd++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int gadbx = 0; gadbx < mryuv; gadbx++)
        if (dwbyq[gadbx] != '\0')
        {
            printf(""%c"", dwbyq[gadbx]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int gadbx = 1; gadbx < (mryuv / 2)-1; gadbx++)
            printf(""%c"", exymi[gadbx]);
    if (dwbyq[0] == 'z')
        printf(""z"");
}",1.0
"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int vevdv, char* argv[]){
	char tggqv[100]= """";
	char roifn[100]="""";
	int mlhna=0;
	for(int cazxg=1 ;cazxg<vevdv ;cazxg++){
		for (int wznlk=0; argv[cazxg][wznlk] != '\0'; wznlk++){
			if(argv[cazxg][wznlk]== 'mlhna' || argv[cazxg][wznlk]== 'cfliq' || argv[cazxg][wznlk]== 'q' || argv[cazxg][wznlk]== 'X' || argv[cazxg][wznlk]== 'Y' || argv[cazxg][wznlk]== 'Q') continue;
			else {
				tggqv[mlhna]=argv[cazxg][wznlk];
				mlhna+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", tggqv);
	int cfliq=0;
	for(int cazxg=0; cazxg<100; cazxg+=3){
		roifn[cfliq]=tggqv[cazxg];
		cfliq++;
	}
	printf(""Der neue String lautet: %s\n"", roifn);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int hcqsc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int wrjzj = 0;
	for(int dcubh = 1; dcubh < hcqsc; dcubh++){
		int xbdeg = 0;
		while(*(argv[dcubh]+xbdeg) != '\0'){
			if((*(argv[dcubh]+xbdeg) != 'x') && (*(argv[dcubh]+xbdeg) != 'y') && (*(argv[dcubh]+xbdeg) != 'q') && (*(argv[dcubh]+xbdeg) != 'X') && (*(argv[dcubh]+xbdeg) != 'Y') && (*(argv[dcubh]+xbdeg) != 'Q')){
			*(text_str+wrjzj) = *(argv[dcubh]+xbdeg);
			wrjzj++;
			}
			xbdeg++;
		}
	}
	text_str = realloc(text_str,wrjzj+1 * sizeof(char));
	int pjjmh = (wrjzj+1) / 3;
	char* solution = malloc(pjjmh * sizeof(char));
	int zyozg = 0;
	for(int dcubh = 0; dcubh < wrjzj+1; dcubh++){
		if((dcubh % 3) == 0){
			*(solution+zyozg) = *(text_str+dcubh);
			zyozg++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }","{  
	for(int mhovf = 0; src[mhovf] != '\0' && dest[mhovf] != '\0' && mhovf < zahl; mhovf++)		dest[mhovf] = src[mhovf];
void mtpwv( char* str)
	int hwfzs = 0;
	for( int mhovf = 0; str[mhovf] != '\0'; mhovf++)
		hwfzs = mhovf;
	char hlllt[hwfzs];
	for( int mhovf = 0; mhovf <= hwfzs; mhovf++)
		hlllt[mhovf] = str[hwfzs-mhovf];
	for( int mhovf = 0; mhovf <= hwfzs; mhovf++)
		str[mhovf] = hlllt[mhovf];
{  
  char doynh[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", doynh);
  ersetzen(doynh , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", doynh);
  }",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int pvnkb = 0;
	while(pvnkb < zahl && dest[pvnkb] != '\0' && src[pvnkb] != '\0')		dest[pvnkb] = src[pvnkb];
		pvnkb ++;
{
	int idxjo = 0;
	while(str[idxjo] != '\0') idxjo++;
	char lzzpn[idxjo];
	for(int zbmpn = 0; zbmpn < idxjo; zbmpn++) lzzpn[zbmpn] = str[zbmpn];
	for(int zbmpn = 0; zbmpn < idxjo; zbmpn++){
		str[zbmpn] = lzzpn[idxjo - 1 - zbmpn];
}
{  
      }",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void grszh (char* vhfph)
{
	for(int tycip = 0; vhfph[tycip] != '\0'; tycip++)
	{
		if(vhfph[tycip] == 'x' || vhfph[tycip] == 'y' || vhfph[tycip] == 'q' || vhfph[tycip] == 'X' || vhfph[tycip] == 'Y' || vhfph[tycip] == 'Q' )
		{
			for(int eyjhi = tycip; vhfph[eyjhi] != '\0'; eyjhi++)
			{
				vhfph[eyjhi] = vhfph[eyjhi+1];
			}
			tycip = tycip -1;
		}
	}
}
void fetuq (char* vhfph)
{
	int jqove = 0;
	while(vhfph[jqove] != '\0')
	{
	jqove++;
	}
	char lbtcc[jqove]; 
	for(int bjwqu = 0; bjwqu < jqove; bjwqu++)
	{
		if(bjwqu % 3 == 0)
		{
			lbtcc[bjwqu] = vhfph[bjwqu];
		}
		else lbtcc[bjwqu] = 0;
	}
	int twzhv =0;
	for(int tycip = 0; tycip < jqove; tycip++)
	{
		if(lbtcc[tycip] != 0)
		{
			vhfph[twzhv] = lbtcc[tycip];
			twzhv++;
		}
	}
	vhfph[twzhv] = '\0';
}
int main(int mfvfw, char* argv[])
{
	int jqove = 0;
	for(int eyjhi=1; eyjhi < mfvfw; eyjhi++)
	{
		for(int tycip = 0; argv[eyjhi][tycip] != '\0'; tycip++)
		{
			jqove++;		
		}				
	}
	char vhfph[jqove+1];
	vhfph[jqove] = '\0';
	int twzhv = 0;
	for(int eyjhi=1; eyjhi < mfvfw; eyjhi++)
	{
		for(int tycip = 0; argv[eyjhi][tycip] != '\0'; tycip++)
		{
			vhfph[twzhv] = argv[eyjhi][tycip];
			twzhv++;
		}
	}
	grszh(vhfph);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&vhfph[0]);
	fetuq(vhfph);
	printf(""Der neue String lautet: %s \n"",&vhfph[0]);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int edojj, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int lqilq = 0;
	for(int msyhj = 1; msyhj < edojj; msyhj++){
		int gcqpx = 0;
		while(*(argv[msyhj]+gcqpx) != '\0'){
			if((*(argv[msyhj]+gcqpx) != 'x') && (*(argv[msyhj]+gcqpx) != 'y') && (*(argv[msyhj]+gcqpx) != 'q') && (*(argv[msyhj]+gcqpx) != 'X') && (*(argv[msyhj]+gcqpx) != 'Y') && (*(argv[msyhj]+gcqpx) != 'Q')){
			*(text_str+lqilq) = *(argv[msyhj]+gcqpx);
			lqilq++;
			}
			gcqpx++;
		}
	}
	text_str = realloc(text_str,lqilq+1 * sizeof(char));
	int oangj = (lqilq+1) / 3;
	char* solution = malloc(oangj * sizeof(char));
	int jfhtw = 0;
	for(int msyhj = 0; msyhj < lqilq+1; msyhj++){
		if((msyhj % 3) == 0){
			*(solution+jfhtw) = *(text_str+msyhj);
			jfhtw++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1.0
"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int qkroe, char* argv[]){
	char jbdbu[100]= """";
	char xbvjp[100]="""";
	int qyzhx=0;
	for(int kxvwp=1 ;kxvwp<qkroe ;kxvwp++){
		for (int zzbzy=0; argv[kxvwp][zzbzy] != '\0'; zzbzy++){
			if(argv[kxvwp][zzbzy]== 'qyzhx' || argv[kxvwp][zzbzy]== 'eakba' || argv[kxvwp][zzbzy]== 'q' || argv[kxvwp][zzbzy]== 'X' || argv[kxvwp][zzbzy]== 'Y' || argv[kxvwp][zzbzy]== 'Q') continue;
			else {
				jbdbu[qyzhx]=argv[kxvwp][zzbzy];
				qyzhx+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", jbdbu);
	int eakba=0;
	for(int kxvwp=0; kxvwp<100; kxvwp+=3){
		xbvjp[eakba]=jbdbu[kxvwp];
		eakba++;
	}
	printf(""Der neue String lautet: %s\n"", xbvjp);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void hxjtu (char* rwboy)
{
	for(int dlfwc = 0; rwboy[dlfwc] != '\0'; dlfwc++)
	{
		if(rwboy[dlfwc] == 'x' || rwboy[dlfwc] == 'y' || rwboy[dlfwc] == 'q' || rwboy[dlfwc] == 'X' || rwboy[dlfwc] == 'Y' || rwboy[dlfwc] == 'Q' )
		{
			for(int mxpkq = dlfwc; rwboy[mxpkq] != '\0'; mxpkq++)
			{
				rwboy[mxpkq] = rwboy[mxpkq+1];
			}
			dlfwc = dlfwc -1;
		}
	}
}
void dgecb (char* rwboy)
{
	int afalr = 0;
	while(rwboy[afalr] != '\0')
	{
	afalr++;
	}
	char zxjwu[afalr]; 
	for(int qqwyd = 0; qqwyd < afalr; qqwyd++)
	{
		if(qqwyd % 3 == 0)
		{
			zxjwu[qqwyd] = rwboy[qqwyd];
		}
		else zxjwu[qqwyd] = 0;
	}
	int dwkbk =0;
	for(int dlfwc = 0; dlfwc < afalr; dlfwc++)
	{
		if(zxjwu[dlfwc] != 0)
		{
			rwboy[dwkbk] = zxjwu[dlfwc];
			dwkbk++;
		}
	}
	rwboy[dwkbk] = '\0';
}
int main(int xkupu, char* argv[])
{
	int afalr = 0;
	for(int mxpkq=1; mxpkq < xkupu; mxpkq++)
	{
		for(int dlfwc = 0; argv[mxpkq][dlfwc] != '\0'; dlfwc++)
		{
			afalr++;		
		}				
	}
	char rwboy[afalr+1];
	rwboy[afalr] = '\0';
	int dwkbk = 0;
	for(int mxpkq=1; mxpkq < xkupu; mxpkq++)
	{
		for(int dlfwc = 0; argv[mxpkq][dlfwc] != '\0'; dlfwc++)
		{
			rwboy[dwkbk] = argv[mxpkq][dlfwc];
			dwkbk++;
		}
	}
	hxjtu(rwboy);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&rwboy[0]);
	dgecb(rwboy);
	printf(""Der neue String lautet: %s \n"",&rwboy[0]);
}",1.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
{
	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}",0.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
{
	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}",0.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int uixan, char *mtcxi[])
{
    int qrgaa;
    int wqpxs = 0;
    char rzyap[20];
    char qxkvk[15];
    int sxryu = 0;
    for (int thblo = 1; thblo < uixan; thblo++)
    {
        qrgaa = 0;
        while ((mtcxi[thblo][qrgaa]) != '\0')
        {
            if (mtcxi[thblo][qrgaa] != 'sxryu' && mtcxi[thblo][qrgaa] != 'y' && mtcxi[thblo][qrgaa] != 'q' && mtcxi[thblo][qrgaa] != 'X' && mtcxi[thblo][qrgaa] != 'Y' && mtcxi[thblo][qrgaa] != 'Q')
            {
                rzyap[wqpxs] = mtcxi[thblo][qrgaa];
                wqpxs++;
            }
            qrgaa++;
        }
    }
    for (int thblo = 0; thblo <= wqpxs; thblo++)
    {
        if (sxryu > (thblo / 3) || thblo == 0)
        {
            if (thblo == 0)
            {
                qxkvk[sxryu] = rzyap[thblo];
                sxryu++;
            }
            if (((thblo) % 3) == 0)
            {
                qxkvk[sxryu] = rzyap[thblo];
                sxryu++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int thblo = 0; thblo < wqpxs; thblo++)
        if (rzyap[thblo] != '\0')
        {
            printf(""%c"", rzyap[thblo]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int thblo = 1; thblo < (wqpxs / 2)-1; thblo++)
            printf(""%c"", qxkvk[thblo]);
    if (rzyap[0] == 'z')
        printf(""z"");
}",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int olckh = 0;
	while(olckh < zahl && dest[olckh] != '\0' && src[olckh] != '\0')		dest[olckh] = src[olckh];
		olckh ++;
{
	int yxour = 0;
	while(str[yxour] != '\0') yxour++;
	char opghq[yxour];
	for(int tsbfg = 0; tsbfg < yxour; tsbfg++) opghq[tsbfg] = str[tsbfg];
	for(int tsbfg = 0; tsbfg < yxour; tsbfg++){
		str[tsbfg] = opghq[yxour - 1 - tsbfg];
}
{  
      }",1.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}","	for (int ggwpg=0;((ggwpg<zahl)&&((dest[ggwpg])!=('\0')))&&((src[ggwpg])!=('\0'));ggwpg++)
dest[ggwpg]=src[ggwpg];
{	char ljifj[30]="""";
	int ggwpg=0;
	for(;(str[ggwpg+1])!=('\0');ggwpg++){	for(int bsmhw=0;(str[bsmhw])!=('\0');bsmhw++) {ljifj[bsmhw]=str[ggwpg-bsmhw];	for(int bsmhw=0;(str[bsmhw])!=('\0');bsmhw++) {str[bsmhw]=ljifj[(bsmhw)];	char ulbkz[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", ulbkz );
	ersetzen( ulbkz , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", ulbkz );
	umdrehen( ulbkz );
	printf( ""Rückwärts : %s \n"", ulbkz );
}",1.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}",0.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int zefkb, char* argv[] )
{  
	char kmddl[100];
	char omawj[100];
	int niwny = 0;
	for (int igfwv = 0; igfwv < zefkb -1; igfwv++)
	{
		int erggf = 0;
		for (erggf; *(*(argv+1+igfwv)+erggf) != '\0'; erggf++)
		{
			kmddl[niwny] = *(*(argv+1+igfwv)+erggf);
			niwny++;
		}
	}
	kmddl[niwny] = '\0';
	for (int igfwv = 0; igfwv < niwny+1; igfwv++)
	{
		if ((kmddl[igfwv] == 'x') || (kmddl[igfwv] == 'y') || (kmddl[igfwv] == 'q') || (kmddl[igfwv] == 'X') || (kmddl[igfwv] == 'Y') || (kmddl[igfwv] == 'Q'))
		{
			while (1)
			{
				kmddl[igfwv] = kmddl[igfwv+1];
				igfwv++;
				if (kmddl[igfwv] == '\0')
				{	
					break;
				}
			}
			niwny--;
			igfwv = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",kmddl);
	for (int igfwv = 0, z = 0; igfwv < ((niwny/2)-2); igfwv++, z += 3)
	{
		omawj[igfwv] = kmddl[z];
	}
	int erggf = 0;
	for (erggf; kmddl[erggf] != '\0'; erggf++)
		;
	omawj[erggf] = '\0';
	printf(""Der neue String lautet: %s"",omawj);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",0.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int uszru, char* argv[] )
{  
	char szxkc[100];
	char txoic[100];
	int tlwcy = 0;
	for (int wadgz = 0; wadgz < uszru -1; wadgz++)
	{
		int qlqzb = 0;
		for (qlqzb; *(*(argv+1+wadgz)+qlqzb) != '\0'; qlqzb++)
		{
			szxkc[tlwcy] = *(*(argv+1+wadgz)+qlqzb);
			tlwcy++;
		}
	}
	szxkc[tlwcy] = '\0';
	for (int wadgz = 0; wadgz < tlwcy+1; wadgz++)
	{
		if ((szxkc[wadgz] == 'x') || (szxkc[wadgz] == 'y') || (szxkc[wadgz] == 'q') || (szxkc[wadgz] == 'X') || (szxkc[wadgz] == 'Y') || (szxkc[wadgz] == 'Q'))
		{
			while (1)
			{
				szxkc[wadgz] = szxkc[wadgz+1];
				wadgz++;
				if (szxkc[wadgz] == '\0')
				{	
					break;
				}
			}
			tlwcy--;
			wadgz = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",szxkc);
	for (int wadgz = 0, z = 0; wadgz < ((tlwcy/2)-2); wadgz++, z += 3)
	{
		txoic[wadgz] = szxkc[z];
	}
	int qlqzb = 0;
	for (qlqzb; szxkc[qlqzb] != '\0'; qlqzb++)
		;
	txoic[qlqzb] = '\0';
	printf(""Der neue String lautet: %s"",txoic);
}",1.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int aleug(char *osetd)
{
    int zrzwx = 0;
    for (int baiup = 0; osetd[baiup] != '\0'; baiup++)
    {
        zrzwx += 1;
    }
    return zrzwx;
}
int qhjsf(char *etzjo, char *hhbga)
{
    int tssjk = 0;
    int baiup = 0;
    while (hhbga[tssjk] != '\0')
    {
        if (hhbga[tssjk] != 'q' && hhbga[tssjk] != 'x' && hhbga[tssjk] != 'y' && hhbga[tssjk] != 'Q' && hhbga[tssjk] != 'X' && hhbga[tssjk] != 'Y')
        {
            etzjo[baiup++] = hhbga[tssjk++];
        }
        else
        {
            tssjk++;
        }
    }
    return baiup;
}
int mufxg(char *bovoe)
{
    int tssjk = 0;
    int baiup = 0;
    while (bovoe[tssjk] != '\0')
    {
        if (tssjk % 3 == 0)
        {
            bovoe[baiup++] = bovoe[tssjk++];
        }
        else
        {
            tssjk++;
        }
    }
    return baiup;
}
int main(int kfdtk, char *olzsc[])
{
    int xbzsc = 0;
    for (int tssjk = 1; tssjk < kfdtk; tssjk++)
    {
        xbzsc += aleug(olzsc[tssjk]);
    }
    char qlzuz[xbzsc + 1];
    char *jwlsp = qlzuz;
    for (int tssjk = 1; tssjk < kfdtk; tssjk++)
    {
        jwlsp += qhjsf(jwlsp, olzsc[tssjk]);
    }
    *jwlsp = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", qlzuz);
    qlzuz[mufxg(qlzuz)] = '\0';
    printf(""Der neue String lautet: %s\n"", qlzuz);
}",1.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void ngrbd(char* str1){
	int xxuce;
	int wjguc;
	for ( xxuce = 0,  wjguc = 0;wjguc<100; ++wjguc){
	if ((str1[wjguc] != 'x')&&(str1[wjguc] != 'X')&&(str1[wjguc] != 'y')&&(str1[wjguc] != 'Y')&&(str1[wjguc] != 'q')&&(str1[wjguc] != 'Q'))
	str1[xxuce++] = str1[wjguc];
	}
}
void izfnm(char* str1, char* str2){
	int wjguc=0;
	for(;(str2[wjguc])!=('\0');wjguc++){}
	for (int xxuce=0;str1[xxuce]!='\0';xxuce++){
		str2[wjguc+xxuce]=str1[xxuce];
	}	
;}
void xckqf(char* str1,char* str2){
	for (int xxuce=0;str1[xxuce]!='\0';xxuce++){
		if((xxuce+3)%3==0)str2[((xxuce+3)/3)-1]=str1[xxuce];
	}
}
int main(int kqabo,char** argv){
	if (kqabo<2) return 0;
	char hrpfa[100]="""";
	char mxfjt[100]="""";
	for(int xxuce=1;xxuce<kqabo;xxuce++) {
		izfnm(argv[xxuce],hrpfa);}
		ngrbd(hrpfa);
	xckqf(hrpfa,mxfjt);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",hrpfa);
	printf(""Der neue String lautet: %s"",mxfjt);
}",1.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }","    for (int kabla = 0;(kabla < zahl) && (kabla < 10) && (src[kabla] != '\0'); kabla++)
    {
        dest[kabla] = src[kabla];
    void marot(char* str )
{
    int jacpv;
    for (int xjjnr = 1; str[xjjnr] != '\0'; xjjnr++)
    {
        jacpv = xjjnr + 2;
        char mwazs[jacpv];
    for (int kabla = 0; kabla < (jacpv - 1); kabla++)
    {
        mwazs[jacpv - 2- kabla] = str[kabla];
    }
    for (int kabla = 0; kabla < jacpv; kabla++)
    {
        str[kabla] = mwazs[kabla];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",0.0
"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int kmnfu, char** argv)
{
    char inocu[100] = ""lasse roland max ivo"";
    char nhjrf[100];
    char dbxhe[100];
    int gtclt = 0;
    int vaqjg = 0;
    int xdmev = 1;
    int lzchs;
    for ( lzchs = 0; *(argv+lzchs) != '\0'; lzchs++)
    {
        if (*(argv+lzchs) == ' ' || *(argv+lzchs) == 'x' || *(argv+lzchs) == 'y' || *(argv+lzchs) == 'q'|| *(argv+lzchs) == 'X'|| *(argv+lzchs) == 'Y'|| *(argv+lzchs) == 'Q')
            xdmev++;
            continue;
        nhjrf[gtclt++] = *(argv+lzchs);
    }
    nhjrf[gtclt] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", nhjrf );
    for ( lzchs = 0; nhjrf[lzchs] != '\0'; lzchs++)
    {
        if (lzchs == 0 || lzchs % 3 == 0)
        dbxhe[vaqjg++] = nhjrf[lzchs];
        continue;
    }
    dbxhe[vaqjg] = 0;
    printf( ""Der neue String lautet: %s \n"", dbxhe);
}",1.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int fufrj=0; fufrj<zahl && *src!='\0' && *dest!='\0'; fufrj++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char qufip[100] = """";
    char* ptemp = qufip;
    for(int fufrj=0; str[fufrj]!=0; fufrj++)
        qufip[fufrj] = str[fufrj]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }",0.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }","{  
	for(int qovbi = 0; src[qovbi] != '\0' && dest[qovbi] != '\0' && qovbi < zahl; qovbi++)		dest[qovbi] = src[qovbi];
void mynmk( char* str)
	int yrbry = 0;
	for( int qovbi = 0; str[qovbi] != '\0'; qovbi++)
		yrbry = qovbi;
	char quesr[yrbry];
	for( int qovbi = 0; qovbi <= yrbry; qovbi++)
		quesr[qovbi] = str[yrbry-qovbi];
	for( int qovbi = 0; qovbi <= yrbry; qovbi++)
		str[qovbi] = quesr[qovbi];
{  
  char uxttt[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", uxttt);
  ersetzen(uxttt , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", uxttt);
  }",1.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int rhokh;
    for(rhokh = 0; rhokh < zahl && *dest != '\0' && *src != '\0'; rhokh++)
           *dest = *src;
       src++;
       dest++;
    {
    int kjcxw = 0;
    int ajkva = 0;
    int vwuzp = 0;
    for(ajkva=0; str[ajkva] != 0; ajkva++);
    for(kjcxw = 0; kjcxw <ajkva/2; kjcxw++)
    {
        vwuzp = str[kjcxw];
        str[kjcxw]=str[ajkva - 1 - kjcxw];
        str[ajkva - 1 - kjcxw] = vwuzp;
        for(kjcxw = 0; kjcxw < ajkva; kjcxw++);
}
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
{
	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}",0.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }","{  
	for(int prlot = 0; src[prlot] != '\0' && dest[prlot] != '\0' && prlot < zahl; prlot++)		dest[prlot] = src[prlot];
void vqbjx( char* str)
	int sqgke = 0;
	for( int prlot = 0; str[prlot] != '\0'; prlot++)
		sqgke = prlot;
	char fcxhq[sqgke];
	for( int prlot = 0; prlot <= sqgke; prlot++)
		fcxhq[prlot] = str[sqgke-prlot];
	for( int prlot = 0; prlot <= sqgke; prlot++)
		str[prlot] = fcxhq[prlot];
{  
  char drwru[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", drwru);
  ersetzen(drwru , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", drwru);
  }",1.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }","    for (int aympp = 0;(aympp < zahl) && (aympp < 10) && (src[aympp] != '\0'); aympp++)
    {
        dest[aympp] = src[aympp];
    void ofiqc(char* str )
{
    int ulvee;
    for (int pmgtf = 1; str[pmgtf] != '\0'; pmgtf++)
    {
        ulvee = pmgtf + 2;
        char itihj[ulvee];
    for (int aympp = 0; aympp < (ulvee - 1); aympp++)
    {
        itihj[ulvee - 2- aympp] = str[aympp];
    }
    for (int aympp = 0; aympp < ulvee; aympp++)
    {
        str[aympp] = itihj[aympp];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",1.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int ttkat(char *nnywo)
{
    int xzafd = 0;
    for (int byqki = 0; nnywo[byqki] != '\0'; byqki++)
    {
        xzafd += 1;
    }
    return xzafd;
}
int txsug(char *xheio, char *rckuw)
{
    int aiope = 0;
    int byqki = 0;
    while (rckuw[aiope] != '\0')
    {
        if (rckuw[aiope] != 'q' && rckuw[aiope] != 'x' && rckuw[aiope] != 'y' && rckuw[aiope] != 'Q' && rckuw[aiope] != 'X' && rckuw[aiope] != 'Y')
        {
            xheio[byqki++] = rckuw[aiope++];
        }
        else
        {
            aiope++;
        }
    }
    return byqki;
}
int yeedq(char *ubvkc)
{
    int aiope = 0;
    int byqki = 0;
    while (ubvkc[aiope] != '\0')
    {
        if (aiope % 3 == 0)
        {
            ubvkc[byqki++] = ubvkc[aiope++];
        }
        else
        {
            aiope++;
        }
    }
    return byqki;
}
int main(int ezpps, char *xbnax[])
{
    int ygqut = 0;
    for (int aiope = 1; aiope < ezpps; aiope++)
    {
        ygqut += ttkat(xbnax[aiope]);
    }
    char plmya[ygqut + 1];
    char *baqxk = plmya;
    for (int aiope = 1; aiope < ezpps; aiope++)
    {
        baqxk += txsug(baqxk, xbnax[aiope]);
    }
    *baqxk = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", plmya);
    plmya[yeedq(plmya)] = '\0';
    printf(""Der neue String lautet: %s\n"", plmya);
}",1.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void oyrtj(char* str1){
	int wfegi;
	int jrhws;
	for ( wfegi = 0,  jrhws = 0;jrhws<100; ++jrhws){
	if ((str1[jrhws] != 'x')&&(str1[jrhws] != 'X')&&(str1[jrhws] != 'y')&&(str1[jrhws] != 'Y')&&(str1[jrhws] != 'q')&&(str1[jrhws] != 'Q'))
	str1[wfegi++] = str1[jrhws];
	}
}
void etlfl(char* str1, char* str2){
	int jrhws=0;
	for(;(str2[jrhws])!=('\0');jrhws++){}
	for (int wfegi=0;str1[wfegi]!='\0';wfegi++){
		str2[jrhws+wfegi]=str1[wfegi];
	}	
;}
void bfsrf(char* str1,char* str2){
	for (int wfegi=0;str1[wfegi]!='\0';wfegi++){
		if((wfegi+3)%3==0)str2[((wfegi+3)/3)-1]=str1[wfegi];
	}
}
int main(int yyiad,char** argv){
	if (yyiad<2) return 0;
	char bcihj[100]="""";
	char lygxg[100]="""";
	for(int wfegi=1;wfegi<yyiad;wfegi++) {
		etlfl(argv[wfegi],bcihj);}
		oyrtj(bcihj);
	bfsrf(bcihj,lygxg);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",bcihj);
	printf(""Der neue String lautet: %s"",lygxg);
}",1.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",0.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",0.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
{
	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void gzetz (char* sjftx)
{
	for(int jbaxo = 0; sjftx[jbaxo] != '\0'; jbaxo++)
	{
		if(sjftx[jbaxo] == 'x' || sjftx[jbaxo] == 'y' || sjftx[jbaxo] == 'q' || sjftx[jbaxo] == 'X' || sjftx[jbaxo] == 'Y' || sjftx[jbaxo] == 'Q' )
		{
			for(int gnane = jbaxo; sjftx[gnane] != '\0'; gnane++)
			{
				sjftx[gnane] = sjftx[gnane+1];
			}
			jbaxo = jbaxo -1;
		}
	}
}
void vmtmc (char* sjftx)
{
	int qxknj = 0;
	while(sjftx[qxknj] != '\0')
	{
	qxknj++;
	}
	char mywln[qxknj]; 
	for(int akagp = 0; akagp < qxknj; akagp++)
	{
		if(akagp % 3 == 0)
		{
			mywln[akagp] = sjftx[akagp];
		}
		else mywln[akagp] = 0;
	}
	int xjchs =0;
	for(int jbaxo = 0; jbaxo < qxknj; jbaxo++)
	{
		if(mywln[jbaxo] != 0)
		{
			sjftx[xjchs] = mywln[jbaxo];
			xjchs++;
		}
	}
	sjftx[xjchs] = '\0';
}
int main(int othqj, char* argv[])
{
	int qxknj = 0;
	for(int gnane=1; gnane < othqj; gnane++)
	{
		for(int jbaxo = 0; argv[gnane][jbaxo] != '\0'; jbaxo++)
		{
			qxknj++;		
		}				
	}
	char sjftx[qxknj+1];
	sjftx[qxknj] = '\0';
	int xjchs = 0;
	for(int gnane=1; gnane < othqj; gnane++)
	{
		for(int jbaxo = 0; argv[gnane][jbaxo] != '\0'; jbaxo++)
		{
			sjftx[xjchs] = argv[gnane][jbaxo];
			xjchs++;
		}
	}
	gzetz(sjftx);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&sjftx[0]);
	vmtmc(sjftx);
	printf(""Der neue String lautet: %s \n"",&sjftx[0]);
}",1.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int kxeig=0; kxeig<zahl && *src!='\0' && *dest!='\0'; kxeig++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char rhclv[100] = """";
    char* ptemp = rhclv;
    for(int kxeig=0; str[kxeig]!=0; kxeig++)
        rhclv[kxeig] = str[kxeig]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int zvxuj(char *sthkp)
 int dclyh = 0; 
    while (sthkp[dclyh] != '\0')
      dclyh++;
  return dclyh; 
{  
  int aebgc = zvxuj(src);
  int wlddf = zvxuj(dest);
 /*     char bjhbu[aebgc]; 
    for (int dclyh = 0; dclyh <= aebgc-1; dclyh++) 
        bjhbu [dclyh] = src[dclyh];
  for (int dclyh = 0; dclyh <= zahl-1; dclyh++) {
    if (dclyh <= wlddf && dclyh <= aebgc) {
        *dest = bjhbu[dclyh]; 
      }*/
  int dclyh = 1;
   while(*src && dclyh <= aebgc && dclyh <= wlddf && dclyh <= zahl) {
    *dest++ = *src++;
    dclyh++;
 }
void bklof(char* a, char* b){
    char edkzv = *a;
    *a = *b;
    *b = edkzv;
}
{
    if (!*str) 
        return;
    char* dclyh = str;
    char* j = dclyh + zvxuj(str) - 1;
    while (dclyh < j) {
        bklof(dclyh, j);
        dclyh++;
        j--;
    }
}
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }","    for (int lwcmx = 0;(lwcmx < zahl) && (lwcmx < 10) && (src[lwcmx] != '\0'); lwcmx++)
    {
        dest[lwcmx] = src[lwcmx];
    void jhtkc(char* str )
{
    int wpybb;
    for (int zwugj = 1; str[zwugj] != '\0'; zwugj++)
    {
        wpybb = zwugj + 2;
        char kgcsq[wpybb];
    for (int lwcmx = 0; lwcmx < (wpybb - 1); lwcmx++)
    {
        kgcsq[wpybb - 2- lwcmx] = str[lwcmx];
    }
    for (int lwcmx = 0; lwcmx < wpybb; lwcmx++)
    {
        str[lwcmx] = kgcsq[lwcmx];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",1.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}","	for (int yathf=0;((yathf<zahl)&&((dest[yathf])!=('\0')))&&((src[yathf])!=('\0'));yathf++)
dest[yathf]=src[yathf];
{	char egivk[30]="""";
	int yathf=0;
	for(;(str[yathf+1])!=('\0');yathf++){	for(int frzbo=0;(str[frzbo])!=('\0');frzbo++) {egivk[frzbo]=str[yathf-frzbo];	for(int frzbo=0;(str[frzbo])!=('\0');frzbo++) {str[frzbo]=egivk[(frzbo)];	char xijoa[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", xijoa );
	ersetzen( xijoa , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", xijoa );
	umdrehen( xijoa );
	printf( ""Rückwärts : %s \n"", xijoa );
}",1.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int tqrxy, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int npeui = 0;
for(int vqydg=1; vqydg < tqrxy; vqydg++){
	int oesqi = 0;
while(*(argv[vqydg]+oesqi) != '\0'){
if((*(argv[vqydg]+oesqi) != 'npeui') && (*(argv[vqydg]+oesqi)!= 'oskix') && (*(argv[vqydg]+oesqi) != 'q')&& (*(argv[vqydg]+oesqi) != 'X')&& (*(argv[vqydg]+oesqi) != 'Y')&& (*(argv[vqydg]+oesqi) != 'Q')){
			*(compactstring+npeui) = *(argv[vqydg]+oesqi);
			npeui++;
	}
	oesqi++;
}
}
compactstring = (char*) realloc(compactstring,npeui+sizeof(char));
int hrjuy=(npeui+1)/3;
char* shortend = (char*) malloc(hrjuy * sizeof(char));
int oskix = 0;
for (int vqydg=0;vqydg<npeui+1;vqydg++){
if((vqydg%3)==0){
	*(shortend+oskix) = *(compactstring+vqydg);
	oskix++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int akxst, char *bmutr[])
{   
    for (int ddaxs = 1; ddaxs < akxst; ddaxs++){
        char * CurrentCommandString = bmutr[ddaxs];  
        int iwnsw = 0;
        while (CurrentCommandString[iwnsw] != '\0' && CurrentCommandString[iwnsw] != ' ') {
            if (CurrentCommandString[iwnsw] == 'x' 
             || CurrentCommandString[iwnsw] == 'y' 
             || CurrentCommandString[iwnsw] == 'q'
             || CurrentCommandString[iwnsw] == 'X'
             || CurrentCommandString[iwnsw] == 'Y' 
             || CurrentCommandString[iwnsw] == 'Q')
             {   
                 int glyqw = iwnsw;
                 while (CurrentCommandString[iwnsw] != '\0' && CurrentCommandString[iwnsw] != ' ') {
                    CurrentCommandString[glyqw] = CurrentCommandString[glyqw + 1]; 
                    ++glyqw; 
                 }
             }
            ++iwnsw;
         }
    }
    char kqlyp[5000];
    int ntbdu = 0;
    char jbiqr[5000];
    int jlfcz = 0;
    for (int ddaxs = 1; ddaxs < akxst; ddaxs++){
        char * CurrentCommandString = bmutr[ddaxs];  
        int uwjla, glyqw;
          uwjla = 0;
          while (kqlyp[uwjla] != '\0' && kqlyp[uwjla] != ' ') {
            ++uwjla;
          }
          for (glyqw = 0; CurrentCommandString[glyqw] != '\0' && CurrentCommandString[uwjla] != ' '; ++glyqw, ++uwjla) {
            kqlyp[uwjla] = CurrentCommandString[glyqw];
          }
          kqlyp[uwjla] = '\0';       
    }
        int uwjla, glyqw;
        uwjla = 0;
        while (jbiqr[uwjla] != '\0' && jbiqr[uwjla] != ' ') {
        ++uwjla;
        }
        for (glyqw = 0; kqlyp[glyqw] != '\0' && kqlyp[uwjla] != ' '; ++uwjla) {
         jbiqr[uwjla] = kqlyp[glyqw];
         glyqw+=3;
        }
        jbiqr[uwjla] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", kqlyp);
    printf(""Der neue String lautet: %s"", jbiqr);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}",0.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",0.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int beoni;
    for(beoni = 0; beoni < zahl && *dest != '\0' && *src != '\0'; beoni++)
           *dest = *src;
       src++;
       dest++;
    {
    int wlefv = 0;
    int qihug = 0;
    int gbgur = 0;
    for(qihug=0; str[qihug] != 0; qihug++);
    for(wlefv = 0; wlefv <qihug/2; wlefv++)
    {
        gbgur = str[wlefv];
        str[wlefv]=str[qihug - 1 - wlefv];
        str[qihug - 1 - wlefv] = gbgur;
        for(wlefv = 0; wlefv < qihug; wlefv++);
}
{  
      }",1.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int ckbaw;
    for(ckbaw = 0; ckbaw < zahl && *dest != '\0' && *src != '\0'; ckbaw++)
           *dest = *src;
       src++;
       dest++;
    {
    int vyanf = 0;
    int zvfqt = 0;
    int qkyxt = 0;
    for(zvfqt=0; str[zvfqt] != 0; zvfqt++);
    for(vyanf = 0; vyanf <zvfqt/2; vyanf++)
    {
        qkyxt = str[vyanf];
        str[vyanf]=str[zvfqt - 1 - vyanf];
        str[zvfqt - 1 - vyanf] = qkyxt;
        for(vyanf = 0; vyanf < zvfqt; vyanf++);
}
{  
      }",1.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}","	for (int wcvuy=0;((wcvuy<zahl)&&((dest[wcvuy])!=('\0')))&&((src[wcvuy])!=('\0'));wcvuy++)
dest[wcvuy]=src[wcvuy];
{	char pzcqw[30]="""";
	int wcvuy=0;
	for(;(str[wcvuy+1])!=('\0');wcvuy++){	for(int nwfrv=0;(str[nwfrv])!=('\0');nwfrv++) {pzcqw[nwfrv]=str[wcvuy-nwfrv];	for(int nwfrv=0;(str[nwfrv])!=('\0');nwfrv++) {str[nwfrv]=pzcqw[(nwfrv)];	char vovuy[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", vovuy );
	ersetzen( vovuy , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", vovuy );
	umdrehen( vovuy );
	printf( ""Rückwärts : %s \n"", vovuy );
}",1.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int phmes, char* argv[] )
{  
	char qnhxi[100];
	char rnccr[100];
	int auvfh = 0;
	for (int jobbf = 0; jobbf < phmes -1; jobbf++)
	{
		int jbwct = 0;
		for (jbwct; *(*(argv+1+jobbf)+jbwct) != '\0'; jbwct++)
		{
			qnhxi[auvfh] = *(*(argv+1+jobbf)+jbwct);
			auvfh++;
		}
	}
	qnhxi[auvfh] = '\0';
	for (int jobbf = 0; jobbf < auvfh+1; jobbf++)
	{
		if ((qnhxi[jobbf] == 'x') || (qnhxi[jobbf] == 'y') || (qnhxi[jobbf] == 'q') || (qnhxi[jobbf] == 'X') || (qnhxi[jobbf] == 'Y') || (qnhxi[jobbf] == 'Q'))
		{
			while (1)
			{
				qnhxi[jobbf] = qnhxi[jobbf+1];
				jobbf++;
				if (qnhxi[jobbf] == '\0')
				{	
					break;
				}
			}
			auvfh--;
			jobbf = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",qnhxi);
	for (int jobbf = 0, z = 0; jobbf < ((auvfh/2)-2); jobbf++, z += 3)
	{
		rnccr[jobbf] = qnhxi[z];
	}
	int jbwct = 0;
	for (jbwct; qnhxi[jbwct] != '\0'; jbwct++)
		;
	rnccr[jbwct] = '\0';
	printf(""Der neue String lautet: %s"",rnccr);
}",1.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int frztp, char* argv[] )
{  
	char shqhr[100];
	char tahwn[100];
	int rnjzb = 0;
	for (int sdqgc = 0; sdqgc < frztp -1; sdqgc++)
	{
		int uijry = 0;
		for (uijry; *(*(argv+1+sdqgc)+uijry) != '\0'; uijry++)
		{
			shqhr[rnjzb] = *(*(argv+1+sdqgc)+uijry);
			rnjzb++;
		}
	}
	shqhr[rnjzb] = '\0';
	for (int sdqgc = 0; sdqgc < rnjzb+1; sdqgc++)
	{
		if ((shqhr[sdqgc] == 'x') || (shqhr[sdqgc] == 'y') || (shqhr[sdqgc] == 'q') || (shqhr[sdqgc] == 'X') || (shqhr[sdqgc] == 'Y') || (shqhr[sdqgc] == 'Q'))
		{
			while (1)
			{
				shqhr[sdqgc] = shqhr[sdqgc+1];
				sdqgc++;
				if (shqhr[sdqgc] == '\0')
				{	
					break;
				}
			}
			rnjzb--;
			sdqgc = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",shqhr);
	for (int sdqgc = 0, z = 0; sdqgc < ((rnjzb/2)-2); sdqgc++, z += 3)
	{
		tahwn[sdqgc] = shqhr[z];
	}
	int uijry = 0;
	for (uijry; shqhr[uijry] != '\0'; uijry++)
		;
	tahwn[uijry] = '\0';
	printf(""Der neue String lautet: %s"",tahwn);
}",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int qjlvs = 0;
	while(qjlvs < zahl && dest[qjlvs] != '\0' && src[qjlvs] != '\0')		dest[qjlvs] = src[qjlvs];
		qjlvs ++;
{
	int bmpow = 0;
	while(str[bmpow] != '\0') bmpow++;
	char mnawa[bmpow];
	for(int yhnmg = 0; yhnmg < bmpow; yhnmg++) mnawa[yhnmg] = str[yhnmg];
	for(int yhnmg = 0; yhnmg < bmpow; yhnmg++){
		str[yhnmg] = mnawa[bmpow - 1 - yhnmg];
}
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void lbsqp (char* dvodc)
{
	for(int ozicg = 0; dvodc[ozicg] != '\0'; ozicg++)
	{
		if(dvodc[ozicg] == 'x' || dvodc[ozicg] == 'y' || dvodc[ozicg] == 'q' || dvodc[ozicg] == 'X' || dvodc[ozicg] == 'Y' || dvodc[ozicg] == 'Q' )
		{
			for(int mtsqq = ozicg; dvodc[mtsqq] != '\0'; mtsqq++)
			{
				dvodc[mtsqq] = dvodc[mtsqq+1];
			}
			ozicg = ozicg -1;
		}
	}
}
void jgbfm (char* dvodc)
{
	int lmzhi = 0;
	while(dvodc[lmzhi] != '\0')
	{
	lmzhi++;
	}
	char qkvvu[lmzhi]; 
	for(int dqeni = 0; dqeni < lmzhi; dqeni++)
	{
		if(dqeni % 3 == 0)
		{
			qkvvu[dqeni] = dvodc[dqeni];
		}
		else qkvvu[dqeni] = 0;
	}
	int givav =0;
	for(int ozicg = 0; ozicg < lmzhi; ozicg++)
	{
		if(qkvvu[ozicg] != 0)
		{
			dvodc[givav] = qkvvu[ozicg];
			givav++;
		}
	}
	dvodc[givav] = '\0';
}
int main(int rnvnq, char* argv[])
{
	int lmzhi = 0;
	for(int mtsqq=1; mtsqq < rnvnq; mtsqq++)
	{
		for(int ozicg = 0; argv[mtsqq][ozicg] != '\0'; ozicg++)
		{
			lmzhi++;		
		}				
	}
	char dvodc[lmzhi+1];
	dvodc[lmzhi] = '\0';
	int givav = 0;
	for(int mtsqq=1; mtsqq < rnvnq; mtsqq++)
	{
		for(int ozicg = 0; argv[mtsqq][ozicg] != '\0'; ozicg++)
		{
			dvodc[givav] = argv[mtsqq][ozicg];
			givav++;
		}
	}
	lbsqp(dvodc);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&dvodc[0]);
	jgbfm(dvodc);
	printf(""Der neue String lautet: %s \n"",&dvodc[0]);
}",1.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void dtfol(char* str1){
	int fapfh;
	int ysqgs;
	for ( fapfh = 0,  ysqgs = 0;ysqgs<100; ++ysqgs){
	if ((str1[ysqgs] != 'x')&&(str1[ysqgs] != 'X')&&(str1[ysqgs] != 'y')&&(str1[ysqgs] != 'Y')&&(str1[ysqgs] != 'q')&&(str1[ysqgs] != 'Q'))
	str1[fapfh++] = str1[ysqgs];
	}
}
void arghd(char* str1, char* str2){
	int ysqgs=0;
	for(;(str2[ysqgs])!=('\0');ysqgs++){}
	for (int fapfh=0;str1[fapfh]!='\0';fapfh++){
		str2[ysqgs+fapfh]=str1[fapfh];
	}	
;}
void ntcsn(char* str1,char* str2){
	for (int fapfh=0;str1[fapfh]!='\0';fapfh++){
		if((fapfh+3)%3==0)str2[((fapfh+3)/3)-1]=str1[fapfh];
	}
}
int main(int ficrp,char** argv){
	if (ficrp<2) return 0;
	char lpraz[100]="""";
	char dkbpx[100]="""";
	for(int fapfh=1;fapfh<ficrp;fapfh++) {
		arghd(argv[fapfh],lpraz);}
		dtfol(lpraz);
	ntcsn(lpraz,dkbpx);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",lpraz);
	printf(""Der neue String lautet: %s"",dkbpx);
}",1.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int nhtrw, char* argv[]){
	char wjcdb[100]= """";
	char kodfg[100]="""";
	int ywkku=0;
	for(int vjygw=1 ;vjygw<nhtrw ;vjygw++){
		for (int hjurs=0; argv[vjygw][hjurs] != '\0'; hjurs++){
			if(argv[vjygw][hjurs]== 'ywkku' || argv[vjygw][hjurs]== 'psirv' || argv[vjygw][hjurs]== 'q' || argv[vjygw][hjurs]== 'X' || argv[vjygw][hjurs]== 'Y' || argv[vjygw][hjurs]== 'Q') continue;
			else {
				wjcdb[ywkku]=argv[vjygw][hjurs];
				ywkku+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", wjcdb);
	int psirv=0;
	for(int vjygw=0; vjygw<100; vjygw+=3){
		kodfg[psirv]=wjcdb[vjygw];
		psirv++;
	}
	printf(""Der neue String lautet: %s\n"", kodfg);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int dfbmg, char* argv[52])
{
   int hrcij = 0;
   int* p_zahl = &hrcij;
   int uzdpq = 1;
   int* p_counter = &uzdpq;
   char xidbs[30];
   for(int zqmrl = 0; zqmrl < dfbmg-1 ; zqmrl++)
   {
      for(int qfkky = 0; argv[uzdpq][qfkky] != '\0'; qfkky++)
      {
         xidbs[hrcij] = argv[uzdpq][qfkky];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   xidbs[hrcij+1] = '\0';
   int arknh = 0;
   int* p_nummer = &arknh;
   char ninru[25];
   for(int zqmrl = 0; ; zqmrl++)
   {
      if((xidbs[zqmrl] != 'x') && (xidbs[zqmrl] != 'y') && (xidbs[zqmrl] != 'q') && (xidbs[zqmrl] != 'X') && (xidbs[zqmrl] != 'Y') && (xidbs[zqmrl] != 'Q'))
      {
         ninru[arknh] = xidbs[zqmrl];
         if(xidbs[zqmrl] == '\0') break;
         *p_nummer += 1;
      }
   }
   char yksfr[35];
   for(int zqmrl = 0; zqmrl < 57; zqmrl +=3)
   {
      yksfr[zqmrl/3] = ninru[zqmrl];  
      yksfr[zqmrl/3+1] = '\0'  ;
   }
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", ninru, yksfr);
}",1.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
    {
        dest[i] = src[i];
    void umdrehen(char* str )
{
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
    ersetzen(test, atoi(argv[1]), argv[2]);
   }",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int mdjit, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int peulz = 0;
	for(int shmoj = 1; shmoj < mdjit; shmoj++){
		int kzhce = 0;
		while(*(argv[shmoj]+kzhce) != '\0'){
			if((*(argv[shmoj]+kzhce) != 'x') && (*(argv[shmoj]+kzhce) != 'y') && (*(argv[shmoj]+kzhce) != 'q') && (*(argv[shmoj]+kzhce) != 'X') && (*(argv[shmoj]+kzhce) != 'Y') && (*(argv[shmoj]+kzhce) != 'Q')){
			*(text_str+peulz) = *(argv[shmoj]+kzhce);
			peulz++;
			}
			kzhce++;
		}
	}
	text_str = realloc(text_str,peulz+1 * sizeof(char));
	int nsrgn = (peulz+1) / 3;
	char* solution = malloc(nsrgn * sizeof(char));
	int efaco = 0;
	for(int shmoj = 0; shmoj < peulz+1; shmoj++){
		if((shmoj % 3) == 0){
			*(solution+efaco) = *(text_str+shmoj);
			efaco++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int thttl, char* argv[] )
{  
	char oblny[100];
	char pbkwd[100];
	int gvley = 0;
	for (int ebblm = 0; ebblm < thttl -1; ebblm++)
	{
		int ytitz = 0;
		for (ytitz; *(*(argv+1+ebblm)+ytitz) != '\0'; ytitz++)
		{
			oblny[gvley] = *(*(argv+1+ebblm)+ytitz);
			gvley++;
		}
	}
	oblny[gvley] = '\0';
	for (int ebblm = 0; ebblm < gvley+1; ebblm++)
	{
		if ((oblny[ebblm] == 'x') || (oblny[ebblm] == 'y') || (oblny[ebblm] == 'q') || (oblny[ebblm] == 'X') || (oblny[ebblm] == 'Y') || (oblny[ebblm] == 'Q'))
		{
			while (1)
			{
				oblny[ebblm] = oblny[ebblm+1];
				ebblm++;
				if (oblny[ebblm] == '\0')
				{	
					break;
				}
			}
			gvley--;
			ebblm = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",oblny);
	for (int ebblm = 0, z = 0; ebblm < ((gvley/2)-2); ebblm++, z += 3)
	{
		pbkwd[ebblm] = oblny[z];
	}
	int ytitz = 0;
	for (ytitz; oblny[ytitz] != '\0'; ytitz++)
		;
	pbkwd[ytitz] = '\0';
	printf(""Der neue String lautet: %s"",pbkwd);
}",1.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int qqglx, char* argv[]){
	char powaf[100]= """";
	char ruwzv[100]="""";
	int hbcpg=0;
	for(int soxbt=1 ;soxbt<qqglx ;soxbt++){
		for (int enagj=0; argv[soxbt][enagj] != '\0'; enagj++){
			if(argv[soxbt][enagj]== 'hbcpg' || argv[soxbt][enagj]== 'qwijw' || argv[soxbt][enagj]== 'q' || argv[soxbt][enagj]== 'X' || argv[soxbt][enagj]== 'Y' || argv[soxbt][enagj]== 'Q') continue;
			else {
				powaf[hbcpg]=argv[soxbt][enagj];
				hbcpg+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", powaf);
	int qwijw=0;
	for(int soxbt=0; soxbt<100; soxbt+=3){
		ruwzv[qwijw]=powaf[soxbt];
		qwijw++;
	}
	printf(""Der neue String lautet: %s\n"", ruwzv);
}",1.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
void umdrehen( char* str)
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
  char test[11] = ""0123456789"";
  printf( ""Das Original ist: %s \n"", test);
  ersetzen(test , atoi(argv[1]), argv[2]);
  printf( ""Ersetzt : %s \n"", test);
  }","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++) {
    if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
{
	char test[11]= ""0123456789"";
	printf( ""Das Original ist: %s \n"", test );
	ersetzen( test , atoi(argv[1]), argv[2] );
	printf( ""Ersetzt : %s \n"", test );
	umdrehen( test );
	printf( ""Rückwärts : %s \n"", test );
}",0.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int wfxen, char *zhtpm[])
{
    int gtiey;
    int emtpm = 0;
    char dzikz[20];
    char jyyfk[15];
    int nbjrj = 0;
    for (int hiyqj = 1; hiyqj < wfxen; hiyqj++)
    {
        gtiey = 0;
        while ((zhtpm[hiyqj][gtiey]) != '\0')
        {
            if (zhtpm[hiyqj][gtiey] != 'nbjrj' && zhtpm[hiyqj][gtiey] != 'y' && zhtpm[hiyqj][gtiey] != 'q' && zhtpm[hiyqj][gtiey] != 'X' && zhtpm[hiyqj][gtiey] != 'Y' && zhtpm[hiyqj][gtiey] != 'Q')
            {
                dzikz[emtpm] = zhtpm[hiyqj][gtiey];
                emtpm++;
            }
            gtiey++;
        }
    }
    for (int hiyqj = 0; hiyqj <= emtpm; hiyqj++)
    {
        if (nbjrj > (hiyqj / 3) || hiyqj == 0)
        {
            if (hiyqj == 0)
            {
                jyyfk[nbjrj] = dzikz[hiyqj];
                nbjrj++;
            }
            if (((hiyqj) % 3) == 0)
            {
                jyyfk[nbjrj] = dzikz[hiyqj];
                nbjrj++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int hiyqj = 0; hiyqj < emtpm; hiyqj++)
        if (dzikz[hiyqj] != '\0')
        {
            printf(""%c"", dzikz[hiyqj]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int hiyqj = 1; hiyqj < (emtpm / 2)-1; hiyqj++)
            printf(""%c"", jyyfk[hiyqj]);
    if (dzikz[0] == 'z')
        printf(""z"");
}",1.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}",0.0
