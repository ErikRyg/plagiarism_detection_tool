code1,code2,label
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}",0.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","{  
	for(int jawrm = 0; src[jawrm] != '\0' && dest[jawrm] != '\0' && jawrm < zahl; jawrm++)		dest[jawrm] = src[jawrm];
{
	int ewydm = 0;
	for( int jawrm = 0; str[jawrm] != '\0'; jawrm++)
		ewydm = jawrm;
	char jusxj[ewydm];
	for( int jawrm = 0; jawrm <= ewydm; jawrm++)
		jusxj[jawrm] = str[ewydm-jawrm];
	for( int jawrm = 0; jawrm <= ewydm; jawrm++)
		str[jawrm] = jusxj[jawrm];
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderh√§ngen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int wrrtw, char* argv[52])
{
   
   int pmgwg = 0;
   int* p_zahl = &pmgwg;
   int liadq = 1;
   int* p_counter = &liadq;
   char nfryk[30];
   for(int shtpm = 0; shtpm < wrrtw-1 ; shtpm++)
   {
      for(int ohduh = 0; argv[liadq][ohduh] != '\0'; ohduh++)
      {
         nfryk[pmgwg] = argv[liadq][ohduh];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   nfryk[pmgwg+1] = '\0';
   int pyqav = 0;
   int* p_nummer = &pyqav;
   char hfcji[25];
   for(int shtpm = 0; ; shtpm++)
   {
      if((nfryk[shtpm] != 'x') && (nfryk[shtpm] != 'y') && (nfryk[shtpm] != 'q') && (nfryk[shtpm] != 'X') && (nfryk[shtpm] != 'Y') && (nfryk[shtpm] != 'Q'))
      {
         hfcji[pyqav] = nfryk[shtpm];
         if(nfryk[shtpm] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char minlg[35];
   for(int shtpm = 0; shtpm < 57; shtpm +=3)
   {
      
      minlg[shtpm/3] = hfcji[shtpm];  
      minlg[shtpm/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", hfcji, minlg);
}",1.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}",0.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int wgxvh;
    for(wgxvh = 0; wgxvh < zahl && *dest != '\0' && *src != '\0'; wgxvh++)
           *dest = *src;
       src++;
       dest++;
    {
    int glukk = 0;
    int fzswx = 0;
    int kygqb = 0;
    for(fzswx=0; str[fzswx] != 0; fzswx++);
    for(glukk = 0; glukk <fzswx/2; glukk++)
    {
        kygqb = str[glukk];
        str[glukk]=str[fzswx - 1 - glukk];
        str[fzswx - 1 - glukk] = kygqb;
        for(glukk = 0; glukk < fzswx; glukk++);
}
{  
      }",1.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",0.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int fkfzj=0;((fkfzj<zahl)&&((dest[fkfzj])!=('\0')))&&((src[fkfzj])!=('\0'));fkfzj++)
dest[fkfzj]=src[fkfzj];
{	char vnxlh[30]="""";
	int fkfzj=0;
	for(;(str[fkfzj+1])!=('\0');fkfzj++){	for(int yshmo=0;(str[yshmo])!=('\0');yshmo++) {vnxlh[yshmo]=str[fkfzj-yshmo];	for(int yshmo=0;(str[yshmo])!=('\0');yshmo++) {str[yshmo]=vnxlh[(yshmo)];}
}
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderh√§ngen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }",0.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderh√§ngen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int zwkqq, char* argv[52])
{
   
   int exejf = 0;
   int* p_zahl = &exejf;
   int hcuwb = 1;
   int* p_counter = &hcuwb;
   char xlikb[30];
   for(int uklov = 0; uklov < zwkqq-1 ; uklov++)
   {
      for(int zqiyb = 0; argv[hcuwb][zqiyb] != '\0'; zqiyb++)
      {
         xlikb[exejf] = argv[hcuwb][zqiyb];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   xlikb[exejf+1] = '\0';
   int wgqfu = 0;
   int* p_nummer = &wgqfu;
   char ysxqc[25];
   for(int uklov = 0; ; uklov++)
   {
      if((xlikb[uklov] != 'x') && (xlikb[uklov] != 'y') && (xlikb[uklov] != 'q') && (xlikb[uklov] != 'X') && (xlikb[uklov] != 'Y') && (xlikb[uklov] != 'Q'))
      {
         ysxqc[wgqfu] = xlikb[uklov];
         if(xlikb[uklov] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char azxqb[35];
   for(int uklov = 0; uklov < 57; uklov +=3)
   {
      
      azxqb[uklov/3] = ysxqc[uklov];  
      azxqb[uklov/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", ysxqc, azxqb);
}",1.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","    for (int jlftw = 0;(jlftw < zahl) && (jlftw < 10) && (src[jlftw] != '\0'); jlftw++)
            dest[jlftw] = src[jlftw];
    {
    int fupua;
    for (int yovpj = 1; str[yovpj] != '\0'; yovpj++)
    {
        fupua = yovpj + 2;
        char durrb[fupua];
    for (int jlftw = 0; jlftw < (fupua - 1); jlftw++)
    {
        durrb[fupua - 2- jlftw] = str[jlftw];
    }
    for (int jlftw = 0; jlftw < fupua; jlftw++)
    {
        str[jlftw] = durrb[jlftw];
    }
}
{  
      }",1.0
"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderh√§ngen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char dwqyb (char hotbx)
{if (hotbx=='x'||hotbx=='y'||hotbx=='q'||
     hotbx=='X'||hotbx=='Y'||hotbx=='Q')
    wqvsq 1;
else wqvsq 0;
}
void qxkbh (char*src)
{char hppss[100]="""";
 int vvahd=0;
 while (src[vvahd]!='\0')
    {hppss[vvahd]=src[vvahd];vvahd++;}
    hppss[vvahd]='\0';
    vvahd=0;
int scanb=0;
while (hppss[vvahd]!='\0')
    {if (vvahd%3!=0)
        {vvahd++;}
    else 
        {src[scanb]=hppss[vvahd];
         vvahd++;
         scanb++;}
    }
src[scanb]='\0';
}
int main (int sushi,char*argv[])
{char lmnbm[100]="""";
int snhml=1;
int xtpzx=0;
int wpkxt=0;
while (snhml!=sushi)
    {while (argv[snhml][wpkxt]!='\0')
        {if (dwqyb(argv[snhml][wpkxt])) 
         wpkxt++;
         else
         {lmnbm[xtpzx]=argv[snhml][wpkxt];
          xtpzx++;
          wpkxt++;}}
    snhml++;wpkxt=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",lmnbm);
qxkbh(lmnbm);
printf (""Der neue String lautet: %s\n"",lmnbm);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int xpsaw, char *fzfjb[])
{   
     
    
    
    for (int ejarc = 1; ejarc < xpsaw; ejarc++){
        char * CurrentCommandString = fzfjb[ejarc];  
        
        
        
        int mvarl = 0;
        while (CurrentCommandString[mvarl] != '\0' && CurrentCommandString[mvarl] != ' ') {
            if (CurrentCommandString[mvarl] == 'x' 
             || CurrentCommandString[mvarl] == 'y' 
             || CurrentCommandString[mvarl] == 'q'
             || CurrentCommandString[mvarl] == 'X'
             || CurrentCommandString[mvarl] == 'Y' 
             || CurrentCommandString[mvarl] == 'Q')
             {   
                 int jutty = mvarl;
                 while (CurrentCommandString[mvarl] != '\0' && CurrentCommandString[mvarl] != ' ') {
                    CurrentCommandString[jutty] = CurrentCommandString[jutty + 1]; 
                    ++jutty; 
                 }
             }
            ++mvarl;
         }
        
    }
    char isgpc[5000];
    int sbfwp = 0;
    char unwog[5000];
    int glizn = 0;
    for (int ejarc = 1; ejarc < xpsaw; ejarc++){
        char * CurrentCommandString = fzfjb[ejarc];  
        
        int ifelh, jutty;
          
          ifelh = 0;
          while (isgpc[ifelh] != '\0' && isgpc[ifelh] != ' ') {
            ++ifelh;
          }
          
          for (jutty = 0; CurrentCommandString[jutty] != '\0' && CurrentCommandString[ifelh] != ' '; ++jutty, ++ifelh) {
            isgpc[ifelh] = CurrentCommandString[jutty];
          }
          
          isgpc[ifelh] = '\0';       
    }
        
        int ifelh, jutty;
        
        ifelh = 0;
        while (unwog[ifelh] != '\0' && unwog[ifelh] != ' ') {
        ++ifelh;
        }
        
        for (jutty = 0; isgpc[jutty] != '\0' && isgpc[ifelh] != ' '; ++ifelh) {
         unwog[ifelh] = isgpc[jutty];
         
         jutty+=3;
        }
        
        unwog[ifelh] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", isgpc);
    printf(""Der neue String lautet: %s"", unwog);
}",1.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int kltil(char *yetuv)
{
    int aaxja = 0;
    for (int gkjzm = 0; yetuv[gkjzm] != '\0'; gkjzm++)
    {
        aaxja += 1;
    }
    return aaxja;
}
int fjknb(char *qogey, char *chown)
{
    int qrwpe = 0;
    int gkjzm = 0;
    while (chown[qrwpe] != '\0')
    {
        if (chown[qrwpe] != 'q' && chown[qrwpe] != 'x' && chown[qrwpe] != 'y' && chown[qrwpe] != 'Q' && chown[qrwpe] != 'X' && chown[qrwpe] != 'Y')
        {
            qogey[gkjzm++] = chown[qrwpe++];
        }
        else
        {
            qrwpe++;
        }
    }
    return gkjzm;
}
int kayjx(char *vkcpb)
{
    int qrwpe = 0;
    int gkjzm = 0;
    while (vkcpb[qrwpe] != '\0')
    {
        if (qrwpe % 3 == 0)
        {
            vkcpb[gkjzm++] = vkcpb[qrwpe++];
        }
        else
        {
            qrwpe++;
        }
    }
    return gkjzm;
}
int main(int lmasg, char *onvwz[])
{
    int trvmf = 0;
    for (int qrwpe = 1; qrwpe < lmasg; qrwpe++)
    {
        trvmf += kltil(onvwz[qrwpe]);
    }
    char eopqa[trvmf + 1];
    char *psqlp = eopqa;
    for (int qrwpe = 1; qrwpe < lmasg; qrwpe++)
    {
        psqlp += fjknb(psqlp, onvwz[qrwpe]);
    }
    *psqlp = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", eopqa);
    eopqa[kayjx(eopqa)] = '\0';
    printf(""Der neue String lautet: %s\n"", eopqa);
}",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int l√§nge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < l√§nge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderh√§ngen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int sfgni(char *ikolt)
{
    int qscmn = 0;
    for (int rjrkh = 0; ikolt[rjrkh] != '\0'; rjrkh++)
    {
        qscmn += 1;
    }
    return qscmn;
}
int cmynk(char *tuurd, char *nswsk)
{
    int btkfy = 0;
    int rjrkh = 0;
    while (nswsk[btkfy] != '\0')
    {
        if (nswsk[btkfy] != 'q' && nswsk[btkfy] != 'x' && nswsk[btkfy] != 'y' && nswsk[btkfy] != 'Q' && nswsk[btkfy] != 'X' && nswsk[btkfy] != 'Y')
        {
            tuurd[rjrkh++] = nswsk[btkfy++];
        }
        else
        {
            btkfy++;
        }
    }
    return rjrkh;
}
int uqzao(char *ajdbb)
{
    int btkfy = 0;
    int rjrkh = 0;
    while (ajdbb[btkfy] != '\0')
    {
        if (btkfy % 3 == 0)
        {
            ajdbb[rjrkh++] = ajdbb[btkfy++];
        }
        else
        {
            btkfy++;
        }
    }
    return rjrkh;
}
int main(int vayzb, char *uqtqd[])
{
    int euhff = 0;
    for (int btkfy = 1; btkfy < vayzb; btkfy++)
    {
        euhff += sfgni(uqtqd[btkfy]);
    }
    char fzlcv[euhff + 1];
    char *gvjxt = fzlcv;
    for (int btkfy = 1; btkfy < vayzb; btkfy++)
    {
        gvjxt += cmynk(gvjxt, uqtqd[btkfy]);
    }
    *gvjxt = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", fzlcv);
    fzlcv[uqzao(fzlcv)] = '\0';
    printf(""Der neue String lautet: %s\n"", fzlcv);
}",1.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","    for (int ilixf = 0;(ilixf < zahl) && (ilixf < 10) && (src[ilixf] != '\0'); ilixf++)
            dest[ilixf] = src[ilixf];
    {
    int xeeuo;
    for (int rhhgx = 1; str[rhhgx] != '\0'; rhhgx++)
    {
        xeeuo = rhhgx + 2;
        char plblh[xeeuo];
    for (int ilixf = 0; ilixf < (xeeuo - 1); ilixf++)
    {
        plblh[xeeuo - 2- ilixf] = str[ilixf];
    }
    for (int ilixf = 0; ilixf < xeeuo; ilixf++)
    {
        str[ilixf] = plblh[ilixf];
    }
}
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int phekf, char *bvsfe[])
{   
     
    
    
    for (int uqxyl = 1; uqxyl < phekf; uqxyl++){
        char * CurrentCommandString = bvsfe[uqxyl];  
        
        
        
        int lgcfw = 0;
        while (CurrentCommandString[lgcfw] != '\0' && CurrentCommandString[lgcfw] != ' ') {
            if (CurrentCommandString[lgcfw] == 'x' 
             || CurrentCommandString[lgcfw] == 'y' 
             || CurrentCommandString[lgcfw] == 'q'
             || CurrentCommandString[lgcfw] == 'X'
             || CurrentCommandString[lgcfw] == 'Y' 
             || CurrentCommandString[lgcfw] == 'Q')
             {   
                 int fgtwl = lgcfw;
                 while (CurrentCommandString[lgcfw] != '\0' && CurrentCommandString[lgcfw] != ' ') {
                    CurrentCommandString[fgtwl] = CurrentCommandString[fgtwl + 1]; 
                    ++fgtwl; 
                 }
             }
            ++lgcfw;
         }
        
    }
    char bupul[5000];
    int epfxq = 0;
    char pjzls[5000];
    int kjopk = 0;
    for (int uqxyl = 1; uqxyl < phekf; uqxyl++){
        char * CurrentCommandString = bvsfe[uqxyl];  
        
        int xagmd, fgtwl;
          
          xagmd = 0;
          while (bupul[xagmd] != '\0' && bupul[xagmd] != ' ') {
            ++xagmd;
          }
          
          for (fgtwl = 0; CurrentCommandString[fgtwl] != '\0' && CurrentCommandString[xagmd] != ' '; ++fgtwl, ++xagmd) {
            bupul[xagmd] = CurrentCommandString[fgtwl];
          }
          
          bupul[xagmd] = '\0';       
    }
        
        int xagmd, fgtwl;
        
        xagmd = 0;
        while (pjzls[xagmd] != '\0' && pjzls[xagmd] != ' ') {
        ++xagmd;
        }
        
        for (fgtwl = 0; bupul[fgtwl] != '\0' && bupul[xagmd] != ' '; ++xagmd) {
         pjzls[xagmd] = bupul[fgtwl];
         
         fgtwl+=3;
        }
        
        pjzls[xagmd] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", bupul);
    printf(""Der neue String lautet: %s"", pjzls);
}",1.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int l√§nge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < l√§nge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int yumyl=0;((yumyl<zahl)&&((dest[yumyl])!=('\0')))&&((src[yumyl])!=('\0'));yumyl++)
dest[yumyl]=src[yumyl];
{	char biijc[30]="""";
	int yumyl=0;
	for(;(str[yumyl+1])!=('\0');yumyl++){	for(int vuevp=0;(str[vuevp])!=('\0');vuevp++) {biijc[vuevp]=str[yumyl-vuevp];	for(int vuevp=0;(str[vuevp])!=('\0');vuevp++) {str[vuevp]=biijc[(vuevp)];}
}
}",1.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int jtabs=0;((jtabs<zahl)&&((dest[jtabs])!=('\0')))&&((src[jtabs])!=('\0'));jtabs++)
dest[jtabs]=src[jtabs];
{	char bpikz[30]="""";
	int jtabs=0;
	for(;(str[jtabs+1])!=('\0');jtabs++){	for(int pfllr=0;(str[pfllr])!=('\0');pfllr++) {bpikz[pfllr]=str[jtabs-pfllr];	for(int pfllr=0;(str[pfllr])!=('\0');pfllr++) {str[pfllr]=bpikz[(pfllr)];}
}
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int jtdis, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int zuufk = 0;
	for(int ouypa = 1; ouypa < jtdis; ouypa++){
		int fcmpd = 0;
		while(*(argv[ouypa]+fcmpd) != '\0'){
			if((*(argv[ouypa]+fcmpd) != 'x') && (*(argv[ouypa]+fcmpd) != 'y') && (*(argv[ouypa]+fcmpd) != 'q') && (*(argv[ouypa]+fcmpd) != 'X') && (*(argv[ouypa]+fcmpd) != 'Y') && (*(argv[ouypa]+fcmpd) != 'Q')){
			*(text_str+zuufk) = *(argv[ouypa]+fcmpd);
			zuufk++;
			}
			fcmpd++;
		}
	}
	text_str = realloc(text_str,zuufk+1 * sizeof(char));
	int dlitf = (zuufk+1) / 3;
	char* solution = malloc(dlitf * sizeof(char));
	int pnyos = 0;
	for(int ouypa = 0; ouypa < zuufk+1; ouypa++){
		if((ouypa % 3) == 0){
			*(solution+pnyos) = *(text_str+ouypa);
			pnyos++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char isbcs (char rnvyr)
{if (rnvyr=='x'||rnvyr=='y'||rnvyr=='q'||
     rnvyr=='X'||rnvyr=='Y'||rnvyr=='Q')
    nksfx 1;
else nksfx 0;
}
void frprv (char*src)
{char mtvnl[100]="""";
 int lnekv=0;
 while (src[lnekv]!='\0')
    {mtvnl[lnekv]=src[lnekv];lnekv++;}
    mtvnl[lnekv]='\0';
    lnekv=0;
int xvjhi=0;
while (mtvnl[lnekv]!='\0')
    {if (lnekv%3!=0)
        {lnekv++;}
    else 
        {src[xvjhi]=mtvnl[lnekv];
         lnekv++;
         xvjhi++;}
    }
src[xvjhi]='\0';
}
int main (int jdihu,char*argv[])
{char lsjlb[100]="""";
int bsicg=1;
int zqcsm=0;
int czgja=0;
while (bsicg!=jdihu)
    {while (argv[bsicg][czgja]!='\0')
        {if (isbcs(argv[bsicg][czgja])) 
         czgja++;
         else
         {lsjlb[zqcsm]=argv[bsicg][czgja];
          zqcsm++;
          czgja++;}}
    bsicg++;czgja=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",lsjlb);
frprv(lsjlb);
printf (""Der neue String lautet: %s\n"",lsjlb);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int ulons, char** argv)
{
    char xhrzg[100] = ""lasse roland max ivo"";
    char jpuxu[100];
    char cbqfr[100];
    int wstml = 0;
    int taknn = 0;
    int lvthu = 1;
    int zydpg;
    for ( zydpg = 0; *(argv+zydpg) != '\0'; zydpg++)
    {
        if (*(argv+zydpg) == ' ' || *(argv+zydpg) == 'x' || *(argv+zydpg) == 'y' || *(argv+zydpg) == 'q'|| *(argv+zydpg) == 'X'|| *(argv+zydpg) == 'Y'|| *(argv+zydpg) == 'Q')
            lvthu++;
            continue;
        jpuxu[wstml++] = *(argv+zydpg);
    }
    jpuxu[wstml] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", jpuxu );
    for ( zydpg = 0; jpuxu[zydpg] != '\0'; zydpg++)
    {
        if (zydpg == 0 || zydpg % 3 == 0)
        cbqfr[taknn++] = jpuxu[zydpg];
        continue;
    }
    cbqfr[taknn] = 0;
    printf( ""Der neue String lautet: %s \n"", cbqfr);
}",1.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int l√§nge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < l√§nge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int iccth, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int bfswk = 0;
	for(int fmarx = 1; fmarx < iccth; fmarx++){
		int iqsvv = 0;
		while(*(argv[fmarx]+iqsvv) != '\0'){
			if((*(argv[fmarx]+iqsvv) != 'x') && (*(argv[fmarx]+iqsvv) != 'y') && (*(argv[fmarx]+iqsvv) != 'q') && (*(argv[fmarx]+iqsvv) != 'X') && (*(argv[fmarx]+iqsvv) != 'Y') && (*(argv[fmarx]+iqsvv) != 'Q')){
			*(text_str+bfswk) = *(argv[fmarx]+iqsvv);
			bfswk++;
			}
			iqsvv++;
		}
	}
	text_str = realloc(text_str,bfswk+1 * sizeof(char));
	int fhpwk = (bfswk+1) / 3;
	char* solution = malloc(fhpwk * sizeof(char));
	int wesll = 0;
	for(int fmarx = 0; fmarx < bfswk+1; fmarx++){
		if((fmarx % 3) == 0){
			*(solution+wesll) = *(text_str+fmarx);
			wesll++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int wdehb;
    for(wdehb = 0; wdehb < zahl && *dest != '\0' && *src != '\0'; wdehb++)
           *dest = *src;
       src++;
       dest++;
    {
    int aobrd = 0;
    int cyngy = 0;
    int iqtqa = 0;
    for(cyngy=0; str[cyngy] != 0; cyngy++);
    for(aobrd = 0; aobrd <cyngy/2; aobrd++)
    {
        iqtqa = str[aobrd];
        str[aobrd]=str[cyngy - 1 - aobrd];
        str[cyngy - 1 - aobrd] = iqtqa;
        for(aobrd = 0; aobrd < cyngy; aobrd++);
}
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int pzlut=0;((pzlut<zahl)&&((dest[pzlut])!=('\0')))&&((src[pzlut])!=('\0'));pzlut++)
dest[pzlut]=src[pzlut];
{	char myfby[30]="""";
	int pzlut=0;
	for(;(str[pzlut+1])!=('\0');pzlut++){	for(int ozoaq=0;(str[ozoaq])!=('\0');ozoaq++) {myfby[ozoaq]=str[pzlut-ozoaq];	for(int ozoaq=0;(str[ozoaq])!=('\0');ozoaq++) {str[ozoaq]=myfby[(ozoaq)];}
}
}",1.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int hfhzb(char *llsvg)
{
    int abezb = 0;
    for (int ddayh = 0; llsvg[ddayh] != '\0'; ddayh++)
    {
        abezb += 1;
    }
    return abezb;
}
int xaikv(char *fkkve, char *ugdyt)
{
    int qdwoh = 0;
    int ddayh = 0;
    while (ugdyt[qdwoh] != '\0')
    {
        if (ugdyt[qdwoh] != 'q' && ugdyt[qdwoh] != 'x' && ugdyt[qdwoh] != 'y' && ugdyt[qdwoh] != 'Q' && ugdyt[qdwoh] != 'X' && ugdyt[qdwoh] != 'Y')
        {
            fkkve[ddayh++] = ugdyt[qdwoh++];
        }
        else
        {
            qdwoh++;
        }
    }
    return ddayh;
}
int pmhkc(char *xhoot)
{
    int qdwoh = 0;
    int ddayh = 0;
    while (xhoot[qdwoh] != '\0')
    {
        if (qdwoh % 3 == 0)
        {
            xhoot[ddayh++] = xhoot[qdwoh++];
        }
        else
        {
            qdwoh++;
        }
    }
    return ddayh;
}
int main(int hnnjh, char *ebdvn[])
{
    int ccusp = 0;
    for (int qdwoh = 1; qdwoh < hnnjh; qdwoh++)
    {
        ccusp += hfhzb(ebdvn[qdwoh]);
    }
    char ndmun[ccusp + 1];
    char *shzfc = ndmun;
    for (int qdwoh = 1; qdwoh < hnnjh; qdwoh++)
    {
        shzfc += xaikv(shzfc, ebdvn[qdwoh]);
    }
    *shzfc = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", ndmun);
    ndmun[pmhkc(ndmun)] = '\0';
    printf(""Der neue String lautet: %s\n"", ndmun);
}",1.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int pnyky(char *yufht)
 int osfkx = 0; 
    while (yufht[osfkx] != '\0')
      osfkx++;
  return osfkx; 
{  
  int hukie = pnyky(src);
  int dabbu = pnyky(dest);
 /*     char mneey[hukie]; 
    for (int osfkx = 0; osfkx <= hukie-1; osfkx++) 
        mneey [osfkx] = src[osfkx];
  for (int osfkx = 0; osfkx <= zahl-1; osfkx++)     if (osfkx <= dabbu && osfkx <= hukie) {
        
        *dest = mneey[osfkx]; 
      }*/
  int osfkx = 1;
   while(*src && osfkx <= hukie && osfkx <= dabbu && osfkx <= zahl) {
    *dest++ = *src++;
    osfkx++;
 }
void tztgq(char* a, char* b){
    char ksamp = *a;
    *a = *b;
    *b = ksamp;
}
{
    if (!*str) 
        return;
    char* osfkx = str;
    char* j = osfkx + pnyky(str) - 1;
    while (osfkx < j) {
        tztgq(osfkx, j);
        osfkx++;
        j--;
    }
}
{  
      }",1.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int l√§nge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < l√§nge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.1614395887
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int dmeml, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int kuucy = 0;
for(int wltba=1; wltba < dmeml; wltba++){
	int hpgrw = 0;
while(*(argv[wltba]+hpgrw) != '\0'){
if((*(argv[wltba]+hpgrw) != 'kuucy') && (*(argv[wltba]+hpgrw)!= 'enfdq') && (*(argv[wltba]+hpgrw) != 'q')&& (*(argv[wltba]+hpgrw) != 'X')&& (*(argv[wltba]+hpgrw) != 'Y')&& (*(argv[wltba]+hpgrw) != 'Q')){
			*(compactstring+kuucy) = *(argv[wltba]+hpgrw);
			kuucy++;
	}
	hpgrw++;
}
}
compactstring = (char*) realloc(compactstring,kuucy+sizeof(char));
int sqgdl=(kuucy+1)/3;
char* shortend = (char*) malloc(sqgdl * sizeof(char));
int enfdq = 0;
for (int wltba=0;wltba<kuucy+1;wltba++){
if((wltba%3)==0){
	*(shortend+enfdq) = *(compactstring+wltba);
	enfdq++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderh√§ngen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int omrqi, char* argv[52])
{
   
   int jvebc = 0;
   int* p_zahl = &jvebc;
   int dclhc = 1;
   int* p_counter = &dclhc;
   char wazny[30];
   for(int lyjnq = 0; lyjnq < omrqi-1 ; lyjnq++)
   {
      for(int zjogz = 0; argv[dclhc][zjogz] != '\0'; zjogz++)
      {
         wazny[jvebc] = argv[dclhc][zjogz];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   wazny[jvebc+1] = '\0';
   int cjylq = 0;
   int* p_nummer = &cjylq;
   char wsobj[25];
   for(int lyjnq = 0; ; lyjnq++)
   {
      if((wazny[lyjnq] != 'x') && (wazny[lyjnq] != 'y') && (wazny[lyjnq] != 'q') && (wazny[lyjnq] != 'X') && (wazny[lyjnq] != 'Y') && (wazny[lyjnq] != 'Q'))
      {
         wsobj[cjylq] = wazny[lyjnq];
         if(wazny[lyjnq] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char ggkdn[35];
   for(int lyjnq = 0; lyjnq < 57; lyjnq +=3)
   {
      
      ggkdn[lyjnq/3] = wsobj[lyjnq];  
      ggkdn[lyjnq/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", wsobj, ggkdn);
}",1.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int bhmwd, char *qrmym[])
{
    int jxiog;
    int isfqj = 0;
    char gfjqn[20];
    char rtdlk[15];
    int hdadp = 0;
    for (int xwwhi = 1; xwwhi < bhmwd; xwwhi++)
    {
        jxiog = 0;
        while ((qrmym[xwwhi][jxiog]) != '\0')
        {
            if (qrmym[xwwhi][jxiog] != 'hdadp' && qrmym[xwwhi][jxiog] != 'y' && qrmym[xwwhi][jxiog] != 'q' && qrmym[xwwhi][jxiog] != 'X' && qrmym[xwwhi][jxiog] != 'Y' && qrmym[xwwhi][jxiog] != 'Q')
            {
                gfjqn[isfqj] = qrmym[xwwhi][jxiog];
                isfqj++;
            }
            jxiog++;
        }
    }
    for (int xwwhi = 0; xwwhi <= isfqj; xwwhi++)
    {
        if (hdadp > (xwwhi / 3) || xwwhi == 0)
        {
            if (xwwhi == 0)
            {
                rtdlk[hdadp] = gfjqn[xwwhi];
                hdadp++;
            }
            if (((xwwhi) % 3) == 0)
            {
                rtdlk[hdadp] = gfjqn[xwwhi];
                hdadp++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int xwwhi = 0; xwwhi < isfqj; xwwhi++)
        if (gfjqn[xwwhi] != '\0')
        {
            printf(""%c"", gfjqn[xwwhi]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int xwwhi = 1; xwwhi < (isfqj / 2)-1; xwwhi++)
            printf(""%c"", rtdlk[xwwhi]);
    if (gfjqn[0] == 'z')
        printf(""z"");
}",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int lbxgh, char *voxfz[])
{   
     
    
    
    for (int rabzg = 1; rabzg < lbxgh; rabzg++){
        char * CurrentCommandString = voxfz[rabzg];  
        
        
        
        int pzcuy = 0;
        while (CurrentCommandString[pzcuy] != '\0' && CurrentCommandString[pzcuy] != ' ') {
            if (CurrentCommandString[pzcuy] == 'x' 
             || CurrentCommandString[pzcuy] == 'y' 
             || CurrentCommandString[pzcuy] == 'q'
             || CurrentCommandString[pzcuy] == 'X'
             || CurrentCommandString[pzcuy] == 'Y' 
             || CurrentCommandString[pzcuy] == 'Q')
             {   
                 int mtfzq = pzcuy;
                 while (CurrentCommandString[pzcuy] != '\0' && CurrentCommandString[pzcuy] != ' ') {
                    CurrentCommandString[mtfzq] = CurrentCommandString[mtfzq + 1]; 
                    ++mtfzq; 
                 }
             }
            ++pzcuy;
         }
        
    }
    char alrpc[5000];
    int cyziz = 0;
    char tglmy[5000];
    int eqxdb = 0;
    for (int rabzg = 1; rabzg < lbxgh; rabzg++){
        char * CurrentCommandString = voxfz[rabzg];  
        
        int gfltu, mtfzq;
          
          gfltu = 0;
          while (alrpc[gfltu] != '\0' && alrpc[gfltu] != ' ') {
            ++gfltu;
          }
          
          for (mtfzq = 0; CurrentCommandString[mtfzq] != '\0' && CurrentCommandString[gfltu] != ' '; ++mtfzq, ++gfltu) {
            alrpc[gfltu] = CurrentCommandString[mtfzq];
          }
          
          alrpc[gfltu] = '\0';       
    }
        
        int gfltu, mtfzq;
        
        gfltu = 0;
        while (tglmy[gfltu] != '\0' && tglmy[gfltu] != ' ') {
        ++gfltu;
        }
        
        for (mtfzq = 0; alrpc[mtfzq] != '\0' && alrpc[gfltu] != ' '; ++gfltu) {
         tglmy[gfltu] = alrpc[mtfzq];
         
         mtfzq+=3;
        }
        
        tglmy[gfltu] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", alrpc);
    printf(""Der neue String lautet: %s"", tglmy);
}",1.0
"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int yrjuo, char* argv[]){
	char zmdge[100]= """";
	char bmtxi[100]="""";
	int wnovp=0;
	for(int rzfng=1 ;rzfng<yrjuo ;rzfng++){
		for (int redoo=0; argv[rzfng][redoo] != '\0'; redoo++){
			if(argv[rzfng][redoo]== 'wnovp' || argv[rzfng][redoo]== 'bdwer' || argv[rzfng][redoo]== 'q' || argv[rzfng][redoo]== 'X' || argv[rzfng][redoo]== 'Y' || argv[rzfng][redoo]== 'Q') continue;
			else {
				zmdge[wnovp]=argv[rzfng][redoo];
				wnovp+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", zmdge);
	int bdwer=0;
	for(int rzfng=0; rzfng<100; rzfng+=3){
		bmtxi[bdwer]=zmdge[rzfng];
		bdwer++;
	}
	printf(""Der neue String lautet: %s\n"", bmtxi);
}",1.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}",0.0
"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int l√§nge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < l√§nge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderh√§ngen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char jevmf (char xabuz)
{if (xabuz=='x'||xabuz=='y'||xabuz=='q'||
     xabuz=='X'||xabuz=='Y'||xabuz=='Q')
    ezbki 1;
else ezbki 0;
}
void ylajn (char*src)
{char evbxw[100]="""";
 int ejwkv=0;
 while (src[ejwkv]!='\0')
    {evbxw[ejwkv]=src[ejwkv];ejwkv++;}
    evbxw[ejwkv]='\0';
    ejwkv=0;
int nffwf=0;
while (evbxw[ejwkv]!='\0')
    {if (ejwkv%3!=0)
        {ejwkv++;}
    else 
        {src[nffwf]=evbxw[ejwkv];
         ejwkv++;
         nffwf++;}
    }
src[nffwf]='\0';
}
int main (int sdsvn,char*argv[])
{char ppufs[100]="""";
int jbfbn=1;
int qpdnx=0;
int cegyu=0;
while (jbfbn!=sdsvn)
    {while (argv[jbfbn][cegyu]!='\0')
        {if (jevmf(argv[jbfbn][cegyu])) 
         cegyu++;
         else
         {ppufs[qpdnx]=argv[jbfbn][cegyu];
          qpdnx++;
          cegyu++;}}
    jbfbn++;cegyu=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",ppufs);
ylajn(ppufs);
printf (""Der neue String lautet: %s\n"",ppufs);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderh√§ngen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int rhvqz, char* argv[52])
{
   
   int pyduo = 0;
   int* p_zahl = &pyduo;
   int lvdib = 1;
   int* p_counter = &lvdib;
   char cznbw[30];
   for(int frygk = 0; frygk < rhvqz-1 ; frygk++)
   {
      for(int ivykm = 0; argv[lvdib][ivykm] != '\0'; ivykm++)
      {
         cznbw[pyduo] = argv[lvdib][ivykm];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   cznbw[pyduo+1] = '\0';
   int hfedp = 0;
   int* p_nummer = &hfedp;
   char knxqw[25];
   for(int frygk = 0; ; frygk++)
   {
      if((cznbw[frygk] != 'x') && (cznbw[frygk] != 'y') && (cznbw[frygk] != 'q') && (cznbw[frygk] != 'X') && (cznbw[frygk] != 'Y') && (cznbw[frygk] != 'Q'))
      {
         knxqw[hfedp] = cznbw[frygk];
         if(cznbw[frygk] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char morcs[35];
   for(int frygk = 0; frygk < 57; frygk +=3)
   {
      
      morcs[frygk/3] = knxqw[frygk];  
      morcs[frygk/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", knxqw, morcs);
}",1.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderh√§ngen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int zkqqb, char* argv[52])
{
   
   int fctra = 0;
   int* p_zahl = &fctra;
   int dmoka = 1;
   int* p_counter = &dmoka;
   char qayon[30];
   for(int kjnmd = 0; kjnmd < zkqqb-1 ; kjnmd++)
   {
      for(int ghqjs = 0; argv[dmoka][ghqjs] != '\0'; ghqjs++)
      {
         qayon[fctra] = argv[dmoka][ghqjs];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   qayon[fctra+1] = '\0';
   int qjyil = 0;
   int* p_nummer = &qjyil;
   char bwazk[25];
   for(int kjnmd = 0; ; kjnmd++)
   {
      if((qayon[kjnmd] != 'x') && (qayon[kjnmd] != 'y') && (qayon[kjnmd] != 'q') && (qayon[kjnmd] != 'X') && (qayon[kjnmd] != 'Y') && (qayon[kjnmd] != 'Q'))
      {
         bwazk[qjyil] = qayon[kjnmd];
         if(qayon[kjnmd] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char xzvcm[35];
   for(int kjnmd = 0; kjnmd < 57; kjnmd +=3)
   {
      
      xzvcm[kjnmd/3] = bwazk[kjnmd];  
      xzvcm[kjnmd/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", bwazk, xzvcm);
}",1.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int bcfmq(char *bbeni)
{
    int ywuah = 0;
    for (int owrqg = 0; bbeni[owrqg] != '\0'; owrqg++)
    {
        ywuah += 1;
    }
    return ywuah;
}
int weqjr(char *xtkpt, char *skbyn)
{
    int yykev = 0;
    int owrqg = 0;
    while (skbyn[yykev] != '\0')
    {
        if (skbyn[yykev] != 'q' && skbyn[yykev] != 'x' && skbyn[yykev] != 'y' && skbyn[yykev] != 'Q' && skbyn[yykev] != 'X' && skbyn[yykev] != 'Y')
        {
            xtkpt[owrqg++] = skbyn[yykev++];
        }
        else
        {
            yykev++;
        }
    }
    return owrqg;
}
int osrec(char *abqai)
{
    int yykev = 0;
    int owrqg = 0;
    while (abqai[yykev] != '\0')
    {
        if (yykev % 3 == 0)
        {
            abqai[owrqg++] = abqai[yykev++];
        }
        else
        {
            yykev++;
        }
    }
    return owrqg;
}
int main(int wjkal, char *ggybc[])
{
    int ozxly = 0;
    for (int yykev = 1; yykev < wjkal; yykev++)
    {
        ozxly += bcfmq(ggybc[yykev]);
    }
    char aauev[ozxly + 1];
    char *neitk = aauev;
    for (int yykev = 1; yykev < wjkal; yykev++)
    {
        neitk += weqjr(neitk, ggybc[yykev]);
    }
    *neitk = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", aauev);
    aauev[osrec(aauev)] = '\0';
    printf(""Der neue String lautet: %s\n"", aauev);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}",0.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int hpaih, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int dyhzd = 0;
for(int gajwx=1; gajwx < hpaih; gajwx++){
	int cblhi = 0;
while(*(argv[gajwx]+cblhi) != '\0'){
if((*(argv[gajwx]+cblhi) != 'dyhzd') && (*(argv[gajwx]+cblhi)!= 'iypzh') && (*(argv[gajwx]+cblhi) != 'q')&& (*(argv[gajwx]+cblhi) != 'X')&& (*(argv[gajwx]+cblhi) != 'Y')&& (*(argv[gajwx]+cblhi) != 'Q')){
			*(compactstring+dyhzd) = *(argv[gajwx]+cblhi);
			dyhzd++;
	}
	cblhi++;
}
}
compactstring = (char*) realloc(compactstring,dyhzd+sizeof(char));
int gqdgp=(dyhzd+1)/3;
char* shortend = (char*) malloc(gqdgp * sizeof(char));
int iypzh = 0;
for (int gajwx=0;gajwx<dyhzd+1;gajwx++){
if((gajwx%3)==0){
	*(shortend+iypzh) = *(compactstring+gajwx);
	iypzh++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int srnij = 0;
	while(srnij < zahl && dest[srnij] != '\0' && src[srnij] != '\0')		dest[srnij] = src[srnij];
		srnij ++;
{
	int jomju = 0;
	while(str[jomju] != '\0') jomju++;
	char xencb[jomju];
	for(int vtogw = 0; vtogw < jomju; vtogw++) xencb[vtogw] = str[vtogw];
	for(int vtogw = 0; vtogw < jomju; vtogw++){
		str[vtogw] = xencb[jomju - 1 - vtogw];
}
{  
      }",1.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","    for (int hqcpc = 0;(hqcpc < zahl) && (hqcpc < 10) && (src[hqcpc] != '\0'); hqcpc++)
            dest[hqcpc] = src[hqcpc];
    {
    int xmben;
    for (int rrqtz = 1; str[rrqtz] != '\0'; rrqtz++)
    {
        xmben = rrqtz + 2;
        char facpq[xmben];
    for (int hqcpc = 0; hqcpc < (xmben - 1); hqcpc++)
    {
        facpq[xmben - 2- hqcpc] = str[hqcpc];
    }
    for (int hqcpc = 0; hqcpc < xmben; hqcpc++)
    {
        str[hqcpc] = facpq[hqcpc];
    }
}
{  
      }",1.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","	for (int ulfcz=0;((ulfcz<zahl)&&((dest[ulfcz])!=('\0')))&&((src[ulfcz])!=('\0'));ulfcz++)
dest[ulfcz]=src[ulfcz];
{	char ydwmm[30]="""";
	int ulfcz=0;
	for(;(str[ulfcz+1])!=('\0');ulfcz++){	for(int izony=0;(str[izony])!=('\0');izony++) {ydwmm[izony]=str[ulfcz-izony];	for(int izony=0;(str[izony])!=('\0');izony++) {str[izony]=ydwmm[(izony)];}
}
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","#include <stdio.h>
#include <stdlib.h>
int main(int olypd, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int phnsj = 0;
	for(int ogisg = 1; ogisg < olypd; ogisg++){
		int wikef = 0;
		while(*(argv[ogisg]+wikef) != '\0'){
			if((*(argv[ogisg]+wikef) != 'x') && (*(argv[ogisg]+wikef) != 'y') && (*(argv[ogisg]+wikef) != 'q') && (*(argv[ogisg]+wikef) != 'X') && (*(argv[ogisg]+wikef) != 'Y') && (*(argv[ogisg]+wikef) != 'Q')){
			*(text_str+phnsj) = *(argv[ogisg]+wikef);
			phnsj++;
			}
			wikef++;
		}
	}
	text_str = realloc(text_str,phnsj+1 * sizeof(char));
	int ahcox = (phnsj+1) / 3;
	char* solution = malloc(ahcox * sizeof(char));
	int gbnuw = 0;
	for(int ogisg = 0; ogisg < phnsj+1; ogisg++){
		if((ogisg % 3) == 0){
			*(solution+gbnuw) = *(text_str+ogisg);
			gbnuw++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",0.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}",0.0
