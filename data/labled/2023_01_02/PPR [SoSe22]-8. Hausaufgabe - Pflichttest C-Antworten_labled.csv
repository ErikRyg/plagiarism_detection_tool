,semester,ha,task,prog_lang,surname1,lastname1,surname2,lastname2,code1,code2,label,hand_labled
0,SoSe22,8,Antwort 9,C,Ibraim,Ibraimi,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
1,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Moritz Sebastian,Niethammer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",1.0,1
2,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
3,SoSe22,8,Antwort 9,C,Niklas,Muß,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",1.0,1
4,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Leif Erik,Stolte,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
5,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Jonas,Eckhardt,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
6,SoSe22,8,Antwort 9,C,Tobias,Hengst,Tobias,Hengst,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",1.0,1
7,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Rosa,Hagenberg,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
8,SoSe22,8,Antwort 9,C,Bahar,Gülser,Bahar,Gülser,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
9,SoSe22,8,Antwort 9,C,Hannes,Voß,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",1.0,1
10,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Gabriele,Tellez Pedroza,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",1.0,1
11,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Edgar Wolf,Großkopf,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
12,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Shaurya,Sharma,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
13,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Luca Marius,Hilbrich,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
14,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Tom Frederik,Braune,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
15,SoSe22,8,Antwort 9,C,Florian,Schacht,Florian,Schacht,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}",1.0,1
16,SoSe22,8,Antwort 9,C,Tobias,Reiter,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
17,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Jakob Pius,Bücking,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}",1.0,1
18,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
19,SoSe22,8,Antwort 9,C,Emilie,Hilger,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",1.0,1
20,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
21,SoSe22,8,Antwort 9,C,Tugce,Karabalik,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
22,SoSe22,8,Antwort 9,C,Dennis Benedikt,Schulze,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
23,SoSe22,8,Antwort 9,C,Larissa,Breuer,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
24,SoSe22,8,Antwort 9,C,Timo,Kraska,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
25,SoSe22,8,Antwort 9,C,Butch Michel Guntbert,Warns,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
26,SoSe22,8,Antwort 9,C,Florian,Strobl,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
27,SoSe22,8,Antwort 9,C,Richard,Rabe,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
28,SoSe22,8,Antwort 9,C,Fabian,Große-Wöhrmann,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
29,SoSe22,8,Antwort 9,C,Pinelopi Eleni,Anastasiadou,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
30,SoSe22,8,Antwort 9,C,Ming-You,Tsai,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
31,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
32,SoSe22,8,Antwort 9,C,Melany Shaden,Saltos Erazo,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
33,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",1.0,1
34,SoSe22,8,Antwort 9,C,Bahar,Gülser,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.9727437916,1
35,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Leif Erik,Stolte,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.9588075881,1
36,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.9163477310000001,1
37,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8894314615000001,1
38,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8715668323,1
39,SoSe22,8,Antwort 9,C,Ming-You,Tsai,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8707953474000001,1
40,SoSe22,8,Antwort 9,C,Ming-You,Tsai,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8659534298,1
41,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8651887358,1
42,SoSe22,8,Antwort 9,C,Bahar,Gülser,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.864321608,1
43,SoSe22,8,Antwort 9,C,Niklas,Muß,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8565531476,0
44,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8520749665,0
45,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8519544475,0
46,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8515912898,0
47,SoSe22,8,Antwort 9,C,Tugce,Karabalik,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.850560776,0
48,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8505481823000001,0
49,SoSe22,8,Antwort 9,C,Pinelopi Eleni,Anastasiadou,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8482376930000001,0
50,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8478318003,0
51,SoSe22,8,Antwort 9,C,Dennis Benedikt,Schulze,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8469833868000001,0
52,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8448865403,0
53,SoSe22,8,Antwort 9,C,Ming-You,Tsai,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8447129909000001,0
54,SoSe22,8,Antwort 9,C,Bahar,Gülser,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8445336008000001,0
55,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Gabriele,Tellez Pedroza,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.8423153693000001,0
56,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8403458213,0
57,SoSe22,8,Antwort 9,C,Ming-You,Tsai,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8393719807000001,0
58,SoSe22,8,Antwort 9,C,Bahar,Gülser,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8375927453,0
59,SoSe22,8,Antwort 9,C,Bahar,Gülser,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8373424971000001,0
60,SoSe22,8,Antwort 9,C,Ming-You,Tsai,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8372921615000001,0
61,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8359820090000001,0
62,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8358287365,0
63,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8351224883,0
64,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8333333333,0
65,SoSe22,8,Antwort 9,C,Ming-You,Tsai,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8326824872,0
66,SoSe22,8,Antwort 9,C,Bahar,Gülser,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.832677761,0
67,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8318062827,0
68,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8302670623,0
69,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8287883048,0
70,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8286674132,0
71,SoSe22,8,Antwort 9,C,Bahar,Gülser,Jonas,Eckhardt,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8279631761,0
72,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8269394714,0
73,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8268093495000001,0
74,SoSe22,8,Antwort 9,C,Melany Shaden,Saltos Erazo,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.82616179,0
75,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8260992908,0
76,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8250746269,0
77,SoSe22,8,Antwort 9,C,Bahar,Gülser,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8247850578,0
78,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.824106113,0
79,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8238788239,0
80,SoSe22,8,Antwort 9,C,Melany Shaden,Saltos Erazo,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8225852680000001,0
81,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Bahar,Gülser,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8221070812,0
82,SoSe22,8,Antwort 9,C,Tobias,Hengst,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8213429257,0
83,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Bahar,Gülser,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8213109847000001,0
84,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8201398601000001,0
85,SoSe22,8,Antwort 9,C,Bahar,Gülser,Tobias,Hengst,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.8190751445000001,0
86,SoSe22,8,Antwort 9,C,Tobias,Reiter,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8176247447,0
87,SoSe22,8,Antwort 9,C,Melany Shaden,Saltos Erazo,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8175787728,0
88,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8174526789000001,0
89,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8163378716,0
90,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8157894737,0
91,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8150048092000001,0
92,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8139941691,0
93,SoSe22,8,Antwort 9,C,Melany Shaden,Saltos Erazo,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8139768728000001,0
94,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8138424821,0
95,SoSe22,8,Antwort 9,C,Tobias,Reiter,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8134110787000001,0
96,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8125,0
97,SoSe22,8,Antwort 9,C,Pinelopi Eleni,Anastasiadou,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8122448980000001,0
98,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Jonas,Eckhardt,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8121911038,0
99,SoSe22,8,Antwort 9,C,Bahar,Gülser,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8118811881,0
100,SoSe22,8,Antwort 9,C,Tobias,Reiter,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8117255969,0
101,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8116539141,0
102,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8107967817,0
103,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Bahar,Gülser,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8105086641,0
104,SoSe22,8,Antwort 9,C,Dennis Benedikt,Schulze,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8103850642,0
105,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8086124402,0
106,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.808499336,0
107,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8081378921,0
108,SoSe22,8,Antwort 9,C,Fabian,Große-Wöhrmann,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.808115942,0
109,SoSe22,8,Antwort 9,C,Bahar,Gülser,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8079930495000001,0
110,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8073987082,0
111,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8062194069,0
112,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8057713651,0
113,SoSe22,8,Antwort 9,C,Tobias,Hengst,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8054429647,0
114,SoSe22,8,Antwort 9,C,Ming-You,Tsai,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.8054221971000001,0
115,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.8051738076,0
116,SoSe22,8,Antwort 9,C,Tobias,Reiter,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8039811999,0
117,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8025285972,0
118,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.802519685,0
119,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8023320378000001,0
120,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8015783540000001,0
121,SoSe22,8,Antwort 9,C,Tobias,Reiter,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8010291595,0
122,SoSe22,8,Antwort 9,C,Bahar,Gülser,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8009313155000001,0
123,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.8008863564,0
124,SoSe22,8,Antwort 9,C,Bahar,Gülser,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7998834838000001,0
125,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7997714939,0
126,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Jonas,Eckhardt,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7996580222,0
127,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7991933160000001,0
128,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Moritz Sebastian,Niethammer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7986832109,0
129,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7984944991,0
130,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7977777778,0
131,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7975161987,0
132,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7965860597000001,0
133,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.796479648,0
134,SoSe22,8,Antwort 9,C,Fabian,Große-Wöhrmann,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7954743255000001,0
135,SoSe22,8,Antwort 9,C,Fabian,Große-Wöhrmann,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7946109431,0
136,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7944652638,0
137,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7938512215,0
138,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7937915743,0
139,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Shaurya,Sharma,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7931320964,0
140,SoSe22,8,Antwort 9,C,Tobias,Hengst,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7928730512000001,0
141,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7923121056,0
142,SoSe22,8,Antwort 9,C,Fabian,Große-Wöhrmann,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7912824811,0
143,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7893915757000001,0
144,SoSe22,8,Antwort 9,C,Tobias,Hengst,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7880534451000001,0
145,SoSe22,8,Antwort 9,C,Bahar,Gülser,Rosa,Hagenberg,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.787844682,0
146,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.787510362,0
147,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.787431694,0
148,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7869565217000001,0
149,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7865307383,0
150,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7858928076,0
151,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Gabriele,Tellez Pedroza,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7857905983,0
152,SoSe22,8,Antwort 9,C,Bahar,Gülser,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7852660300000001,0
153,SoSe22,8,Antwort 9,C,Emilie,Hilger,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7848170399000001,0
154,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7845399481,0
155,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7840637450000001,0
156,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Leif Erik,Stolte,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7836225597,0
157,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7826797386000001,0
158,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7819751754,0
159,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7819687213000001,0
160,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Bahar,Gülser,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7812251392,0
161,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Tobias,Hengst,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7810259239,0
162,SoSe22,8,Antwort 9,C,Ming-You,Tsai,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7803646564000001,0
163,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7799886299000001,0
164,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7798634812,0
165,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.778630137,0
166,SoSe22,8,Antwort 9,C,Emilie,Hilger,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7781587972,0
167,SoSe22,8,Antwort 9,C,Tobias,Reiter,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7773645058,0
168,SoSe22,8,Antwort 9,C,Bahar,Gülser,Leif Erik,Stolte,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7762634867,0
169,SoSe22,8,Antwort 9,C,Pinelopi Eleni,Anastasiadou,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.775968557,0
170,SoSe22,8,Antwort 9,C,Tobias,Reiter,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7754987356,0
171,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7751526414000001,0
172,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7751343054000001,0
173,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7749223383,0
174,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7746710526,0
175,SoSe22,8,Antwort 9,C,Emilie,Hilger,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7745285597,0
176,SoSe22,8,Antwort 9,C,Tobias,Reiter,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7739399045,0
177,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7731407170000001,0
178,SoSe22,8,Antwort 9,C,Tobias,Hengst,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7729245010000001,0
179,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Rosa,Hagenberg,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7725806452,0
180,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Jonas,Eckhardt,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7721655024,0
181,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7717717718,0
182,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7716100525,0
183,SoSe22,8,Antwort 9,C,Bahar,Gülser,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7712177122,0
184,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Rosa,Hagenberg,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7711179258,0
185,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7710774507,0
186,SoSe22,8,Antwort 9,C,Fabian,Große-Wöhrmann,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7709963485,0
187,SoSe22,8,Antwort 9,C,Tobias,Reiter,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7702627166,0
188,SoSe22,8,Antwort 9,C,Tobias,Hengst,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7702175125,0
189,SoSe22,8,Antwort 9,C,Pinelopi Eleni,Anastasiadou,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7696132597,0
190,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7686567164,0
191,SoSe22,8,Antwort 9,C,Butch Michel Guntbert,Warns,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7682154171000001,0
192,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7680259249,0
193,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7676153634,0
194,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7674042094,0
195,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7672059227,0
196,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7669744704,0
197,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7663795354,0
198,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7656025309000001,0
199,SoSe22,8,Antwort 9,C,Niklas,Muß,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7648163046,0
200,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7636113025,0
201,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.762962963,0
202,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Jonas,Eckhardt,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7629471436,0
203,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7626379266000001,0
204,SoSe22,8,Antwort 9,C,Niklas,Muß,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7617655656000001,0
205,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7616200054000001,0
206,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7613191727,0
207,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7612437535000001,0
208,SoSe22,8,Antwort 9,C,Pinelopi Eleni,Anastasiadou,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7612398771000001,0
209,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Leif Erik,Stolte,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7611464968,0
210,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7611111111000001,0
211,SoSe22,8,Antwort 9,C,Tobias,Hengst,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7602836879,0
212,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7595283795000001,0
213,SoSe22,8,Antwort 9,C,Ming-You,Tsai,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7591280654,0
214,SoSe22,8,Antwort 9,C,Melany Shaden,Saltos Erazo,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7591014717,0
215,SoSe22,8,Antwort 9,C,Tobias,Hengst,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7578363384,0
216,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7577514495000001,0
217,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7577362699,0
218,SoSe22,8,Antwort 9,C,Pinelopi Eleni,Anastasiadou,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.757711574,0
219,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7575593952,0
220,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7564908445,0
221,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7562277580000001,0
222,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7561544442,0
223,SoSe22,8,Antwort 9,C,Niklas,Muß,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7561458039000001,0
224,SoSe22,8,Antwort 9,C,Bahar,Gülser,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7559943583000001,0
225,SoSe22,8,Antwort 9,C,Fabian,Große-Wöhrmann,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7553805774,0
226,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7550221758,0
227,SoSe22,8,Antwort 9,C,Tobias,Hengst,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7549459246,0
228,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.754756871,0
229,SoSe22,8,Antwort 9,C,Tobias,Hengst,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7546652031000001,0
230,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Leif Erik,Stolte,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7544303797,0
231,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7537786446,0
232,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Tobias,Hengst,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7528332434,0
233,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7528280543,0
234,SoSe22,8,Antwort 9,C,Timo,Kraska,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7525773196000001,0
235,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7521235521,0
236,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.752,0
237,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Tobias,Hengst,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7512167192,0
238,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7503309505,0
239,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7499367889,0
240,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7497446374000001,0
241,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7497013142000001,0
242,SoSe22,8,Antwort 9,C,Tobias,Hengst,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7491638796000001,0
243,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7489604990000001,0
244,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7488584475000001,0
245,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7485254692000001,0
246,SoSe22,8,Antwort 9,C,Ming-You,Tsai,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7484760138000001,0
247,SoSe22,8,Antwort 9,C,Niklas,Muß,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7481648786,0
248,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7476153648,0
249,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7470817121000001,0
250,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7466882941,0
251,SoSe22,8,Antwort 9,C,Melany Shaden,Saltos Erazo,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7466874513,0
252,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7462323772,0
253,SoSe22,8,Antwort 9,C,Tobias,Hengst,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7453277545,0
254,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7452982268,0
255,SoSe22,8,Antwort 9,C,Bahar,Gülser,Moritz Sebastian,Niethammer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.744382765,0
256,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.743575419,0
257,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7422961549,0
258,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.741507431,0
259,SoSe22,8,Antwort 9,C,Butch Michel Guntbert,Warns,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7412292271,0
260,SoSe22,8,Antwort 9,C,Niklas,Muß,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7410835829,0
261,SoSe22,8,Antwort 9,C,Tobias,Reiter,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7409543786,0
262,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7400966184000001,0
263,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Rosa,Hagenberg,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7400627615,0
264,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Bahar,Gülser,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7399303829,0
265,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7397576457,0
266,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Leif Erik,Stolte,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7394514768,0
267,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7384123601,0
268,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Gabriele,Tellez Pedroza,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7376174752,0
269,SoSe22,8,Antwort 9,C,Timo,Kraska,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7376146789,0
270,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7373922132,0
271,SoSe22,8,Antwort 9,C,Bahar,Gülser,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7373271889,0
272,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Leif Erik,Stolte,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7367628607000001,0
273,SoSe22,8,Antwort 9,C,Pinelopi Eleni,Anastasiadou,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7367042180000001,0
274,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7360557769,0
275,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7354510801,0
276,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7353792704000001,0
277,SoSe22,8,Antwort 9,C,Timo,Kraska,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7347271246,0
278,SoSe22,8,Antwort 9,C,Tobias,Hengst,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7346497160000001,0
279,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7342226783,0
280,SoSe22,8,Antwort 9,C,Tobias,Hengst,Jonas,Eckhardt,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7331863286,0
281,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Tobias,Hengst,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7329758713000001,0
282,SoSe22,8,Antwort 9,C,Niklas,Muß,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7317224287,0
283,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Rosa,Hagenberg,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7307024075,0
284,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7303514377,0
285,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7299307515,0
286,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7299096529,0
287,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7298507463,0
288,SoSe22,8,Antwort 9,C,Florian,Strobl,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7293995321000001,0
289,SoSe22,8,Antwort 9,C,Ming-You,Tsai,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7288817377,0
290,SoSe22,8,Antwort 9,C,Larissa,Breuer,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7282999486,0
291,SoSe22,8,Antwort 9,C,Niklas,Muß,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7278670662000001,0
292,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Jakob Pius,Bücking,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}",0.7277591973,0
293,SoSe22,8,Antwort 9,C,Tobias,Reiter,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7277366675,0
294,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7273201251,0
295,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7260974953,0
296,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Jonas,Eckhardt,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7255648642,0
297,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Jakob Pius,Bücking,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}",0.7250262881,0
298,SoSe22,8,Antwort 9,C,Fabian,Große-Wöhrmann,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7245493780000001,0
299,SoSe22,8,Antwort 9,C,Butch Michel Guntbert,Warns,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7239795918,0
300,SoSe22,8,Antwort 9,C,Tobias,Hengst,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7237698516000001,0
301,SoSe22,8,Antwort 9,C,Larissa,Breuer,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7237214084,0
302,SoSe22,8,Antwort 9,C,Niklas,Muß,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7226158038,0
303,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7225527312000001,0
304,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7224409449,0
305,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Shaurya,Sharma,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7213420317,0
306,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7209924593,0
307,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7205318333,0
308,SoSe22,8,Antwort 9,C,Florian,Strobl,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7205194805,0
309,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Tobias,Hengst,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7202033037000001,0
310,SoSe22,8,Antwort 9,C,Tobias,Reiter,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7201365188000001,0
311,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7198772064000001,0
312,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7197007481000001,0
313,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7191867853,0
314,SoSe22,8,Antwort 9,C,Tobias,Reiter,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7182058047000001,0
315,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Shaurya,Sharma,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7181390745,0
316,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Leif Erik,Stolte,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7180385289,0
317,SoSe22,8,Antwort 9,C,Richard,Rabe,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7177033493,0
318,SoSe22,8,Antwort 9,C,Tobias,Hengst,Leif Erik,Stolte,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7174741426,0
319,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7169521861,0
320,SoSe22,8,Antwort 9,C,Niklas,Muß,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7165556125,0
321,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Rosa,Hagenberg,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.715957182,0
322,SoSe22,8,Antwort 9,C,Bahar,Gülser,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7158058656,0
323,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Moritz Sebastian,Niethammer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.715408805,0
324,SoSe22,8,Antwort 9,C,Tobias,Hengst,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7151545869,0
325,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7151162791,0
326,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7150433944,0
327,SoSe22,8,Antwort 9,C,Bahar,Gülser,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7149089043,0
328,SoSe22,8,Antwort 9,C,Butch Michel Guntbert,Warns,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.714251497,0
329,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7138728324,0
330,SoSe22,8,Antwort 9,C,Pinelopi Eleni,Anastasiadou,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7137637028,0
331,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7129893700000001,0
332,SoSe22,8,Antwort 9,C,Richard,Rabe,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7126321087,0
333,SoSe22,8,Antwort 9,C,Pinelopi Eleni,Anastasiadou,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7125465839,0
334,SoSe22,8,Antwort 9,C,Pinelopi Eleni,Anastasiadou,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7123916369000001,0
335,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Tobias,Hengst,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.7122100433,0
336,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7109414758,0
337,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7107358263,0
338,SoSe22,8,Antwort 9,C,Ming-You,Tsai,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7100960291,0
339,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7097425543,0
340,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7089108911,0
341,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7079646018,0
342,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7073039742,0
343,SoSe22,8,Antwort 9,C,Tobias,Reiter,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7058823529,0
344,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7051934827,0
345,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7050635949,0
346,SoSe22,8,Antwort 9,C,Butch Michel Guntbert,Warns,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7047706845,0
347,SoSe22,8,Antwort 9,C,Niklas,Muß,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7040650407,0
348,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7032509753,0
349,SoSe22,8,Antwort 9,C,Tobias,Hengst,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7031210986,0
350,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7030489367,0
351,SoSe22,8,Antwort 9,C,Bahar,Gülser,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7020367111,0
352,SoSe22,8,Antwort 9,C,Melany Shaden,Saltos Erazo,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7020064404,0
353,SoSe22,8,Antwort 9,C,Florian,Strobl,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7016838402000001,0
354,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7015990160000001,0
355,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Bahar,Gülser,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7011434511,0
356,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7006562342,0
357,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Jonas,Eckhardt,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7002386635000001,0
358,SoSe22,8,Antwort 9,C,Tobias,Reiter,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.7001491795,0
359,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6996919918000001,0
360,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6996716343,0
361,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Jonas,Eckhardt,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6990635282000001,0
362,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6985670420000001,0
363,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6985276370000001,0
364,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6982024598000001,0
365,SoSe22,8,Antwort 9,C,Niklas,Muß,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6975069252,0
366,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6971187632,0
367,SoSe22,8,Antwort 9,C,Pinelopi Eleni,Anastasiadou,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6963074604,0
368,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6962649753,0
369,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6957766643000001,0
370,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.695124909,0
371,SoSe22,8,Antwort 9,C,Richard,Rabe,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6951011455,0
372,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6945355191,0
373,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6943546381,0
374,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6935638809,0
375,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Gabriele,Tellez Pedroza,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6934097421000001,0
376,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6925294889,0
377,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6923987686,0
378,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6922315685,0
379,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6922285126000001,0
380,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Edgar Wolf,Großkopf,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6910590054,0
381,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6907190843000001,0
382,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6901197605,0
383,SoSe22,8,Antwort 9,C,Emilie,Hilger,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6900642610000001,0
384,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6898987521000001,0
385,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Moritz Sebastian,Niethammer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6898593634,0
386,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6897238119,0
387,SoSe22,8,Antwort 9,C,Larissa,Breuer,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6895351728,0
388,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6887989204,0
389,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.688480979,0
390,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6865671642000001,0
391,SoSe22,8,Antwort 9,C,Fabian,Große-Wöhrmann,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6862939139,0
392,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6860209807000001,0
393,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6860093435,0
394,SoSe22,8,Antwort 9,C,Fabian,Große-Wöhrmann,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6851043183000001,0
395,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6835626358,0
396,SoSe22,8,Antwort 9,C,Melany Shaden,Saltos Erazo,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6834895458,0
397,SoSe22,8,Antwort 9,C,Emilie,Hilger,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6832088653,0
398,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6829155060000001,0
399,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6828520317,0
400,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6828042932,0
401,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6825261965,0
402,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Luca Marius,Hilbrich,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6821208385,0
403,SoSe22,8,Antwort 9,C,Kaspar Lorenz,Hartmann,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6804492088,0
404,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Tobias,Hengst,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6804024916,0
405,SoSe22,8,Antwort 9,C,Niklas,Muß,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6802282312,0
406,SoSe22,8,Antwort 9,C,Fabian,Große-Wöhrmann,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.67983992,0
407,SoSe22,8,Antwort 9,C,Emilie,Hilger,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6798307475,0
408,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Moritz Sebastian,Niethammer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6796985398000001,0
409,SoSe22,8,Antwort 9,C,Niklas,Muß,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6795720835,0
410,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6791456683,0
411,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6784489581,0
412,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6780684105,0
413,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6773320207,0
414,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6771084337000001,0
415,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6748003549,0
416,SoSe22,8,Antwort 9,C,Melany Shaden,Saltos Erazo,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6718941436,0
417,SoSe22,8,Antwort 9,C,Tobias,Hengst,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6717708076000001,0
418,SoSe22,8,Antwort 9,C,Butch Michel Guntbert,Warns,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6698608259000001,0
419,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6695192550000001,0
420,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Rosa,Hagenberg,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6691658857,0
421,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6688475088,0
422,SoSe22,8,Antwort 9,C,Emilie,Hilger,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6669833729,0
423,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Edgar Wolf,Großkopf,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6668285576,0
424,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6666666667000001,0
425,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Jonas,Eckhardt,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6643426295,0
426,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6640945262,0
427,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6629130967,0
428,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Moritz Sebastian,Niethammer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6599955526,0
429,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6592261905,0
430,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6576508891,0
431,SoSe22,8,Antwort 9,C,Timo,Kraska,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6561171469,0
432,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Gabriele,Tellez Pedroza,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6552067763,0
433,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Rosa,Hagenberg,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6531509526,0
434,SoSe22,8,Antwort 9,C,Richard,Rabe,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.653088042,0
435,SoSe22,8,Antwort 9,C,Larissa,Breuer,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6524088249000001,0
436,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6518282989,0
437,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6513513514,0
438,SoSe22,8,Antwort 9,C,Timo,Kraska,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6512388967,0
439,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Leif Erik,Stolte,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6509108813000001,0
440,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6506024096,0
441,SoSe22,8,Antwort 9,C,Richard,Rabe,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6488908806,0
442,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Leif Erik,Stolte,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6468366383,0
443,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6465661642,0
444,SoSe22,8,Antwort 9,C,Lars Rudolf Heinrich,Michael,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.645793499,0
445,SoSe22,8,Antwort 9,C,Tobias,Hengst,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6451925406,0
446,SoSe22,8,Antwort 9,C,Richard,Rabe,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6451315182,0
447,SoSe22,8,Antwort 9,C,Niklas,Muß,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6410757946,0
448,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6408256881000001,0
449,SoSe22,8,Antwort 9,C,Niklas,Muß,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6376390905,0
450,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Tobias,Hengst,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6375000000000001,0
451,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6353604132,0
452,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6344731978,0
453,SoSe22,8,Antwort 9,C,Niklas,Muß,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6326530612,0
454,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6303645593,0
455,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6302021403,0
456,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6290027447000001,0
457,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6254529951000001,0
458,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Edgar Wolf,Großkopf,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6253769427,0
459,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.624479965,0
460,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6242610546,0
461,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Moritz Sebastian,Niethammer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.6217904233,0
462,SoSe22,8,Antwort 9,C,Richard,Rabe,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6195502524000001,0
463,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6118598383,0
464,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6076772934,0
465,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6067162497,0
466,SoSe22,8,Antwort 9,C,Richard,Rabe,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6041574525,0
467,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.6021695816,0
468,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5973139085,0
469,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Edgar Wolf,Großkopf,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5971065322,0
470,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5947033188,0
471,SoSe22,8,Antwort 9,C,Florian,Schacht,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5921568627,0
472,SoSe22,8,Antwort 9,C,Florian,Schacht,Rosa,Hagenberg,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5864594895,0
473,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5733558179,0
474,SoSe22,8,Antwort 9,C,Florian,Schacht,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5614860099,0
475,SoSe22,8,Antwort 9,C,Florian,Schacht,Gregor,Lehmann,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5550481989,0
476,SoSe22,8,Antwort 9,C,Florian,Schacht,Bahar,Gülser,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5522423104,0
477,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.548702393,0
478,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5371517028,0
479,SoSe22,8,Antwort 9,C,Florian,Schacht,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5369863014,0
480,SoSe22,8,Antwort 9,C,Niklas,Muß,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5342555995,0
481,SoSe22,8,Antwort 9,C,Florian,Schacht,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.5320623917,0
482,SoSe22,8,Antwort 9,C,Florian,Schacht,Shaurya,Sharma,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5308015014,0
483,SoSe22,8,Antwort 9,C,Florian,Schacht,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5274771024,0
484,SoSe22,8,Antwort 9,C,Florian,Schacht,Jonas,Eckhardt,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5267675627,0
485,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5234514859,0
486,SoSe22,8,Antwort 9,C,Florian,Schacht,Gabriele,Tellez Pedroza,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.5233898305,0
487,SoSe22,8,Antwort 9,C,Florian,Schacht,Moritz Sebastian,Niethammer,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.5230249261000001,0
488,SoSe22,8,Antwort 9,C,Florian,Schacht,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5218863362,0
489,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5217391304,0
490,SoSe22,8,Antwort 9,C,Bahar,Gülser,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5173276170000001,0
491,SoSe22,8,Antwort 9,C,Florian,Schacht,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5145172181000001,0
492,SoSe22,8,Antwort 9,C,Florian,Schacht,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5137907454,0
493,SoSe22,8,Antwort 9,C,Florian,Schacht,Tobias,Reiter,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.513229927,0
494,SoSe22,8,Antwort 9,C,Florian,Schacht,Tom Frederik,Braune,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5130475303,0
495,SoSe22,8,Antwort 9,C,Florian,Schacht,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5093984962,0
496,SoSe22,8,Antwort 9,C,Florian,Schacht,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5078630897,0
497,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5032478632,0
498,SoSe22,8,Antwort 9,C,Florian,Schacht,Leif Erik,Stolte,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.5003353454,0
499,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4907486479,0
500,SoSe22,8,Antwort 9,C,Florian,Schacht,Tobias,Hengst,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.4865109952,0
501,SoSe22,8,Antwort 9,C,Florian,Schacht,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4849837662,0
502,SoSe22,8,Antwort 9,C,Florian,Schacht,Jakob Pius,Bücking,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}",0.4773401101,0
503,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4763766699,0
504,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.47598870060000004,0
505,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4728390844,0
506,SoSe22,8,Antwort 9,C,Florian,Schacht,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4711221122,0
507,SoSe22,8,Antwort 9,C,Florian,Schacht,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4702394527,0
508,SoSe22,8,Antwort 9,C,Florian,Schacht,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.46724137930000004,0
509,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.46579439250000004,0
510,SoSe22,8,Antwort 9,C,Florian,Schacht,Niklas,Muß,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.4644128114,0
511,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4604537094,0
512,SoSe22,8,Antwort 9,C,Florian,Schacht,Edgar Wolf,Großkopf,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.45384455090000003,0
513,SoSe22,8,Antwort 9,C,Florian,Schacht,Luca Marius,Hilbrich,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.45284536500000006,0
514,SoSe22,8,Antwort 9,C,Florian,Schacht,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4527702089,0
515,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.4518377693,0
516,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4513590844,0
517,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4474885845,0
518,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4447159438,0
519,SoSe22,8,Antwort 9,C,Tobias,Reiter,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.44049247610000003,0
520,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.43614130430000003,0
521,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4287709497,0
522,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4144499179,0
523,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4045124899,0
524,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.40196078430000004,0
525,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.4,0
526,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.3942028986,0
527,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3873358033,0
528,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3814252336,0
529,SoSe22,8,Antwort 9,C,Tobias,Hengst,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3788546256,0
530,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3772136954,0
531,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.35699311170000003,0
532,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3557858377,0
533,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.35476856170000004,0
534,SoSe22,8,Antwort 9,C,Elisabeth Maria,Groß,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3546650718,0
535,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3508549715,0
536,SoSe22,8,Antwort 9,C,Tobias,Reiter,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3467992542,0
537,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.34195658640000004,0
538,SoSe22,8,Antwort 9,C,Bahar,Gülser,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3414161009,0
539,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3404530744,0
540,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3349530288,0
541,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.33445224290000003,0
542,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.33363998770000003,0
543,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.33168622610000004,0
544,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3295489414,0
545,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3264530147,0
546,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.32629558540000003,0
547,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3216374269,0
548,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.32113698220000003,0
549,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.31791369140000003,0
550,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3148414986,0
551,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3127109111,0
552,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3125820856,0
553,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3036837376,0
554,SoSe22,8,Antwort 9,C,Tobias,Hengst,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.3020030817,0
555,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.2956234517,0
556,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.2950544845,0
557,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.2774663677,0
558,SoSe22,8,Antwort 9,C,Niklas,Muß,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.2714714715,0
559,SoSe22,8,Antwort 9,C,Niklas,Schwolow,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.2693787795,0
560,SoSe22,8,Antwort 9,C,Florian,Schacht,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.2330666667,0
561,SoSe22,8,Antwort 9,C,Florian,Schacht,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.1449060336,0
562,SoSe22,8,Antwort 9,C,Hannes,Voß,Lars Rudolf Heinrich,Michael,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }
	
	
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i <= maxlength; i++){
		shiftChar(&str[i], shift);	
	}
	
	
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.1010541621,0
563,SoSe22,8,Antwort 9,C,Hannes,Voß,Ming-You,Tsai,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if('a' <= *p_char && *p_char <= 'z' || 'A'  <= *p_char && *p_char <= 'Z'){
        *p_char = *p_char + shift;
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str;
    p_str = str;
    for(char* p_str = str; p_str < str + maxlength; p_str++){
         shiftChar(p_str, shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.0975609756,0
564,SoSe22,8,Antwort 9,C,Hannes,Voß,Niklas,Schwolow,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.08979591840000001,0
565,SoSe22,8,Antwort 9,C,Gregor,Lehmann,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.0827389444,0
566,SoSe22,8,Antwort 9,C,Hannes,Voß,Emilie,Hilger,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
    int shifted = *p_char + shift;

    if ('a' <= *p_char && *p_char <= 'z') {
        if (shifted > 'z') {
            *p_char = 'a' - 1 + shifted - 'z';
        } else if (shifted < 'a') {
            *p_char = 'z' + 1 + shifted - 'a';
        } else {
            *p_char = shifted;
        }
    }
    if ('A' <= *p_char && *p_char <= 'Z') {
        if (shifted > 'Z') {
            *p_char = 'A' - 1 + shifted - 'Z';
        } else if (shifted < 'A') {
            *p_char = 'Z' + 1 + shifted - 'A';
        } else {
            *p_char = shifted;
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i)
    {
        shiftChar(&str[i], shift);
    }

}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";  // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}",0.0821029888,0
567,SoSe22,8,Antwort 9,C,Hannes,Voß,Elisabeth Maria,Groß,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.0805860806,0
568,SoSe22,8,Antwort 9,C,Bahar,Gülser,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.07768595040000001,0
569,SoSe22,8,Antwort 9,C,Hannes,Voß,Tugce,Karabalik,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ('A' <= *p_char && *p_char <= 'Z')
	{   
	    *p_char += shift;
	    if (*p_char > 'Z') *p_char -= 26;
	    if (*p_char < 'A') *p_char += 26;
	}
	else if ('a' <= *p_char && *p_char <= 'z')
	{
	    if(*p_char+shift < 'a') shift += 26;
	    if(*p_char+shift > 'z') shift -= 26;
	    *p_char += shift;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < maxlength; ++i) shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.0770505385,0
570,SoSe22,8,Antwort 9,C,Luca Marius,Hilbrich,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.0746649649,0
571,SoSe22,8,Antwort 9,C,Hannes,Voß,Ibraim,Ibraimi,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	shift = (shift + 26) % 26;
	if(*p_char >= 'a' && *p_char <= 'z'){
	
	*p_char -=97; 
	*p_char =(*p_char + shift) %26;
/*	if (*p_char < 97){
	*p_char +=26; 
	}*/
	*p_char +=97;
	} 
	else if (*p_char >= 'A' && *p_char <= 'Z'){
	
	*p_char -=65;
	*p_char =(*p_char + shift) %26;
	*p_char +=65;
	} 
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i<maxlength; ++i){
	
	shiftChar(&str[i], shift);
	
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.0728175424,0
572,SoSe22,8,Antwort 9,C,Hannes,Voß,Butch Michel Guntbert,Warns,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	// A-Z : 65-90 und a-z : 97-122
	unsigned char result = *p_char;

	// Grossbuchstabe
    if (*p_char >= 65 && *p_char <= 90)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 90)
        {
            result -= 26; 
        }
        // Underflows
        else if(result < 65)
        {
            result += 26;
        }
    }
    // Kleinbuchstabe
    else if (*p_char <= 122 && *p_char >= 97)
    {
        result += shift; // Verschiebe
        // Overflows
        if(result > 122)
        {
            result -= 26;
        }
        // Underflows
        else if(result < 97)
        {
            result += 26;
        }
    }
    *p_char = result;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; i++)
	{
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.06882312460000001,0
573,SoSe22,8,Antwort 9,C,Moritz Sebastian,Niethammer,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.0683937824,0
574,SoSe22,8,Antwort 9,C,Florian,Schacht,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.06822901220000001,0
575,SoSe22,8,Antwort 9,C,Hannes,Voß,Timo,Kraska,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int letter = (int)*p_char;
    if(*p_char<='z' && *p_char>='a'){
        letter += shift;
        if(letter>122){
            int diff = letter-122;
            letter = 97+diff-1;
        }
        if(letter<97){
            int diff = 97-letter;
            letter = 122-diff+1;
        }
        *p_char = (char)letter;
    }
    if(*p_char<='Z' && *p_char>='A'){
        letter += shift;
        if(letter>90){
            int diff = letter-90;
            letter = 65+diff-1;
        }
        if(letter<65){
            int diff = 65-letter;
            letter = 90-diff+1;
        }
        *p_char = (char)letter;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        int* pointer = &str[i];
        shiftChar(pointer, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.0656908247,0
576,SoSe22,8,Antwort 9,C,Hannes,Voß,Kaspar Lorenz,Hartmann,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if('a'<=*p_char && 'z'>=*p_char ){
        *p_char+=shift;
        if (*p_char<'a') *p_char+=26;
        if (*p_char>'z') *p_char-=26;
        else *p_char=*p_char;
	}
	else if ('A'<=*p_char && 'Z'>=*p_char){
        *p_char+=shift;
        if (*p_char<'A') *p_char+=26;
        if (*p_char>'Z') *p_char-=26;
        else *p_char=*p_char;
	}
    else *p_char=*p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0;i<maxlength;i++){
        shiftChar(&str[i],shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.0651911469,0
577,SoSe22,8,Antwort 9,C,Hannes,Voß,Pinelopi Eleni,Anastasiadou,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	    if (""A"" <= p_char && p_char <= ""z""){
	        if (*p_char < ""Z"" && *p_char + shift > ""Z""){
	            int x = ""Z"" - shift;
	        *p_char = ""A"" + shift;
	        }
	        else if (*p_char < ""z"" && *p_char > ""a"" && *p_char + shift > ""z""){
	            int y = ""z"" - shift;
	        *p_char = ""a"" + shift;
	        }
	        else *p_char = *p_char + shift;
	int str = p_char;
	return str;
	    }
	    else return 0;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i = 0; i < 50; i++){
	    str[i] = shiftChar(str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.0651491366,0
578,SoSe22,8,Antwort 9,C,Hannes,Voß,Fabian,Große-Wöhrmann,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int ascii_wert;
    int vorzeichen=0;
    if(*p_char>96&&*p_char<123){
        ascii_wert=*p_char+shift;
        if(ascii_wert>122) vorzeichen=-1;
        if(ascii_wert<97) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
    if(*p_char>64&&*p_char<91){
        ascii_wert=*p_char+shift;
        if(ascii_wert>90) vorzeichen=-1;
        if(ascii_wert<65) vorzeichen=1;
        *p_char=(ascii_wert+vorzeichen*26);
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0; i<maxlength; i++){
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */

int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.0647173489,0
579,SoSe22,8,Antwort 9,C,Gabriele,Tellez Pedroza,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.064191802,0
580,SoSe22,8,Antwort 9,C,Hannes,Voß,Florian,Strobl,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	char c = *p_char;
	if (c >= 65 && c <= 90) {
	    // uppercase alpha
	    c += shift; // shift
	    
	    // check lower than 65
	    if (c < 65) {
	        c = 90 - (64 - c);
	    }
	    
	    // check higher than 90
	    if (c > 90) {
	        c = 65 + (c - 91);
	    }
	} else if (c >= 97 && c <= 122) {
	    // lowercase alpha
	    
	    // check if overflow
	    if (shift + c > 127) {
	        int pos = ((shift + (c-97))%26) + 97;
	        c = pos;
	    } else {
            c += shift; // shift
            
	        // check lower than 97
	        if (c < 97) {
	            c = 122 - (96 - c);
	        }
	        
            // check higher than 122
	        if (c > 122) {
	            c = 97 + (c - 123);
            }
	    }
	}
	
	*p_char = c;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i = 0; i < maxlength; ++i)
	    shiftChar(&str[i], shift);
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.0627318718,0
581,SoSe22,8,Antwort 9,C,Rosa,Hagenberg,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.0607651913,0
582,SoSe22,8,Antwort 9,C,Leif Erik,Stolte,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.0607441154,0
583,SoSe22,8,Antwort 9,C,Hannes,Voß,Larissa,Breuer,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	// ... hier Code einfuegen ...
	if (shift>=0)
	{
		if ('a' <= *p_char && *p_char <= ('z'- shift)) *p_char = *p_char + shift;
		
		else if (*p_char > ('z'- shift)) 
		{
			*p_char = 'a' + (shift - ('z' - *p_char)-1);
		}
		else if ('A' <= *p_char && *p_char <= ('Z'- shift)) *p_char = *p_char +shift;
		
		else if (*p_char > ('Z'- shift)) {
			*p_char = 'A' + shift - ('Z' - *p_char) - 1;
		}
		else *p_char = *p_char;
	}
	else{
		if (('a' - shift) <= *p_char && *p_char <= ('z')) *p_char = *p_char + shift;
		
		else if (*p_char >= 'a' && *p_char < ('a'- shift)) 
		{
			*p_char = 'z' + (shift - ('a' - *p_char)+1);
		}
		else if (('A' - shift) <= *p_char && *p_char <= ('Z')) *p_char = *p_char +shift;
		
		else if (*p_char >= 'A' && *p_char < ('A'- shift)) {
			*p_char = 'Z' + (shift - ('A' - *p_char)+1);
		}
		else *p_char = *p_char;
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
	for (int i=0; i<maxlength; i++)
	{
		shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.060485211000000004,0
584,SoSe22,8,Antwort 9,C,Hannes,Voß,Dennis Benedikt,Schulze,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    int base = 'Z' - 'A' + 1;
    if (*p_char >= 'A' && *p_char <= 'Z') {
        int c = (int)(*p_char - 'A');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'A');
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        int c = (int)(*p_char - 'a');
        int mod = (c + shift + base) % base;
        *p_char = (char)(mod + 'a');
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; ++i) {
        if (str[i] == 0)
            break;

        shiftChar(str + i, shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.0597014925,0
585,SoSe22,8,Antwort 9,C,Shaurya,Sharma,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.0587360595,0
586,SoSe22,8,Antwort 9,C,Jonas,Eckhardt,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.058732612100000005,0
587,SoSe22,8,Antwort 9,C,Tom Frederik,Braune,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.0587036282,0
588,SoSe22,8,Antwort 9,C,Hannes,Voß,Melany Shaden,Saltos Erazo,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char>=65 &&*p_char<=90)
    {
        while (*p_char+shift>90)
        {
            *p_char-=26;
        }
        while (*p_char+shift<65)
        {
            *p_char+=26;
        }
        *p_char+=shift;

    }
    if (*p_char>=97 &&*p_char<=122)
    {
        while (*p_char+shift>122)
        {
            *p_char-=26;
        }
        while (*p_char+shift<97)
        {
            *p_char+=26;
        }
        *p_char+=shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int c = 0; c<maxlength; c++)
    {
        shiftChar(&str[c],shift);
    }
	
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.058371735800000005,0
589,SoSe22,8,Antwort 9,C,Tobias,Reiter,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	int p= (int) *p_char;
	int p_new;
	if (65<=p && p<=90){
		if ((p+shift)>90){
			p_new=p+shift-26;
		}
		else if ((p+shift)<65){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else if (97<=p && p<=122){
		if ((p+shift)>122){
			p_new=p+shift-26;
		}
		else if ((p+shift)<97){
			p_new=p+shift+26;
		}
		else{
			p_new=p+shift;
		}
	}
	else {
		p_new=p;
	}
	*p_char=(char) p_new;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for (int i=0; i<maxlength; i++){
		char* p_char= &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
		char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.058153241700000004,0
590,SoSe22,8,Antwort 9,C,Tobias,Hengst,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.056765163300000004,0
591,SoSe22,8,Antwort 9,C,Jakob Pius,Bücking,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);


}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.050641692700000004,0
592,SoSe22,8,Antwort 9,C,Edgar Wolf,Großkopf,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.05,0
593,SoSe22,8,Antwort 9,C,Niklas,Muß,Hannes,Voß,"#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */

char shiftChar(char* p_char, int shift)
{
    if(p_char > 64 && p_char < 91) {
        if (p_char + shift > 90){
            p_char = p_char + shift - 26;
        } else if (p_char + shift < 65) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    } else if (p_char > 96 && p_char < 123) {
        if (p_char + shift > 122){
                p_char = p_char + shift - 26;
        } else if (p_char + shift < 97) {
            p_char = p_char + shift + 26;
        } else {
            p_char += shift;
        }
    }
    return p_char;
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for (int i = 0; i < maxlength; i++) {
        str[i] = shiftChar(str[i], shift);
    }
}



/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\n"", str);
}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}",0.0496800903,0
594,SoSe22,8,Antwort 9,C,Hannes,Voß,Richard,Rabe,"#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	char Gross[26];
	char Klein[26];
	for( int i = 0; i<=25;i++)
	{
		Gross[i] = 'A' + i;
	}
	for( int f = 0; f<=25; f++)
	{
		Klein[f] = 'a' + f;
	}
	for( int c = 0; c<=25; c++)
	{
		if( *p_char == Gross[c])
		{
			if( c + shift > 25)
			{
				*p_char = Gross[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Gross[26-shift+c];
				}
				if (shift<0)
				{
				*p_char = Gross[26+shift+c];
				}
				break;
			}
			else
			{
				*p_char = Gross[c] + shift;
				break;
			}
		}
		else if( *p_char == Klein[c])
		{
			if(c + shift > 25)
			{
				*p_char = Klein[c+shift-26];
				break;
			}
			else if( c + shift < 0)
			{
				if(shift>0)
				{
				*p_char = Klein[26-shift+c];
				}
				if(shift<0)
				{
					*p_char = Klein[26+shift+c];
				}
				break;
			}
			else
			{
			*p_char = Klein[c + shift];
				break;
			}
		}
		else
		{
			continue;
		}
			
    	
}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++)
	{
		shiftChar(&str[i], shift);
		
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\n"", str);
}",0.048559404300000004,0
