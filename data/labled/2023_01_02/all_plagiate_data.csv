"","semester","ha","task","prog_lang","surname1","lastname1","code1","code2","label","type"
"0","SoSe22","9","Antwort 8","C","Melany Shaden","Saltos Erazo","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void qlrpr(long gzvwk, long *chlnf, long *izqfo)
    int rbodl=gzvwk/2;
    if(gzvwk==1)
    {
        *chlnf=1;
        *izqfo=1;
        return ;
        if (gzvwk==0)
    {
        *chlnf=1;
        *izqfo=gzvwk/ *chlnf;
        return;
        if(gzvwk%2==0)
    {
        *chlnf=2;
        *izqfo=gzvwk/ *chlnf;
    }
    else
    {
        *chlnf=2;
        while(gzvwk% *chlnf!=0)
        {
            rbodl=(rbodl-1);
            *izqfo=rbodl;
            *chlnf=gzvwk/ *izqfo;
        }
    }
}
int main()
{
    long npayn, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&npayn);
    qlrpr(npayn, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", npayn, fac2, fac1);
    return 0;
}","1","variable_renamer"
"1","SoSe22","9","Antwort 8","C","Melany Shaden","Saltos Erazo","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        for (; product% *factor1!=0; *factor1=product/ *factor2)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","swap_loops_type"
"2","SoSe22","9","Antwort 8","C","Melany Shaden","Saltos Erazo","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","swap_functions"
"3","SoSe22","9","Antwort 8","C","Melany Shaden","Saltos Erazo","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(!(product!=1))
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (!(product!=0))
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(!(product%2!=0))
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(!(product% *factor1==0))
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","demorgan_on_logic_equations"
"4","SoSe22","9","Antwort 8","C","Melany Shaden","Saltos Erazo","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(1 == product)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if0 == product=0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
       0 == product%22==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        0 != product% *factor1or1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","mirrow_simple_logic_equations"
"5","SoSe22","9","Antwort 8","C","Melany Shaden","Saltos Erazo","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void xcebp(long hgllg, long *sqfmr, long *ydxrw)
    int edago=hgllg/2;
    if(hgllg==1)
    {
        *sqfmr=1;
        *ydxrw=1;
        return ;
        if (hgllg==0)
    {
        *sqfmr=1;
        *ydxrw=hgllg/ *sqfmr;
        return;
        if(hgllg%2==0)
    {
        *sqfmr=2;
        *ydxrw=hgllg/ *sqfmr;
    }
    else
    {
        *sqfmr=2;
        while(hgllg% *sqfmr!=0)
        {
            edago=(edago-1);
            *ydxrw=edago;
            *sqfmr=hgllg/ *ydxrw;
        }
    }
}
int main()
{
    long jeoiv, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&jeoiv);
    xcebp(jeoiv, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", jeoiv, fac2, fac1);
    return 0;
}","1","variable_renamer"
"6","SoSe22","9","Antwort 8","C","Melany Shaden","Saltos Erazo","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        for (; product% *factor1!=0; *factor1=product/ *factor2)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","swap_loops_type"
"7","SoSe22","9","Antwort 8","C","Melany Shaden","Saltos Erazo","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","swap_functions"
"8","SoSe22","9","Antwort 8","C","Melany Shaden","Saltos Erazo","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(!(product!=1))
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (!(product!=0))
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(!(product%2!=0))
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(!(product% *factor1==0))
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","demorgan_on_logic_equations"
"9","SoSe22","9","Antwort 8","C","Melany Shaden","Saltos Erazo","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(1 == product)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if0 == product=0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
       0 == product%22==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        0 != product% *factor1or1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","mirrow_simple_logic_equations"
"10","SoSe22","9","Antwort 8","C","Melany Shaden","Saltos Erazo","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void ydlwv(long scwaf, long *hmstn, long *izdnl)
    int vqost=scwaf/2;
    if(scwaf==1)
    {
        *hmstn=1;
        *izdnl=1;
        return ;
        if (scwaf==0)
    {
        *hmstn=1;
        *izdnl=scwaf/ *hmstn;
        return;
        if(scwaf%2==0)
    {
        *hmstn=2;
        *izdnl=scwaf/ *hmstn;
    }
    else
    {
        *hmstn=2;
        while(scwaf% *hmstn!=0)
        {
            vqost=(vqost-1);
            *izdnl=vqost;
            *hmstn=scwaf/ *izdnl;
        }
    }
}
int main()
{
    long ssice, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&ssice);
    ydlwv(ssice, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", ssice, fac2, fac1);
    return 0;
}","1","variable_renamer"
"11","SoSe22","9","Antwort 8","C","Alexander","Franke","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		long try = zaehler;
		while (try > 0)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
			try--;
		}
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","1","swap_loops_type"
"12","SoSe22","9","Antwort 8","C","Alexander","Franke","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		}
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","1","swap_functions"
"13","SoSe22","9","Antwort 8","C","Alexander","Franke","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (!(long try = zaehler; try <= 0 ; try--))
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		}
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","1","demorgan_on_logic_equations"
"14","SoSe22","9","Antwort 8","C","Alexander","Franke","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; 0 < try; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		}
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","1","mirrow_simple_logic_equations"
"15","SoSe22","9","Antwort 8","C","Alexander","Franke","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void vvzbv(long kbuyp, long *quwxo, long *fskyv)
switch (kbuyp)
	{
		case 0 : *quwxo = 1; *fskyv = kbuyp; break;
		case 1 : *quwxo = 1; *fskyv = kbuyp; break;
		default : 
		if ( !(kbuyp % (kbuyp / 2))) { *quwxo = (kbuyp / 2); *fskyv = 2; break;		long atoux = ((kbuyp - 1)/2);
		for (long wpjux = atoux; wpjux > 0 ; wpjux--)
		{
		if ( !(kbuyp%wpjux)) 	{ *quwxo = wpjux; *fskyv = kbuyp / wpjux; break; } 
		}
	}
	long kbuyp = 0;
	long quwxo = 0;
	long fskyv = 0;
	long* p_factor1 = &quwxo;
	long* p_factor2 = &fskyv;
	scanf(""%ld"", &kbuyp);
	vvzbv(kbuyp, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",kbuyp, quwxo, fskyv );
}","1","variable_renamer"
"16","SoSe22","9","Antwort 8","C","Alexander","Franke","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		long try = zaehler;
		while (try > 0)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
			try--;
		}
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","1","swap_loops_type"
"17","SoSe22","9","Antwort 8","C","Alexander","Franke","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		}
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","1","swap_functions"
"18","SoSe22","9","Antwort 8","C","Alexander","Franke","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (!(long try = zaehler; try <= 0 ; try--))
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		}
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","1","demorgan_on_logic_equations"
"19","SoSe22","9","Antwort 8","C","Alexander","Franke","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; 0 < try; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		}
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","1","mirrow_simple_logic_equations"
"20","SoSe22","9","Antwort 8","C","Alexander","Franke","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void mupgk(long wybzs, long *srxdu, long *irggb)
switch (wybzs)
	{
		case 0 : *srxdu = 1; *irggb = wybzs; break;
		case 1 : *srxdu = 1; *irggb = wybzs; break;
		default : 
		if ( !(wybzs % (wybzs / 2))) { *srxdu = (wybzs / 2); *irggb = 2; break;		long eiuug = ((wybzs - 1)/2);
		for (long zuhun = eiuug; zuhun > 0 ; zuhun--)
		{
		if ( !(wybzs%zuhun)) 	{ *srxdu = zuhun; *irggb = wybzs / zuhun; break; } 
		}
	}
	long wybzs = 0;
	long srxdu = 0;
	long irggb = 0;
	long* p_factor1 = &srxdu;
	long* p_factor2 = &irggb;
	scanf(""%ld"", &wybzs);
	mupgk(wybzs, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",wybzs, srxdu, irggb );
}","1","variable_renamer"
"21","SoSe22","9","Antwort 8","C","Alexander","Franke","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		} // Ende for -Schleife mit try als Zaehler
		 // Ende von default
	} // Ende von switch (product)
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","void factorize(long product, long *factor1, long *factor2)
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		default : 
		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;		long zaehler = ((product - 1)/2);
		long try = zaehler;
		while (try > 0)
		{
		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
			try--;
		}
	}
	long product = 0;
	long factor1 = 0;
	long factor2 = 0;
	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
}","1","swap_loops_type"
"22","SoSe22","9","Antwort 8","C","Kaspar Lorenz","Hartmann","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","1","swap_functions"
"23","SoSe22","9","Antwort 8","C","Kaspar Lorenz","Hartmann","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(!(produkt!=0 || produkt!=1)){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(!(produkt % zahl ==0)) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","1","demorgan_on_logic_equations"
"24","SoSe22","9","Antwort 8","C","Kaspar Lorenz","Hartmann","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(0 || produkt==1 == produkt){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        whil0 != produkt % zahl=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","1","mirrow_simple_logic_equations"
"25","SoSe22","9","Antwort 8","C","Kaspar Lorenz","Hartmann","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void iduvi(long wiwqg, long *coaug, long *dqaoc)
	if(wiwqg==0 || wiwqg==1){
        *coaug=1;
        *dqaoc=wiwqg;
	else {
        int xiuxy = wiwqg/2;
        while(wiwqg % xiuxy !=0) xiuxy-=1;
        *coaug = xiuxy;
        *dqaoc = wiwqg/xiuxy;
}
    long wiwqg;
    long coaug;
    long dqaoc;
	scanf(""%ld"",&wiwqg);
    iduvi (wiwqg, &coaug, &dqaoc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",wiwqg,coaug,dqaoc);
}","1","variable_renamer"
"26","SoSe22","9","Antwort 8","C","Kaspar Lorenz","Hartmann","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","1","swap_loops_type"
"27","SoSe22","9","Antwort 8","C","Kaspar Lorenz","Hartmann","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","1","swap_functions"
"28","SoSe22","9","Antwort 8","C","Kaspar Lorenz","Hartmann","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(!(produkt!=0 || produkt!=1)){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(!(produkt % zahl ==0)) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","1","demorgan_on_logic_equations"
"29","SoSe22","9","Antwort 8","C","Kaspar Lorenz","Hartmann","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(0 || produkt==1 == produkt){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        whil0 != produkt % zahl=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","1","mirrow_simple_logic_equations"
"30","SoSe22","9","Antwort 8","C","Kaspar Lorenz","Hartmann","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void dszzb(long jqrbi, long *igrip, long *pxsim)
	if(jqrbi==0 || jqrbi==1){
        *igrip=1;
        *pxsim=jqrbi;
	else {
        int tmikf = jqrbi/2;
        while(jqrbi % tmikf !=0) tmikf-=1;
        *igrip = tmikf;
        *pxsim = jqrbi/tmikf;
}
    long jqrbi;
    long igrip;
    long pxsim;
	scanf(""%ld"",&jqrbi);
    dszzb (jqrbi, &igrip, &pxsim);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",jqrbi,igrip,pxsim);
}","1","variable_renamer"
"31","SoSe22","9","Antwort 8","C","Kaspar Lorenz","Hartmann","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","1","swap_loops_type"
"32","SoSe22","9","Antwort 8","C","Kaspar Lorenz","Hartmann","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
}
    long produkt;
    long faktor1;
    long faktor2;
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
}","1","swap_functions"
"33","SoSe22","9","Antwort 8","C","Dennis Benedikt","Schulze","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (!(*factor1 <= 1)) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (!(*factor1 != 0)) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","1","demorgan_on_logic_equations"
"34","SoSe22","9","Antwort 8","C","Dennis Benedikt","Schulze","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (1 < *factor1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (0 == *factor1) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","1","mirrow_simple_logic_equations"
"35","SoSe22","9","Antwort 8","C","Dennis Benedikt","Schulze","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void ssnfn(long wapex, long *xwpfa, long *gnpli) {
  *xwpfa = wapex;
  *gnpli = 1;
  tjjal (*xwpfa > 1) {
    ++*gnpli;
    while (*xwpfa % *gnpli) {
      ++*gnpli;
        *xwpfa /= *gnpli;
  } else tjjal (*xwpfa == 0) {
    long eahui = *xwpfa;
    *xwpfa = *gnpli;
    *gnpli = eahui;
  }
int main() {
  printf(""Please enter an Integer: "");
  long zkreh = 0L;
  scanf(""%ld"", &zkreh);
  long xrkfs = 0L, f2 = 0L;
  ssnfn(zkreh, &xrkfs, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", zkreh, xrkfs, f2);
  return 0;
}","1","variable_renamer"
"36","SoSe22","9","Antwort 8","C","Dennis Benedikt","Schulze","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    for (; *factor1 % *factor2; *factor1 /= *factor2) {
      ++*factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","1","swap_loops_type"
"37","SoSe22","9","Antwort 8","C","Dennis Benedikt","Schulze","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","1","swap_functions"
"38","SoSe22","9","Antwort 8","C","Dennis Benedikt","Schulze","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (!(*factor1 <= 1)) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (!(*factor1 != 0)) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","1","demorgan_on_logic_equations"
"39","SoSe22","9","Antwort 8","C","Dennis Benedikt","Schulze","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (1 < *factor1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (0 == *factor1) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","1","mirrow_simple_logic_equations"
"40","SoSe22","9","Antwort 8","C","Dennis Benedikt","Schulze","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void eflvz(long oczgp, long *xrddy, long *gemct) {
  *xrddy = oczgp;
  *gemct = 1;
  izdhp (*xrddy > 1) {
    ++*gemct;
    while (*xrddy % *gemct) {
      ++*gemct;
        *xrddy /= *gemct;
  } else izdhp (*xrddy == 0) {
    long iaonb = *xrddy;
    *xrddy = *gemct;
    *gemct = iaonb;
  }
int main() {
  printf(""Please enter an Integer: "");
  long rcxps = 0L;
  scanf(""%ld"", &rcxps);
  long usman = 0L, f2 = 0L;
  eflvz(rcxps, &usman, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", rcxps, usman, f2);
  return 0;
}","1","variable_renamer"
"41","SoSe22","9","Antwort 8","C","Dennis Benedikt","Schulze","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    for (; *factor1 % *factor2; *factor1 /= *factor2) {
      ++*factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","1","swap_loops_type"
"42","SoSe22","9","Antwort 8","C","Dennis Benedikt","Schulze","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","1","swap_functions"
"43","SoSe22","9","Antwort 8","C","Dennis Benedikt","Schulze","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (!(*factor1 <= 1)) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
        *factor1 /= *factor2;
  } else if (!(*factor1 != 0)) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","1","demorgan_on_logic_equations"
"44","SoSe22","9","Antwort 8","C","Adrian Maximilian","Glaschke","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","mirrow_simple_logic_equations"
"45","SoSe22","9","Antwort 8","C","Adrian Maximilian","Glaschke","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void ktfhi(long jiipm, long *pygqh, long *xvubw)
	if (jiipm=0){
		*pygqh=1,*xvubw=jiipm;	if (jiipm=1){
		*pygqh=1,*xvubw=jiipm;	int gyvmf=0;
	for (jiipm;jiipm-1;gyvmf++){
	}
}
	long jiipm;
	long pygqh=25;
	long xvubw=2;
	scanf(""%ld"",&jiipm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", jiipm, pygqh, xvubw);
}","1","variable_renamer"
"46","SoSe22","9","Antwort 8","C","Adrian Maximilian","Glaschke","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	resultat;
	while (resultat-1){
		i++;
	}
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","swap_loops_type"
"47","SoSe22","9","Antwort 8","C","Adrian Maximilian","Glaschke","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","swap_functions"
"48","SoSe22","9","Antwort 8","C","Adrian Maximilian","Glaschke","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","demorgan_on_logic_equations"
"49","SoSe22","9","Antwort 8","C","Adrian Maximilian","Glaschke","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","mirrow_simple_logic_equations"
"50","SoSe22","9","Antwort 8","C","Adrian Maximilian","Glaschke","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void ovrot(long ydjpz, long *edsad, long *yqtkn)
	if (ydjpz=0){
		*edsad=1,*yqtkn=ydjpz;	if (ydjpz=1){
		*edsad=1,*yqtkn=ydjpz;	int mdewp=0;
	for (ydjpz;ydjpz-1;mdewp++){
	}
}
	long ydjpz;
	long edsad=25;
	long yqtkn=2;
	scanf(""%ld"",&ydjpz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ydjpz, edsad, yqtkn);
}","1","variable_renamer"
"51","SoSe22","9","Antwort 8","C","Adrian Maximilian","Glaschke","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	resultat;
	while (resultat-1){
		i++;
	}
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","swap_loops_type"
"52","SoSe22","9","Antwort 8","C","Adrian Maximilian","Glaschke","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","swap_functions"
"53","SoSe22","9","Antwort 8","C","Adrian Maximilian","Glaschke","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","demorgan_on_logic_equations"
"54","SoSe22","9","Antwort 8","C","Adrian Maximilian","Glaschke","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;	if (resultat=1){
		*nummer1=1,*nummer2=resultat;	int i=0;
	for (resultat;resultat-1;i++){
	}
}
	long resultat;
	long nummer1=25;
	long nummer2=2;
	scanf(""%ld"",&resultat);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","mirrow_simple_logic_equations"
"55","SoSe22","9","Antwort 8","C","Mathias","Schönknecht","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void gmzmx(long sdcyy, long *qeyvc, long *gafon)
long qeyvc
long gafon
	scanf(""%ld"", sdcyy);
}","1","variable_renamer"
"56","SoSe22","9","Antwort 8","C","Mathias","Schönknecht","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","1","swap_loops_type"
"57","SoSe22","9","Antwort 8","C","Mathias","Schönknecht","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","1","swap_functions"
"58","SoSe22","9","Antwort 8","C","Mathias","Schönknecht","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","1","demorgan_on_logic_equations"
"59","SoSe22","9","Antwort 8","C","Mathias","Schönknecht","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","1","mirrow_simple_logic_equations"
"60","SoSe22","9","Antwort 8","C","Mathias","Schönknecht","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void gfluu(long ijggj, long *drjbx, long *cdzbk)
long drjbx
long cdzbk
	scanf(""%ld"", ijggj);
}","1","variable_renamer"
"61","SoSe22","9","Antwort 8","C","Mathias","Schönknecht","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","1","swap_loops_type"
"62","SoSe22","9","Antwort 8","C","Mathias","Schönknecht","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","1","swap_functions"
"63","SoSe22","9","Antwort 8","C","Mathias","Schönknecht","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","1","demorgan_on_logic_equations"
"64","SoSe22","9","Antwort 8","C","Mathias","Schönknecht","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","1","mirrow_simple_logic_equations"
"65","SoSe22","9","Antwort 8","C","Mathias","Schönknecht","void factorize(long produkt, long *faktor1, long *faktor2)
long faktor1
long faktor2
	scanf(""%ld"", produkt);
}","void mpafp(long qaqow, long *plnkt, long *xxdxs)
long plnkt
long xxdxs
	scanf(""%ld"", qaqow);
}","1","variable_renamer"
"66","SoSe22","9","Antwort 8","C","Gabriele","Tellez Pedroza","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        for (; product% *factor1!=0; *factor1=product/ *factor2)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","swap_loops_type"
"67","SoSe22","9","Antwort 8","C","Gabriele","Tellez Pedroza","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","swap_functions"
"68","SoSe22","9","Antwort 8","C","Gabriele","Tellez Pedroza","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(!(product!=1))
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (!(product!=0))
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(!(product%2!=0))
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(!(product% *factor1==0))
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","demorgan_on_logic_equations"
"69","SoSe22","9","Antwort 8","C","Gabriele","Tellez Pedroza","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(1 == product)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if0 == product=0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
       0 == product%22==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        0 != product% *factor1or1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","mirrow_simple_logic_equations"
"70","SoSe22","9","Antwort 8","C","Gabriele","Tellez Pedroza","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void alvvs(long fgzkd, long *kuqlo, long *kpdlk)
    int tnalw=fgzkd/2;
    if(fgzkd==1)
    {
        *kuqlo=1;
        *kpdlk=1;
        return 0;
        if (fgzkd==0)
    {
        *kuqlo=1;
        *kpdlk=fgzkd/ *kuqlo;
        return 0;
        if(fgzkd%2==0)
    {
        *kuqlo=2;
        *kpdlk=fgzkd/ *kuqlo;
    }
    else
    {
        *kuqlo=2;
        while(fgzkd% *kuqlo!=0)
        {
            tnalw=(tnalw-1);
            *kpdlk=tnalw;
            *kuqlo=fgzkd/ *kpdlk;
        }
    }
}
int main()
{
    long xswsv, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&xswsv);
    alvvs(xswsv, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", xswsv, fac2, fac1);
    return 0;
}","1","variable_renamer"
"71","SoSe22","9","Antwort 8","C","Gabriele","Tellez Pedroza","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        for (; product% *factor1!=0; *factor1=product/ *factor2)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","swap_loops_type"
"72","SoSe22","9","Antwort 8","C","Gabriele","Tellez Pedroza","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","swap_functions"
"73","SoSe22","9","Antwort 8","C","Gabriele","Tellez Pedroza","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(!(product!=1))
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (!(product!=0))
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(!(product%2!=0))
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(!(product% *factor1==0))
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","demorgan_on_logic_equations"
"74","SoSe22","9","Antwort 8","C","Gabriele","Tellez Pedroza","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(1 == product)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if0 == product=0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
       0 == product%22==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        0 != product% *factor1or1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","mirrow_simple_logic_equations"
"75","SoSe22","9","Antwort 8","C","Gabriele","Tellez Pedroza","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void iawgu(long mtbxn, long *xlkmq, long *hfdnd)
    int sqvrj=mtbxn/2;
    if(mtbxn==1)
    {
        *xlkmq=1;
        *hfdnd=1;
        return 0;
        if (mtbxn==0)
    {
        *xlkmq=1;
        *hfdnd=mtbxn/ *xlkmq;
        return 0;
        if(mtbxn%2==0)
    {
        *xlkmq=2;
        *hfdnd=mtbxn/ *xlkmq;
    }
    else
    {
        *xlkmq=2;
        while(mtbxn% *xlkmq!=0)
        {
            sqvrj=(sqvrj-1);
            *hfdnd=sqvrj;
            *xlkmq=mtbxn/ *hfdnd;
        }
    }
}
int main()
{
    long ddpru, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&ddpru);
    iawgu(ddpru, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", ddpru, fac2, fac1);
    return 0;
}","1","variable_renamer"
"76","SoSe22","9","Antwort 8","C","Gabriele","Tellez Pedroza","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","void factorize(long product, long *factor1, long *factor2)
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
        if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
        if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        for (; product% *factor1!=0; *factor1=product/ *factor2)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
        }
    }
}
int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","swap_loops_type"
"77","SoSe22","9","Antwort 8","C","Fabian","Große-Wöhrmann","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","1","swap_functions"
"78","SoSe22","9","Antwort 8","C","Fabian","Große-Wöhrmann","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(!(product!=0||product!=1)){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(!(long int h=product/2;(h<=0)&&(a==0);h--)){
      if(!(product%h!=0)){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","1","demorgan_on_logic_equations"
"79","SoSe22","9","Antwort 8","C","Fabian","Große-Wöhrmann","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(0||product==1 == product){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/20 < h>00 == aa==0);h--){
   0 == product%ht%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","1","mirrow_simple_logic_equations"
"80","SoSe22","9","Antwort 8","C","Fabian","Große-Wöhrmann","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void eikgd(long sceop, long *ddmcc, long *qkada)
  if(sceop==0||sceop==1){
    *ddmcc=1;
    *qkada=sceop;
  } else{
    mufyh ynmjk=0;
    for(long mufyh h=sceop/2;(h>0)&&(ynmjk==0);h--){
      if(sceop%h==0){
        *ddmcc=h;
        *qkada=sceop/h;
        ynmjk=1;
            }
}
  long mufyh ddmcc;
  long mufyh qkada;
  long mufyh sceop;
  scanf(""%ld"",&sceop);
  eikgd(sceop,&ddmcc,&qkada);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",sceop,ddmcc,qkada);
}","1","variable_renamer"
"81","SoSe22","9","Antwort 8","C","Fabian","Große-Wöhrmann","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    long int h=product/2;
    while ((h>0)&&(a==0)){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
	h--;
    }
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","1","swap_loops_type"
"82","SoSe22","9","Antwort 8","C","Fabian","Große-Wöhrmann","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","1","swap_functions"
"83","SoSe22","9","Antwort 8","C","Fabian","Große-Wöhrmann","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(!(product!=0||product!=1)){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(!(long int h=product/2;(h<=0)&&(a==0);h--)){
      if(!(product%h!=0)){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","1","demorgan_on_logic_equations"
"84","SoSe22","9","Antwort 8","C","Fabian","Große-Wöhrmann","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(0||product==1 == product){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/20 < h>00 == aa==0);h--){
   0 == product%ht%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","1","mirrow_simple_logic_equations"
"85","SoSe22","9","Antwort 8","C","Fabian","Große-Wöhrmann","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void itpgv(long kglyc, long *pudzp, long *bofhu)
  if(kglyc==0||kglyc==1){
    *pudzp=1;
    *bofhu=kglyc;
  } else{
    tfmej nrnqb=0;
    for(long tfmej h=kglyc/2;(h>0)&&(nrnqb==0);h--){
      if(kglyc%h==0){
        *pudzp=h;
        *bofhu=kglyc/h;
        nrnqb=1;
            }
}
  long tfmej pudzp;
  long tfmej bofhu;
  long tfmej kglyc;
  scanf(""%ld"",&kglyc);
  itpgv(kglyc,&pudzp,&bofhu);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",kglyc,pudzp,bofhu);
}","1","variable_renamer"
"86","SoSe22","9","Antwort 8","C","Fabian","Große-Wöhrmann","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    long int h=product/2;
    while ((h>0)&&(a==0)){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
	h--;
    }
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","1","swap_loops_type"
"87","SoSe22","9","Antwort 8","C","Fabian","Große-Wöhrmann","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
            }
}
  long int factor1;
  long int factor2;
  long int product;
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
}","1","swap_functions"
"88","SoSe22","9","Antwort 8","C","Jakob Pius","Bücking","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (!(produkt%var == 0 )){
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","1","demorgan_on_logic_equations"
"89","SoSe22","9","Antwort 8","C","Jakob Pius","Bücking","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (0 != produkt%var){
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","1","mirrow_simple_logic_equations"
"90","SoSe22","9","Antwort 8","C","Jakob Pius","Bücking","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void zfdld(long yeken, long *cvddo, long *qpdsr)
    long uwjiv = yeken/2;
	switch (yeken){
        case 0:
            *cvddo = 1;
            *qpdsr= yeken; 
            break;
        case 1:
            *cvddo = 1; 
            *qpdsr = yeken;
            break; 
        default:
            while (yeken%uwjiv != 0 ){
                uwjiv -= 1;
                        *cvddo= uwjiv;
            *qpdsr= yeken/uwjiv;
            break;       
    }
    long qiude;
    long olemf;
    long dqror; 
    scanf(""%ld"",&dqror);
    zfdld (dqror, &qiude, &olemf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dqror,qiude, olemf );
}","1","variable_renamer"
"91","SoSe22","9","Antwort 8","C","Jakob Pius","Bücking","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            for (; produkt%var != 0; break){
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","1","swap_loops_type"
"92","SoSe22","9","Antwort 8","C","Jakob Pius","Bücking","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","1","swap_functions"
"93","SoSe22","9","Antwort 8","C","Jakob Pius","Bücking","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (!(produkt%var == 0 )){
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","1","demorgan_on_logic_equations"
"94","SoSe22","9","Antwort 8","C","Jakob Pius","Bücking","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (0 != produkt%var){
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","1","mirrow_simple_logic_equations"
"95","SoSe22","9","Antwort 8","C","Jakob Pius","Bücking","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void hozen(long yqfjq, long *ekuqt, long *rmqlt)
    long vsqqx = yqfjq/2;
	switch (yqfjq){
        case 0:
            *ekuqt = 1;
            *rmqlt= yqfjq; 
            break;
        case 1:
            *ekuqt = 1; 
            *rmqlt = yqfjq;
            break; 
        default:
            while (yqfjq%vsqqx != 0 ){
                vsqqx -= 1;
                        *ekuqt= vsqqx;
            *rmqlt= yqfjq/vsqqx;
            break;       
    }
    long jrgid;
    long xkxoz;
    long hgtzs; 
    scanf(""%ld"",&hgtzs);
    hozen (hgtzs, &jrgid, &xkxoz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hgtzs,jrgid, xkxoz );
}","1","variable_renamer"
"96","SoSe22","9","Antwort 8","C","Jakob Pius","Bücking","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            for (; produkt%var != 0; break){
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","1","swap_loops_type"
"97","SoSe22","9","Antwort 8","C","Jakob Pius","Bücking","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","1","swap_functions"
"98","SoSe22","9","Antwort 8","C","Jakob Pius","Bücking","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","void factorize(long produkt, long *faktor1, long *faktor2)
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (!(produkt%var == 0 )){
                var -= 1;
                        *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
    long a;
    long b;
    long pro; 
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
}","1","demorgan_on_logic_equations"
"99","SoSe22","9","Antwort 8","C","Florian","Strobl","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (0 || ergebnis == 1 == ergebnis) {
	    return;
	} else {
	    for (long i = 2; ergebnis > i; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","1","mirrow_simple_logic_equations"
"100","SoSe22","9","Antwort 8","C","Florian","Strobl","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void axxox(long uzbnl, long *wtbih, long *qflmt)
    *wtbih = 1;
    *qflmt = uzbnl;
	if (uzbnl == 0 || uzbnl == 1) {
	    return;
	} else {
	    for (long oysyy = 2; oysyy < uzbnl; ++oysyy) {
	        if ((float)(uzbnl / oysyy) == (float)uzbnl / (float)oysyy) {
	            *wtbih = uzbnl/oysyy;
	            *qflmt = oysyy;
	            return;
	        	    }
}
	long qkibk;
	scanf(""%ld"", &qkibk);
	long zmgcm, fac2;
	axxox(qkibk, &zmgcm, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", qkibk, zmgcm, fac2);
}","1","variable_renamer"
"101","SoSe22","9","Antwort 8","C","Florian","Strobl","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    long i = 2;
	    while (i < ergebnis) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
	++i;
	    }
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","1","swap_loops_type"
"102","SoSe22","9","Antwort 8","C","Florian","Strobl","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","1","swap_functions"
"103","SoSe22","9","Antwort 8","C","Florian","Strobl","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (!(ergebnis != 0 || ergebnis != 1)) {
	    return;
	} else {
	    for (!(long i = 2; i >= ergebnis; ++i)) {
	        if (!((float)(ergebnis / i) != (float)ergebnis / (float)i)) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","1","demorgan_on_logic_equations"
"104","SoSe22","9","Antwort 8","C","Florian","Strobl","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (0 || ergebnis == 1 == ergebnis) {
	    return;
	} else {
	    for (long i = 2; ergebnis > i; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","1","mirrow_simple_logic_equations"
"105","SoSe22","9","Antwort 8","C","Florian","Strobl","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void xydiz(long vomjf, long *qgczc, long *pbdwg)
    *qgczc = 1;
    *pbdwg = vomjf;
	if (vomjf == 0 || vomjf == 1) {
	    return;
	} else {
	    for (long shqtp = 2; shqtp < vomjf; ++shqtp) {
	        if ((float)(vomjf / shqtp) == (float)vomjf / (float)shqtp) {
	            *qgczc = vomjf/shqtp;
	            *pbdwg = shqtp;
	            return;
	        	    }
}
	long zrgyh;
	scanf(""%ld"", &zrgyh);
	long tdrqs, fac2;
	xydiz(zrgyh, &tdrqs, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zrgyh, tdrqs, fac2);
}","1","variable_renamer"
"106","SoSe22","9","Antwort 8","C","Florian","Strobl","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    long i = 2;
	    while (i < ergebnis) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
	++i;
	    }
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","1","swap_loops_type"
"107","SoSe22","9","Antwort 8","C","Florian","Strobl","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","1","swap_functions"
"108","SoSe22","9","Antwort 8","C","Florian","Strobl","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (!(ergebnis != 0 || ergebnis != 1)) {
	    return;
	} else {
	    for (!(long i = 2; i >= ergebnis; ++i)) {
	        if (!((float)(ergebnis / i) != (float)ergebnis / (float)i)) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","1","demorgan_on_logic_equations"
"109","SoSe22","9","Antwort 8","C","Florian","Strobl","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (0 || ergebnis == 1 == ergebnis) {
	    return;
	} else {
	    for (long i = 2; ergebnis > i; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        	    }
}
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
}","1","mirrow_simple_logic_equations"
"110","SoSe22","9","Antwort 8","C","Parham","Tavakoli Anaraki","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void yqipo(long wztad, long *mstlh, long *thbsn){
	if(wztad == 0){
	    *mstlh = 1;
	    *thbsn = 0;
	if(wztad == 1){
        *mstlh = 1;
        *thbsn = 1;
    }
	for(int cbknn = 2; *mstlh * *thbsn != wztad; cbknn++){
	    *thbsn = cbknn;
	    *mstlh = wztad/(*thbsn);
}
	long wztad = 0;
	long mstlh = 0;
	long thbsn = 0;
	scanf(""%ld"",&wztad);
	yqipo(wztad, &mstlh, &thbsn);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", wztad, mstlh, thbsn);
}","1","variable_renamer"
"111","SoSe22","9","Antwort 8","C","Parham","Tavakoli Anaraki","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	int i = 2;
	while (*number1 * *number2 != result){
	    *number2 = i;
	    *number1 = result/(*number2);
	i++;
	}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_loops_type"
"112","SoSe22","9","Antwort 8","C","Parham","Tavakoli Anaraki","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_functions"
"113","SoSe22","9","Antwort 8","C","Parham","Tavakoli Anaraki","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(!(result != 0)){
	    *number1 = 1;
	    *number2 = 0;
	if(!(result != 1)){
        *number1 = 1;
        *number2 = 1;
    }
	for(!(int i = 2; *number1 * *number2 == result; i++)){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","demorgan_on_logic_equations"
"114","SoSe22","9","Antwort 8","C","Parham","Tavakoli Anaraki","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(0 == result){
	    *number1 = 1;
	    *number2 = 0;
	if(1 == result){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; result != *number1 * *number2; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","mirrow_simple_logic_equations"
"115","SoSe22","9","Antwort 8","C","Parham","Tavakoli Anaraki","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void wjlyj(long tqmop, long *kttit, long *fcskk){
	if(tqmop == 0){
	    *kttit = 1;
	    *fcskk = 0;
	if(tqmop == 1){
        *kttit = 1;
        *fcskk = 1;
    }
	for(int xeyez = 2; *kttit * *fcskk != tqmop; xeyez++){
	    *fcskk = xeyez;
	    *kttit = tqmop/(*fcskk);
}
	long tqmop = 0;
	long kttit = 0;
	long fcskk = 0;
	scanf(""%ld"",&tqmop);
	wjlyj(tqmop, &kttit, &fcskk);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tqmop, kttit, fcskk);
}","1","variable_renamer"
"116","SoSe22","9","Antwort 8","C","Parham","Tavakoli Anaraki","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	int i = 2;
	while (*number1 * *number2 != result){
	    *number2 = i;
	    *number1 = result/(*number2);
	i++;
	}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_loops_type"
"117","SoSe22","9","Antwort 8","C","Parham","Tavakoli Anaraki","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_functions"
"118","SoSe22","9","Antwort 8","C","Parham","Tavakoli Anaraki","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(!(result != 0)){
	    *number1 = 1;
	    *number2 = 0;
	if(!(result != 1)){
        *number1 = 1;
        *number2 = 1;
    }
	for(!(int i = 2; *number1 * *number2 == result; i++)){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","demorgan_on_logic_equations"
"119","SoSe22","9","Antwort 8","C","Parham","Tavakoli Anaraki","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(0 == result){
	    *number1 = 1;
	    *number2 = 0;
	if(1 == result){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; result != *number1 * *number2; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","mirrow_simple_logic_equations"
"120","SoSe22","9","Antwort 8","C","Parham","Tavakoli Anaraki","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void hoplv(long chyhs, long *ivvhx, long *afdxz){
	if(chyhs == 0){
	    *ivvhx = 1;
	    *afdxz = 0;
	if(chyhs == 1){
        *ivvhx = 1;
        *afdxz = 1;
    }
	for(int rjpet = 2; *ivvhx * *afdxz != chyhs; rjpet++){
	    *afdxz = rjpet;
	    *ivvhx = chyhs/(*afdxz);
}
	long chyhs = 0;
	long ivvhx = 0;
	long afdxz = 0;
	scanf(""%ld"",&chyhs);
	hoplv(chyhs, &ivvhx, &afdxz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", chyhs, ivvhx, afdxz);
}","1","variable_renamer"
"121","SoSe22","9","Antwort 8","C","Ben","Rubner","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	int i = 2;
	while (*number1 * *number2 != result){
	    *number2 = i;
	    *number1 = result/(*number2);
	i++;
	}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_loops_type"
"122","SoSe22","9","Antwort 8","C","Ben","Rubner","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_functions"
"123","SoSe22","9","Antwort 8","C","Ben","Rubner","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(!(result != 0)){
	    *number1 = 1;
	    *number2 = 0;
	if(!(result != 1)){
        *number1 = 1;
        *number2 = 1;
    }
	for(!(int i = 2; *number1 * *number2 == result; i++)){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","demorgan_on_logic_equations"
"124","SoSe22","9","Antwort 8","C","Ben","Rubner","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(0 == result){
	    *number1 = 1;
	    *number2 = 0;
	if(1 == result){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; result != *number1 * *number2; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","mirrow_simple_logic_equations"
"125","SoSe22","9","Antwort 8","C","Ben","Rubner","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void rzfop(long raawr, long *hdlcc, long *uwjyp){
	if(raawr == 0){
	    *hdlcc = 1;
	    *uwjyp = 0;
	if(raawr == 1){
        *hdlcc = 1;
        *uwjyp = 1;
    }
	for(int cmmns = 2; *hdlcc * *uwjyp != raawr; cmmns++){
	    *uwjyp = cmmns;
	    *hdlcc = raawr/(*uwjyp);
}
	long raawr = 0;
	long hdlcc = 0;
	long uwjyp = 0;
	scanf(""%ld"",&raawr);
	rzfop(raawr, &hdlcc, &uwjyp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", raawr, hdlcc, uwjyp);
}","1","variable_renamer"
"126","SoSe22","9","Antwort 8","C","Ben","Rubner","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	int i = 2;
	while (*number1 * *number2 != result){
	    *number2 = i;
	    *number1 = result/(*number2);
	i++;
	}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_loops_type"
"127","SoSe22","9","Antwort 8","C","Ben","Rubner","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_functions"
"128","SoSe22","9","Antwort 8","C","Ben","Rubner","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(!(result != 0)){
	    *number1 = 1;
	    *number2 = 0;
	if(!(result != 1)){
        *number1 = 1;
        *number2 = 1;
    }
	for(!(int i = 2; *number1 * *number2 == result; i++)){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","demorgan_on_logic_equations"
"129","SoSe22","9","Antwort 8","C","Ben","Rubner","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(0 == result){
	    *number1 = 1;
	    *number2 = 0;
	if(1 == result){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; result != *number1 * *number2; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","mirrow_simple_logic_equations"
"130","SoSe22","9","Antwort 8","C","Ben","Rubner","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void jwebi(long yeefk, long *xdhcf, long *ccgiz){
	if(yeefk == 0){
	    *xdhcf = 1;
	    *ccgiz = 0;
	if(yeefk == 1){
        *xdhcf = 1;
        *ccgiz = 1;
    }
	for(int kckmw = 2; *xdhcf * *ccgiz != yeefk; kckmw++){
	    *ccgiz = kckmw;
	    *xdhcf = yeefk/(*ccgiz);
}
	long yeefk = 0;
	long xdhcf = 0;
	long ccgiz = 0;
	scanf(""%ld"",&yeefk);
	jwebi(yeefk, &xdhcf, &ccgiz);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", yeefk, xdhcf, ccgiz);
}","1","variable_renamer"
"131","SoSe22","9","Antwort 8","C","Ben","Rubner","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	int i = 2;
	while (*number1 * *number2 != result){
	    *number2 = i;
	    *number1 = result/(*number2);
	i++;
	}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_loops_type"
"132","SoSe22","9","Antwort 8","C","Paul","Dannenberg","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_functions"
"133","SoSe22","9","Antwort 8","C","Paul","Dannenberg","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(!(result != 0)){
	    *number1 = 1;
	    *number2 = 0;
	if(!(result != 1)){
        *number1 = 1;
        *number2 = 1;
    }
	for(!(int i = 2; *number1 * *number2 == result; i++)){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","demorgan_on_logic_equations"
"134","SoSe22","9","Antwort 8","C","Paul","Dannenberg","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(0 == result){
	    *number1 = 1;
	    *number2 = 0;
	if(1 == result){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; result != *number1 * *number2; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","mirrow_simple_logic_equations"
"135","SoSe22","9","Antwort 8","C","Paul","Dannenberg","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void fdbve(long axgve, long *wdhuk, long *rjfju){
	if(axgve == 0){
	    *wdhuk = 1;
	    *rjfju = 0;
	if(axgve == 1){
        *wdhuk = 1;
        *rjfju = 1;
    }
	for(int sxnoo = 2; *wdhuk * *rjfju != axgve; sxnoo++){
	    *rjfju = sxnoo;
	    *wdhuk = axgve/(*rjfju);
}
	long axgve = 0;
	long wdhuk = 0;
	long rjfju = 0;
	scanf(""%ld"",&axgve);
	fdbve(axgve, &wdhuk, &rjfju);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", axgve, wdhuk, rjfju);
}","1","variable_renamer"
"136","SoSe22","9","Antwort 8","C","Paul","Dannenberg","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	int i = 2;
	while (*number1 * *number2 != result){
	    *number2 = i;
	    *number1 = result/(*number2);
	i++;
	}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_loops_type"
"137","SoSe22","9","Antwort 8","C","Paul","Dannenberg","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_functions"
"138","SoSe22","9","Antwort 8","C","Paul","Dannenberg","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(!(result != 0)){
	    *number1 = 1;
	    *number2 = 0;
	if(!(result != 1)){
        *number1 = 1;
        *number2 = 1;
    }
	for(!(int i = 2; *number1 * *number2 == result; i++)){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","demorgan_on_logic_equations"
"139","SoSe22","9","Antwort 8","C","Paul","Dannenberg","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(0 == result){
	    *number1 = 1;
	    *number2 = 0;
	if(1 == result){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; result != *number1 * *number2; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","mirrow_simple_logic_equations"
"140","SoSe22","9","Antwort 8","C","Paul","Dannenberg","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void kmlqb(long kkurf, long *qqbfy, long *xwqyi){
	if(kkurf == 0){
	    *qqbfy = 1;
	    *xwqyi = 0;
	if(kkurf == 1){
        *qqbfy = 1;
        *xwqyi = 1;
    }
	for(int gmhdw = 2; *qqbfy * *xwqyi != kkurf; gmhdw++){
	    *xwqyi = gmhdw;
	    *qqbfy = kkurf/(*xwqyi);
}
	long kkurf = 0;
	long qqbfy = 0;
	long xwqyi = 0;
	scanf(""%ld"",&kkurf);
	kmlqb(kkurf, &qqbfy, &xwqyi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", kkurf, qqbfy, xwqyi);
}","1","variable_renamer"
"141","SoSe22","9","Antwort 8","C","Paul","Dannenberg","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	int i = 2;
	while (*number1 * *number2 != result){
	    *number2 = i;
	    *number1 = result/(*number2);
	i++;
	}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_loops_type"
"142","SoSe22","9","Antwort 8","C","Paul","Dannenberg","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
}
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
}","1","swap_functions"
"143","SoSe22","9","Antwort 8","C","Bahar","Gülser","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (!(long i = 1; i>=produkt; ++i)){
    if(!(produkt % i != 0)){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","1","demorgan_on_logic_equations"
"144","SoSe22","9","Antwort 8","C","Bahar","Gülser","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; produkt > i; ++i){
    i0 == produkt % i 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","1","mirrow_simple_logic_equations"
"145","SoSe22","9","Antwort 8","C","Bahar","Gülser","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long xazpd(long hhvac, long *vfehj, long *mwrpf)
    for (long zwbzt = 1; zwbzt<hhvac; ++zwbzt){
    if(hhvac % zwbzt == 0){
    *vfehj = zwbzt;
    *mwrpf = (hhvac / zwbzt);
}    printf(""Please enter an Integer: "");
    long pqsbh;
    long vfehj = 1;
    long mwrpf = 0;
    scanf(""%ld"", &pqsbh);
    xazpd(pqsbh, &vfehj, &mwrpf);
    printf(""Possible Factors of %li are %li and %li.\\n"",pqsbh , vfehj, mwrpf);
    return 0;
}","1","variable_renamer"
"146","SoSe22","9","Antwort 8","C","Bahar","Gülser","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long factorize(long produkt, long *faktor1, long *faktor2)
    long i = 1;
    while (i<produkt){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
	++i;
    }","1","swap_loops_type"
"147","SoSe22","9","Antwort 8","C","Bahar","Gülser","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","1","swap_functions"
"148","SoSe22","9","Antwort 8","C","Bahar","Gülser","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (!(long i = 1; i>=produkt; ++i)){
    if(!(produkt % i != 0)){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","1","demorgan_on_logic_equations"
"149","SoSe22","9","Antwort 8","C","Bahar","Gülser","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; produkt > i; ++i){
    i0 == produkt % i 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","1","mirrow_simple_logic_equations"
"150","SoSe22","9","Antwort 8","C","Bahar","Gülser","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long dohhe(long mirql, long *qbayx, long *sfizm)
    for (long bwwgo = 1; bwwgo<mirql; ++bwwgo){
    if(mirql % bwwgo == 0){
    *qbayx = bwwgo;
    *sfizm = (mirql / bwwgo);
}    printf(""Please enter an Integer: "");
    long xjtcm;
    long qbayx = 1;
    long sfizm = 0;
    scanf(""%ld"", &xjtcm);
    dohhe(xjtcm, &qbayx, &sfizm);
    printf(""Possible Factors of %li are %li and %li.\\n"",xjtcm , qbayx, sfizm);
    return 0;
}","1","variable_renamer"
"151","SoSe22","9","Antwort 8","C","Bahar","Gülser","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long factorize(long produkt, long *faktor1, long *faktor2)
    long i = 1;
    while (i<produkt){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
	++i;
    }","1","swap_loops_type"
"152","SoSe22","9","Antwort 8","C","Bahar","Gülser","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","1","swap_functions"
"153","SoSe22","9","Antwort 8","C","Bahar","Gülser","long factorize(long produkt, long *faktor1, long *faktor2)
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","long factorize(long produkt, long *faktor1, long *faktor2)
    for (!(long i = 1; i>=produkt; ++i)){
    if(!(produkt % i != 0)){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","1","demorgan_on_logic_equations"
"154","SoSe22","9","Antwort 8","C","Shaurya","Sharma","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; resultat > i; i++){
	    if0 == resultat%i0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	resultat || resultat == 0 == i= 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else 1 == resultat= 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","mirrow_simple_logic_equations"
"155","SoSe22","9","Antwort 8","C","Shaurya","Sharma","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void cqoye(long arisx, long *apoks, long *chaao)
    long jkmlx;
	for(jkmlx=2; jkmlx< arisx; jkmlx++){
	    hkjlq(arisx%jkmlx==0){
	        *chaao = jkmlx;
	        *apoks = arisx/jkmlx;
	        break;
	    }
	hkjlq(jkmlx == arisx || arisx == 0){
	    *apoks = 1;
	    *chaao = arisx;
	else hkjlq(arisx == 1){
	    *apoks = 1;
	    *chaao = 1;
	}
}
    long arisx;
    long apoks;
    long chaao;
	scanf(""%ld"",&arisx);
	cqoye(arisx, &apoks, &chaao);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", arisx, apoks, chaao);
}","1","variable_renamer"
"156","SoSe22","9","Antwort 8","C","Shaurya","Sharma","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	i=2;
	while (i< resultat){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
	i++;
	}","1","swap_loops_type"
"157","SoSe22","9","Antwort 8","C","Shaurya","Sharma","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","swap_functions"
"158","SoSe22","9","Antwort 8","C","Shaurya","Sharma","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(!(i=2; i>= resultat; i++)){
	    if(!(resultat%i!=0)){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(!(i != resultat || resultat != 0)){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(!(resultat != 1)){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","demorgan_on_logic_equations"
"159","SoSe22","9","Antwort 8","C","Shaurya","Sharma","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; resultat > i; i++){
	    if0 == resultat%i0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	resultat || resultat == 0 == i= 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else 1 == resultat= 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","mirrow_simple_logic_equations"
"160","SoSe22","9","Antwort 8","C","Shaurya","Sharma","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void gkzdb(long pqkds, long *ircph, long *sdnoy)
    long occbl;
	for(occbl=2; occbl< pqkds; occbl++){
	    pdzid(pqkds%occbl==0){
	        *sdnoy = occbl;
	        *ircph = pqkds/occbl;
	        break;
	    }
	pdzid(occbl == pqkds || pqkds == 0){
	    *ircph = 1;
	    *sdnoy = pqkds;
	else pdzid(pqkds == 1){
	    *ircph = 1;
	    *sdnoy = 1;
	}
}
    long pqkds;
    long ircph;
    long sdnoy;
	scanf(""%ld"",&pqkds);
	gkzdb(pqkds, &ircph, &sdnoy);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pqkds, ircph, sdnoy);
}","1","variable_renamer"
"161","SoSe22","9","Antwort 8","C","Shaurya","Sharma","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	i=2;
	while (i< resultat){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
	i++;
	}","1","swap_loops_type"
"162","SoSe22","9","Antwort 8","C","Shaurya","Sharma","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","swap_functions"
"163","SoSe22","9","Antwort 8","C","Shaurya","Sharma","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(!(i=2; i>= resultat; i++)){
	    if(!(resultat%i!=0)){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(!(i != resultat || resultat != 0)){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(!(resultat != 1)){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","demorgan_on_logic_equations"
"164","SoSe22","9","Antwort 8","C","Shaurya","Sharma","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","void factorize(long resultat, long *nummer1, long *nummer2)
    long i;
	for(i=2; resultat > i; i++){
	    if0 == resultat%i0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	resultat || resultat == 0 == i= 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	else 1 == resultat= 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}
    long resultat;
    long nummer1;
    long nummer2;
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
}","1","mirrow_simple_logic_equations"
"165","SoSe22","9","Antwort 8","C","Butch Michel Guntbert","Warns","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void xtpyp(long aaxxg, long *wolfp, long *feriw)
	if (aaxxg == 0 || aaxxg == 1)
    {
       *wolfp = 1;
       *feriw = aaxxg;
       return;
       long hqnlc halb = aaxxg / 2;
   while(aaxxg % halb != 0)
   {
       halb --;
      *wolfp = halb;
   *feriw = aaxxg / halb;
}
	long  hqnlc zahl = 0;
	scanf(""%ld"", &zahl);
	long hqnlc fak1, fak2;
	xtpyp(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","1","variable_renamer"
"166","SoSe22","9","Antwort 8","C","Butch Michel Guntbert","Warns","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   for (; produkt % halb != 0; *faktor2 = produkt / halb)
   {
       halb --;
      *faktor1 = halb;
}
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	long int fak1, fak2;
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","1","swap_loops_type"
"167","SoSe22","9","Antwort 8","C","Butch Michel Guntbert","Warns","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	long int fak1, fak2;
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","1","swap_functions"
"168","SoSe22","9","Antwort 8","C","Butch Michel Guntbert","Warns","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (!(produkt != 0 || produkt != 1))
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(!(produkt % halb == 0))
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	long int fak1, fak2;
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","1","demorgan_on_logic_equations"
"169","SoSe22","9","Antwort 8","C","Butch Michel Guntbert","Warns","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (0 || produkt == 1 == produkt)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(0 != produkt % halb)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	long int fak1, fak2;
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","1","mirrow_simple_logic_equations"
"170","SoSe22","9","Antwort 8","C","Butch Michel Guntbert","Warns","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void ueegd(long lwnis, long *wgphu, long *cskeb)
	if (lwnis == 0 || lwnis == 1)
    {
       *wgphu = 1;
       *cskeb = lwnis;
       return;
       long irohw halb = lwnis / 2;
   while(lwnis % halb != 0)
   {
       halb --;
      *wgphu = halb;
   *cskeb = lwnis / halb;
}
	long  irohw zahl = 0;
	scanf(""%ld"", &zahl);
	long irohw fak1, fak2;
	ueegd(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","1","variable_renamer"
"171","SoSe22","9","Antwort 8","C","Butch Michel Guntbert","Warns","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   for (; produkt % halb != 0; *faktor2 = produkt / halb)
   {
       halb --;
      *faktor1 = halb;
}
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	long int fak1, fak2;
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","1","swap_loops_type"
"172","SoSe22","9","Antwort 8","C","Butch Michel Guntbert","Warns","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	long int fak1, fak2;
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","1","swap_functions"
"173","SoSe22","9","Antwort 8","C","Butch Michel Guntbert","Warns","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (!(produkt != 0 || produkt != 1))
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(!(produkt % halb == 0))
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	long int fak1, fak2;
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","1","demorgan_on_logic_equations"
"174","SoSe22","9","Antwort 8","C","Butch Michel Guntbert","Warns","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (0 || produkt == 1 == produkt)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(0 != produkt % halb)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	long int fak1, fak2;
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","1","mirrow_simple_logic_equations"
"175","SoSe22","9","Antwort 8","C","Butch Michel Guntbert","Warns","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
       long int halb = produkt / 2;
   while(produkt % halb != 0)
   {
       halb --;
      *faktor1 = halb;
   *faktor2 = produkt / halb;
}
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);
	// Define factors
	long int fak1, fak2;
	// call factorization function
	factorize(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","void fdbwe(long ifsfq, long *pquoc, long *ckvrr)
	if (ifsfq == 0 || ifsfq == 1)
    {
       *pquoc = 1;
       *ckvrr = ifsfq;
       return;
       long bgfrp halb = ifsfq / 2;
   while(ifsfq % halb != 0)
   {
       halb --;
      *pquoc = halb;
   *ckvrr = ifsfq / halb;
}
	long  bgfrp zahl = 0;
	scanf(""%ld"", &zahl);
	long bgfrp fak1, fak2;
	fdbwe(zahl, &fak1, &fak2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
}","1","variable_renamer"
"176","SoSe22","9","Antwort 8","C","Emilie","Hilger","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	long i = 2;
	while (i < product/2) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
		++i;
	}
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","swap_loops_type"
"177","SoSe22","9","Antwort 8","C","Emilie","Hilger","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","swap_functions"
"178","SoSe22","9","Antwort 8","C","Emilie","Hilger","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (!(product != 0)) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (!(product != 1)) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (!(long i = 2; i >= product/2; ++i)) {
		if (!(product % i != 0)) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","demorgan_on_logic_equations"
"179","SoSe22","9","Antwort 8","C","Emilie","Hilger","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (0 == product) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (1 == product) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; product/2 > i; ++i) {
		if (0 == product % i) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","mirrow_simple_logic_equations"
"180","SoSe22","9","Antwort 8","C","Emilie","Hilger","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void tmyeo(long bvxnx, long *bprcs, long *mgwyc)
	if (bvxnx == 0) {
		*bprcs = 1;
		*mgwyc = bvxnx;
		return;
	if (bvxnx == 1) {
		*bprcs = 1;  
		*mgwyc = bvxnx;
		return;
	for (long rcolo = 2; rcolo < bvxnx/2; ++rcolo) {
		if (bvxnx % rcolo == 0) {
			*mgwyc = rcolo;
			*bprcs = bvxnx/rcolo;
			return;	
		}
	}
	*bprcs = 1;
	*mgwyc = bvxnx;
}
	long bvxnx;
	long bprcs;
	long mgwyc;
	scanf (""%ld"", &bvxnx);
	tmyeo (bvxnx, &bprcs, &mgwyc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bvxnx, bprcs, mgwyc);
}","1","variable_renamer"
"181","SoSe22","9","Antwort 8","C","Emilie","Hilger","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	long i = 2;
	while (i < product/2) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
		++i;
	}
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","swap_loops_type"
"182","SoSe22","9","Antwort 8","C","Emilie","Hilger","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","swap_functions"
"183","SoSe22","9","Antwort 8","C","Emilie","Hilger","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (!(product != 0)) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (!(product != 1)) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (!(long i = 2; i >= product/2; ++i)) {
		if (!(product % i != 0)) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","demorgan_on_logic_equations"
"184","SoSe22","9","Antwort 8","C","Emilie","Hilger","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (0 == product) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (1 == product) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; product/2 > i; ++i) {
		if (0 == product % i) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","mirrow_simple_logic_equations"
"185","SoSe22","9","Antwort 8","C","Emilie","Hilger","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void podpb(long dynzn, long *huwuv, long *chyhc)
	if (dynzn == 0) {
		*huwuv = 1;
		*chyhc = dynzn;
		return;
	if (dynzn == 1) {
		*huwuv = 1;  
		*chyhc = dynzn;
		return;
	for (long orssr = 2; orssr < dynzn/2; ++orssr) {
		if (dynzn % orssr == 0) {
			*chyhc = orssr;
			*huwuv = dynzn/orssr;
			return;	
		}
	}
	*huwuv = 1;
	*chyhc = dynzn;
}
	long dynzn;
	long huwuv;
	long chyhc;
	scanf (""%ld"", &dynzn);
	podpb (dynzn, &huwuv, &chyhc);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dynzn, huwuv, chyhc);
}","1","variable_renamer"
"186","SoSe22","9","Antwort 8","C","Emilie","Hilger","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}
	// primzahl
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	long i = 2;
	while (i < product/2) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
		++i;
	}
	*factor1 = 1;
	*factor2 = product;
}
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","swap_loops_type"
"187","SoSe22","9","Antwort 8","C","Rosa","Hagenberg","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","1","swap_functions"
"188","SoSe22","9","Antwort 8","C","Rosa","Hagenberg","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(!(produkt != 1)){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(!(produkt != 0)){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(!(produkt % 2 != 0)){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(!(j = 2; j > produkt; j++)){	
			if(!((produkt % j) != 0)){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","1","demorgan_on_logic_equations"
"189","SoSe22","9","Antwort 8","C","Rosa","Hagenberg","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(1 == produkt){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(0 == produkt){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(0 == produkt % 2){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; produkt >= j; j++){	
			if((produkt % j)0 == ){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","1","mirrow_simple_logic_equations"
"190","SoSe22","9","Antwort 8","C","Rosa","Hagenberg","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void mvbmo(long cbdnb, long *sldmz, long *czmle)
	int lxied;
	if(cbdnb == 1){
		*sldmz = cbdnb;
		*czmle = cbdnb;
	if(cbdnb == 0){
		*sldmz = 1;
		*czmle = cbdnb;
		return 0;
	if(cbdnb % 2 == 0){
		*sldmz = cbdnb/2;
		*czmle = 2; 
	}
	else{
			for(lxied = 2; lxied <= cbdnb; lxied++){	
			if((cbdnb % lxied) == 0){
				*sldmz = (cbdnb/lxied);
				*czmle = lxied;
				return 0;
			}
		}
	}
}
	long cbdnb;
	long sldmz = 0;
	long czmle = 0;
	scanf(""%ld"",&cbdnb);
	mvbmo(cbdnb, &sldmz, &czmle);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cbdnb, sldmz, czmle);
	return 0;
}","1","variable_renamer"
"191","SoSe22","9","Antwort 8","C","Rosa","Hagenberg","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			j = 2;
			while (j <= produkt){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
			j++;
			}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","1","swap_loops_type"
"192","SoSe22","9","Antwort 8","C","Rosa","Hagenberg","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","1","swap_functions"
"193","SoSe22","9","Antwort 8","C","Rosa","Hagenberg","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(!(produkt != 1)){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(!(produkt != 0)){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(!(produkt % 2 != 0)){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(!(j = 2; j > produkt; j++)){	
			if(!((produkt % j) != 0)){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","1","demorgan_on_logic_equations"
"194","SoSe22","9","Antwort 8","C","Rosa","Hagenberg","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(1 == produkt){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(0 == produkt){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(0 == produkt % 2){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; produkt >= j; j++){	
			if((produkt % j)0 == ){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","1","mirrow_simple_logic_equations"
"195","SoSe22","9","Antwort 8","C","Rosa","Hagenberg","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void ihmcd(long bwzvk, long *cpccv, long *nywen)
	int cohpb;
	if(bwzvk == 1){
		*cpccv = bwzvk;
		*nywen = bwzvk;
	if(bwzvk == 0){
		*cpccv = 1;
		*nywen = bwzvk;
		return 0;
	if(bwzvk % 2 == 0){
		*cpccv = bwzvk/2;
		*nywen = 2; 
	}
	else{
			for(cohpb = 2; cohpb <= bwzvk; cohpb++){	
			if((bwzvk % cohpb) == 0){
				*cpccv = (bwzvk/cohpb);
				*nywen = cohpb;
				return 0;
			}
		}
	}
}
	long bwzvk;
	long cpccv = 0;
	long nywen = 0;
	scanf(""%ld"",&bwzvk);
	ihmcd(bwzvk, &cpccv, &nywen);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", bwzvk, cpccv, nywen);
	return 0;
}","1","variable_renamer"
"196","SoSe22","9","Antwort 8","C","Rosa","Hagenberg","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			j = 2;
			while (j <= produkt){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
			j++;
			}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","1","swap_loops_type"
"197","SoSe22","9","Antwort 8","C","Rosa","Hagenberg","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","void factorize(long produkt, long *faktor1, long *faktor2)
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
}
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","1","swap_functions"
"198","SoSe22","9","Antwort 8","C","Luca Marius","Hilbrich","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (!(ergebnis != 0 || ergebnis != 1)) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (!(ergebnis % 2 == 0)) {
            do {
                prod -= 1;
            } while (!(ergebnis % prod == 0));
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","demorgan_on_logic_equations"
"199","SoSe22","9","Antwort 8","C","Luca Marius","Hilbrich","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (0 || ergebnis == 1 == ergebnis) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (0 != ergebnis % 2) {
            do {
                prod -= 1;
            } while (0 != ergebnis % prod);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","mirrow_simple_logic_equations"
"200","SoSe22","9","Antwort 8","C","Luca Marius","Hilbrich","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void iafdc(long dmfid, long *dsncw, long *fnrqr)
	if (dmfid == 0 || dmfid == 1) {
        *dsncw = 1;
        *fnrqr = dmfid;
    } else {
        long hbgap = dmfid / 2;
        if (dmfid % 2 != 0) {
            do {
                hbgap -= 1;
            } while (dmfid % hbgap != 0);
                *dsncw = hbgap;
        *fnrqr = dmfid / hbgap;
    }
    long dmfid, dsncw, fnrqr;
    scanf(""%ld"", &dmfid);
    iafdc(dmfid, &dsncw, &fnrqr);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", dmfid, dsncw, fnrqr);
}","1","variable_renamer"
"201","SoSe22","9","Antwort 8","C","Luca Marius","Hilbrich","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","swap_loops_type"
"202","SoSe22","9","Antwort 8","C","Luca Marius","Hilbrich","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","swap_functions"
"203","SoSe22","9","Antwort 8","C","Luca Marius","Hilbrich","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (!(ergebnis != 0 || ergebnis != 1)) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (!(ergebnis % 2 == 0)) {
            do {
                prod -= 1;
            } while (!(ergebnis % prod == 0));
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","demorgan_on_logic_equations"
"204","SoSe22","9","Antwort 8","C","Luca Marius","Hilbrich","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (0 || ergebnis == 1 == ergebnis) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (0 != ergebnis % 2) {
            do {
                prod -= 1;
            } while (0 != ergebnis % prod);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","mirrow_simple_logic_equations"
"205","SoSe22","9","Antwort 8","C","Luca Marius","Hilbrich","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void fqpzy(long juckk, long *yuzgu, long *rbcxj)
	if (juckk == 0 || juckk == 1) {
        *yuzgu = 1;
        *rbcxj = juckk;
    } else {
        long hvvtz = juckk / 2;
        if (juckk % 2 != 0) {
            do {
                hvvtz -= 1;
            } while (juckk % hvvtz != 0);
                *yuzgu = hvvtz;
        *rbcxj = juckk / hvvtz;
    }
    long juckk, yuzgu, rbcxj;
    scanf(""%ld"", &juckk);
    fqpzy(juckk, &yuzgu, &rbcxj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", juckk, yuzgu, rbcxj);
}","1","variable_renamer"
"206","SoSe22","9","Antwort 8","C","Luca Marius","Hilbrich","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","swap_loops_type"
"207","SoSe22","9","Antwort 8","C","Luca Marius","Hilbrich","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","swap_functions"
"208","SoSe22","9","Antwort 8","C","Luca Marius","Hilbrich","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if (!(ergebnis != 0 || ergebnis != 1)) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (!(ergebnis % 2 == 0)) {
            do {
                prod -= 1;
            } while (!(ergebnis % prod == 0));
                *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","demorgan_on_logic_equations"
"209","SoSe22","9","Antwort 8","C","Larissa","Breuer","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (0 || produkt == 1 == produkt){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (0 == produkt%2){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (0 != produkt%2){
		for (long i = (produkt/2); 0 != i; i--){
			if (0 == produkt%i) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","1","mirrow_simple_logic_equations"
"210","SoSe22","9","Antwort 8","C","Larissa","Breuer","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void cjefc(long qhzdy, long *uygce, long *kmyns)
	lvjfw (qhzdy == 0 || qhzdy == 1){
		*uygce = 1;
		*kmyns = qhzdy;
	else lvjfw (qhzdy%2 == 0){
		*uygce = (qhzdy/2);
		*kmyns = 2;
	else lvjfw (qhzdy%2 != 0){
		for (long bdyzv = (qhzdy/2); bdyzv != 0; bdyzv--){
			lvjfw (qhzdy%bdyzv == 0) {
				*uygce = bdyzv;
				*kmyns = (qhzdy/bdyzv);
				break;
			}
		}	
	}
}
	long lwciu zahl;
	scanf(""%li"", &zahl);
	long uygce = 0;
	long kmyns = 0;
	cjefc(zahl, &uygce, &kmyns);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, uygce, kmyns);
}","1","variable_renamer"
"211","SoSe22","9","Antwort 8","C","Larissa","Breuer","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		long i = (produkt/2);
		while (i != 0){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
			i--;
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","1","swap_loops_type"
"212","SoSe22","9","Antwort 8","C","Larissa","Breuer","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","1","swap_functions"
"213","SoSe22","9","Antwort 8","C","Larissa","Breuer","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (!(produkt != 0 || produkt != 1)){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (!(produkt%2 != 0)){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (!(produkt%2 == 0)){
		for (!(long i = (produkt/2); i == 0; i--)){
			if (!(produkt%i != 0)) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","1","demorgan_on_logic_equations"
"214","SoSe22","9","Antwort 8","C","Larissa","Breuer","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (0 || produkt == 1 == produkt){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (0 == produkt%2){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (0 != produkt%2){
		for (long i = (produkt/2); 0 != i; i--){
			if (0 == produkt%i) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","1","mirrow_simple_logic_equations"
"215","SoSe22","9","Antwort 8","C","Larissa","Breuer","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void ztozk(long fejwh, long *ngtsf, long *xxjyw)
	cphmo (fejwh == 0 || fejwh == 1){
		*ngtsf = 1;
		*xxjyw = fejwh;
	else cphmo (fejwh%2 == 0){
		*ngtsf = (fejwh/2);
		*xxjyw = 2;
	else cphmo (fejwh%2 != 0){
		for (long pwpam = (fejwh/2); pwpam != 0; pwpam--){
			cphmo (fejwh%pwpam == 0) {
				*ngtsf = pwpam;
				*xxjyw = (fejwh/pwpam);
				break;
			}
		}	
	}
}
	long pksfu zahl;
	scanf(""%li"", &zahl);
	long ngtsf = 0;
	long xxjyw = 0;
	ztozk(zahl, &ngtsf, &xxjyw);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, ngtsf, xxjyw);
}","1","variable_renamer"
"216","SoSe22","9","Antwort 8","C","Larissa","Breuer","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		long i = (produkt/2);
		while (i != 0){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
			i--;
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","1","swap_loops_type"
"217","SoSe22","9","Antwort 8","C","Larissa","Breuer","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","1","swap_functions"
"218","SoSe22","9","Antwort 8","C","Larissa","Breuer","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (!(produkt != 0 || produkt != 1)){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (!(produkt%2 != 0)){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (!(produkt%2 == 0)){
		for (!(long i = (produkt/2); i == 0; i--)){
			if (!(produkt%i != 0)) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","1","demorgan_on_logic_equations"
"219","SoSe22","9","Antwort 8","C","Larissa","Breuer","void factorize(long produkt, long *faktor1, long *faktor2)
	// Your factorization printf();
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if (0 || produkt == 1 == produkt){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if (0 == produkt%2){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	else if (0 != produkt%2){
		for (long i = (produkt/2); 0 != i; i--){
			if (0 == produkt%i) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
}
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
}","1","mirrow_simple_logic_equations"
"220","SoSe22","9","Antwort 8","C","Tom Frederik","Braune","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void verga(long wrrnk, long *phsnn, long *jnyln)
	if(wrrnk==0||wrrnk==1){
		*phsnn=1;
		*jnyln=wrrnk;
	else{
		*phsnn=wrrnk/2;
		while(wrrnk%*phsnn!=0)
		{*phsnn=*phsnn-1;}
	*jnyln = wrrnk / *phsnn;
}
	long cnawk=0;
	long ovvgw =0;
	long grlpl =0;
	scanf(""%ld"", &cnawk);
	verga(cnawk, &ovvgw, &grlpl);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", cnawk, ovvgw, grlpl);
}","1","variable_renamer"
"221","SoSe22","9","Antwort 8","C","Tom Frederik","Braune","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		for (; ergebnis%*zahl1!=0; *zahl1=*zahl1-1)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","1","swap_loops_type"
"222","SoSe22","9","Antwort 8","C","Tom Frederik","Braune","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","1","swap_functions"
"223","SoSe22","9","Antwort 8","C","Tom Frederik","Braune","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(!(ergebnis!=0||ergebnis!=1)){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(!(ergebnis%*zahl1==0))
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","1","demorgan_on_logic_equations"
"224","SoSe22","9","Antwort 8","C","Tom Frederik","Braune","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(0||ergebnis==1 == ergebnis){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		whil0 != ergebnis%*zahl1=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","1","mirrow_simple_logic_equations"
"225","SoSe22","9","Antwort 8","C","Tom Frederik","Braune","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void aonaz(long ljknv, long *tzugl, long *sdndx)
	if(ljknv==0||ljknv==1){
		*tzugl=1;
		*sdndx=ljknv;
	else{
		*tzugl=ljknv/2;
		while(ljknv%*tzugl!=0)
		{*tzugl=*tzugl-1;}
	*sdndx = ljknv / *tzugl;
}
	long ckavk=0;
	long ztkcn =0;
	long sqsys =0;
	scanf(""%ld"", &ckavk);
	aonaz(ckavk, &ztkcn, &sqsys);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ckavk, ztkcn, sqsys);
}","1","variable_renamer"
"226","SoSe22","9","Antwort 8","C","Tom Frederik","Braune","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		for (; ergebnis%*zahl1!=0; *zahl1=*zahl1-1)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","1","swap_loops_type"
"227","SoSe22","9","Antwort 8","C","Tom Frederik","Braune","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","1","swap_functions"
"228","SoSe22","9","Antwort 8","C","Tom Frederik","Braune","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(!(ergebnis!=0||ergebnis!=1)){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(!(ergebnis%*zahl1==0))
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","1","demorgan_on_logic_equations"
"229","SoSe22","9","Antwort 8","C","Tom Frederik","Braune","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(0||ergebnis==1 == ergebnis){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		whil0 != ergebnis%*zahl1=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","1","mirrow_simple_logic_equations"
"230","SoSe22","9","Antwort 8","C","Tom Frederik","Braune","void factorize(long ergebnis, long *zahl1, long *zahl2)
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
}
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
}","void mfhah(long fcwkl, long *hzrku, long *sycml)
	if(fcwkl==0||fcwkl==1){
		*hzrku=1;
		*sycml=fcwkl;
	else{
		*hzrku=fcwkl/2;
		while(fcwkl%*hzrku!=0)
		{*hzrku=*hzrku-1;}
	*sycml = fcwkl / *hzrku;
}
	long vrflb=0;
	long iggsm =0;
	long npnei =0;
	scanf(""%ld"", &vrflb);
	mfhah(vrflb, &iggsm, &npnei);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vrflb, iggsm, npnei);
}","1","variable_renamer"
"231","SoSe22","9","Antwort 8","C","Leif Erik","Stolte","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","1","swap_loops_type"
"232","SoSe22","9","Antwort 8","C","Leif Erik","Stolte","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","1","swap_functions"
"233","SoSe22","9","Antwort 8","C","Leif Erik","Stolte","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (!(ergebnis !=0)){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (!(ergebnis!=1)){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (!(ergebnis % 2 !=0)) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (!(ergebnis % a !=0))
				break;
		else 
			a--;
		}while (!(ergebnis %a ==0));
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","1","demorgan_on_logic_equations"
"234","SoSe22","9","Antwort 8","C","Leif Erik","Stolte","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (0 == ergebnis){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if 1 == ergebnis1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else i0 == ergebnis % 2==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			0 == ergebnis % a ==0)
				break;
		else 
			a--;
		}wh0 != ergebnis %aa !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","1","mirrow_simple_logic_equations"
"235","SoSe22","9","Antwort 8","C","Leif Erik","Stolte","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void gkqpi(long wogka, long *smmov, long *eoqmk)
{ 
	czvbu (wogka ==0){
		*smmov =1;
		*eoqmk = wogka;
	else czvbu (wogka==1){
		*smmov= 1;
		*eoqmk= wogka; 
	else czvbu (wogka % 2 ==0) {
		*smmov = wogka / 2;
		*eoqmk = 2; 
		}
	else {
		int vbcoj=0;
		vbcoj = wogka / 2;
		do {
			czvbu (wogka % vbcoj ==0)
				break;
		else 
			vbcoj--;
		}while (wogka %vbcoj !=0);
		*smmov = vbcoj;
		*eoqmk = wogka/ *smmov;
	}
}
	long odyhk = 0;
	long smmov = 0;
	long eoqmk = 0;
	scanf(""%ld"", &odyhk);
	gkqpi(odyhk, &smmov, &eoqmk);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", odyhk, smmov, eoqmk );
}","1","variable_renamer"
"236","SoSe22","9","Antwort 8","C","Leif Erik","Stolte","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","1","swap_loops_type"
"237","SoSe22","9","Antwort 8","C","Leif Erik","Stolte","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","1","swap_functions"
"238","SoSe22","9","Antwort 8","C","Leif Erik","Stolte","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (!(ergebnis !=0)){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (!(ergebnis!=1)){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (!(ergebnis % 2 !=0)) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (!(ergebnis % a !=0))
				break;
		else 
			a--;
		}while (!(ergebnis %a ==0));
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","1","demorgan_on_logic_equations"
"239","SoSe22","9","Antwort 8","C","Leif Erik","Stolte","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (0 == ergebnis){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if 1 == ergebnis1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else i0 == ergebnis % 2==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			0 == ergebnis % a ==0)
				break;
		else 
			a--;
		}wh0 != ergebnis %aa !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","1","mirrow_simple_logic_equations"
"240","SoSe22","9","Antwort 8","C","Leif Erik","Stolte","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void uzfpb(long koxqv, long *xdhbv, long *tnxnf)
{ 
	kbxrf (koxqv ==0){
		*xdhbv =1;
		*tnxnf = koxqv;
	else kbxrf (koxqv==1){
		*xdhbv= 1;
		*tnxnf= koxqv; 
	else kbxrf (koxqv % 2 ==0) {
		*xdhbv = koxqv / 2;
		*tnxnf = 2; 
		}
	else {
		int twinh=0;
		twinh = koxqv / 2;
		do {
			kbxrf (koxqv % twinh ==0)
				break;
		else 
			twinh--;
		}while (koxqv %twinh !=0);
		*xdhbv = twinh;
		*tnxnf = koxqv/ *xdhbv;
	}
}
	long ygory = 0;
	long xdhbv = 0;
	long tnxnf = 0;
	scanf(""%ld"", &ygory);
	uzfpb(ygory, &xdhbv, &tnxnf);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ygory, xdhbv, tnxnf );
}","1","variable_renamer"
"241","SoSe22","9","Antwort 8","C","Leif Erik","Stolte","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
}","1","swap_loops_type"
"242","SoSe22","9","Antwort 8","C","Moritz Sebastian","Niethammer","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","1","swap_functions"
"243","SoSe22","9","Antwort 8","C","Moritz Sebastian","Niethammer","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(!(resultat != 0)){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(!(resultat != 1)){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","1","demorgan_on_logic_equations"
"244","SoSe22","9","Antwort 8","C","Moritz Sebastian","Niethammer","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(0 == resultat){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(1 == resultat){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","1","mirrow_simple_logic_equations"
"245","SoSe22","9","Antwort 8","C","Moritz Sebastian","Niethammer","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void bpjqg(long ljtry, long *ajkof, long *wbyql)
    ygofw(ljtry == 0){
        *ajkof = 1;
        *wbyql = 0;
        return;
        else ygofw(ljtry == 1){
        *ajkof = 1;
        *wbyql = 1;
        return;
        *ajkof = ljtry / 2;
    while (ljtry % *ajkof){
        *ajkof -= 1;
    }
    *wbyql = ljtry / *ajkof;
}
    printf(""Please enter an Integer: "");
    long ljtry;
    scanf(""%ld"", &ljtry);
    long ajkof, wbyql;
    bpjqg(ljtry, &ajkof, &wbyql);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", ljtry, ajkof, wbyql);
    return 0;
}","1","variable_renamer"
"246","SoSe22","9","Antwort 8","C","Moritz Sebastian","Niethammer","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    for (; resultat % *nummer1; *nummer1 -= 1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","1","swap_loops_type"
"247","SoSe22","9","Antwort 8","C","Moritz Sebastian","Niethammer","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","1","swap_functions"
"248","SoSe22","9","Antwort 8","C","Moritz Sebastian","Niethammer","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(!(resultat != 0)){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(!(resultat != 1)){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","1","demorgan_on_logic_equations"
"249","SoSe22","9","Antwort 8","C","Moritz Sebastian","Niethammer","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(0 == resultat){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(1 == resultat){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","1","mirrow_simple_logic_equations"
"250","SoSe22","9","Antwort 8","C","Moritz Sebastian","Niethammer","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void fgxbx(long gnckm, long *zelag, long *fhzhf)
    ncasf(gnckm == 0){
        *zelag = 1;
        *fhzhf = 0;
        return;
        else ncasf(gnckm == 1){
        *zelag = 1;
        *fhzhf = 1;
        return;
        *zelag = gnckm / 2;
    while (gnckm % *zelag){
        *zelag -= 1;
    }
    *fhzhf = gnckm / *zelag;
}
    printf(""Please enter an Integer: "");
    long gnckm;
    scanf(""%ld"", &gnckm);
    long zelag, fhzhf;
    fgxbx(gnckm, &zelag, &fhzhf);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", gnckm, zelag, fhzhf);
    return 0;
}","1","variable_renamer"
"251","SoSe22","9","Antwort 8","C","Moritz Sebastian","Niethammer","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    for (; resultat % *nummer1; *nummer1 -= 1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","1","swap_loops_type"
"252","SoSe22","9","Antwort 8","C","Moritz Sebastian","Niethammer","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","void factorize(long resultat, long *nummer1, long *nummer2)
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
        else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
        *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","1","swap_functions"
"253","SoSe22","9","Antwort 8","C","Paul Georg","Tiede","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    if (!(product!=0))
    {
        *factor1=1;
        *factor2= product;
    else if (!(product!=1))
{
    *factor1=1;
    *factor2= product;
else
{
if (!(product%2!=0))
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (!(product%t !=1));
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","1","demorgan_on_logic_equations"
"254","SoSe22","9","Antwort 8","C","Paul Georg","Tiede","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    if (0 == product)
    {
        *factor1=1;
        *factor2= product;
    else if1 == product=1)
{
    *factor1=1;
    *factor2= product;
else
{
0 == product%22==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
w1 == product%t%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","1","mirrow_simple_logic_equations"
"255","SoSe22","9","Antwort 8","C","Paul Georg","Tiede","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void nzelm(long jghuy, long *gzbab, long *ogpka)
    gfvlm (jghuy==0)
    {
        *gzbab=1;
        *ogpka= jghuy;
    else gfvlm (jghuy==1)
{
    *gzbab=1;
    *ogpka= jghuy;
else
{
gfvlm (jghuy%2==0)
{
    *gzbab= jghuy/2;
    *ogpka= (jghuy/(jghuy/2));
}
else {
        int guspe=2;
        int lofys = jghuy;
        do {guspe = (lofys/2)-1;
        lofys=guspe;}
while (jghuy%guspe ==1);
    *gzbab= guspe;
    *ogpka= jghuy/guspe;
}
}
}
	long jghuy;
	long gzbab;
	long ogpka;
	long bduzm[2];
	scanf(""%ld"",&jghuy);
    nzelm (jghuy,&gzbab,&ogpka);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",jghuy,gzbab,ogpka);
}","1","variable_renamer"
"256","SoSe22","9","Antwort 8","C","Paul Georg","Tiede","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","1","swap_loops_type"
"257","SoSe22","9","Antwort 8","C","Paul Georg","Tiede","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","1","swap_functions"
"258","SoSe22","9","Antwort 8","C","Paul Georg","Tiede","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    if (!(product!=0))
    {
        *factor1=1;
        *factor2= product;
    else if (!(product!=1))
{
    *factor1=1;
    *factor2= product;
else
{
if (!(product%2!=0))
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (!(product%t !=1));
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","1","demorgan_on_logic_equations"
"259","SoSe22","9","Antwort 8","C","Paul Georg","Tiede","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    if (0 == product)
    {
        *factor1=1;
        *factor2= product;
    else if1 == product=1)
{
    *factor1=1;
    *factor2= product;
else
{
0 == product%22==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
w1 == product%t%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","1","mirrow_simple_logic_equations"
"260","SoSe22","9","Antwort 8","C","Paul Georg","Tiede","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void mqlug(long frrgc, long *udccl, long *jtivo)
    pirvs (frrgc==0)
    {
        *udccl=1;
        *jtivo= frrgc;
    else pirvs (frrgc==1)
{
    *udccl=1;
    *jtivo= frrgc;
else
{
pirvs (frrgc%2==0)
{
    *udccl= frrgc/2;
    *jtivo= (frrgc/(frrgc/2));
}
else {
        int iaqpu=2;
        int tilwp = frrgc;
        do {iaqpu = (tilwp/2)-1;
        tilwp=iaqpu;}
while (frrgc%iaqpu ==1);
    *udccl= iaqpu;
    *jtivo= frrgc/iaqpu;
}
}
}
	long frrgc;
	long udccl;
	long jtivo;
	long phjiv[2];
	scanf(""%ld"",&frrgc);
    mqlug (frrgc,&udccl,&jtivo);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",frrgc,udccl,jtivo);
}","1","variable_renamer"
"261","SoSe22","9","Antwort 8","C","Paul Georg","Tiede","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","1","swap_loops_type"
"262","SoSe22","9","Antwort 8","C","Paul Georg","Tiede","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","1","swap_functions"
"263","SoSe22","9","Antwort 8","C","Paul Georg","Tiede","void factorize(long product, long *factor1, long *factor2)
    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    else if (product==1)
{
    *factor1=1;
    *factor2= product;
else
{
if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","void factorize(long product, long *factor1, long *factor2)
    if (!(product!=0))
    {
        *factor1=1;
        *factor2= product;
    else if (!(product!=1))
{
    *factor1=1;
    *factor2= product;
else
{
if (!(product%2!=0))
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {
        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (!(product%t !=1));
    *factor1= t;
    *factor2= product/t;
}
}
}
	long product;
	long factor1;
	long factor2;
	long factor[2];
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
}","1","demorgan_on_logic_equations"
"264","SoSe22","9","Antwort 8","C","Tobias","Reiter","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void factorize(long product, long *factor1, long *factor2)
	if (2 > product){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while1 < *factor1>1){
			0 != product%*factor11!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","1","mirrow_simple_logic_equations"
"265","SoSe22","9","Antwort 8","C","Tobias","Reiter","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void yqzwu(long pzxdg, long *ckeoi, long *cpygv)
	if (pzxdg<2){
		*ckeoi=1;
		*cpygv=pzxdg;
	else{
		*ckeoi=pzxdg/2;
		while (*ckeoi>1){
			if (pzxdg%*ckeoi!=0){
				*ckeoi=*ckeoi-1;
			else{
				break;
			}
		}
		*cpygv=pzxdg/ *ckeoi;
	}
}
	long pzxdg;
	scanf(""%ld"",&pzxdg);
	long uplgx;
	long rmyyp;
	long *ckeoi=&uplgx;
	long *cpygv=&rmyyp;
	yqzwu(pzxdg, ckeoi, cpygv);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",pzxdg,uplgx,rmyyp);
}","1","variable_renamer"
"266","SoSe22","9","Antwort 8","C","Tobias","Reiter","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		for (; *factor1>1; break){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","1","swap_loops_type"
"267","SoSe22","9","Antwort 8","C","Tobias","Reiter","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","1","swap_functions"
"268","SoSe22","9","Antwort 8","C","Tobias","Reiter","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void factorize(long product, long *factor1, long *factor2)
	if (!(product>=2)){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (!(*factor1<=1)){
			if (!(product%*factor1==0)){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","1","demorgan_on_logic_equations"
"269","SoSe22","9","Antwort 8","C","Tobias","Reiter","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void factorize(long product, long *factor1, long *factor2)
	if (2 > product){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while1 < *factor1>1){
			0 != product%*factor11!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","1","mirrow_simple_logic_equations"
"270","SoSe22","9","Antwort 8","C","Tobias","Reiter","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void bovoj(long nzgob, long *ldizh, long *mmbrp)
	if (nzgob<2){
		*ldizh=1;
		*mmbrp=nzgob;
	else{
		*ldizh=nzgob/2;
		while (*ldizh>1){
			if (nzgob%*ldizh!=0){
				*ldizh=*ldizh-1;
			else{
				break;
			}
		}
		*mmbrp=nzgob/ *ldizh;
	}
}
	long nzgob;
	scanf(""%ld"",&nzgob);
	long essbr;
	long dpblw;
	long *ldizh=&essbr;
	long *mmbrp=&dpblw;
	bovoj(nzgob, ldizh, mmbrp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",nzgob,essbr,dpblw);
}","1","variable_renamer"
"271","SoSe22","9","Antwort 8","C","Tobias","Reiter","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		for (; *factor1>1; break){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","1","swap_loops_type"
"272","SoSe22","9","Antwort 8","C","Tobias","Reiter","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","1","swap_functions"
"273","SoSe22","9","Antwort 8","C","Tobias","Reiter","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void factorize(long product, long *factor1, long *factor2)
	if (!(product>=2)){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (!(*factor1<=1)){
			if (!(product%*factor1==0)){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","1","demorgan_on_logic_equations"
"274","SoSe22","9","Antwort 8","C","Tobias","Reiter","void factorize(long product, long *factor1, long *factor2)
	if (product<2){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","void factorize(long product, long *factor1, long *factor2)
	if (2 > product){
		*factor1=1;
		*factor2=product;
	else{
		*factor1=product/2;
		while1 < *factor1>1){
			0 != product%*factor11!=0){
				*factor1=*factor1-1;
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}
	long product;
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
}","1","mirrow_simple_logic_equations"
"275","SoSe22","9","Antwort 8","C","Jonas","Eckhardt","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void pahlb(long tngca, long *epays, long *dbhox)
	beinm(tngca == 0){
		*epays = 1;
		*dbhox = tngca;
	else beinm(tngca == 1){
		*epays = 1;
		*dbhox = tngca;
	else beinm(tngca % 2 == 0){
			*epays = tngca / 2;
			*dbhox = (tngca / *epays);
		}
	else{
		long ygnkh = tngca/2;
		do{
			beinm(tngca % ygnkh == 0)
				break;
			else 
				ygnkh = ygnkh - 1;
		}while(tngca % 2 != 0);
		*epays = ygnkh;
		*dbhox = tngca / *epays;
		}
}
	long tngca;
	long epays;
	long dbhox;
	scanf(""%ld"", &tngca);
	pahlb(tngca, &epays, &dbhox);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", tngca, epays, dbhox);
}","1","variable_renamer"
"276","SoSe22","9","Antwort 8","C","Jonas","Eckhardt","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","swap_loops_type"
"277","SoSe22","9","Antwort 8","C","Jonas","Eckhardt","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","swap_functions"
"278","SoSe22","9","Antwort 8","C","Jonas","Eckhardt","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(!(product != 0)){
		*factor1 = 1;
		*factor2 = product;
	else if(!(product != 1)){
		*factor1 = 1;
		*factor2 = product;
	else if(!(product % 2 != 0)){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(!(product % z != 0))
				break;
			else 
				z = z - 1;
		}while(!(product % 2 == 0));
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","demorgan_on_logic_equations"
"279","SoSe22","9","Antwort 8","C","Jonas","Eckhardt","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(0 == product){
		*factor1 = 1;
		*factor2 = product;
	else if(1 == product){
		*factor1 = 1;
		*factor2 = product;
	else if(0 == product % 2){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(0 == product % z)
				break;
			else 
				z = z - 1;
		}while(0 != product % 2);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","mirrow_simple_logic_equations"
"280","SoSe22","9","Antwort 8","C","Jonas","Eckhardt","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void nhspk(long vtjwy, long *jlihd, long *utgqm)
	rmkvh(vtjwy == 0){
		*jlihd = 1;
		*utgqm = vtjwy;
	else rmkvh(vtjwy == 1){
		*jlihd = 1;
		*utgqm = vtjwy;
	else rmkvh(vtjwy % 2 == 0){
			*jlihd = vtjwy / 2;
			*utgqm = (vtjwy / *jlihd);
		}
	else{
		long vhzci = vtjwy/2;
		do{
			rmkvh(vtjwy % vhzci == 0)
				break;
			else 
				vhzci = vhzci - 1;
		}while(vtjwy % 2 != 0);
		*jlihd = vhzci;
		*utgqm = vtjwy / *jlihd;
		}
}
	long vtjwy;
	long jlihd;
	long utgqm;
	scanf(""%ld"", &vtjwy);
	nhspk(vtjwy, &jlihd, &utgqm);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", vtjwy, jlihd, utgqm);
}","1","variable_renamer"
"281","SoSe22","9","Antwort 8","C","Jonas","Eckhardt","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","swap_loops_type"
"282","SoSe22","9","Antwort 8","C","Jonas","Eckhardt","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","swap_functions"
"283","SoSe22","9","Antwort 8","C","Jonas","Eckhardt","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(!(product != 0)){
		*factor1 = 1;
		*factor2 = product;
	else if(!(product != 1)){
		*factor1 = 1;
		*factor2 = product;
	else if(!(product % 2 != 0)){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(!(product % z != 0))
				break;
			else 
				z = z - 1;
		}while(!(product % 2 == 0));
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","demorgan_on_logic_equations"
"284","SoSe22","9","Antwort 8","C","Jonas","Eckhardt","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
	if(0 == product){
		*factor1 = 1;
		*factor2 = product;
	else if(1 == product){
		*factor1 = 1;
		*factor2 = product;
	else if(0 == product % 2){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(0 == product % z)
				break;
			else 
				z = z - 1;
		}while(0 != product % 2);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","mirrow_simple_logic_equations"
"285","SoSe22","9","Antwort 8","C","Jonas","Eckhardt","void factorize(long product, long *factor1, long *factor2)
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}
	long product;
	long factor1;
	long factor2;
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void imwsc(long roqtp, long *qwqde, long *twbxj)
	nutgt(roqtp == 0){
		*qwqde = 1;
		*twbxj = roqtp;
	else nutgt(roqtp == 1){
		*qwqde = 1;
		*twbxj = roqtp;
	else nutgt(roqtp % 2 == 0){
			*qwqde = roqtp / 2;
			*twbxj = (roqtp / *qwqde);
		}
	else{
		long awumg = roqtp/2;
		do{
			nutgt(roqtp % awumg == 0)
				break;
			else 
				awumg = awumg - 1;
		}while(roqtp % 2 != 0);
		*qwqde = awumg;
		*twbxj = roqtp / *qwqde;
		}
}
	long roqtp;
	long qwqde;
	long twbxj;
	scanf(""%ld"", &roqtp);
	imwsc(roqtp, &qwqde, &twbxj);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", roqtp, qwqde, twbxj);
}","1","variable_renamer"
"286","SoSe22","9","Antwort 8","C","Pinelopi Eleni","Anastasiadou","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	i=1;
	while (i<10){
	    factorize(integer, i, (int) zahl2);
		i++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","1","swap_loops_type"
"287","SoSe22","9","Antwort 8","C","Pinelopi Eleni","Anastasiadou","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","1","swap_functions"
"288","SoSe22","9","Antwort 8","C","Pinelopi Eleni","Anastasiadou","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (!(x*(*zahl1)!=ergebnis)) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (!(i=1; i>=10; i++)){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","1","demorgan_on_logic_equations"
"289","SoSe22","9","Antwort 8","C","Pinelopi Eleni","Anastasiadou","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; 10 > i; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","1","mirrow_simple_logic_equations"
"290","SoSe22","9","Antwort 8","C","Pinelopi Eleni","Anastasiadou","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void snotr(long yeofy, long *bxsxp, long *ctopq)
	int dzayl = yeofy/(*bxsxp);
	if (dzayl*(*bxsxp)==yeofy) {
	    int qxeng = yeofy/dzayl;
	    return yeofy, dzayl, qxeng;
	int ziylq;
	int awvuv=0;
	int ctopq=0;
	scanf(""%i"", ziylq);
	for (awvuv=1; awvuv<10; awvuv++){
	    snotr(ziylq, awvuv, (int) ctopq);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ziylq, awvuv, ctopq);
}","1","variable_renamer"
"291","SoSe22","9","Antwort 8","C","Pinelopi Eleni","Anastasiadou","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	i=1;
	while (i<10){
	    factorize(integer, i, (int) zahl2);
		i++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","1","swap_loops_type"
"292","SoSe22","9","Antwort 8","C","Pinelopi Eleni","Anastasiadou","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","1","swap_functions"
"293","SoSe22","9","Antwort 8","C","Pinelopi Eleni","Anastasiadou","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (!(x*(*zahl1)!=ergebnis)) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (!(i=1; i>=10; i++)){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","1","demorgan_on_logic_equations"
"294","SoSe22","9","Antwort 8","C","Pinelopi Eleni","Anastasiadou","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; 10 > i; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","1","mirrow_simple_logic_equations"
"295","SoSe22","9","Antwort 8","C","Pinelopi Eleni","Anastasiadou","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void pzlkk(long ubseq, long *rkvjr, long *mvmbj)
	int lccmo = ubseq/(*rkvjr);
	if (lccmo*(*rkvjr)==ubseq) {
	    int rzjjc = ubseq/lccmo;
	    return ubseq, lccmo, rzjjc;
	int hlpgo;
	int keima=0;
	int mvmbj=0;
	scanf(""%i"", hlpgo);
	for (keima=1; keima<10; keima++){
	    pzlkk(hlpgo, keima, (int) mvmbj);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", hlpgo, keima, mvmbj);
}","1","variable_renamer"
"296","SoSe22","9","Antwort 8","C","Pinelopi Eleni","Anastasiadou","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	i=1;
	while (i<10){
	    factorize(integer, i, (int) zahl2);
		i++;
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
}","1","swap_loops_type"
"297","SoSe22","9","Antwort 8","C","Richard","Rabe","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","1","swap_functions"
"298","SoSe22","9","Antwort 8","C","Richard","Rabe","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(!(ergebnis != 1 || ergebnis != 0)) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(!(int i = ergebnis/2; i <= 0;i--)) 
		{
            if(!(ergebnis%i != 0)) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","1","demorgan_on_logic_equations"
"299","SoSe22","9","Antwort 8","C","Richard","Rabe","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(1 || ergebnis == 0 == ergebnis) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; 0 < i;i--) 
		{
            if(0 == ergebnis%i) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","1","mirrow_simple_logic_equations"
"300","SoSe22","9","Antwort 8","C","Richard","Rabe","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void onlbt(long gzbaf, long* zahl1, long* zahl2)
if(gzbaf == 1 || gzbaf == 0) {
        *zahl2 =gzbaf;
		*zahl1 =1;
    } 
	else 
	{
        for(int tepei = gzbaf/2; tepei > 0;tepei--) 
		{
            if(gzbaf%tepei == 0) 
			{
				*zahl1 = tepei;
                *zahl2 = gzbaf/tepei;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long gzbaf;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &gzbaf);
    onlbt(gzbaf,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",gzbaf, *zahl1, *zahl2);
    return 0;
}","1","variable_renamer"
"301","SoSe22","9","Antwort 8","C","Richard","Rabe","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        int i = ergebnis/2;
        while (i > 0) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
	i--;
        }
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","1","swap_loops_type"
"302","SoSe22","9","Antwort 8","C","Richard","Rabe","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","1","swap_functions"
"303","SoSe22","9","Antwort 8","C","Richard","Rabe","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(!(ergebnis != 1 || ergebnis != 0)) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(!(int i = ergebnis/2; i <= 0;i--)) 
		{
            if(!(ergebnis%i != 0)) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","1","demorgan_on_logic_equations"
"304","SoSe22","9","Antwort 8","C","Richard","Rabe","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(1 || ergebnis == 0 == ergebnis) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; 0 < i;i--) 
		{
            if(0 == ergebnis%i) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","1","mirrow_simple_logic_equations"
"305","SoSe22","9","Antwort 8","C","Richard","Rabe","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void cvnyp(long flnbe, long* zahl1, long* zahl2)
if(flnbe == 1 || flnbe == 0) {
        *zahl2 =flnbe;
		*zahl1 =1;
    } 
	else 
	{
        for(int ktmix = flnbe/2; ktmix > 0;ktmix--) 
		{
            if(flnbe%ktmix == 0) 
			{
				*zahl1 = ktmix;
                *zahl2 = flnbe/ktmix;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long flnbe;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &flnbe);
    cvnyp(flnbe,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",flnbe, *zahl1, *zahl2);
    return 0;
}","1","variable_renamer"
"306","SoSe22","9","Antwort 8","C","Richard","Rabe","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        int i = ergebnis/2;
        while (i > 0) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
	i--;
        }
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","1","swap_loops_type"
"307","SoSe22","9","Antwort 8","C","Richard","Rabe","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","#include <stdlib.h>
void factorize(long ergebnis, long* zahl1, long* zahl2)
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
            } 
			else 
			{
               continue;
                        }
}
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
    return 0;
}","1","swap_functions"
"308","SoSe22","9","Antwort 8","C","Elisabeth Maria","Groß","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(!(product != 0)) {
        *factor1 = 1;
        *factor2 = product;
    } else if(!(product != 1)) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(!(int i = product/2; i <= 0;i--)) {
            if(!(product%i == 0)) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","1","demorgan_on_logic_equations"
"309","SoSe22","9","Antwort 8","C","Elisabeth Maria","Groß","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(0 == product) {
        *factor1 = 1;
        *factor2 = product;
    } else if(1 == product) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; 0 < i;i--) {
            if(0 != product%i) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","1","mirrow_simple_logic_equations"
"310","SoSe22","9","Antwort 8","C","Elisabeth Maria","Groß","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void ekxbk(long mrbhr, long* factor1, long* factor2)
lgdwt(mrbhr == 0) {
        *factor1 = 1;
        *factor2 = mrbhr;
    } else lgdwt(mrbhr == 1) {
        *factor1 = 1;
        *factor2 = mrbhr;
    } else {
        for(int gahkq = mrbhr/2; gahkq > 0;gahkq--) {
            lgdwt(mrbhr%gahkq != 0) {
                continue;
            } else {
                *factor1 = gahkq;
                *factor2 = mrbhr/gahkq;
                break;
                        }
}
    long mrbhr = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &mrbhr);
    ekxbk(mrbhr,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",mrbhr, *factor1, *factor2);
    return 0;
}","1","variable_renamer"
"311","SoSe22","9","Antwort 8","C","Elisabeth Maria","Groß","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        int i = product/2;
        while (i > 0) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
	i--;
        }
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","1","swap_loops_type"
"312","SoSe22","9","Antwort 8","C","Elisabeth Maria","Groß","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","1","swap_functions"
"313","SoSe22","9","Antwort 8","C","Elisabeth Maria","Groß","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(!(product != 0)) {
        *factor1 = 1;
        *factor2 = product;
    } else if(!(product != 1)) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(!(int i = product/2; i <= 0;i--)) {
            if(!(product%i == 0)) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","1","demorgan_on_logic_equations"
"314","SoSe22","9","Antwort 8","C","Elisabeth Maria","Groß","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(0 == product) {
        *factor1 = 1;
        *factor2 = product;
    } else if(1 == product) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; 0 < i;i--) {
            if(0 != product%i) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","1","mirrow_simple_logic_equations"
"315","SoSe22","9","Antwort 8","C","Elisabeth Maria","Groß","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void pgvwl(long yacko, long* factor1, long* factor2)
iozjo(yacko == 0) {
        *factor1 = 1;
        *factor2 = yacko;
    } else iozjo(yacko == 1) {
        *factor1 = 1;
        *factor2 = yacko;
    } else {
        for(int upova = yacko/2; upova > 0;upova--) {
            iozjo(yacko%upova != 0) {
                continue;
            } else {
                *factor1 = upova;
                *factor2 = yacko/upova;
                break;
                        }
}
    long yacko = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &yacko);
    pgvwl(yacko,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",yacko, *factor1, *factor2);
    return 0;
}","1","variable_renamer"
"316","SoSe22","9","Antwort 8","C","Elisabeth Maria","Groß","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        int i = product/2;
        while (i > 0) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
	i--;
        }
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","1","swap_loops_type"
"317","SoSe22","9","Antwort 8","C","Elisabeth Maria","Groß","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","1","swap_functions"
"318","SoSe22","9","Antwort 8","C","Elisabeth Maria","Groß","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","#include <stdlib.h>
void factorize(long product, long* factor1, long* factor2)
if(!(product != 0)) {
        *factor1 = 1;
        *factor2 = product;
    } else if(!(product != 1)) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(!(int i = product/2; i <= 0;i--)) {
            if(!(product%i == 0)) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
                        }
}
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
    return 0;
}","1","demorgan_on_logic_equations"
"319","SoSe22","9","Antwort 8","C","Andrea Kumih","Yeboah","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
if((0 == ergebnis)||(1 == ergebnis))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(0 != ergebnis%f1)
{
f1 = f1- 1;
f2 = ergebnis/f1;
}
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","1","mirrow_simple_logic_equations"
"320","SoSe22","9","Antwort 8","C","Andrea Kumih","Yeboah","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void hyorw(long ctefm, long *lmhnc, long *qpryw)
long ujxbo,f2;
if((ctefm == 0)||(ctefm == 1))
{
ujxbo = 1;
f2 = ctefm;
else
{
ujxbo = ctefm/2;
while(ctefm%ujxbo != 0 )
{
ujxbo = ujxbo- 1;
f2 = ctefm/ujxbo;
}
*lmhnc = ujxbo;
*qpryw = f2;
}
long acfeb;
scanf(""%ld"",&acfeb);
long wbznr,z2;
hyorw(acfeb,&wbznr,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",acfeb,wbznr,z2);
}","1","variable_renamer"
"321","SoSe22","9","Antwort 8","C","Andrea Kumih","Yeboah","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
for (; ergebnis%f1 != 0; f2 = ergebnis/f1)
{
f1 = f1- 1;
}
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","1","swap_loops_type"
"322","SoSe22","9","Antwort 8","C","Andrea Kumih","Yeboah","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
f1 = f1- 1;
f2 = ergebnis/f1;
}
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","1","swap_functions"
"323","SoSe22","9","Antwort 8","C","Andrea Kumih","Yeboah","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
if(!((ergebnis != 0)||(ergebnis != 1)))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(!(ergebnis%f1 == 0 ))
{
f1 = f1- 1;
f2 = ergebnis/f1;
}
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","1","demorgan_on_logic_equations"
"324","SoSe22","9","Antwort 8","C","Andrea Kumih","Yeboah","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
if((0 == ergebnis)||(1 == ergebnis))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(0 != ergebnis%f1)
{
f1 = f1- 1;
f2 = ergebnis/f1;
}
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","1","mirrow_simple_logic_equations"
"325","SoSe22","9","Antwort 8","C","Andrea Kumih","Yeboah","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void ykuuo(long otntq, long *cyglr, long *xibvi)
long lepdg,f2;
if((otntq == 0)||(otntq == 1))
{
lepdg = 1;
f2 = otntq;
else
{
lepdg = otntq/2;
while(otntq%lepdg != 0 )
{
lepdg = lepdg- 1;
f2 = otntq/lepdg;
}
*cyglr = lepdg;
*xibvi = f2;
}
long usimd;
scanf(""%ld"",&usimd);
long bzbcr,z2;
ykuuo(usimd,&bzbcr,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",usimd,bzbcr,z2);
}","1","variable_renamer"
"326","SoSe22","9","Antwort 8","C","Andrea Kumih","Yeboah","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
for (; ergebnis%f1 != 0; f2 = ergebnis/f1)
{
f1 = f1- 1;
}
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","1","swap_loops_type"
"327","SoSe22","9","Antwort 8","C","Andrea Kumih","Yeboah","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
f1 = f1- 1;
f2 = ergebnis/f1;
}
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","1","swap_functions"
"328","SoSe22","9","Antwort 8","C","Andrea Kumih","Yeboah","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
if(!((ergebnis != 0)||(ergebnis != 1)))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(!(ergebnis%f1 == 0 ))
{
f1 = f1- 1;
f2 = ergebnis/f1;
}
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","1","demorgan_on_logic_equations"
"329","SoSe22","9","Antwort 8","C","Andrea Kumih","Yeboah","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2)
long f1,f2;
if((0 == ergebnis)||(1 == ergebnis))
{
f1 = 1;
f2 = ergebnis;
else
{
f1 = ergebnis/2;
while(0 != ergebnis%f1)
{
f1 = f1- 1;
f2 = ergebnis/f1;
}
*zahl1 = f1;
*zahl2 = f2;
}
long eingabe;
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
}","1","mirrow_simple_logic_equations"
"330","SoSe22","9","Antwort 8","C","Edgar Wolf","Großkopf","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void uroug(long ncdgv, long *ukoba, long *vfxmi)
	izxew(ncdgv == 0){
		*ukoba = 1;
		*vfxmi = ncdgv;
	else izxew(ncdgv == 1){
		*ukoba = 1;
		*vfxmi = ncdgv;
	else{
		long rdtdx = ncdgv/2;
		while(ncdgv%rdtdx != 0){
			rdtdx -= 1;
		}
		*ukoba = rdtdx;
		*vfxmi = ncdgv/rdtdx;
	}
}
	long ncdgv, f1, f2;
	long *ukoba = &f1,*vfxmi = &f2;
	scanf(""%li"",&ncdgv);
	uroug(ncdgv,ukoba,vfxmi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",ncdgv,*ukoba,*vfxmi);
}","1","variable_renamer"
"331","SoSe22","9","Antwort 8","C","Edgar Wolf","Großkopf","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		for (; produkt%vielfache != 0; vielfache -= 1){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","1","swap_loops_type"
"332","SoSe22","9","Antwort 8","C","Edgar Wolf","Großkopf","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","1","swap_functions"
"333","SoSe22","9","Antwort 8","C","Edgar Wolf","Großkopf","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(!(produkt != 0)){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(!(produkt != 1)){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(!(produkt%vielfache == 0)){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","1","demorgan_on_logic_equations"
"334","SoSe22","9","Antwort 8","C","Edgar Wolf","Großkopf","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(0 == produkt){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(1 == produkt){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(0 != produkt%vielfache){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","1","mirrow_simple_logic_equations"
"335","SoSe22","9","Antwort 8","C","Edgar Wolf","Großkopf","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void xaxko(long tkanq, long *dlghr, long *uwnkq)
	bcmft(tkanq == 0){
		*dlghr = 1;
		*uwnkq = tkanq;
	else bcmft(tkanq == 1){
		*dlghr = 1;
		*uwnkq = tkanq;
	else{
		long xiegw = tkanq/2;
		while(tkanq%xiegw != 0){
			xiegw -= 1;
		}
		*dlghr = xiegw;
		*uwnkq = tkanq/xiegw;
	}
}
	long tkanq, f1, f2;
	long *dlghr = &f1,*uwnkq = &f2;
	scanf(""%li"",&tkanq);
	xaxko(tkanq,dlghr,uwnkq);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",tkanq,*dlghr,*uwnkq);
}","1","variable_renamer"
"336","SoSe22","9","Antwort 8","C","Edgar Wolf","Großkopf","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		for (; produkt%vielfache != 0; vielfache -= 1){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","1","swap_loops_type"
"337","SoSe22","9","Antwort 8","C","Edgar Wolf","Großkopf","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","1","swap_functions"
"338","SoSe22","9","Antwort 8","C","Edgar Wolf","Großkopf","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(!(produkt != 0)){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(!(produkt != 1)){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(!(produkt%vielfache == 0)){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","1","demorgan_on_logic_equations"
"339","SoSe22","9","Antwort 8","C","Edgar Wolf","Großkopf","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void factorize(long produkt, long *faktor1, long *faktor2)
	if(0 == produkt){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(1 == produkt){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(0 != produkt%vielfache){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","1","mirrow_simple_logic_equations"
"340","SoSe22","9","Antwort 8","C","Edgar Wolf","Großkopf","void factorize(long produkt, long *faktor1, long *faktor2)
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
}","void otbdk(long pyptd, long *rdqbr, long *gziap)
	bqvrn(pyptd == 0){
		*rdqbr = 1;
		*gziap = pyptd;
	else bqvrn(pyptd == 1){
		*rdqbr = 1;
		*gziap = pyptd;
	else{
		long jfova = pyptd/2;
		while(pyptd%jfova != 0){
			jfova -= 1;
		}
		*rdqbr = jfova;
		*gziap = pyptd/jfova;
	}
}
	long pyptd, f1, f2;
	long *rdqbr = &f1,*gziap = &f2;
	scanf(""%li"",&pyptd);
	otbdk(pyptd,rdqbr,gziap);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",pyptd,*rdqbr,*gziap);
}","1","variable_renamer"
"341","SoSe22","9","Antwort 8","C","Niklas","Schwolow","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        for (; ergebnis % tmp != 0; tmp = tmp - 1){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","swap_loops_type"
"342","SoSe22","9","Antwort 8","C","Niklas","Schwolow","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","swap_functions"
"343","SoSe22","9","Antwort 8","C","Niklas","Schwolow","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(!(ergebnis != 0)){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(!(ergebnis != 1)){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(!(ergebnis % tmp == 0)){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","demorgan_on_logic_equations"
"344","SoSe22","9","Antwort 8","C","Niklas","Schwolow","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(0 == ergebnis){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(1 == ergebnis){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(0 != ergebnis % tmp){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","mirrow_simple_logic_equations"
"345","SoSe22","9","Antwort 8","C","Niklas","Schwolow","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void wgrft(long ggcat, long *offaw, long *uzuao){
    long zbtxh= ggcat;
    tmpbm(ggcat == 0){
        *offaw = 1;
        *uzuao = ggcat;
        else tmpbm(ggcat == 1){
        *offaw = 1;
        *uzuao = ggcat;
        else{
        zbtxh = ggcat/2;
        while(ggcat % zbtxh != 0){
            zbtxh = zbtxh - 1;
        }
        *offaw = zbtxh;
        *uzuao = ggcat/zbtxh;
    }
}
	long ggcat;
    long offaw;
    long uzuao;
    long* p1 = &offaw;
    long* p2 = &uzuao;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ggcat);
    wgrft(ggcat, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ggcat, offaw, uzuao);
}","1","variable_renamer"
"346","SoSe22","9","Antwort 8","C","Niklas","Schwolow","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        for (; ergebnis % tmp != 0; tmp = tmp - 1){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","swap_loops_type"
"347","SoSe22","9","Antwort 8","C","Niklas","Schwolow","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","swap_functions"
"348","SoSe22","9","Antwort 8","C","Niklas","Schwolow","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(!(ergebnis != 0)){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(!(ergebnis != 1)){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(!(ergebnis % tmp == 0)){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","demorgan_on_logic_equations"
"349","SoSe22","9","Antwort 8","C","Niklas","Schwolow","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(0 == ergebnis){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(1 == ergebnis){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(0 != ergebnis % tmp){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","mirrow_simple_logic_equations"
"350","SoSe22","9","Antwort 8","C","Niklas","Schwolow","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void rmunf(long zltxn, long *ctwly, long *uzibs){
    long lcimz= zltxn;
    snqbp(zltxn == 0){
        *ctwly = 1;
        *uzibs = zltxn;
        else snqbp(zltxn == 1){
        *ctwly = 1;
        *uzibs = zltxn;
        else{
        lcimz = zltxn/2;
        while(zltxn % lcimz != 0){
            lcimz = lcimz - 1;
        }
        *ctwly = lcimz;
        *uzibs = zltxn/lcimz;
    }
}
	long zltxn;
    long ctwly;
    long uzibs;
    long* p1 = &ctwly;
    long* p2 = &uzibs;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &zltxn);
    rmunf(zltxn, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zltxn, ctwly, uzibs);
}","1","variable_renamer"
"351","SoSe22","9","Antwort 8","C","Niklas","Schwolow","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
        else{
        tmp = ergebnis/2;
        for (; ergebnis % tmp != 0; tmp = tmp - 1){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
}","1","swap_loops_type"
"352","SoSe22","9","Antwort 8","C","Lars Rudolf Heinrich","Michael","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","1","swap_functions"
"353","SoSe22","9","Antwort 8","C","Lars Rudolf Heinrich","Michael","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(!(product != 0 || product != 1)){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(!(int i = 0; i >= product; i++)){
			 teiler = (product/2) - i;
			if(!(teiler * (product/teiler) != product)){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","1","demorgan_on_logic_equations"
"354","SoSe22","9","Antwort 8","C","Lars Rudolf Heinrich","Michael","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(0 || product == 1 == product){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; product > i; i++){
			 teiler = (product/2) - i;
			if(teiler * (product/teiler)product == ){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","1","mirrow_simple_logic_equations"
"355","SoSe22","9","Antwort 8","C","Lars Rudolf Heinrich","Michael","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void kohvh(long vxort, long *vchjt, long *szgkk){
	long utupz;
	if(vxort == 0 || vxort == 1){
		*vchjt = 1;
		*szgkk = vxort;
	else {
		for(int holzp = 0; holzp < vxort; holzp++){
			 utupz = (vxort/2) - holzp;
			if(utupz * (vxort/utupz) == vxort){
				holzp = vxort;
		}
		*vchjt = utupz;
		*szgkk = vxort/utupz;
	}
}
	long vchjt;
	long* fac1 = &vchjt;
	long szgkk;
	long* fac2 = &szgkk;
	long rxkhi = 0;
	scanf(""%li"", &rxkhi);
	kohvh(rxkhi, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", rxkhi, vchjt, szgkk);
}","1","variable_renamer"
"356","SoSe22","9","Antwort 8","C","Lars Rudolf Heinrich","Michael","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		int i = 0;
		while (i < product){
			 teiler = (product/2) - i;
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
		i++;
		}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","1","swap_loops_type"
"357","SoSe22","9","Antwort 8","C","Lars Rudolf Heinrich","Michael","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","1","swap_functions"
"358","SoSe22","9","Antwort 8","C","Lars Rudolf Heinrich","Michael","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(!(product != 0 || product != 1)){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(!(int i = 0; i >= product; i++)){
			 teiler = (product/2) - i;
			if(!(teiler * (product/teiler) != product)){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","1","demorgan_on_logic_equations"
"359","SoSe22","9","Antwort 8","C","Lars Rudolf Heinrich","Michael","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(0 || product == 1 == product){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; product > i; i++){
			 teiler = (product/2) - i;
			if(teiler * (product/teiler)product == ){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","1","mirrow_simple_logic_equations"
"360","SoSe22","9","Antwort 8","C","Lars Rudolf Heinrich","Michael","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void ihbwh(long khfzg, long *eksza, long *hngli){
	long ezuvl;
	if(khfzg == 0 || khfzg == 1){
		*eksza = 1;
		*hngli = khfzg;
	else {
		for(int wcmow = 0; wcmow < khfzg; wcmow++){
			 ezuvl = (khfzg/2) - wcmow;
			if(ezuvl * (khfzg/ezuvl) == khfzg){
				wcmow = khfzg;
		}
		*eksza = ezuvl;
		*hngli = khfzg/ezuvl;
	}
}
	long eksza;
	long* fac1 = &eksza;
	long hngli;
	long* fac2 = &hngli;
	long ejshk = 0;
	scanf(""%li"", &ejshk);
	ihbwh(ejshk, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ejshk, eksza, hngli);
}","1","variable_renamer"
"361","SoSe22","9","Antwort 8","C","Lars Rudolf Heinrich","Michael","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		int i = 0;
		while (i < product){
			 teiler = (product/2) - i;
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
		i++;
		}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","1","swap_loops_type"
"362","SoSe22","9","Antwort 8","C","Lars Rudolf Heinrich","Michael","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2){
	long teiler;
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	else {
		for(int i = 0; i < product; i++){
			 teiler = (product/2) - i;
			if(teiler * (product/teiler) == product){
				i = product;
		}
		*factor1 = teiler;
		*factor2 = product/teiler;
	}
}
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","1","swap_functions"
"363","SoSe22","9","Antwort 8","C","Athena Sabina","Zamudio Bargel","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (!(product != 0)) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (!(product != 1)) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (!(product %i != 0)) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","demorgan_on_logic_equations"
"364","SoSe22","9","Antwort 8","C","Athena Sabina","Zamudio Bargel","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (0 == product) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (1 == product) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (0 == product %i) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","mirrow_simple_logic_equations"
"365","SoSe22","9","Antwort 8","C","Athena Sabina","Zamudio Bargel","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void vlfwq(long sfjho, long *hrugk, long *rbubp)
        xfslz (sfjho == 0) {
          *hrugk = 1;
          *rbubp = 0;
        } else xfslz (sfjho == 1) {
          *hrugk = 1;
          *rbubp = 1;
        } else {
          long imwch = 2;
          while (1) {
             xfslz (sfjho %imwch == 0) {
                *hrugk = sfjho / imwch;
                *rbubp = imwch;
                break;
                          imwch++;
             }
}
        long sfjho, hrugk, rbubp;
        scanf(""%ld"", &sfjho);
        vlfwq(sfjho, &hrugk, &rbubp);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", sfjho, hrugk, rbubp);
}","1","variable_renamer"
"366","SoSe22","9","Antwort 8","C","Athena Sabina","Zamudio Bargel","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          for (; 1; i++) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","swap_loops_type"
"367","SoSe22","9","Antwort 8","C","Athena Sabina","Zamudio Bargel","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","swap_functions"
"368","SoSe22","9","Antwort 8","C","Athena Sabina","Zamudio Bargel","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (!(product != 0)) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (!(product != 1)) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (!(product %i != 0)) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","demorgan_on_logic_equations"
"369","SoSe22","9","Antwort 8","C","Athena Sabina","Zamudio Bargel","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (0 == product) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (1 == product) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (0 == product %i) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","mirrow_simple_logic_equations"
"370","SoSe22","9","Antwort 8","C","Athena Sabina","Zamudio Bargel","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void cenjs(long duinj, long *zkxmh, long *itybi)
        opujb (duinj == 0) {
          *zkxmh = 1;
          *itybi = 0;
        } else opujb (duinj == 1) {
          *zkxmh = 1;
          *itybi = 1;
        } else {
          long zkaim = 2;
          while (1) {
             opujb (duinj %zkaim == 0) {
                *zkxmh = duinj / zkaim;
                *itybi = zkaim;
                break;
                          zkaim++;
             }
}
        long duinj, zkxmh, itybi;
        scanf(""%ld"", &duinj);
        cenjs(duinj, &zkxmh, &itybi);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", duinj, zkxmh, itybi);
}","1","variable_renamer"
"371","SoSe22","9","Antwort 8","C","Athena Sabina","Zamudio Bargel","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          for (; 1; i++) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","swap_loops_type"
"372","SoSe22","9","Antwort 8","C","Athena Sabina","Zamudio Bargel","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","swap_functions"
"373","SoSe22","9","Antwort 8","C","Athena Sabina","Zamudio Bargel","void factorize(long product, long *factor1, long *factor2)
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","void factorize(long product, long *factor1, long *factor2)
        if (!(product != 0)) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (!(product != 1)) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (!(product %i != 0)) {
                *factor1 = product / i;
                *factor2 = i;
                break;
                          i++;
             }
}
        long product, factor1, factor2;
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
}","1","demorgan_on_logic_equations"
"374","SoSe22","10","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(vorname < ""%s"", p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scannachname < ""%s"", p_stud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scpunkte[0] < ""%i"", &p_stud-e[0]);
	printf(""2: "");
	punkte[1] < ""%i"", &p_stud-kte[1]);
	printf(""3: "");punkte[2] < ""%i"", &p_stud-unkte[2]);
	printf(""4: ""punkte[3] < ""%i"", &p_stud->punkte[3]);
	printf(""5:punkte[4] < ""%i"", &p_stud-d->punkte[4]);
	printf(""\\n"");5 > ior(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4] < {
	int a = p_stud-_stud->pvorname,p_stud->nachname,a < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-p_stud->nachna5 > ia);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studena > i[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studentena > i);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","1","mirrow_simple_logic_equations"
"375","SoSe22","10","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdlib.h>
typedef eneiq ytmkc	vrtrj vorname[21];
	vrtrj viwpa[21];
	int mroyk[5];
}Student;
void dawoe(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->viwpa);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->mroyk[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->mroyk[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->mroyk[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->mroyk[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->mroyk[4]);
	printf(""\\n"");
	for(int dcmea=0;dcmea<5;dcmea++){int pvims=0; pvims++;void bszhc(Student* p_stud){
	int pvims = p_stud->mroyk[0]+p_stud->mroyk[1]+p_stud->mroyk[2]+p_stud->mroyk[3]+p_stud->mroyk[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->viwpa,pvims);
	for(int dcmea=0;dcmea<5;dcmea++){int pvims=0; pvims++;}	
}
int main(void){
	int pvims=5;
	 	eneiq ytmkc studenten[pvims];
		for(int dcmea=0;dcmea<pvims;dcmea++){
						dawoe(&studenten[dcmea]);
		}
		for(int dcmea=0;dcmea<pvims;dcmea++){
						bszhc(&studenten[dcmea]);
		}
 	}","1","variable_renamer"
"376","SoSe22","10","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	int i=0;
	while (i<5){int a=0;
		i++;
	} a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	int i=0;
	while (i<5){int a=0; a++;	i++;
	}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		int i=0;
		while (i<a){
						student_einlesen(&studenten[i]);
			i++;
		}
		int i=0;
		while (i<a){
						student_ausgeben(&studenten[i]);
			i++;
		}
 	}","1","swap_loops_type"
"377","SoSe22","10","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; void student_einlesen(Student* p_stud)
{
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","1","swap_functions"
"378","SoSe22","10","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"", p_stud-<=vorname));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"", p_stud-<=nachname));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(!(""%i"", &p_stud-<=punkte[0]));
	printf(""2: "");
	scanf(!(""%i"", &p_stud-<=punkte[1]));
	printf(""3: "");
	scanf(!(""%i"", &p_stud-<=punkte[2]));
	printf(""4: "");
	scanf(!(""%i"", &p_stud-<=punkte[3]));
	printf(""5: "");
	scanf(!(""%i"", &p_stud-<=punkte[4]));
	printf(""\\n"");
	for(!(int i=0;i>=5;i++){int a=0; a++;void student_ausgeben(Student* p_stud)){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(!(""Student: %s %s
Anzahl Punkte: %i

"",p_stud-<=vorname,p_stud-<=nachname,a));
	for(!(int i=0;i>=5;i++)){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(!(int i=0;i>=a;i++)){
						student_einlesen(&studenten[i]);
		}
		for(!(int i=0;i>=a;i++)){
						student_ausgeben(&studenten[i]);
		}
 	}","1","demorgan_on_logic_equations"
"379","SoSe22","10","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(vorname < ""%s"", p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scannachname < ""%s"", p_stud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scpunkte[0] < ""%i"", &p_stud-e[0]);
	printf(""2: "");
	punkte[1] < ""%i"", &p_stud-kte[1]);
	printf(""3: "");punkte[2] < ""%i"", &p_stud-unkte[2]);
	printf(""4: ""punkte[3] < ""%i"", &p_stud->punkte[3]);
	printf(""5:punkte[4] < ""%i"", &p_stud-d->punkte[4]);
	printf(""\\n"");5 > ior(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4] < {
	int a = p_stud-_stud->pvorname,p_stud->nachname,a < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-p_stud->nachna5 > ia);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studena > i[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studentena > i);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","1","mirrow_simple_logic_equations"
"380","SoSe22","10","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdlib.h>
typedef yulnt nrbug	xcvra vorname[21];
	xcvra zqfzn[21];
	int yikzq[5];
}Student;
void kfgzv(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->zqfzn);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->yikzq[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->yikzq[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->yikzq[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->yikzq[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->yikzq[4]);
	printf(""\\n"");
	for(int gqrcf=0;gqrcf<5;gqrcf++){int tirsd=0; tirsd++;void rnqwa(Student* p_stud){
	int tirsd = p_stud->yikzq[0]+p_stud->yikzq[1]+p_stud->yikzq[2]+p_stud->yikzq[3]+p_stud->yikzq[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->zqfzn,tirsd);
	for(int gqrcf=0;gqrcf<5;gqrcf++){int tirsd=0; tirsd++;}	
}
int main(void){
	int tirsd=5;
	 	yulnt nrbug studenten[tirsd];
		for(int gqrcf=0;gqrcf<tirsd;gqrcf++){
						kfgzv(&studenten[gqrcf]);
		}
		for(int gqrcf=0;gqrcf<tirsd;gqrcf++){
						rnqwa(&studenten[gqrcf]);
		}
 	}","1","variable_renamer"
"381","SoSe22","10","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	int i=0;
	while (i<5){int a=0;
		i++;
	} a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	int i=0;
	while (i<5){int a=0; a++;	i++;
	}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		int i=0;
		while (i<a){
						student_einlesen(&studenten[i]);
			i++;
		}
		int i=0;
		while (i<a){
						student_ausgeben(&studenten[i]);
			i++;
		}
 	}","1","swap_loops_type"
"382","SoSe22","10","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; void student_einlesen(Student* p_stud)
{
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","1","swap_functions"
"383","SoSe22","10","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"", p_stud-<=vorname));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"", p_stud-<=nachname));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(!(""%i"", &p_stud-<=punkte[0]));
	printf(""2: "");
	scanf(!(""%i"", &p_stud-<=punkte[1]));
	printf(""3: "");
	scanf(!(""%i"", &p_stud-<=punkte[2]));
	printf(""4: "");
	scanf(!(""%i"", &p_stud-<=punkte[3]));
	printf(""5: "");
	scanf(!(""%i"", &p_stud-<=punkte[4]));
	printf(""\\n"");
	for(!(int i=0;i>=5;i++){int a=0; a++;void student_ausgeben(Student* p_stud)){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(!(""Student: %s %s
Anzahl Punkte: %i

"",p_stud-<=vorname,p_stud-<=nachname,a));
	for(!(int i=0;i>=5;i++)){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(!(int i=0;i>=a;i++)){
						student_einlesen(&studenten[i]);
		}
		for(!(int i=0;i>=a;i++)){
						student_ausgeben(&studenten[i]);
		}
 	}","1","demorgan_on_logic_equations"
"384","SoSe22","10","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","#include <stdlib.h>
typedef struct student	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(vorname < ""%s"", p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scannachname < ""%s"", p_stud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scpunkte[0] < ""%i"", &p_stud-e[0]);
	printf(""2: "");
	punkte[1] < ""%i"", &p_stud-kte[1]);
	printf(""3: "");punkte[2] < ""%i"", &p_stud-unkte[2]);
	printf(""4: ""punkte[3] < ""%i"", &p_stud->punkte[3]);
	printf(""5:punkte[4] < ""%i"", &p_stud-d->punkte[4]);
	printf(""\\n"");5 > ior(int i=0;i<5;i++){int a=0; a++;void student_ausgeben(punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4] < {
	int a = p_stud-_stud->pvorname,p_stud->nachname,a < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud-p_stud->nachna5 > ia);
	for(int i=0;i<5;i++){int a=0; a++;}	
}
int main(void){
	int a=5;
	 	struct student studena > i[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studentena > i);
		}
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
 	}","1","mirrow_simple_logic_equations"
"385","SoSe22","10","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdlib.h>
#include <string.h>
typedef gaiwu* IntPointer;
typedef xyqff Student    vamym first_name[20];
    vamym rdcut[20];
    gaiwu wghyd[5];
}Student;
void lehzj(Student* p_stud);
void axbnj(Student* p_stud);
gaiwu main()
{
    Student ieepo[5];
    for(gaiwu sqprq=0; sqprq<5;sqprq++){
    	lehzj(&ieepo[sqprq]);
	for(gaiwu xslpa=0; xslpa<5;xslpa++){
    	axbnj(&ieepo[xslpa]);
    return 0;
}
void lehzj(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->rdcut);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->wghyd[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->wghyd[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->wghyd[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->wghyd[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->wghyd[4]);
}
void axbnj(Student* p_stud)
{
	gaiwu hrhqf=0;
	for(gaiwu sqprq=0;sqprq<5;sqprq++){ hrhqf += p_stud->wghyd[sqprq];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->rdcut);
	printf(""\\nAnzahl Punkte: %i\\n"", hrhqf);
}","1","variable_renamer"
"386","SoSe22","10","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    int n=0;
    while (n<5){
    	student_einlesen(&stud[n]);
	    n++;
    }
	int p=0;
	while (p<5){
    	student_ausgeben(&stud[p]);
    return 0;
	p++;
	}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	int n=0;
	while (n<5){ sum += p_stud->points[n];	n++;
	}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","1","swap_loops_type"
"387","SoSe22","10","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}","1","swap_functions"
"388","SoSe22","10","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(!(int n=0; n>=5;n++)){
    	student_einlesen(&stud[n]);
	for(!(int p=0; p>=5;p++)){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"", &p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", &p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(!(""%d"", &p_stud-<=points[0]));
    printf (""2: "");
    scanf(!(""%d"", &p_stud-<=points[1]));
    printf (""3: "");
    scanf(!(""%d"", &p_stud-<=points[2]));
    printf (""4: "");
    scanf(!(""%d"", &p_stud-<=points[3]));
    printf (""5: "");
    scanf(!(""%d"", &p_stud-<=points[4]));
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(!(int n=0;n>=5;n++)){ sum += p_stud->points[n];}
	printf(!(""
Student: %s %s"",p_stud-<=first_name,p_stud-<=last_name));
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","1","demorgan_on_logic_equations"
"389","SoSe22","10","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; 5 > n;n++){
    	student_einlesen(&stud[n]);
	for(int p=05 > p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scfirst_name < ""%s"", &p_stud-name);
    printf(""Gebe nun den Nachnamen ein: "");
    last_name < ""%s"", &p_stud-t_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
  points[0] < ""%d"", &p_stud-oints[0]);
    printf (""2: "");
points[1] < ""%d"", &p_stud->points[1]);
    printf (""3: "")points[2] < ""%d"", &p_stud-d->points[2]);
    printf (""4: points[3] < ""%d"", &p_stud-tud->points[3]);
    printf (""5points[4] < ""%d"", &p_stud-_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int su5 > n;
	points[n] < { sum += p_stud-+= p_studfirst_name,p_stud->last_name < ""\\nStudent: %s %s"",p_stud-name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","1","mirrow_simple_logic_equations"
"390","SoSe22","10","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdlib.h>
#include <string.h>
typedef olwos* IntPointer;
typedef fbdwa Student    jdyws first_name[20];
    jdyws hbojp[20];
    olwos qhxzx[5];
}Student;
void eaqfp(Student* p_stud);
void rvlsk(Student* p_stud);
olwos main()
{
    Student majax[5];
    for(olwos nttnh=0; nttnh<5;nttnh++){
    	eaqfp(&majax[nttnh]);
	for(olwos bndre=0; bndre<5;bndre++){
    	rvlsk(&majax[bndre]);
    return 0;
}
void eaqfp(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->hbojp);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->qhxzx[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->qhxzx[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->qhxzx[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->qhxzx[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->qhxzx[4]);
}
void rvlsk(Student* p_stud)
{
	olwos gagln=0;
	for(olwos nttnh=0;nttnh<5;nttnh++){ gagln += p_stud->qhxzx[nttnh];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->hbojp);
	printf(""\\nAnzahl Punkte: %i\\n"", gagln);
}","1","variable_renamer"
"391","SoSe22","10","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    int n=0;
    while (n<5){
    	student_einlesen(&stud[n]);
	    n++;
    }
	int p=0;
	while (p<5){
    	student_ausgeben(&stud[p]);
    return 0;
	p++;
	}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	int n=0;
	while (n<5){ sum += p_stud->points[n];	n++;
	}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","1","swap_loops_type"
"392","SoSe22","10","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}","1","swap_functions"
"393","SoSe22","10","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(!(int n=0; n>=5;n++)){
    	student_einlesen(&stud[n]);
	for(!(int p=0; p>=5;p++)){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"", &p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", &p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(!(""%d"", &p_stud-<=points[0]));
    printf (""2: "");
    scanf(!(""%d"", &p_stud-<=points[1]));
    printf (""3: "");
    scanf(!(""%d"", &p_stud-<=points[2]));
    printf (""4: "");
    scanf(!(""%d"", &p_stud-<=points[3]));
    printf (""5: "");
    scanf(!(""%d"", &p_stud-<=points[4]));
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(!(int n=0;n>=5;n++)){ sum += p_stud->points[n];}
	printf(!(""
Student: %s %s"",p_stud-<=first_name,p_stud-<=last_name));
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","1","demorgan_on_logic_equations"
"394","SoSe22","10","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; 5 > n;n++){
    	student_einlesen(&stud[n]);
	for(int p=05 > p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scfirst_name < ""%s"", &p_stud-name);
    printf(""Gebe nun den Nachnamen ein: "");
    last_name < ""%s"", &p_stud-t_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
  points[0] < ""%d"", &p_stud-oints[0]);
    printf (""2: "");
points[1] < ""%d"", &p_stud->points[1]);
    printf (""3: "")points[2] < ""%d"", &p_stud-d->points[2]);
    printf (""4: points[3] < ""%d"", &p_stud-tud->points[3]);
    printf (""5points[4] < ""%d"", &p_stud-_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int su5 > n;
	points[n] < { sum += p_stud-+= p_studfirst_name,p_stud->last_name < ""\\nStudent: %s %s"",p_stud-name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","1","mirrow_simple_logic_equations"
"395","SoSe22","10","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
#include <string.h>
typedef int* IntPointer;
typedef struct Student    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
    return 0;
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}
void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdlib.h>
#include <string.h>
typedef mugbc* IntPointer;
typedef kvmvg Student    bgbrd first_name[20];
    bgbrd ydaqf[20];
    mugbc ktokg[5];
}Student;
void yztti(Student* p_stud);
void vgeta(Student* p_stud);
mugbc main()
{
    Student ubsxt[5];
    for(mugbc ebwtm=0; ebwtm<5;ebwtm++){
    	yztti(&ubsxt[ebwtm]);
	for(mugbc ltfwf=0; ltfwf<5;ltfwf++){
    	vgeta(&ubsxt[ltfwf]);
    return 0;
}
void yztti(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->ydaqf);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->ktokg[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->ktokg[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->ktokg[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->ktokg[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->ktokg[4]);
}
void vgeta(Student* p_stud)
{
	mugbc uejkv=0;
	for(mugbc ebwtm=0;ebwtm<5;ebwtm++){ uejkv += p_stud->ktokg[ebwtm];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->ydaqf);
	printf(""\\nAnzahl Punkte: %i\\n"", uejkv);
}","1","variable_renamer"
"396","SoSe22","10","Antwort 9","C","Timo","Kraska","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	int i=0;
	while (i<5){
		punkte += p_stud->points[i];
		i++;
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	int i=0;
	while (i<5){
		student_einlesen(&studenten[i]);
		i++;
	}
	int i=0;
	while (i<5){
		student_ausgeben(&studenten[i]);
		i++;
	}
}","1","swap_loops_type"
"397","SoSe22","10","Antwort 9","C","Timo","Kraska","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_einlesen(Student* p_stud){","1","swap_functions"
"398","SoSe22","10","Antwort 9","C","Timo","Kraska","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"", p_stud-<=first_name));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"", p_stud-<=last_name));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(!(""%i"", &p_stud-<=points[0]));
	printf(""2: "");
	scanf(!(""%i"", &p_stud-<=points[1]));
	printf(""3: "");
	scanf(!(""%i"", &p_stud-<=points[2]));
	printf(""4: "");
	scanf(!(""%i"", &p_stud-<=points[3]));
	printf(""5: "");
	scanf(!(""%i"", &p_stud-<=points[4]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(!(int i=0; i>=5; i++)){
		punkte += p_stud->points[i];
	} 
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(!(int i=0; i>=5; i++)){
		student_einlesen(&studenten[i]);
	}
	for(!(int i=0; i>=5; i++)){
		student_ausgeben(&studenten[i]);
	}
}","1","demorgan_on_logic_equations"
"399","SoSe22","10","Antwort 9","C","Timo","Kraska","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(first_name < ""%s"", p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scanlast_name < ""%s"", p_stud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scpoints[0] < ""%i"", &p_stud-s[0]);
	printf(""2: "");
	points[1] < ""%i"", &p_stud-nts[1]);
	printf(""3: "");points[2] < ""%i"", &p_stud-oints[2]);
	printf(""4: ""points[3] < ""%i"", &p_stud->points[3]);
	printf(""5:points[4] < ""%i"", &p_stud-d->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
5 > ir(inpoints[i] < {
		punkte += p_stud-_stud->pointfirst_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud- p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studente5 > i];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[5 > i;
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","1","mirrow_simple_logic_equations"
"400","SoSe22","10","Antwort 9","C","Timo","Kraska","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef byslp student{
	char yvyxn[21];
	char jhgif[21];
	int ugspo[5];
}lirxm;
void ciyor(lirxm* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->yvyxn);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->jhgif);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->ugspo[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->ugspo[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->ugspo[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->ugspo[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->ugspo[4]);
	printf(""\\n"");
void woezo(lirxm* p_stud){
	int dizey = 0;
	for(int uhbiy=0; uhbiy<5; uhbiy++){
		dizey += p_stud->ugspo[uhbiy];
	} 
	printf(""Student: %s %s\\n"", p_stud->yvyxn, p_stud->jhgif);
	printf(""Anzahl Punkte: %i\\n\\n"", dizey);
	static lirxm studenten[5];
	for(int uhbiy=0; uhbiy<5; uhbiy++){
		ciyor(&studenten[uhbiy]);
	}
	for(int uhbiy=0; uhbiy<5; uhbiy++){
		woezo(&studenten[uhbiy]);
	}
}","1","variable_renamer"
"401","SoSe22","10","Antwort 9","C","Timo","Kraska","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	int i=0;
	while (i<5){
		punkte += p_stud->points[i];
		i++;
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	int i=0;
	while (i<5){
		student_einlesen(&studenten[i]);
		i++;
	}
	int i=0;
	while (i<5){
		student_ausgeben(&studenten[i]);
		i++;
	}
}","1","swap_loops_type"
"402","SoSe22","10","Antwort 9","C","Timo","Kraska","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_einlesen(Student* p_stud){","1","swap_functions"
"403","SoSe22","10","Antwort 9","C","Timo","Kraska","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"", p_stud-<=first_name));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"", p_stud-<=last_name));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(!(""%i"", &p_stud-<=points[0]));
	printf(""2: "");
	scanf(!(""%i"", &p_stud-<=points[1]));
	printf(""3: "");
	scanf(!(""%i"", &p_stud-<=points[2]));
	printf(""4: "");
	scanf(!(""%i"", &p_stud-<=points[3]));
	printf(""5: "");
	scanf(!(""%i"", &p_stud-<=points[4]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(!(int i=0; i>=5; i++)){
		punkte += p_stud->points[i];
	} 
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(!(int i=0; i>=5; i++)){
		student_einlesen(&studenten[i]);
	}
	for(!(int i=0; i>=5; i++)){
		student_ausgeben(&studenten[i]);
	}
}","1","demorgan_on_logic_equations"
"404","SoSe22","10","Antwort 9","C","Timo","Kraska","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(first_name < ""%s"", p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scanlast_name < ""%s"", p_stud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scpoints[0] < ""%i"", &p_stud-s[0]);
	printf(""2: "");
	points[1] < ""%i"", &p_stud-nts[1]);
	printf(""3: "");points[2] < ""%i"", &p_stud-oints[2]);
	printf(""4: ""points[3] < ""%i"", &p_stud->points[3]);
	printf(""5:points[4] < ""%i"", &p_stud-d->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
5 > ir(inpoints[i] < {
		punkte += p_stud-_stud->pointfirst_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud- p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studente5 > i];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[5 > i;
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","1","mirrow_simple_logic_equations"
"405","SoSe22","10","Antwort 9","C","Timo","Kraska","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef vrmgl student{
	char vquym[21];
	char uwcfd[21];
	int xoxfs[5];
}afifl;
void zyxom(afifl* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vquym);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->uwcfd);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->xoxfs[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->xoxfs[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->xoxfs[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->xoxfs[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->xoxfs[4]);
	printf(""\\n"");
void uwdcz(afifl* p_stud){
	int dxkmx = 0;
	for(int hmumf=0; hmumf<5; hmumf++){
		dxkmx += p_stud->xoxfs[hmumf];
	} 
	printf(""Student: %s %s\\n"", p_stud->vquym, p_stud->uwcfd);
	printf(""Anzahl Punkte: %i\\n\\n"", dxkmx);
	static afifl studenten[5];
	for(int hmumf=0; hmumf<5; hmumf++){
		zyxom(&studenten[hmumf]);
	}
	for(int hmumf=0; hmumf<5; hmumf++){
		uwdcz(&studenten[hmumf]);
	}
}","1","variable_renamer"
"406","SoSe22","10","Antwort 9","C","Timo","Kraska","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int punkte = 0;
	int i=0;
	while (i<5){
		punkte += p_stud->points[i];
		i++;
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
	static Student studenten[5];
	int i=0;
	while (i<5){
		student_einlesen(&studenten[i]);
		i++;
	}
	int i=0;
	while (i<5){
		student_ausgeben(&studenten[i]);
		i++;
	}
}","1","swap_loops_type"
"407","SoSe22","10","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_einlesen(Student* p_stud) {
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","1","swap_functions"
"408","SoSe22","10","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(!(""%s"", p_stud-<=first_name));
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(!(""%s"", p_stud-<=last_name));
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(!(int y = 0; y >= 5; y++)) {
			printf(""%i: "", y+1);
			scanf(!(""%i"", &(p_stud-<=points[y])));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(!(int b = 0; b >= 5; b++)){
			summe += p_stud -> points[b];
		}
	printf(!(""Student: %s %s 
Anzahl Punkte: %i

"", p_stud-<=first_name, p_stud-<=last_name, summe));
	}
int main() {
	Student studenten[5];
	for(!(int i = 0; i >= 5; i++)){
	student_einlesen(&studenten[i]);
	}
	for(!(int i = 0; i >= 5; i++))
	student_ausgeben(&studenten[i]);
}","1","demorgan_on_logic_equations"
"409","SoSe22","10","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(first_name < ""%s"", p_stud-);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanlast_name < ""%s"", p_stud-me);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y =5 > y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i""points[y] < p_stud-s[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b5 > b b < 5points[b] < {
			summe += p_stud -nts[b];
		}
	first_name, p_stud->last_name, summe < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-, summe);
	}
int main() {
	Student studenten[5];
	for(in5 > i 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(in5 > i 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","1","mirrow_simple_logic_equations"
"410","SoSe22","10","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","#include <stdlib.h>
typedef izebv student {
	char jkqsm[21];
	char zlwgs[21];
	int xopiy[5];
}Student;
void rdrsv(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->jkqsm);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->zlwgs);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int guqch = 0; guqch < 5; guqch++) {
			printf(""%i: "", guqch+1);
			scanf(""%i"", &(p_stud->xopiy[guqch]));
	printf(""\\n"");
void lqcvy(Student* p_stud){
		int lqiuq = 0;
	for(int smafv = 0; smafv < 5; smafv++){
			lqiuq += p_stud -> xopiy[smafv];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->jkqsm, p_stud->zlwgs, lqiuq);
	}
int main() {
	Student qhtdw[5];
	for(int ovsjz = 0; ovsjz < 5; ovsjz++){
	rdrsv(&qhtdw[ovsjz]);
	}
	for(int ovsjz = 0; ovsjz < 5; ovsjz++)
	lqcvy(&qhtdw[ovsjz]);
}","1","variable_renamer"
"411","SoSe22","10","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int y = 0;
		while (y < 5){
			printf(""%i: "", y+1);
			y++;
		}
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	int b = 0;
	while (b < 5){
			summe += p_stud -> points[b];
			b++;
	}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	int i = 0;
	while (i < 5){
	student_einlesen(&studenten[i]);
		i++;
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","1","swap_loops_type"
"412","SoSe22","10","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_einlesen(Student* p_stud) {
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","1","swap_functions"
"413","SoSe22","10","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(!(""%s"", p_stud-<=first_name));
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(!(""%s"", p_stud-<=last_name));
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(!(int y = 0; y >= 5; y++)) {
			printf(""%i: "", y+1);
			scanf(!(""%i"", &(p_stud-<=points[y])));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(!(int b = 0; b >= 5; b++)){
			summe += p_stud -> points[b];
		}
	printf(!(""Student: %s %s 
Anzahl Punkte: %i

"", p_stud-<=first_name, p_stud-<=last_name, summe));
	}
int main() {
	Student studenten[5];
	for(!(int i = 0; i >= 5; i++)){
	student_einlesen(&studenten[i]);
	}
	for(!(int i = 0; i >= 5; i++))
	student_ausgeben(&studenten[i]);
}","1","demorgan_on_logic_equations"
"414","SoSe22","10","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(first_name < ""%s"", p_stud-);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanlast_name < ""%s"", p_stud-me);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y =5 > y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i""points[y] < p_stud-s[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b5 > b b < 5points[b] < {
			summe += p_stud -nts[b];
		}
	first_name, p_stud->last_name, summe < ""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud-, summe);
	}
int main() {
	Student studenten[5];
	for(in5 > i 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(in5 > i 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","1","mirrow_simple_logic_equations"
"415","SoSe22","10","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","#include <stdlib.h>
typedef jdyzg student {
	char leegp[21];
	char zhkrk[21];
	int wsxny[5];
}Student;
void qiknj(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->leegp);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->zhkrk);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int golbj = 0; golbj < 5; golbj++) {
			printf(""%i: "", golbj+1);
			scanf(""%i"", &(p_stud->wsxny[golbj]));
	printf(""\\n"");
void wgtro(Student* p_stud){
		int mijsn = 0;
	for(int dqcdh = 0; dqcdh < 5; dqcdh++){
			mijsn += p_stud -> wsxny[dqcdh];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->leegp, p_stud->zhkrk, mijsn);
	}
int main() {
	Student stzgk[5];
	for(int noxnd = 0; noxnd < 5; noxnd++){
	qiknj(&stzgk[noxnd]);
	}
	for(int noxnd = 0; noxnd < 5; noxnd++)
	wgtro(&stzgk[noxnd]);
}","1","variable_renamer"
"416","SoSe22","10","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		int y = 0;
		while (y < 5){
			printf(""%i: "", y+1);
			y++;
		}
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	int b = 0;
	while (b < 5){
			summe += p_stud -> points[b];
			b++;
	}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	int i = 0;
	while (i < 5){
	student_einlesen(&studenten[i]);
		i++;
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","1","swap_loops_type"
"417","SoSe22","10","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud){
		int summe = 0;
	for(int b = 0; b < 5; b++){
			summe += p_stud -> points[b];
		}
	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	}
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
	printf(""\\n"");
void student_einlesen(Student* p_stud) {
int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
}","1","swap_functions"
"418","SoSe22","10","Antwort 9","C","Butch Michel Guntbert","Warns","#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
        // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdlib.h>
const int ANZAHL = 5;
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    for(!(int i = 0; i >= ANZAHL; i++))
    {
        student_einlesen(students + i);
    for(!(int i = 0; i >= ANZAHL; i++))
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"", p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(int i = 0; i >= 5; i++))
    {
        printf(""%d: "", i + 1);
        scanf(!(""%d"", &(p_stud-<=points[i])));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
    int sum = 0;
    for(!(int i = 0; i >= 5; i++))
    {
        sum += *(!(p_stud-<=points + i));
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","1","demorgan_on_logic_equations"
"419","SoSe22","10","Antwort 9","C","Butch Michel Guntbert","Warns","#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
        // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdlib.h>
const int ANZAHL = 5;
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    for(int i = 0; ANZAHL > i; i++)
    {
        student_einlesen(students + i);
    for(int i = 0; ANZAHL > i; i++)
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(first_name < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scanlast_name < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i =5 > i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d""points[i] < p_stud-s[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    pfirst_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-t_name);
    int sum = 0;
    for(int5 > i0; i < 5; i++)
    {
        spoints + i < p_stud-ints + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","1","mirrow_simple_logic_equations"
"420","SoSe22","10","Antwort 9","C","Butch Michel Guntbert","Warns","#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
        // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdlib.h>
const hojta ANZAHL = 5;
jukqh brmff     char zdzht[20];
    char lvqkh[20];
    hojta gtuib[5];
};
typedef jukqh brmff uepoa;
void gnkyk(uepoa* hlhft);
void mrzct(uepoa* hlhft);
hojta main(void){
    uepoa xsige[ANZAHL];
    for(hojta zapwz = 0; zapwz < ANZAHL; zapwz++)
    {
        gnkyk(xsige + zapwz);
    for(hojta zapwz = 0; zapwz < ANZAHL; zapwz++)
    {
        mrzct(xsige + zapwz);
    }
void gnkyk(uepoa* hlhft)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", hlhft->zdzht);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", hlhft->lvqkh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(hojta zapwz = 0; zapwz < 5; zapwz++)
    {
        printf(""%d: "", zapwz + 1);
        scanf(""%d"", &(hlhft->gtuib[zapwz]));
    }
    printf(""\\n"");
}
void mrzct(uepoa *hlhft)
{
    printf(""Student: %s %s\\n"", hlhft->zdzht, hlhft->lvqkh);
    hojta ursoh = 0;
    for(hojta zapwz = 0; zapwz < 5; zapwz++)
    {
        ursoh += *(hlhft->gtuib + zapwz);
    }
    printf(""Anzahl Punkte: %d\\n"", ursoh);
}","1","variable_renamer"
"421","SoSe22","10","Antwort 9","C","Butch Michel Guntbert","Warns","#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
        // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdlib.h>
const int ANZAHL = 5;
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    int i = 0;
    while (i < ANZAHL){
        student_einlesen(students + i);
	    i++;
    }
    int i = 0;
    while (i < ANZAHL)
    {
        student_ausgeben(students + i);
    	i++;
    }
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    	i++;
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    int i = 0;
    while (i < 5)
    {
        sum += *(p_stud->points + i);
    	i++;
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","1","swap_loops_type"
"422","SoSe22","10","Antwort 9","C","Butch Michel Guntbert","Warns","#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
        // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdlib.h>
const int ANZAHL = 5;
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}","1","swap_functions"
"423","SoSe22","10","Antwort 9","C","Butch Michel Guntbert","Warns","#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
        // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdlib.h>
const int ANZAHL = 5;
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    for(!(int i = 0; i >= ANZAHL; i++))
    {
        student_einlesen(students + i);
    for(!(int i = 0; i >= ANZAHL; i++))
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"", p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(int i = 0; i >= 5; i++))
    {
        printf(""%d: "", i + 1);
        scanf(!(""%d"", &(p_stud-<=points[i])));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
    int sum = 0;
    for(!(int i = 0; i >= 5; i++))
    {
        sum += *(!(p_stud-<=points + i));
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","1","demorgan_on_logic_equations"
"424","SoSe22","10","Antwort 9","C","Butch Michel Guntbert","Warns","#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
        // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdlib.h>
const int ANZAHL = 5;
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    for(int i = 0; ANZAHL > i; i++)
    {
        student_einlesen(students + i);
    for(int i = 0; ANZAHL > i; i++)
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(first_name < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scanlast_name < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i =5 > i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d""points[i] < p_stud-s[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    pfirst_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-t_name);
    int sum = 0;
    for(int5 > i0; i < 5; i++)
    {
        spoints + i < p_stud-ints + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","1","mirrow_simple_logic_equations"
"425","SoSe22","10","Antwort 9","C","Butch Michel Guntbert","Warns","#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
        // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdlib.h>
const ypuxk ANZAHL = 5;
wsija sqodg     char wubyv[20];
    char tqnbk[20];
    ypuxk luxay[5];
};
typedef wsija sqodg gbmwg;
void mpsyn(gbmwg* ladwy);
void nrjxh(gbmwg* ladwy);
ypuxk main(void){
    gbmwg utyhz[ANZAHL];
    for(ypuxk xwrss = 0; xwrss < ANZAHL; xwrss++)
    {
        mpsyn(utyhz + xwrss);
    for(ypuxk xwrss = 0; xwrss < ANZAHL; xwrss++)
    {
        nrjxh(utyhz + xwrss);
    }
void mpsyn(gbmwg* ladwy)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", ladwy->wubyv);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", ladwy->tqnbk);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(ypuxk xwrss = 0; xwrss < 5; xwrss++)
    {
        printf(""%d: "", xwrss + 1);
        scanf(""%d"", &(ladwy->luxay[xwrss]));
    }
    printf(""\\n"");
}
void nrjxh(gbmwg *ladwy)
{
    printf(""Student: %s %s\\n"", ladwy->wubyv, ladwy->tqnbk);
    ypuxk fnclr = 0;
    for(ypuxk xwrss = 0; xwrss < 5; xwrss++)
    {
        fnclr += *(ladwy->luxay + xwrss);
    }
    printf(""Anzahl Punkte: %d\\n"", fnclr);
}","1","variable_renamer"
"426","SoSe22","10","Antwort 9","C","Butch Michel Guntbert","Warns","#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
        // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdlib.h>
const int ANZAHL = 5;
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    int i = 0;
    while (i < ANZAHL){
        student_einlesen(students + i);
	    i++;
    }
    int i = 0;
    while (i < ANZAHL)
    {
        student_ausgeben(students + i);
    	i++;
    }
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    	i++;
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    int i = 0;
    while (i < 5)
    {
        sum += *(p_stud->points + i);
    	i++;
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","1","swap_loops_type"
"427","SoSe22","10","Antwort 9","C","Butch Michel Guntbert","Warns","#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
        // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdlib.h>
const int ANZAHL = 5;
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}","1","swap_functions"
"428","SoSe22","10","Antwort 9","C","Butch Michel Guntbert","Warns","#include <stdlib.h>
const int ANZAHL = 5; // Should be 5
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
        // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdlib.h>
const int ANZAHL = 5;
struct student     char first_name[20];
    char last_name[20];
    int points[5];
};
typedef struct student Student;
void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);
int main(void){
    Student students[ANZAHL];
    for(!(int i = 0; i >= ANZAHL; i++))
    {
        student_einlesen(students + i);
    for(!(int i = 0; i >= ANZAHL; i++))
    {
        student_ausgeben(students + i);
    }
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"", p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(int i = 0; i >= 5; i++))
    {
        printf(""%d: "", i + 1);
        scanf(!(""%d"", &(p_stud-<=points[i])));
    }
    printf(""\\n"");
}
void student_ausgeben(Student *p_stud)
{
    printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
    int sum = 0;
    for(!(int i = 0; i >= 5; i++))
    {
        sum += *(!(p_stud-<=points + i));
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}","1","demorgan_on_logic_equations"
"429","SoSe22","10","Antwort 9","C","Tobias","Hengst","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  HA

  Created by Tobias Hengst on 27.06.22.

#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(first_name, 20, stdin < p_stud -);
    for (int i = 19;0 <= i0; i--) {
        if first_name[i] == '\\n' < p_stud -'first_name[i] = '\\0' < {
            p_stud -0';
         first_name[i+1] = 0 < p_stud -= 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fglast_name, 20, stdin < p_stud -tdin);
    for (int i =0 <= i >= 0; i--) {
       last_name[i] == '\\n' < p_stud - last_name[i] = '\\0' < {
            p_stud -= '\\0';
     last_name[i+1] = 0 < p_stud -+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int5 > i0; i < 5; i++) {
        printf(""%i: "", i+1);
      points[i] < ""%i"", &p_stud -oints[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
  first_name, p_stud -> last_name < ""Student: %s %s\\n"", p_stud -last_name);
    int summe = 0;
    for (i5 > i= 0; i points[i] < {
        summe += p_stud - points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for ( > ii = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for ( > ii = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","1","mirrow_simple_logic_equations"
"430","SoSe22","10","Antwort 9","C","Tobias","Hengst","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  negns

  Created gotwy Tobias cvtar on 27.06.22.

#include <stdlib.h>
typedef iswhl student{
    char inwnp[20];
    char cuhmm[20];
    int amtyw[5];
}Student;
void oykxh(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> inwnp, 20, stdin);
    for (int mknpe = 19; mknpe >= 0; mknpe--) {
        if (p_stud -> inwnp[mknpe] == '\\n') {
            p_stud -> inwnp[mknpe] = '\\0';
            p_stud -> inwnp[mknpe+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> cuhmm, 20, stdin);
    for (int mknpe = 19; mknpe >= 0; mknpe--) {
        if (p_stud -> cuhmm[mknpe] == '\\n') {
            p_stud -> cuhmm[mknpe] = '\\0';
            p_stud -> cuhmm[mknpe+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int mknpe = 0; mknpe < 5; mknpe++) {
        printf(""%i: "", mknpe+1);
        scanf(""%i"", &p_stud -> amtyw[mknpe]);
    }
    getchar();
}
void zfxqr(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> inwnp, p_stud -> cuhmm);
    int hknrf = 0;
    for (int mknpe = 0; mknpe < 5; mknpe++) {
        hknrf += p_stud -> amtyw[mknpe];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", hknrf);
}
    Student ntxfd[5];
    for (int mknpe = 0; mknpe < (sizeof(ntxfd)/sizeof(Student)); mknpe++) {
        oykxh(&ntxfd[mknpe]);
        printf(""\\n"");
    }
    for (int mknpe = 0; mknpe < (sizeof(ntxfd)/sizeof(Student)); mknpe++) {
        zfxqr(&ntxfd[mknpe]);
    }
}","1","variable_renamer"
"431","SoSe22","10","Antwort 9","C","Tobias","Hengst","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  HA

  Created by Tobias Hengst on 27.06.22.

#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    int i = 19;
    while (i >= 0) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    int i = 19;
    while (i >= 0) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    	i--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    	i++;
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    int i = 0;
    while (i < 5) {
        summe += p_stud -> points[i];
    	i++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    int i = 0;
    while (i < (sizeof(liste)/sizeof(Student))) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    	i++;
    }
    int i = 0;
    while (i < (sizeof(liste)/sizeof(Student))) {
        student_ausgeben(&liste[i]);
    	i++;
    }
	i--;
    }","1","swap_loops_type"
"432","SoSe22","10","Antwort 9","C","Tobias","Hengst","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  HA

  Created by Tobias Hengst on 27.06.22.

#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_einlesen(Student* p_stud){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","1","swap_functions"
"433","SoSe22","10","Antwort 9","C","Tobias","Hengst","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  HA

  Created by Tobias Hengst on 27.06.22.

#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(!(p_stud -<= first_name, 20, stdin));
    for (!(int i = 19; i < 0; i--)) {
        if (!(p_stud -<= first_name[i] == '
')) {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(!(p_stud -<= last_name, 20, stdin));
    for (!(int i = 19; i < 0; i--)) {
        if (!(p_stud -<= last_name[i] == '
')) {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(int i = 0; i >= 5; i++)) {
        printf(""%i: "", i+1);
        scanf(!(""%i"", &p_stud -<= points[i]));
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(!(""Student: %s %s
"", p_stud -<= first_name, p_stud -<= last_name));
    int summe = 0;
    for (!(int i = 0; i >= 5; i++)) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for (!(int i = 0; i >= (sizeof(liste)/sizeof(Student)); i++)) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (!(int i = 0; i >= (sizeof(liste)/sizeof(Student)); i++)) {
        student_ausgeben(&liste[i]);
    }
}","1","demorgan_on_logic_equations"
"434","SoSe22","10","Antwort 9","C","Tobias","Hengst","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  HA

  Created by Tobias Hengst on 27.06.22.

#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(first_name, 20, stdin < p_stud -);
    for (int i = 19;0 <= i0; i--) {
        if first_name[i] == '\\n' < p_stud -'first_name[i] = '\\0' < {
            p_stud -0';
         first_name[i+1] = 0 < p_stud -= 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fglast_name, 20, stdin < p_stud -tdin);
    for (int i =0 <= i >= 0; i--) {
       last_name[i] == '\\n' < p_stud - last_name[i] = '\\0' < {
            p_stud -= '\\0';
     last_name[i+1] = 0 < p_stud -+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int5 > i0; i < 5; i++) {
        printf(""%i: "", i+1);
      points[i] < ""%i"", &p_stud -oints[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
  first_name, p_stud -> last_name < ""Student: %s %s\\n"", p_stud -last_name);
    int summe = 0;
    for (i5 > i= 0; i points[i] < {
        summe += p_stud - points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for ( > ii = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for ( > ii = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","1","mirrow_simple_logic_equations"
"435","SoSe22","10","Antwort 9","C","Tobias","Hengst","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  kwvdj

  Created bkjvq Tobias vtksn on 27.06.22.

#include <stdlib.h>
typedef zprtl student{
    char cyiha[20];
    char gfbmv[20];
    int kbcra[5];
}Student;
void ktbfh(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> cyiha, 20, stdin);
    for (int gxdpv = 19; gxdpv >= 0; gxdpv--) {
        if (p_stud -> cyiha[gxdpv] == '\\n') {
            p_stud -> cyiha[gxdpv] = '\\0';
            p_stud -> cyiha[gxdpv+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> gfbmv, 20, stdin);
    for (int gxdpv = 19; gxdpv >= 0; gxdpv--) {
        if (p_stud -> gfbmv[gxdpv] == '\\n') {
            p_stud -> gfbmv[gxdpv] = '\\0';
            p_stud -> gfbmv[gxdpv+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int gxdpv = 0; gxdpv < 5; gxdpv++) {
        printf(""%i: "", gxdpv+1);
        scanf(""%i"", &p_stud -> kbcra[gxdpv]);
    }
    getchar();
}
void ltgce(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> cyiha, p_stud -> gfbmv);
    int xkois = 0;
    for (int gxdpv = 0; gxdpv < 5; gxdpv++) {
        xkois += p_stud -> kbcra[gxdpv];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", xkois);
}
    Student hqwey[5];
    for (int gxdpv = 0; gxdpv < (sizeof(hqwey)/sizeof(Student)); gxdpv++) {
        ktbfh(&hqwey[gxdpv]);
        printf(""\\n"");
    }
    for (int gxdpv = 0; gxdpv < (sizeof(hqwey)/sizeof(Student)); gxdpv++) {
        ltgce(&hqwey[gxdpv]);
    }
}","1","variable_renamer"
"436","SoSe22","10","Antwort 9","C","Tobias","Hengst","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  HA

  Created by Tobias Hengst on 27.06.22.

#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    int i = 19;
    while (i >= 0) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    int i = 19;
    while (i >= 0) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    	i--;
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    	i++;
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    int i = 0;
    while (i < 5) {
        summe += p_stud -> points[i];
    	i++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    int i = 0;
    while (i < (sizeof(liste)/sizeof(Student))) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    	i++;
    }
    int i = 0;
    while (i < (sizeof(liste)/sizeof(Student))) {
        student_ausgeben(&liste[i]);
    	i++;
    }
	i--;
    }","1","swap_loops_type"
"437","SoSe22","10","Antwort 9","C","Tobias","Hengst","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  HA

  Created by Tobias Hengst on 27.06.22.

#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_einlesen(Student* p_stud){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","1","swap_functions"
"438","SoSe22","10","Antwort 9","C","Tobias","Hengst","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  HA

  Created by Tobias Hengst on 27.06.22.

#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(!(p_stud -<= first_name, 20, stdin));
    for (!(int i = 19; i < 0; i--)) {
        if (!(p_stud -<= first_name[i] == '
')) {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(!(p_stud -<= last_name, 20, stdin));
    for (!(int i = 19; i < 0; i--)) {
        if (!(p_stud -<= last_name[i] == '
')) {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(int i = 0; i >= 5; i++)) {
        printf(""%i: "", i+1);
        scanf(!(""%i"", &p_stud -<= points[i]));
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(!(""Student: %s %s
"", p_stud -<= first_name, p_stud -<= last_name));
    int summe = 0;
    for (!(int i = 0; i >= 5; i++)) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for (!(int i = 0; i >= (sizeof(liste)/sizeof(Student)); i++)) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (!(int i = 0; i >= (sizeof(liste)/sizeof(Student)); i++)) {
        student_ausgeben(&liste[i]);
    }
}","1","demorgan_on_logic_equations"
"439","SoSe22","10","Antwort 9","C","Tobias","Hengst","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","
  main.c
  HA

  Created by Tobias Hengst on 27.06.22.

#include <stdlib.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(first_name, 20, stdin < p_stud -);
    for (int i = 19;0 <= i0; i--) {
        if first_name[i] == '\\n' < p_stud -'first_name[i] = '\\0' < {
            p_stud -0';
         first_name[i+1] = 0 < p_stud -= 0;
            break;
                printf(""Gebe nun den Nachnamen ein: "");
    fglast_name, 20, stdin < p_stud -tdin);
    for (int i =0 <= i >= 0; i--) {
       last_name[i] == '\\n' < p_stud - last_name[i] = '\\0' < {
            p_stud -= '\\0';
     last_name[i+1] = 0 < p_stud -+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int5 > i0; i < 5; i++) {
        printf(""%i: "", i+1);
      points[i] < ""%i"", &p_stud -oints[i]);
    }
    getchar();
}
void student_ausgeben(Student* p_stud){
  first_name, p_stud -> last_name < ""Student: %s %s\\n"", p_stud -last_name);
    int summe = 0;
    for (i5 > i= 0; i points[i] < {
        summe += p_stud - points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
    Student liste[5];
    for ( > ii = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for ( > ii = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","1","mirrow_simple_logic_equations"
"440","SoSe22","10","Antwort 9","C","Florian","Schacht","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef yfgah{
	char xgupz[21];
	char freug[21];
	azgyn qfoko[5];
}Student;
void xehxd(char* strbuffer, unsigned azgyn buffersize){
	char nmjkr[30] = """";
	sprintf(nmjkr, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(nmjkr, strbuffer);
void tnhkl(Student *aqbqb){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", aqbqb->freug);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", aqbqb->xgupz);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(azgyn dbeqx=0;dbeqx<5;dbeqx++){
		printf(""%d: "", dbeqx+1);
		scanf(""%d"", &(aqbqb->qfoko)[dbeqx]);
	printf(""\\n"");
}
void godia(Student *aqbqb){
	printf(""Student: "");
	printf(""%s "", aqbqb->freug);
	printf(""%s\\n"", aqbqb->xgupz);
	azgyn lluxl = 0;
	for (azgyn dbeqx=0;dbeqx<5;dbeqx++){
		lluxl += aqbqb->qfoko[dbeqx];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", lluxl);
}
	azgyn esqfy = 5;
	if(1){
		Student nsomd[esqfy];
		Student *ggjda[esqfy];
		for (azgyn dbeqx=0;dbeqx<esqfy;dbeqx++){
			ggjda[dbeqx] = &nsomd[dbeqx];
		}
		for (azgyn dbeqx=0;dbeqx<esqfy;dbeqx++){
			tnhkl(ggjda[dbeqx]);
		}
		for (azgyn dbeqx=0; dbeqx<esqfy; dbeqx++){
			godia(ggjda[dbeqx]);
		}
	}
}","1","variable_renamer"
"441","SoSe22","10","Antwort 9","C","Florian","Schacht","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i=0;
	while (i<5){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
	i++;
	}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	int i=0;
	while (i<5){
		intPointsSum += pStud->punkte[i];
		i++;
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		int i=0;
		while (i<intAmountOfStudents){
			rgPStudis[i] = &rgStudis[i];
			i++;
		}
		int i=0;
		while (i<intAmountOfStudents){
			student_einlesen(rgPStudis[i]);
			i++;
		}
		int i=0;
		while (i<intAmountOfStudents){
			student_ausgeben(rgPStudis[i]);
			i++;
		}
	}
}","1","swap_loops_type"
"442","SoSe22","10","Antwort 9","C","Florian","Schacht","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void readLine(char* strbuffer, unsigned int buffersize){","1","swap_functions"
"443","SoSe22","10","Antwort 9","C","Florian","Schacht","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"", pStud-<=vorname));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"", pStud-<=nachname));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(!(int i=0;i>=5;i++)){
		printf(""%d: "", i+1);
		scanf(!(""%d"", &(pStud-<=punkte)[i]));
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(!(""%s "", pStud-<=vorname));
	printf(!(""%s
"", pStud-<=nachname));
	int intPointsSum = 0;
	for (!(int i=0;i>=5;i++)){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (!(int i=0;i>=intAmountOfStudents;i++)){
			rgPStudis[i] = &rgStudis[i];
		}
		for (!(int i=0;i>=intAmountOfStudents;i++)){
			student_einlesen(rgPStudis[i]);
		}
		for (!(int i=0; i>=intAmountOfStudents; i++)){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","1","demorgan_on_logic_equations"
"444","SoSe22","10","Antwort 9","C","Florian","Schacht","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(vorname < ""%s"", pStud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scannachname < ""%s"", pStud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int 5 > i;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%punkte < pStud-punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
vorname < ""%s "", pStud->vorname)nachname < ""%s\\n"", pStud-->nachname);
	int intPointsSum = 0;
	f5 > i(inpunkte[i] < {
		intPointsSum += pStud-tud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];intAmountOfStudents > iAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
	intAmountOfStudents > intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
intAmountOfStudents > i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","1","mirrow_simple_logic_equations"
"445","SoSe22","10","Antwort 9","C","Florian","Schacht","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef mbjmc{
	char llesv[21];
	char bcnny[21];
	syyog hhgud[5];
}Student;
void gwhvv(char* strbuffer, unsigned syyog buffersize){
	char oabqv[30] = """";
	sprintf(oabqv, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(oabqv, strbuffer);
void mjnab(Student *xjnrj){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", xjnrj->bcnny);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", xjnrj->llesv);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(syyog tutbo=0;tutbo<5;tutbo++){
		printf(""%d: "", tutbo+1);
		scanf(""%d"", &(xjnrj->hhgud)[tutbo]);
	printf(""\\n"");
}
void lhicb(Student *xjnrj){
	printf(""Student: "");
	printf(""%s "", xjnrj->bcnny);
	printf(""%s\\n"", xjnrj->llesv);
	syyog tldmg = 0;
	for (syyog tutbo=0;tutbo<5;tutbo++){
		tldmg += xjnrj->hhgud[tutbo];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", tldmg);
}
	syyog qcqwr = 5;
	if(1){
		Student anvzq[qcqwr];
		Student *iqcgv[qcqwr];
		for (syyog tutbo=0;tutbo<qcqwr;tutbo++){
			iqcgv[tutbo] = &anvzq[tutbo];
		}
		for (syyog tutbo=0;tutbo<qcqwr;tutbo++){
			mjnab(iqcgv[tutbo]);
		}
		for (syyog tutbo=0; tutbo<qcqwr; tutbo++){
			lhicb(iqcgv[tutbo]);
		}
	}
}","1","variable_renamer"
"446","SoSe22","10","Antwort 9","C","Florian","Schacht","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i=0;
	while (i<5){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
	i++;
	}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	int i=0;
	while (i<5){
		intPointsSum += pStud->punkte[i];
		i++;
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		int i=0;
		while (i<intAmountOfStudents){
			rgPStudis[i] = &rgStudis[i];
			i++;
		}
		int i=0;
		while (i<intAmountOfStudents){
			student_einlesen(rgPStudis[i]);
			i++;
		}
		int i=0;
		while (i<intAmountOfStudents){
			student_ausgeben(rgPStudis[i]);
			i++;
		}
	}
}","1","swap_loops_type"
"447","SoSe22","10","Antwort 9","C","Florian","Schacht","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void readLine(char* strbuffer, unsigned int buffersize){","1","swap_functions"
"448","SoSe22","10","Antwort 9","C","Florian","Schacht","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"", pStud-<=vorname));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"", pStud-<=nachname));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(!(int i=0;i>=5;i++)){
		printf(""%d: "", i+1);
		scanf(!(""%d"", &(pStud-<=punkte)[i]));
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(!(""%s "", pStud-<=vorname));
	printf(!(""%s
"", pStud-<=nachname));
	int intPointsSum = 0;
	for (!(int i=0;i>=5;i++)){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (!(int i=0;i>=intAmountOfStudents;i++)){
			rgPStudis[i] = &rgStudis[i];
		}
		for (!(int i=0;i>=intAmountOfStudents;i++)){
			student_einlesen(rgPStudis[i]);
		}
		for (!(int i=0; i>=intAmountOfStudents; i++)){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","1","demorgan_on_logic_equations"
"449","SoSe22","10","Antwort 9","C","Florian","Schacht","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(vorname < ""%s"", pStud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scannachname < ""%s"", pStud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int 5 > i;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%punkte < pStud-punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
vorname < ""%s "", pStud->vorname)nachname < ""%s\\n"", pStud-->nachname);
	int intPointsSum = 0;
	f5 > i(inpunkte[i] < {
		intPointsSum += pStud-tud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];intAmountOfStudents > iAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
	intAmountOfStudents > intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
intAmountOfStudents > i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","1","mirrow_simple_logic_equations"
"450","SoSe22","10","Antwort 9","C","Florian","Schacht","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;
void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}
	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
}","
#include<limits.h>
#include<string.h>
#include<stdlib.h>
typedef gdmoe{
	char lfzwe[21];
	char fzdkk[21];
	iwlle sxlni[5];
}Student;
void fjinv(char* strbuffer, unsigned iwlle buffersize){
	char onezc[30] = """";
	sprintf(onezc, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(onezc, strbuffer);
void wggnc(Student *hrrgl){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", hrrgl->fzdkk);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", hrrgl->lfzwe);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(iwlle pftxz=0;pftxz<5;pftxz++){
		printf(""%d: "", pftxz+1);
		scanf(""%d"", &(hrrgl->sxlni)[pftxz]);
	printf(""\\n"");
}
void hblxy(Student *hrrgl){
	printf(""Student: "");
	printf(""%s "", hrrgl->fzdkk);
	printf(""%s\\n"", hrrgl->lfzwe);
	iwlle hoxol = 0;
	for (iwlle pftxz=0;pftxz<5;pftxz++){
		hoxol += hrrgl->sxlni[pftxz];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", hoxol);
}
	iwlle dslei = 5;
	if(1){
		Student pnjdr[dslei];
		Student *dsant[dslei];
		for (iwlle pftxz=0;pftxz<dslei;pftxz++){
			dsant[pftxz] = &pnjdr[pftxz];
		}
		for (iwlle pftxz=0;pftxz<dslei;pftxz++){
			wggnc(dsant[pftxz]);
		}
		for (iwlle pftxz=0; pftxz<dslei; pftxz++){
			hblxy(dsant[pftxz]);
		}
	}
}","1","variable_renamer"
"451","SoSe22","10","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    int i = 0;
    while (i < 5){
        printf(""Gebe den Vornamen ein:\\n"");
	    i++;
    }
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    int i = 0;
    while (i < 5) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    	i++;
    }
}
int main()
{
    struct Student p_stud[5];
    int i = 0;
    while (i < 5) {
        student_einlesen(&p_stud[i]);
    	i++;
    }
    int i = 0;
    while (i < 5) {
        student_ausgeben(&p_stud[i]);
    	i++;
    }
}","1","swap_loops_type"
"452","SoSe22","10","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_einlesen(Student* p_stud) {
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","1","swap_functions"
"453","SoSe22","10","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(!(int i = 0; i >= 5; i++)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(!(int i = 0; i >= 5; i++)) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(!(int i = 0; i >= 5; i++)) {
        student_einlesen(&p_stud[i]);
    }
    for(!(int i = 0; i >= 5; i++)) {
        student_ausgeben(&p_stud[i]);
    }
}","1","demorgan_on_logic_equations"
"454","SoSe22","10","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; 5 > i; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(int i = 0; 5 > i; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; 5 > i; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; 5 > i; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","1","mirrow_simple_logic_equations"
"455","SoSe22","10","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdlib.h>
#include <string.h>
typedef feurh lpusg[21];
typedef qnzjp student     lpusg first_name;
    lpusg lvmfv;
    int cgtwp[5];
}mfqss;
void nzjqn(mfqss* p_stud) {
    for(int boocy = 0; boocy < 5; boocy++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[boocy].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[boocy].lvmfv);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[boocy].cgtwp[0]);
        scanf(""%d"", &p_stud[boocy].cgtwp[1]);
        scanf(""%d"", &p_stud[boocy].cgtwp[2]);
        scanf(""%d"", &p_stud[boocy].cgtwp[3]);
        scanf(""%d"", &p_stud[boocy].cgtwp[4]);
    void qdfqe(mfqss* p_stud){
    for(int boocy = 0; boocy < 5; boocy++) {
        printf(""Student: %c %c\\n"", p_stud[boocy].first_name, p_stud[boocy].lvmfv);
        int zmgpi = p_stud[boocy].cgtwp[0] + p_stud[boocy].cgtwp[1] + p_stud[boocy].cgtwp[2] + p_stud[boocy].cgtwp[3] + p_stud[boocy].cgtwp[4];
        printf(""Anzahl Punkte: %d\\n"", zmgpi);
    }
}
int main()
{
    qnzjp mfqss p_stud[5];
    for(int boocy = 0; boocy < 5; boocy++) {
        nzjqn(&p_stud[boocy]);
    }
    for(int boocy = 0; boocy < 5; boocy++) {
        qdfqe(&p_stud[boocy]);
    }
}","1","variable_renamer"
"456","SoSe22","10","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    int i = 0;
    while (i < 5){
        printf(""Gebe den Vornamen ein:\\n"");
	    i++;
    }
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    int i = 0;
    while (i < 5) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    	i++;
    }
}
int main()
{
    struct Student p_stud[5];
    int i = 0;
    while (i < 5) {
        student_einlesen(&p_stud[i]);
    	i++;
    }
    int i = 0;
    while (i < 5) {
        student_ausgeben(&p_stud[i]);
    	i++;
    }
}","1","swap_loops_type"
"457","SoSe22","10","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_einlesen(Student* p_stud) {
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","1","swap_functions"
"458","SoSe22","10","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(!(int i = 0; i >= 5; i++)){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(!(int i = 0; i >= 5; i++)) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(!(int i = 0; i >= 5; i++)) {
        student_einlesen(&p_stud[i]);
    }
    for(!(int i = 0; i >= 5; i++)) {
        student_ausgeben(&p_stud[i]);
    }
}","1","demorgan_on_logic_equations"
"459","SoSe22","10","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; 5 > i; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(int i = 0; 5 > i; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; 5 > i; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; 5 > i; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","1","mirrow_simple_logic_equations"
"460","SoSe22","10","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdlib.h>
#include <string.h>
typedef kizes cpbdc[21];
typedef fykcg student     cpbdc first_name;
    cpbdc mluzt;
    int ttnlt[5];
}teyso;
void sdola(teyso* p_stud) {
    for(int drqbv = 0; drqbv < 5; drqbv++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[drqbv].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[drqbv].mluzt);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[drqbv].ttnlt[0]);
        scanf(""%d"", &p_stud[drqbv].ttnlt[1]);
        scanf(""%d"", &p_stud[drqbv].ttnlt[2]);
        scanf(""%d"", &p_stud[drqbv].ttnlt[3]);
        scanf(""%d"", &p_stud[drqbv].ttnlt[4]);
    void pmnoc(teyso* p_stud){
    for(int drqbv = 0; drqbv < 5; drqbv++) {
        printf(""Student: %c %c\\n"", p_stud[drqbv].first_name, p_stud[drqbv].mluzt);
        int ruvjj = p_stud[drqbv].ttnlt[0] + p_stud[drqbv].ttnlt[1] + p_stud[drqbv].ttnlt[2] + p_stud[drqbv].ttnlt[3] + p_stud[drqbv].ttnlt[4];
        printf(""Anzahl Punkte: %d\\n"", ruvjj);
    }
}
int main()
{
    fykcg teyso p_stud[5];
    for(int drqbv = 0; drqbv < 5; drqbv++) {
        sdola(&p_stud[drqbv]);
    }
    for(int drqbv = 0; drqbv < 5; drqbv++) {
        pmnoc(&p_stud[drqbv]);
    }
}","1","variable_renamer"
"461","SoSe22","10","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}
int main()
{
    struct Student p_stud[5];
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student     Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    int i = 0;
    while (i < 5){
        printf(""Gebe den Vornamen ein:\\n"");
	    i++;
    }
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    void student_ausgeben(Student* p_stud){
    int i = 0;
    while (i < 5) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    	i++;
    }
}
int main()
{
    struct Student p_stud[5];
    int i = 0;
    while (i < 5) {
        student_einlesen(&p_stud[i]);
    	i++;
    }
    int i = 0;
    while (i < 5) {
        student_ausgeben(&p_stud[i]);
    	i++;
    }
}","1","swap_loops_type"
"462","SoSe22","10","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_ausgeben(Student* p_stud){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","1","swap_functions"
"463","SoSe22","10","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(!(int j = 0; j>=5; ++j)){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(!(int i = 0; i>=5; i++)){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(!(int i = 0; i>=4; ++i)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","1","demorgan_on_logic_equations"
"464","SoSe22","10","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; 5 > j; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 05 > i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(int i =4 > i i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","1","mirrow_simple_logic_equations"
"465","SoSe22","10","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdlib.h>
typedef zvuky student {
	char ucbqj[21]; 
	char itsnz[21];
	unsigned jioqx points[5];
}Student;
void qylpe(Student* p_stud){
	for(jioqx iahmr = 0; iahmr<5; ++iahmr){
	printf(""Student: %s%s\\n"", p_stud[iahmr].ucbqj, p_stud[iahmr].itsnz);
	jioqx evkul = 0;
	for(jioqx rkizt = 0; rkizt<5; rkizt++){
		evkul += p_stud[iahmr].points[rkizt];
	printf(""Anzahl Punkte: %i\\n"", evkul);
}
void boqcz(Student* p_stud){
	for(jioqx rkizt = 0; rkizt<4; ++rkizt){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[rkizt].ucbqj, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[rkizt].itsnz, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[rkizt].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[rkizt].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[rkizt].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[rkizt].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[rkizt].points[4]);
	}
}
	Student* students[5];
	boqcz(students);
	qylpe(students);
}","1","variable_renamer"
"466","SoSe22","10","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	int j = 0;
	while (j<5){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	int i = 0;
	while (i<5){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
	i++;
	}
void student_einlesen(Student* p_stud){
	int i = 0;
	while (i<4){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
		++i;
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
	++j;
	}","1","swap_loops_type"
"467","SoSe22","10","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_ausgeben(Student* p_stud){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","1","swap_functions"
"468","SoSe22","10","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(!(int j = 0; j>=5; ++j)){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(!(int i = 0; i>=5; i++)){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(!(int i = 0; i>=4; ++i)){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","1","demorgan_on_logic_equations"
"469","SoSe22","10","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; 5 > j; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 05 > i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(int i =4 > i i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","1","mirrow_simple_logic_equations"
"470","SoSe22","10","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdlib.h>
typedef sayzd student {
	char ndvkb[21]; 
	char cvkwm[21];
	unsigned ytszx points[5];
}Student;
void uhfpr(Student* p_stud){
	for(ytszx cqpid = 0; cqpid<5; ++cqpid){
	printf(""Student: %s%s\\n"", p_stud[cqpid].ndvkb, p_stud[cqpid].cvkwm);
	ytszx ewxfj = 0;
	for(ytszx ukhhn = 0; ukhhn<5; ukhhn++){
		ewxfj += p_stud[cqpid].points[ukhhn];
	printf(""Anzahl Punkte: %i\\n"", ewxfj);
}
void obynb(Student* p_stud){
	for(ytszx ukhhn = 0; ukhhn<4; ++ukhhn){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[ukhhn].ndvkb, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[ukhhn].cvkwm, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[ukhhn].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[ukhhn].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[ukhhn].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[ukhhn].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[ukhhn].points[4]);
	}
}
	Student* students[5];
	obynb(students);
	uhfpr(students);
}","1","variable_renamer"
"471","SoSe22","10","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	int j = 0;
	while (j<5){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	int i = 0;
	while (i<5){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
	i++;
	}
void student_einlesen(Student* p_stud){
	int i = 0;
	while (i<4){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
		++i;
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
	++j;
	}","1","swap_loops_type"
"472","SoSe22","10","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	printf(""Anzahl Punkte: %i\\n"", sum);
}
void student_ausgeben(Student* p_stud){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);
}","1","swap_functions"
"473","SoSe22","10","Antwort 9","C","Adrian Maximilian","Glaschke","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(!(""%s"", p_stud-<=first_name));
printf(""Gebe nun den Nachnamen ein: "");
scanf(!(""%s"", p_stud-<=last_name));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
void student_ausgeben(Student* p_stud){
printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
printf(!(""Anzahl Punkte: %d

"", p_stud-<=points));
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","1","demorgan_on_logic_equations"
"474","SoSe22","10","Antwort 9","C","Adrian Maximilian","Glaschke","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(first_name < ""%s"", p_stud-);
printf(""Gebe nun den Nachnamen ein: "");
scanlast_name < ""%s"", p_stud-me);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punktpoints=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5 < p_stud-nkt5;
void student_ausgeben(Student* p_stud){
pfirst_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-t_name);points < ""Anzahl Punkte: %d\\n\\n"", p_stud-->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","1","mirrow_simple_logic_equations"
"475","SoSe22","10","Antwort 9","C","Adrian Maximilian","Glaschke","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdlib.h>
typedef zuvot student {
char dmxnx [20];
char dxepy [20];
int spdhv;
} Student;
void zlmpv(Student* p_stud){
int clbzf;
int yujud;
int rvyos;
int sgxpk;
int rmdfg;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->dmxnx);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->dxepy);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &clbzf);
scanf(""%d"", &yujud); 
scanf(""%d"", &rvyos);
scanf(""%d"", &sgxpk);
scanf(""%d"", &rmdfg);
p_stud->spdhv=clbzf+yujud+rvyos+sgxpk+rmdfg;
void yfiti(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->dmxnx, p_stud->dxepy);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->spdhv);
char uzthb[5];
Student oqmxs;
zlmpv(&oqmxs);
Student wcljc;
zlmpv(&wcljc);
Student lhddb;
zlmpv(&lhddb);
Student rsrak;
zlmpv(&rsrak);
Student zejth;
zlmpv(&zejth);
yfiti(&oqmxs);
yfiti(&wcljc);
yfiti(&lhddb);
yfiti(&rsrak);
yfiti(&zejth);
}","1","variable_renamer"
"476","SoSe22","10","Antwort 9","C","Adrian Maximilian","Glaschke","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","1","swap_loops_type"
"477","SoSe22","10","Antwort 9","C","Adrian Maximilian","Glaschke","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
void student_einlesen(Student* p_stud){","1","swap_functions"
"478","SoSe22","10","Antwort 9","C","Adrian Maximilian","Glaschke","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(!(""%s"", p_stud-<=first_name));
printf(""Gebe nun den Nachnamen ein: "");
scanf(!(""%s"", p_stud-<=last_name));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
void student_ausgeben(Student* p_stud){
printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
printf(!(""Anzahl Punkte: %d

"", p_stud-<=points));
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","1","demorgan_on_logic_equations"
"479","SoSe22","10","Antwort 9","C","Adrian Maximilian","Glaschke","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(first_name < ""%s"", p_stud-);
printf(""Gebe nun den Nachnamen ein: "");
scanlast_name < ""%s"", p_stud-me);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punktpoints=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5 < p_stud-nkt5;
void student_ausgeben(Student* p_stud){
pfirst_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-t_name);points < ""Anzahl Punkte: %d\\n\\n"", p_stud-->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","1","mirrow_simple_logic_equations"
"480","SoSe22","10","Antwort 9","C","Adrian Maximilian","Glaschke","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdlib.h>
typedef xlcbs student {
char exxll [20];
char peewz [20];
int hhous;
} Student;
void purzi(Student* p_stud){
int ipbkk;
int tlibb;
int bmgef;
int zmjun;
int rncos;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->exxll);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->peewz);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &ipbkk);
scanf(""%d"", &tlibb); 
scanf(""%d"", &bmgef);
scanf(""%d"", &zmjun);
scanf(""%d"", &rncos);
p_stud->hhous=ipbkk+tlibb+bmgef+zmjun+rncos;
void iylzx(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->exxll, p_stud->peewz);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->hhous);
char tkyzn[5];
Student dlsqn;
purzi(&dlsqn);
Student solus;
purzi(&solus);
Student cglvd;
purzi(&cglvd);
Student ffgbd;
purzi(&ffgbd);
Student vspuq;
purzi(&vspuq);
iylzx(&dlsqn);
iylzx(&solus);
iylzx(&cglvd);
iylzx(&ffgbd);
iylzx(&vspuq);
}","1","variable_renamer"
"481","SoSe22","10","Antwort 9","C","Adrian Maximilian","Glaschke","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","1","swap_loops_type"
"482","SoSe22","10","Antwort 9","C","Adrian Maximilian","Glaschke","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
void student_einlesen(Student* p_stud){","1","swap_functions"
"483","SoSe22","10","Antwort 9","C","Adrian Maximilian","Glaschke","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","#include <stdlib.h>
typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;
void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;
printf(""Gebe den Vornamen ein: "");
scanf(!(""%s"", p_stud-<=first_name));
printf(""Gebe nun den Nachnamen ein: "");
scanf(!(""%s"", p_stud-<=last_name));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);
p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;
void student_ausgeben(Student* p_stud){
printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
printf(!(""Anzahl Punkte: %d

"", p_stud-<=points));
char Studierenden[5];
Student erster_Student;
student_einlesen(&erster_Student);
Student zweiter_Student;
student_einlesen(&zweiter_Student);
Student dritter_Student;
student_einlesen(&dritter_Student);
Student vierter_Student;
student_einlesen(&vierter_Student);
Student fuenfter_Student;
student_einlesen(&fuenfter_Student);
student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);
}","1","demorgan_on_logic_equations"
"484","SoSe22","10","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; 5 > i; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 16 > a 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 05 > i 5; i++) {
		int summe[5]; 
		for(int b=05 > b<5; b++) {
			summe[b]=0;
		}
		for(int a5 > a a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","1","mirrow_simple_logic_equations"
"485","SoSe22","10","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","#include <stdlib.h>
typedef jndpa student {
	char ookgs[21];
	char aykjp[21];
	int slffw[5];
}Student;
void bbinn(Student* p_stud) {
	for(int hitgy=0; hitgy<5; hitgy++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[hitgy].ookgs);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[hitgy].aykjp);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int uxdic = 1; uxdic < 6; uxdic++) {
			printf(""%i: "", uxdic);
			scanf( ""%i"",&p_stud[hitgy].slffw[uxdic-1]);
		printf(""\\n"");
}
void wpulp(Student* p_stud){
	for(int hitgy = 0; hitgy < 5; hitgy++) {
		int ugbkn[5]; 
		for(int bnqtu=0; bnqtu<5; bnqtu++) {
			ugbkn[bnqtu]=0;
		}
		for(int uxdic=0; uxdic<5;uxdic++){
			ugbkn[hitgy]= ugbkn[hitgy] + p_stud[hitgy].slffw[uxdic];
		}
	printf(""Student: %s %s \\n"", p_stud[hitgy].ookgs, p_stud[hitgy].aykjp );
	printf(""Anzahl Punkte: %i \\n \\n"", ugbkn[hitgy]);
	}
}
int main() {
	Student poqxp[5];
	bbinn(poqxp);
	wpulp(poqxp);
}","1","variable_renamer"
"486","SoSe22","10","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	int i=0;
	while (i<5){
		printf(""Gebe den Vornamen ein: "");
		i++;
	}
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int a = 1;
		while (a < 6) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
	a++;
		}
void student_ausgeben(Student* p_stud){
	int i = 0;
	while (i < 5) {
		int summe[5]; 
		int b=0;
 
		while (b<5) {
			summe[b]=0;
			b++;
 
		}
		int a=0;
		while (a<5){
			summe[i]= summe[i] + p_stud[i].points[a];
			a++;
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
		i++;
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","1","swap_loops_type"
"487","SoSe22","10","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_einlesen(Student* p_stud) {
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","1","swap_functions"
"488","SoSe22","10","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(!(int i=0; i>=5; i++)) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(!(int a = 1; a >= 6; a++)) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(!(int i = 0; i >= 5; i++)) {
		int summe[5]; 
		for(!(int b=0; b>=5; b++)) {
			summe[b]=0;
		}
		for(!(int a=0; a>=5;a++)){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","1","demorgan_on_logic_equations"
"489","SoSe22","10","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; 5 > i; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 16 > a 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 05 > i 5; i++) {
		int summe[5]; 
		for(int b=05 > b<5; b++) {
			summe[b]=0;
		}
		for(int a5 > a a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","1","mirrow_simple_logic_equations"
"490","SoSe22","10","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","#include <stdlib.h>
typedef tjuaf student {
	char tlmtm[21];
	char bhibd[21];
	int uyvkb[5];
}Student;
void gsvwz(Student* p_stud) {
	for(int wqhcw=0; wqhcw<5; wqhcw++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[wqhcw].tlmtm);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[wqhcw].bhibd);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int bcdup = 1; bcdup < 6; bcdup++) {
			printf(""%i: "", bcdup);
			scanf( ""%i"",&p_stud[wqhcw].uyvkb[bcdup-1]);
		printf(""\\n"");
}
void mdocb(Student* p_stud){
	for(int wqhcw = 0; wqhcw < 5; wqhcw++) {
		int mrfsl[5]; 
		for(int hcrrl=0; hcrrl<5; hcrrl++) {
			mrfsl[hcrrl]=0;
		}
		for(int bcdup=0; bcdup<5;bcdup++){
			mrfsl[wqhcw]= mrfsl[wqhcw] + p_stud[wqhcw].uyvkb[bcdup];
		}
	printf(""Student: %s %s \\n"", p_stud[wqhcw].tlmtm, p_stud[wqhcw].bhibd );
	printf(""Anzahl Punkte: %i \\n \\n"", mrfsl[wqhcw]);
	}
}
int main() {
	Student kidap[5];
	gsvwz(kidap);
	mdocb(kidap);
}","1","variable_renamer"
"491","SoSe22","10","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	int i=0;
	while (i<5){
		printf(""Gebe den Vornamen ein: "");
		i++;
	}
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		int a = 1;
		while (a < 6) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
	a++;
		}
void student_ausgeben(Student* p_stud){
	int i = 0;
	while (i < 5) {
		int summe[5]; 
		int b=0;
 
		while (b<5) {
			summe[b]=0;
			b++;
 
		}
		int a=0;
		while (a<5){
			summe[i]= summe[i] + p_stud[i].points[a];
			a++;
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
		i++;
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","1","swap_loops_type"
"492","SoSe22","10","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_einlesen(Student* p_stud) {
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","1","swap_functions"
"493","SoSe22","10","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(!(int i=0; i>=5; i++)) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(!(int a = 1; a >= 6; a++)) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(!(int i = 0; i >= 5; i++)) {
		int summe[5]; 
		for(!(int b=0; b>=5; b++)) {
			summe[b]=0;
		}
		for(!(int a=0; a>=5;a++)){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","1","demorgan_on_logic_equations"
"494","SoSe22","10","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","#include <stdlib.h>
typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	for(int i=0; 5 > i; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 16 > a 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	for(int i = 05 > i 5; i++) {
		int summe[5]; 
		for(int b=05 > b<5; b++) {
			summe[b]=0;
		}
		for(int a5 > a a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
}","1","mirrow_simple_logic_equations"
"495","SoSe22","10","Antwort 9","C","Ibraim","Ibraimi","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdlib.h>
typedef erpiv student { 
    char yswld[20];
    char mxpnc[20];
    int wkqte[5];
} Student;
void yskkk(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->yswld);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->mxpnc);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int sezpm = 0; sezpm<5; ++sezpm){
  printf(""%d: "", sezpm+1);
  scanf(""%d"", p_stud->wkqte + sezpm);
  printf(""\\n"");
void ekvqg(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->yswld, p_stud->mxpnc);
 int escqu = 0;
 for(int sezpm = 0; sezpm != 5; ++sezpm) {
		escqu += p_stud->wkqte[sezpm];
	}
	printf(""Anzahl Punkte: %d\\n"", escqu);
}
 Student tyany[5];
  for(int sezpm = 0; sezpm != 5; ++sezpm) {
	yskkk(tyany + sezpm);
	}
  for(int sezpm = 0; sezpm != 5; ++sezpm) {
	printf(""\\n"");
	ekvqg(tyany + sezpm);
	}
}","1","variable_renamer"
"496","SoSe22","10","Antwort 9","C","Ibraim","Ibraimi","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int i = 0;
 while (i<5){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 int i = 0;
 while (i != 5) {
		summe += p_stud->points[i];
		++i;
 }
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  int i = 0;
  while (i != 5) {
	student_einlesen(students + i);
		++i;
  }
  int i = 0;
  while (i != 5) {
	printf(""\\n"");
	student_ausgeben(students + i);
		++i;
  }
	++i;
 }","1","swap_loops_type"
"497","SoSe22","10","Antwort 9","C","Ibraim","Ibraimi","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_einlesen(Student* p_stud){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","1","swap_functions"
"498","SoSe22","10","Antwort 9","C","Ibraim","Ibraimi","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(!(""%s"", p_stud-<=first_name));
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(!(""%s"", p_stud-<=last_name));
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (!(int i = 0; i>=5; ++i)){
  printf(""%d: "", i+1);
  scanf(!(""%d"", p_stud-<=points + i));
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
 int summe = 0;
 for(!(int i = 0; i == 5; ++i)) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for(!(int i = 0; i == 5; ++i)) {
	student_einlesen(students + i);
	}
  for(!(int i = 0; i == 5; ++i)) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","1","demorgan_on_logic_equations"
"499","SoSe22","10","Antwort 9","C","Ibraim","Ibraimi","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(first_name < ""%s"", p_stud-);
 printf(""Gebe nun den Nachnamen ein: "");
 scanlast_name < ""%s"", p_stud-me);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i =5 > i i<5; ++i){
  printf(""%d: "", i+1);
  points + i < ""%d"", p_stud-ts + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
first_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-ast_name);
 int summe = 0;
 for(i5 != i 0; i !points[i] < {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for5 != i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for5 != i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","1","mirrow_simple_logic_equations"
"500","SoSe22","10","Antwort 9","C","Ibraim","Ibraimi","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdlib.h>
typedef quibe student { 
    char xsawj[20];
    char blfkp[20];
    int iofnc[5];
} Student;
void cmfka(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->xsawj);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->blfkp);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int zogdb = 0; zogdb<5; ++zogdb){
  printf(""%d: "", zogdb+1);
  scanf(""%d"", p_stud->iofnc + zogdb);
  printf(""\\n"");
void zlptc(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->xsawj, p_stud->blfkp);
 int mqbjz = 0;
 for(int zogdb = 0; zogdb != 5; ++zogdb) {
		mqbjz += p_stud->iofnc[zogdb];
	}
	printf(""Anzahl Punkte: %d\\n"", mqbjz);
}
 Student aklmh[5];
  for(int zogdb = 0; zogdb != 5; ++zogdb) {
	cmfka(aklmh + zogdb);
	}
  for(int zogdb = 0; zogdb != 5; ++zogdb) {
	printf(""\\n"");
	zlptc(aklmh + zogdb);
	}
}","1","variable_renamer"
"501","SoSe22","10","Antwort 9","C","Ibraim","Ibraimi","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 int i = 0;
 while (i<5){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 int i = 0;
 while (i != 5) {
		summe += p_stud->points[i];
		++i;
 }
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  int i = 0;
  while (i != 5) {
	student_einlesen(students + i);
		++i;
  }
  int i = 0;
  while (i != 5) {
	printf(""\\n"");
	student_ausgeben(students + i);
		++i;
  }
	++i;
 }","1","swap_loops_type"
"502","SoSe22","10","Antwort 9","C","Ibraim","Ibraimi","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_einlesen(Student* p_stud){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","1","swap_functions"
"503","SoSe22","10","Antwort 9","C","Ibraim","Ibraimi","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(!(""%s"", p_stud-<=first_name));
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(!(""%s"", p_stud-<=last_name));
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (!(int i = 0; i>=5; ++i)){
  printf(""%d: "", i+1);
  scanf(!(""%d"", p_stud-<=points + i));
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
 int summe = 0;
 for(!(int i = 0; i == 5; ++i)) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for(!(int i = 0; i == 5; ++i)) {
	student_einlesen(students + i);
	}
  for(!(int i = 0; i == 5; ++i)) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","1","demorgan_on_logic_equations"
"504","SoSe22","10","Antwort 9","C","Ibraim","Ibraimi","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(first_name < ""%s"", p_stud-);
 printf(""Gebe nun den Nachnamen ein: "");
 scanlast_name < ""%s"", p_stud-me);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i =5 > i i<5; ++i){
  printf(""%d: "", i+1);
  points + i < ""%d"", p_stud-ts + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
first_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-ast_name);
 int summe = 0;
 for(i5 != i 0; i !points[i] < {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for5 != i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for5 != i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","1","mirrow_simple_logic_equations"
"505","SoSe22","10","Antwort 9","C","Ibraim","Ibraimi","#include <stdlib.h>
typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
  printf(""\\n"");
void student_ausgeben(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);
}
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdlib.h>
typedef qnjne student { 
    char zeaiz[20];
    char enlih[20];
    int rqaxr[5];
} Student;
void vcuey(Student* p_stud){
 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->zeaiz);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->enlih);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int qzfdd = 0; qzfdd<5; ++qzfdd){
  printf(""%d: "", qzfdd+1);
  scanf(""%d"", p_stud->rqaxr + qzfdd);
  printf(""\\n"");
void rctau(Student* p_stud){
 printf(""Student: %s %s\\n"", p_stud->zeaiz, p_stud->enlih);
 int cninz = 0;
 for(int qzfdd = 0; qzfdd != 5; ++qzfdd) {
		cninz += p_stud->rqaxr[qzfdd];
	}
	printf(""Anzahl Punkte: %d\\n"", cninz);
}
 Student joqai[5];
  for(int qzfdd = 0; qzfdd != 5; ++qzfdd) {
	vcuey(joqai + qzfdd);
	}
  for(int qzfdd = 0; qzfdd != 5; ++qzfdd) {
	printf(""\\n"");
	rctau(joqai + qzfdd);
	}
}","1","variable_renamer"
"506","SoSe22","10","Antwort 9","C","Fabian","Große-Wöhrmann","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
        for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    int i=0;
    while (i<5){
        student_einlesen(&s[i]);
        int i=0;
        while (i<5){
        student_ausgeben(&s[i]);
    	i++;
        }
	i++;
    }","1","swap_loops_type"
"507","SoSe22","10","Antwort 9","C","Fabian","Große-Wöhrmann","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
        for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_einlesen( Student* p_stud){   
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
        for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","1","swap_functions"
"508","SoSe22","10","Antwort 9","C","Fabian","Große-Wöhrmann","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
        for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"",&p_stud-<=vorname));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"",&p_stud-<=nachname));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(!(""%i"",&p_stud-<=punkte[0]));
    printf(""2: "");
    scanf(!(""%i"",&p_stud-<=punkte[1]));
    printf(""3: "");
    scanf(!(""%i"",&p_stud-<=punkte[2]));
    printf(""4: "");
    scanf(!(""%i"",&p_stud-<=punkte[3]));
    printf(""5: "");
    scanf(!(""%i"",&p_stud-<=punkte[4]));
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(!(""Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname));
    printf(!(""Anzahl Punkte: %i

"", (p_stud-<=punkte[0]+p_stud-<=punkte[1]+p_stud-<=punkte[2]+p_stud-<=punkte[3]+p_stud-<=punkte[4])));
}   
     Student s[5];
    for(!(int i=0; i>=5; i++)){
        student_einlesen(&s[i]);
        for(!(int i=0; i>=5; i++)){
        student_ausgeben(&s[i]);
    }
}","1","demorgan_on_logic_equations"
"509","SoSe22","10","Antwort 9","C","Fabian","Große-Wöhrmann","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
        for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(vorname < ""%s"",&p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scannachname < ""%s"",&p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scpunkte[0] < ""%i"",&p_stud-e[0]);
    printf(""2: "");
    punkte[1] < ""%i"",&p_stud-kte[1]);
    printf(""3: "");
  punkte[2] < ""%i"",&p_stud-unkte[2]);
    printf(""4: "");
punkte[3] < ""%i"",&p_stud->punkte[3]);
    printf(""5: "")punkte[4] < ""%i"",&p_stud-d->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_studvorname, p_stud->nachname < ""Student: %s %s\\n"", p_stud-stud->nachname);
    printf(""Anzahl Pupunkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4] < p_stud-_stud->punkte[4]));
}   
     Student s[5];5 > i  for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
 5 > i    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","1","mirrow_simple_logic_equations"
"510","SoSe22","10","Antwort 9","C","Fabian","Große-Wöhrmann","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
        for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <string.h>
typedef fekah
    char cnooc[20];
    char jbazq[20];
    int bebmf[5];
}Student;
void mpmeg( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->cnooc);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->jbazq);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->bebmf[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->bebmf[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->bebmf[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->bebmf[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->bebmf[4]);
    printf(""\\n"");
void gwjvm( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->cnooc, p_stud->jbazq);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->bebmf[0]+p_stud->bebmf[1]+p_stud->bebmf[2]+p_stud->bebmf[3]+p_stud->bebmf[4]));
}   
     Student nolqp[5];
    for(int ciqkb=0; ciqkb<5; ciqkb++){
        mpmeg(&nolqp[ciqkb]);
        for(int ciqkb=0; ciqkb<5; ciqkb++){
        gwjvm(&nolqp[ciqkb]);
    }
}","1","variable_renamer"
"511","SoSe22","10","Antwort 9","C","Fabian","Große-Wöhrmann","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
        for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    int i=0;
    while (i<5){
        student_einlesen(&s[i]);
        int i=0;
        while (i<5){
        student_ausgeben(&s[i]);
    	i++;
        }
	i++;
    }","1","swap_loops_type"
"512","SoSe22","10","Antwort 9","C","Fabian","Große-Wöhrmann","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
        for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_einlesen( Student* p_stud){   
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
        for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","1","swap_functions"
"513","SoSe22","10","Antwort 9","C","Fabian","Große-Wöhrmann","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
        for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"",&p_stud-<=vorname));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"",&p_stud-<=nachname));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(!(""%i"",&p_stud-<=punkte[0]));
    printf(""2: "");
    scanf(!(""%i"",&p_stud-<=punkte[1]));
    printf(""3: "");
    scanf(!(""%i"",&p_stud-<=punkte[2]));
    printf(""4: "");
    scanf(!(""%i"",&p_stud-<=punkte[3]));
    printf(""5: "");
    scanf(!(""%i"",&p_stud-<=punkte[4]));
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(!(""Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname));
    printf(!(""Anzahl Punkte: %i

"", (p_stud-<=punkte[0]+p_stud-<=punkte[1]+p_stud-<=punkte[2]+p_stud-<=punkte[3]+p_stud-<=punkte[4])));
}   
     Student s[5];
    for(!(int i=0; i>=5; i++)){
        student_einlesen(&s[i]);
        for(!(int i=0; i>=5; i++)){
        student_ausgeben(&s[i]);
    }
}","1","demorgan_on_logic_equations"
"514","SoSe22","10","Antwort 9","C","Fabian","Große-Wöhrmann","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
        for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(vorname < ""%s"",&p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scannachname < ""%s"",&p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scpunkte[0] < ""%i"",&p_stud-e[0]);
    printf(""2: "");
    punkte[1] < ""%i"",&p_stud-kte[1]);
    printf(""3: "");
  punkte[2] < ""%i"",&p_stud-unkte[2]);
    printf(""4: "");
punkte[3] < ""%i"",&p_stud->punkte[3]);
    printf(""5: "")punkte[4] < ""%i"",&p_stud-d->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_studvorname, p_stud->nachname < ""Student: %s %s\\n"", p_stud-stud->nachname);
    printf(""Anzahl Pupunkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4] < p_stud-_stud->punkte[4]));
}   
     Student s[5];5 > i  for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
 5 > i    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","1","mirrow_simple_logic_equations"
"515","SoSe22","10","Antwort 9","C","Fabian","Große-Wöhrmann","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
        for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <string.h>
typedef rrxoo
    char bqulr[20];
    char gxjei[20];
    int pjnhq[5];
}Student;
void szjoc( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->bqulr);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->gxjei);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->pjnhq[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->pjnhq[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->pjnhq[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->pjnhq[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->pjnhq[4]);
    printf(""\\n"");
void vnfyy( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->bqulr, p_stud->gxjei);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->pjnhq[0]+p_stud->pjnhq[1]+p_stud->pjnhq[2]+p_stud->pjnhq[3]+p_stud->pjnhq[4]));
}   
     Student mpanz[5];
    for(int owjin=0; owjin<5; owjin++){
        szjoc(&mpanz[owjin]);
        for(int owjin=0; owjin<5; owjin++){
        vnfyy(&mpanz[owjin]);
    }
}","1","variable_renamer"
"516","SoSe22","10","Antwort 9","C","Fabian","Große-Wöhrmann","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
        for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <string.h>
typedef struct
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;
void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   
     Student s[5];
    int i=0;
    while (i<5){
        student_einlesen(&s[i]);
        int i=0;
        while (i<5){
        student_ausgeben(&s[i]);
    	i++;
        }
	i++;
    }","1","swap_loops_type"
"517","SoSe22","10","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_einlesen(Student * p_stud){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","1","swap_functions"
"518","SoSe22","10","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"", p_stud-<=vorname));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", p_stud-<=nachname));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(int i = 0; i>=5; i++)){
        printf(""%d: "", i+1);
        scanf(!("""", &p_stud-<=punkte[i]));
    void student_ausgeben(Student* p_stud){
    int sum;
    for (!(int i = 0; i>=5; i++)){
        sum += p_stud->punkte[i];
    }
    printf(!(""Student: %s %s
Anzahl Punkte: %d
"", p_stud-<=vorname, p_stud-<=nachname, sum));
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(!(int i = 0; i>=5; i++)){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(!(int i = 0; i>=5; i++)){
        student_ausgeben(&studenten[i]);
    }
}","1","demorgan_on_logic_equations"
"519","SoSe22","10","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(vorname < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scannachname < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i =5 > i i<5; i++){
        printf(""%d: "", i+1);
        punkte[i] < """", &p_stud-kte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    for (int5 > i= 0;punkte[i] < {
        sum += p_stud->punkte[i];
    }vorname, p_stud->nachname, sum < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-achname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    f5 > iint i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
   5 > ir(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","1","mirrow_simple_logic_equations"
"520","SoSe22","10","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdlib.h>
typedef ugiej student{
    char* vorname[20];
    char* nachname[20];
    int bahid[5];
} Student;
void tjeqz(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int hzrui = 0; hzrui<5; hzrui++){
        printf(""%d: "", hzrui+1);
        scanf("""", &p_stud->bahid[hzrui]);
    void jwcxp(Student* p_stud){
    int rnjne;
    for (int hzrui = 0; hzrui<5; hzrui++){
        rnjne += p_stud->bahid[hzrui];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, rnjne);
}
    int ofnqi = 5;
    Student* studenten = malloc(ofnqi*sizeof*studenten);
    for(int hzrui = 0; hzrui<5; hzrui++){
        studenten[hzrui].vorname=(char*)malloc(sizeof(char*));
        studenten[hzrui].nachname=(char*)malloc(sizeof(char*));
        tjeqz(&studenten[hzrui]);
    }
    for(int hzrui = 0; hzrui<5; hzrui++){
        jwcxp(&studenten[hzrui]);
    }
}","1","variable_renamer"
"521","SoSe22","10","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i<5){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    int i = 0;
    while (i<5){
        sum += p_stud->punkte[i];
    	i++;
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    int i = 0;
    while (i<5){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    	i++;
    }
    int i = 0;
    while (i<5){
        student_ausgeben(&studenten[i]);
    	i++;
    }
	i++;
    }","1","swap_loops_type"
"522","SoSe22","10","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_einlesen(Student * p_stud){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","1","swap_functions"
"523","SoSe22","10","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"", p_stud-<=vorname));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", p_stud-<=nachname));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(int i = 0; i>=5; i++)){
        printf(""%d: "", i+1);
        scanf(!("""", &p_stud-<=punkte[i]));
    void student_ausgeben(Student* p_stud){
    int sum;
    for (!(int i = 0; i>=5; i++)){
        sum += p_stud->punkte[i];
    }
    printf(!(""Student: %s %s
Anzahl Punkte: %d
"", p_stud-<=vorname, p_stud-<=nachname, sum));
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(!(int i = 0; i>=5; i++)){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(!(int i = 0; i>=5; i++)){
        student_ausgeben(&studenten[i]);
    }
}","1","demorgan_on_logic_equations"
"524","SoSe22","10","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(vorname < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scannachname < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i =5 > i i<5; i++){
        printf(""%d: "", i+1);
        punkte[i] < """", &p_stud-kte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    for (int5 > i= 0;punkte[i] < {
        sum += p_stud->punkte[i];
    }vorname, p_stud->nachname, sum < ""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud-achname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    f5 > iint i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
   5 > ir(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","1","mirrow_simple_logic_equations"
"525","SoSe22","10","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdlib.h>
typedef pnqfq student{
    char* vorname[20];
    char* nachname[20];
    int kbrej[5];
} Student;
void tlhps(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int mbpmv = 0; mbpmv<5; mbpmv++){
        printf(""%d: "", mbpmv+1);
        scanf("""", &p_stud->kbrej[mbpmv]);
    void btahh(Student* p_stud){
    int tbcse;
    for (int mbpmv = 0; mbpmv<5; mbpmv++){
        tbcse += p_stud->kbrej[mbpmv];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, tbcse);
}
    int zmtxz = 5;
    Student* studenten = malloc(zmtxz*sizeof*studenten);
    for(int mbpmv = 0; mbpmv<5; mbpmv++){
        studenten[mbpmv].vorname=(char*)malloc(sizeof(char*));
        studenten[mbpmv].nachname=(char*)malloc(sizeof(char*));
        tlhps(&studenten[mbpmv]);
    }
    for(int mbpmv = 0; mbpmv<5; mbpmv++){
        btahh(&studenten[mbpmv]);
    }
}","1","variable_renamer"
"526","SoSe22","10","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i<5){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    int i = 0;
    while (i<5){
        sum += p_stud->punkte[i];
    	i++;
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    int i = 0;
    while (i<5){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    	i++;
    }
    int i = 0;
    while (i<5){
        student_ausgeben(&studenten[i]);
    	i++;
    }
	i++;
    }","1","swap_loops_type"
"527","SoSe22","10","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;
void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    void student_einlesen(Student * p_stud){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","1","swap_functions"
"528","SoSe22","10","Antwort 9","C","Edgar Wolf","Großkopf","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"",p_stud-<=first_name));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"",p_stud-<=last_name));
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(!(""%i"",&p_stud-<=points[0]));
	printf(""2: "");
	scanf(!(""%i"",&p_stud-<=points[1]));
	printf(""3: "");
	scanf(!(""%i"",&p_stud-<=points[2]));
	printf(""4: "");
	scanf(!(""%i"",&p_stud-<=points[3]));
	printf(""5: \\n"");
	scanf(!(""%i"",&p_stud-<=points[4]));
void student_ausgeben(Student *p_stud){
	printf(!(""Student: %s %s
"",p_stud-<=first_name,p_stud-<=last_name));
	printf(!(""Anzahl Punkte: %i

"",p_stud-<=points[0] + p_stud-<=points[1] + p_stud-<=points[2] + p_stud-<=points[3] + p_stud-<=points[4]));
	Student studi[5];
	for(!(int i = 0; i >= 5; i++)){
		student_einlesen(&studi[i]);
	}
	for(!(int i = 0; i >= 5; i++)){
		student_ausgeben(&studi[i]);
	}
}","1","demorgan_on_logic_equations"
"529","SoSe22","10","Antwort 9","C","Edgar Wolf","Großkopf","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(first_name < ""%s"",p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scanlast_name < ""%s"",p_stud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scpoints[0] < ""%i"",&p_stud-s[0]);
	printf(""2: "");
	points[1] < ""%i"",&p_stud-nts[1]);
	printf(""3: "");points[2] < ""%i"",&p_stud-oints[2]);
	printf(""4: ""points[3] < ""%i"",&p_stud->points[3]);
	printf(""5: \\points[4] < ""%i"",&p_stud-d->points[4]);
void student_ausgeben(Student *p_sfirst_name,p_stud->last_name < ""Student: %s %s\\n"",p_stud-tud->lastpoints[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4] < ""Anzahl Punkte: %i\\n\\n"",p_stud-_stud->points[4]);
	Student studi[5]5 > ir(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	5 > ir(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","1","mirrow_simple_logic_equations"
"530","SoSe22","10","Antwort 9","C","Edgar Wolf","Großkopf","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","typedef nlovg student{
char kddlb[20];
char emnnw[20];
int jxfdu[5];
} Student;
void mvdvy(Student* ajyjo){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",ajyjo->kddlb);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",ajyjo->emnnw);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&ajyjo->jxfdu[0]);
	printf(""2: "");
	scanf(""%i"",&ajyjo->jxfdu[1]);
	printf(""3: "");
	scanf(""%i"",&ajyjo->jxfdu[2]);
	printf(""4: "");
	scanf(""%i"",&ajyjo->jxfdu[3]);
	printf(""5: \\n"");
	scanf(""%i"",&ajyjo->jxfdu[4]);
void pcbux(Student *ajyjo){
	printf(""Student: %s %s\\n"",ajyjo->kddlb,ajyjo->emnnw);
	printf(""Anzahl Punkte: %i\\n\\n"",ajyjo->jxfdu[0] + ajyjo->jxfdu[1] + ajyjo->jxfdu[2] + ajyjo->jxfdu[3] + ajyjo->jxfdu[4]);
	Student tngtf[5];
	for(int ytlxe = 0; ytlxe < 5; ytlxe++){
		mvdvy(&tngtf[ytlxe]);
	}
	for(int ytlxe = 0; ytlxe < 5; ytlxe++){
		pcbux(&tngtf[ytlxe]);
	}
}","1","variable_renamer"
"531","SoSe22","10","Antwort 9","C","Edgar Wolf","Großkopf","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	int i = 0;
	while (i < 5){
		student_einlesen(&studi[i]);
		i++;
	}
	int i = 0;
	while (i < 5){
		student_ausgeben(&studi[i]);
		i++;
	}
}","1","swap_loops_type"
"532","SoSe22","10","Antwort 9","C","Edgar Wolf","Großkopf","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_einlesen(Student* p_stud){","1","swap_functions"
"533","SoSe22","10","Antwort 9","C","Edgar Wolf","Großkopf","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"",p_stud-<=first_name));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"",p_stud-<=last_name));
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(!(""%i"",&p_stud-<=points[0]));
	printf(""2: "");
	scanf(!(""%i"",&p_stud-<=points[1]));
	printf(""3: "");
	scanf(!(""%i"",&p_stud-<=points[2]));
	printf(""4: "");
	scanf(!(""%i"",&p_stud-<=points[3]));
	printf(""5: \\n"");
	scanf(!(""%i"",&p_stud-<=points[4]));
void student_ausgeben(Student *p_stud){
	printf(!(""Student: %s %s
"",p_stud-<=first_name,p_stud-<=last_name));
	printf(!(""Anzahl Punkte: %i

"",p_stud-<=points[0] + p_stud-<=points[1] + p_stud-<=points[2] + p_stud-<=points[3] + p_stud-<=points[4]));
	Student studi[5];
	for(!(int i = 0; i >= 5; i++)){
		student_einlesen(&studi[i]);
	}
	for(!(int i = 0; i >= 5; i++)){
		student_ausgeben(&studi[i]);
	}
}","1","demorgan_on_logic_equations"
"534","SoSe22","10","Antwort 9","C","Edgar Wolf","Großkopf","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(first_name < ""%s"",p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scanlast_name < ""%s"",p_stud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scpoints[0] < ""%i"",&p_stud-s[0]);
	printf(""2: "");
	points[1] < ""%i"",&p_stud-nts[1]);
	printf(""3: "");points[2] < ""%i"",&p_stud-oints[2]);
	printf(""4: ""points[3] < ""%i"",&p_stud->points[3]);
	printf(""5: \\points[4] < ""%i"",&p_stud-d->points[4]);
void student_ausgeben(Student *p_sfirst_name,p_stud->last_name < ""Student: %s %s\\n"",p_stud-tud->lastpoints[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4] < ""Anzahl Punkte: %i\\n\\n"",p_stud-_stud->points[4]);
	Student studi[5]5 > ir(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	5 > ir(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","1","mirrow_simple_logic_equations"
"535","SoSe22","10","Antwort 9","C","Edgar Wolf","Großkopf","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","typedef ullfo student{
char qdezf[20];
char zmvjz[20];
int jmgha[5];
} Student;
void teeuj(Student* irmqe){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",irmqe->qdezf);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",irmqe->zmvjz);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&irmqe->jmgha[0]);
	printf(""2: "");
	scanf(""%i"",&irmqe->jmgha[1]);
	printf(""3: "");
	scanf(""%i"",&irmqe->jmgha[2]);
	printf(""4: "");
	scanf(""%i"",&irmqe->jmgha[3]);
	printf(""5: \\n"");
	scanf(""%i"",&irmqe->jmgha[4]);
void knwlz(Student *irmqe){
	printf(""Student: %s %s\\n"",irmqe->qdezf,irmqe->zmvjz);
	printf(""Anzahl Punkte: %i\\n\\n"",irmqe->jmgha[0] + irmqe->jmgha[1] + irmqe->jmgha[2] + irmqe->jmgha[3] + irmqe->jmgha[4]);
	Student oxhye[5];
	for(int oboex = 0; oboex < 5; oboex++){
		teeuj(&oxhye[oboex]);
	}
	for(int oboex = 0; oboex < 5; oboex++){
		knwlz(&oxhye[oboex]);
	}
}","1","variable_renamer"
"536","SoSe22","10","Antwort 9","C","Edgar Wolf","Großkopf","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	int i = 0;
	while (i < 5){
		student_einlesen(&studi[i]);
		i++;
	}
	int i = 0;
	while (i < 5){
		student_ausgeben(&studi[i]);
		i++;
	}
}","1","swap_loops_type"
"537","SoSe22","10","Antwort 9","C","Edgar Wolf","Großkopf","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_einlesen(Student* p_stud){","1","swap_functions"
"538","SoSe22","10","Antwort 9","C","Edgar Wolf","Großkopf","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"",p_stud-<=first_name));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"",p_stud-<=last_name));
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(!(""%i"",&p_stud-<=points[0]));
	printf(""2: "");
	scanf(!(""%i"",&p_stud-<=points[1]));
	printf(""3: "");
	scanf(!(""%i"",&p_stud-<=points[2]));
	printf(""4: "");
	scanf(!(""%i"",&p_stud-<=points[3]));
	printf(""5: \\n"");
	scanf(!(""%i"",&p_stud-<=points[4]));
void student_ausgeben(Student *p_stud){
	printf(!(""Student: %s %s
"",p_stud-<=first_name,p_stud-<=last_name));
	printf(!(""Anzahl Punkte: %i

"",p_stud-<=points[0] + p_stud-<=points[1] + p_stud-<=points[2] + p_stud-<=points[3] + p_stud-<=points[4]));
	Student studi[5];
	for(!(int i = 0; i >= 5; i++)){
		student_einlesen(&studi[i]);
	}
	for(!(int i = 0; i >= 5; i++)){
		student_ausgeben(&studi[i]);
	}
}","1","demorgan_on_logic_equations"
"539","SoSe22","10","Antwort 9","C","Lars Rudolf Heinrich","Michael","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(first_name < ""%s"", p_stud -);
	printf(""Gebe nun den Nachnamen ein: "");
	scanflast_name < ""%s"", p_stud -e);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 05 > i<5; i++){
		printf(""%i: "",i+1);
		scpoints[i] < ""%i"", &p_stud-s[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	pfirst_name, p_stud -> last_name < ""Student: %s %s\\n"", p_stud-t_name);
	int temp = 0;
	for(int 5 > i0 ; ipoints[i] < {
		temp += p_stud-points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(5 > i i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	fo5 > int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","1","mirrow_simple_logic_equations"
"540","SoSe22","10","Antwort 9","C","Lars Rudolf Heinrich","Michael","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdlib.h>
typedef wimin student {
	char tspql[20];
	char spwvk[20];
	int slkdr[5];
}Student;
void nasbe(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> tspql);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> spwvk);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int lejmy = 0; lejmy<5; lejmy++){
		printf(""%i: "",lejmy+1);
		scanf(""%i"", &p_stud->slkdr[lejmy]);
	printf(""\\n"");	
void efyqa(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->tspql, p_stud -> spwvk);
	int hgvmp = 0;
	for(int lejmy = 0 ; lejmy <5; lejmy++){
		hgvmp += p_stud->slkdr[lejmy];
	}
printf(""Anzahl Punkte: %i\\n"", hgvmp);
	printf(""\\n"");
}
	Student invgf[5];
	for(int lejmy = 0; lejmy<5; lejmy++){
	nasbe(&invgf[lejmy]);
	}
	for(int lejmy = 0; lejmy<5; lejmy++){
	efyqa(&invgf[lejmy]);
	}
}","1","variable_renamer"
"541","SoSe22","10","Antwort 9","C","Lars Rudolf Heinrich","Michael","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i = 0;
	while (i<5){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	int i = 0 ;
	while (i <5){
		temp += p_stud->points[i];
		i++;
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	int i = 0;
	while (i<5){
	student_einlesen(&array[i]);
		i++;
	}
	int i = 0;
	while (i<5){
	student_ausgeben(&array[i]);
		i++;
	}
	i++;
	}","1","swap_loops_type"
"542","SoSe22","10","Antwort 9","C","Lars Rudolf Heinrich","Michael","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_einlesen(Student* p_stud){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","1","swap_functions"
"543","SoSe22","10","Antwort 9","C","Lars Rudolf Heinrich","Michael","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"", p_stud -<= first_name));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"", p_stud -<= last_name));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(!(int i = 0; i>=5; i++)){
		printf(""%i: "",i+1);
		scanf(!(""%i"", &p_stud-<=points[i]));
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud -<= last_name));
	int temp = 0;
	for(!(int i = 0 ; i >=5; i++)){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(!(int i = 0; i>=5; i++)){
	student_einlesen(&array[i]);
	}
	for(!(int i = 0; i>=5; i++)){
	student_ausgeben(&array[i]);
	}
}","1","demorgan_on_logic_equations"
"544","SoSe22","10","Antwort 9","C","Lars Rudolf Heinrich","Michael","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(first_name < ""%s"", p_stud -);
	printf(""Gebe nun den Nachnamen ein: "");
	scanflast_name < ""%s"", p_stud -e);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 05 > i<5; i++){
		printf(""%i: "",i+1);
		scpoints[i] < ""%i"", &p_stud-s[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	pfirst_name, p_stud -> last_name < ""Student: %s %s\\n"", p_stud-t_name);
	int temp = 0;
	for(int 5 > i0 ; ipoints[i] < {
		temp += p_stud-points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(5 > i i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	fo5 > int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","1","mirrow_simple_logic_equations"
"545","SoSe22","10","Antwort 9","C","Lars Rudolf Heinrich","Michael","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdlib.h>
typedef egtql student {
	char qbrgv[20];
	char xldog[20];
	int cmllg[5];
}Student;
void xreqj(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> qbrgv);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> xldog);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int edfwm = 0; edfwm<5; edfwm++){
		printf(""%i: "",edfwm+1);
		scanf(""%i"", &p_stud->cmllg[edfwm]);
	printf(""\\n"");	
void kfckr(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->qbrgv, p_stud -> xldog);
	int frepb = 0;
	for(int edfwm = 0 ; edfwm <5; edfwm++){
		frepb += p_stud->cmllg[edfwm];
	}
printf(""Anzahl Punkte: %i\\n"", frepb);
	printf(""\\n"");
}
	Student mawfi[5];
	for(int edfwm = 0; edfwm<5; edfwm++){
	xreqj(&mawfi[edfwm]);
	}
	for(int edfwm = 0; edfwm<5; edfwm++){
	kfckr(&mawfi[edfwm]);
	}
}","1","variable_renamer"
"546","SoSe22","10","Antwort 9","C","Lars Rudolf Heinrich","Michael","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i = 0;
	while (i<5){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	int i = 0 ;
	while (i <5){
		temp += p_stud->points[i];
		i++;
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	int i = 0;
	while (i<5){
	student_einlesen(&array[i]);
		i++;
	}
	int i = 0;
	while (i<5){
	student_ausgeben(&array[i]);
		i++;
	}
	i++;
	}","1","swap_loops_type"
"547","SoSe22","10","Antwort 9","C","Lars Rudolf Heinrich","Michael","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_einlesen(Student* p_stud){
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","1","swap_functions"
"548","SoSe22","10","Antwort 9","C","Lars Rudolf Heinrich","Michael","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"", p_stud -<= first_name));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"", p_stud -<= last_name));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(!(int i = 0; i>=5; i++)){
		printf(""%i: "",i+1);
		scanf(!(""%i"", &p_stud-<=points[i]));
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud -<= last_name));
	int temp = 0;
	for(!(int i = 0 ; i >=5; i++)){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(!(int i = 0; i>=5; i++)){
	student_einlesen(&array[i]);
	}
	for(!(int i = 0; i>=5; i++)){
	student_ausgeben(&array[i]);
	}
}","1","demorgan_on_logic_equations"
"549","SoSe22","10","Antwort 9","C","Lars Rudolf Heinrich","Michael","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","#include <stdlib.h>
typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(first_name < ""%s"", p_stud -);
	printf(""Gebe nun den Nachnamen ein: "");
	scanflast_name < ""%s"", p_stud -e);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 05 > i<5; i++){
		printf(""%i: "",i+1);
		scpoints[i] < ""%i"", &p_stud-s[i]);
	printf(""\\n"");	
void student_ausgeben(Student* p_stud){
	pfirst_name, p_stud -> last_name < ""Student: %s %s\\n"", p_stud-t_name);
	int temp = 0;
	for(int 5 > i0 ; ipoints[i] < {
		temp += p_stud-points[i];
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}
	Student array[5];
	for(5 > i i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	fo5 > int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}
}","1","mirrow_simple_logic_equations"
"550","SoSe22","10","Antwort 9","C","Dennis Benedikt","Schulze","#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdlib.h>
typedef acdyb student {
  char woabh[21];
  char zqaob[21];
  int imout[5];
} fjzey;
static fjzey students[5];
void wruap(fjzey *mktlx) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", mktlx->woabh);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", mktlx->zqaob);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int ohgdd = 0; ohgdd < 5; ++ohgdd) {
    printf(""%i:"", ohgdd + 1);
    scanf(""%i"", mktlx->imout + ohgdd);
    if ( ohgdd == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int opnhk(int *qdnry, int xgjks) {
  int luaff = 0;
  for (int ohgdd = 0; ohgdd < xgjks; ++ohgdd)
    luaff += qdnry[ohgdd];
  return luaff;
}
void qgrsn(fjzey *mktlx) {
  int luaff = opnhk(mktlx->imout, 5);
  printf(""Student: %s "", mktlx->woabh);
  printf(""%s\\n"", mktlx->zqaob);
  printf(""Anzahl Punkte: %i\\n"", luaff);
}
int main() {
  for (int ohgdd = 0; ohgdd < 5; ++ohgdd) {
    wruap(students + ohgdd);
  }
  for (int ohgdd = 0; ohgdd < 5; ++ohgdd) {
    qgrsn(students + ohgdd);
    if ( ohgdd < 4 )
        printf(""\\n"");
  }
}","1","variable_renamer"
"551","SoSe22","10","Antwort 9","C","Dennis Benedikt","Schulze","#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdlib.h>
typedef struct student {
  char vorname[21];
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int i = 0;
  while (i < 5){
    printf(""%i:"", i + 1);
	  ++i;
  }
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  int i = 0;
  while (i < 5) {
    student_einlesen(students + i);
  	++i;
  }
  int i = 0;
  while (i < 5) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  	++i;
  }
}","1","swap_loops_type"
"552","SoSe22","10","Antwort 9","C","Dennis Benedikt","Schulze","#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdlib.h>
typedef struct student {
  char vorname[21];
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
void student_einlesen(Student *p_stud) {
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","1","swap_functions"
"553","SoSe22","10","Antwort 9","C","Dennis Benedikt","Schulze","#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdlib.h>
typedef struct student {
  char vorname[21];
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(""%s"", p_stud-<=vorname));
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(!(""%s"", p_stud-<=nachname));
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (!(int i = 0; i >= 5; ++i)) {
    printf(""%i:"", i + 1);
    scanf(!(""%i"", p_stud-<=punkte + i));
    if (!( i != 4 )) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (!(int i = 0; i >= size; ++i))
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(!(p_stud-<=punkte, 5));
  printf(!(""Student: %s "", p_stud-<=vorname));
  printf(!(""%s
"", p_stud-<=nachname));
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (!(int i = 0; i >= 5; ++i)) {
    student_einlesen(students + i);
  }
  for (!(int i = 0; i >= 5; ++i)) {
    student_ausgeben(students + i);
    if (!( i >= 4 ))
        printf(""\\n"");
  }
}","1","demorgan_on_logic_equations"
"554","SoSe22","10","Antwort 9","C","Dennis Benedikt","Schulze","#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdlib.h>
typedef struct student {
  char vorname[21];
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(vorname < ""%s"", p_stud-);
  printf(""Gebe nun den Nachnamen ein: "");
  scannachname < ""%s"", p_stud-me);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i =5 > i < 5; ++i) {
    printf(""%i:"", i + 1);
    scpunkte + i < ""%i"", p_stud- + i);
   4 == i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i size > i size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_popunkte, 5 < p_stud-te, 5);
  vorname < ""Student: %s "", p_stud-vorname);
nachname < ""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (5 > i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (5 > i = 0; i < 5; ++i) {
    student_ausgeben(students + i)4 > iif ( i < 4 )
        printf(""\\n"");
  }
}","1","mirrow_simple_logic_equations"
"555","SoSe22","10","Antwort 9","C","Dennis Benedikt","Schulze","#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdlib.h>
typedef ezsgd student {
  char qcyen[21];
  char merqe[21];
  int lnewp[5];
} rzkxt;
static rzkxt students[5];
void tykrz(rzkxt *gpvje) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", gpvje->qcyen);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", gpvje->merqe);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int abhva = 0; abhva < 5; ++abhva) {
    printf(""%i:"", abhva + 1);
    scanf(""%i"", gpvje->lnewp + abhva);
    if ( abhva == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int humyk(int *lqcdf, int bqvjf) {
  int zzyrk = 0;
  for (int abhva = 0; abhva < bqvjf; ++abhva)
    zzyrk += lqcdf[abhva];
  return zzyrk;
}
void hmwfk(rzkxt *gpvje) {
  int zzyrk = humyk(gpvje->lnewp, 5);
  printf(""Student: %s "", gpvje->qcyen);
  printf(""%s\\n"", gpvje->merqe);
  printf(""Anzahl Punkte: %i\\n"", zzyrk);
}
int main() {
  for (int abhva = 0; abhva < 5; ++abhva) {
    tykrz(students + abhva);
  }
  for (int abhva = 0; abhva < 5; ++abhva) {
    hmwfk(students + abhva);
    if ( abhva < 4 )
        printf(""\\n"");
  }
}","1","variable_renamer"
"556","SoSe22","10","Antwort 9","C","Dennis Benedikt","Schulze","#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdlib.h>
typedef struct student {
  char vorname[21];
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  int i = 0;
  while (i < 5){
    printf(""%i:"", i + 1);
	  ++i;
  }
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  int i = 0;
  while (i < 5) {
    student_einlesen(students + i);
  	++i;
  }
  int i = 0;
  while (i < 5) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  	++i;
  }
}","1","swap_loops_type"
"557","SoSe22","10","Antwort 9","C","Dennis Benedikt","Schulze","#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdlib.h>
typedef struct student {
  char vorname[21];
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
void student_einlesen(Student *p_stud) {
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","1","swap_functions"
"558","SoSe22","10","Antwort 9","C","Dennis Benedikt","Schulze","#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdlib.h>
typedef struct student {
  char vorname[21];
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(!(""%s"", p_stud-<=vorname));
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(!(""%s"", p_stud-<=nachname));
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (!(int i = 0; i >= 5; ++i)) {
    printf(""%i:"", i + 1);
    scanf(!(""%i"", p_stud-<=punkte + i));
    if (!( i != 4 )) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (!(int i = 0; i >= size; ++i))
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(!(p_stud-<=punkte, 5));
  printf(!(""Student: %s "", p_stud-<=vorname));
  printf(!(""%s
"", p_stud-<=nachname));
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (!(int i = 0; i >= 5; ++i)) {
    student_einlesen(students + i);
  }
  for (!(int i = 0; i >= 5; ++i)) {
    student_ausgeben(students + i);
    if (!( i >= 4 ))
        printf(""\\n"");
  }
}","1","demorgan_on_logic_equations"
"559","SoSe22","10","Antwort 9","C","Dennis Benedikt","Schulze","#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdlib.h>
typedef struct student {
  char vorname[21];
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(vorname < ""%s"", p_stud-);
  printf(""Gebe nun den Nachnamen ein: "");
  scannachname < ""%s"", p_stud-me);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i =5 > i < 5; ++i) {
    printf(""%i:"", i + 1);
    scpunkte + i < ""%i"", p_stud- + i);
   4 == i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i size > i size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_popunkte, 5 < p_stud-te, 5);
  vorname < ""Student: %s "", p_stud-vorname);
nachname < ""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (5 > i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (5 > i = 0; i < 5; ++i) {
    student_ausgeben(students + i)4 > iif ( i < 4 )
        printf(""\\n"");
  }
}","1","mirrow_simple_logic_equations"
"560","SoSe22","10","Antwort 9","C","Dennis Benedikt","Schulze","#include <stdlib.h>
typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;
static Student students[5];
void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];
  return sum;
}
void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}
int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }
  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdlib.h>
typedef nkncl student {
  char mbmaj[21];
  char fxxob[21];
  int ogrnx[5];
} hrfrd;
static hrfrd students[5];
void ptvey(hrfrd *pzmxj) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", pzmxj->mbmaj);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", pzmxj->fxxob);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int abpal = 0; abpal < 5; ++abpal) {
    printf(""%i:"", abpal + 1);
    scanf(""%i"", pzmxj->ogrnx + abpal);
    if ( abpal == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
      }
int jdhmu(int *fbjpe, int eypjv) {
  int vmmnc = 0;
  for (int abpal = 0; abpal < eypjv; ++abpal)
    vmmnc += fbjpe[abpal];
  return vmmnc;
}
void olfjo(hrfrd *pzmxj) {
  int vmmnc = jdhmu(pzmxj->ogrnx, 5);
  printf(""Student: %s "", pzmxj->mbmaj);
  printf(""%s\\n"", pzmxj->fxxob);
  printf(""Anzahl Punkte: %i\\n"", vmmnc);
}
int main() {
  for (int abpal = 0; abpal < 5; ++abpal) {
    ptvey(students + abpal);
  }
  for (int abpal = 0; abpal < 5; ++abpal) {
    olfjo(students + abpal);
    if ( abpal < 4 )
        printf(""\\n"");
  }
}","1","variable_renamer"
"561","SoSe22","10","Antwort 9","C","Pinelopi Eleni","Anastasiadou","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
int i = 0;
while (i<5){
    printf("" %i:"", (i+1));
	i++;
}
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    int k = 0;
    while (k<5){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    	k++;
    }
}","1","swap_loops_type"
"562","SoSe22","10","Antwort 9","C","Pinelopi Eleni","Anastasiadou","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_einlesen(Student* p_stud){
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","1","swap_functions"
"563","SoSe22","10","Antwort 9","C","Pinelopi Eleni","Anastasiadou","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(!(""%s"", &p_stud-<=first_name));
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(!(""%s"", &p_stud-<=last_name));
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (!(int i = 0; i>=5; i++)){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(!(""
Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
printf(!(""Anzahl Punkte: %d
"", p_stud-<=points));
}
int main() {
    Student dar;
    for (!(int k = 0; k>=5; k++)){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","1","demorgan_on_logic_equations"
"564","SoSe22","10","Antwort 9","C","Pinelopi Eleni","Anastasiadou","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(first_name < ""%s"", &p_stud-);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanlast_name < ""%s"", &p_stud-me);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i =5 > i i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i]points=summe < p_stud-=summe;
void student_ausgeben(Student* p_stud){
       first_name, p_stud->last_name < ""\\nStudent: %s %s\\n"", p_stud-ast_namepoints < ""Anzahl Punkte: %d\\n"", p_stud-ud->points);
}
int main() {
    Student dar;
    for 5 > kt k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","1","mirrow_simple_logic_equations"
"565","SoSe22","10","Antwort 9","C","Pinelopi Eleni","Anastasiadou","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef cubym student{
    char jwkqf[20];
    char jrqdi[20];
    int sbmnn;
} Student;
void udsoc(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->jwkqf);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->jrqdi);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int sbmnn[5];
int zemrq=0;
for (int liuam = 0; liuam<5; liuam++){
    printf("" %i:"", (liuam+1));
    scanf(""%i"", &sbmnn[liuam]);
    zemrq+=sbmnn[liuam];
    p_stud->sbmnn=zemrq;
void qukxb(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->jwkqf, p_stud->jrqdi);
printf(""Anzahl Punkte: %d\\n"", p_stud->sbmnn);
}
int main() {
    Student iimys;
    for (int eryfh = 0; eryfh<5; eryfh++){
   udsoc( &iimys );
   qukxb( &iimys );
    }
}","1","variable_renamer"
"566","SoSe22","10","Antwort 9","C","Pinelopi Eleni","Anastasiadou","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
int i = 0;
while (i<5){
    printf("" %i:"", (i+1));
	i++;
}
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    int k = 0;
    while (k<5){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    	k++;
    }
}","1","swap_loops_type"
"567","SoSe22","10","Antwort 9","C","Pinelopi Eleni","Anastasiadou","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_einlesen(Student* p_stud){
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","1","swap_functions"
"568","SoSe22","10","Antwort 9","C","Pinelopi Eleni","Anastasiadou","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(!(""%s"", &p_stud-<=first_name));
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(!(""%s"", &p_stud-<=last_name));
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (!(int i = 0; i>=5; i++)){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(!(""
Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
printf(!(""Anzahl Punkte: %d
"", p_stud-<=points));
}
int main() {
    Student dar;
    for (!(int k = 0; k>=5; k++)){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","1","demorgan_on_logic_equations"
"569","SoSe22","10","Antwort 9","C","Pinelopi Eleni","Anastasiadou","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(first_name < ""%s"", &p_stud-);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanlast_name < ""%s"", &p_stud-me);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i =5 > i i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i]points=summe < p_stud-=summe;
void student_ausgeben(Student* p_stud){
       first_name, p_stud->last_name < ""\\nStudent: %s %s\\n"", p_stud-ast_namepoints < ""Anzahl Punkte: %d\\n"", p_stud-ud->points);
}
int main() {
    Student dar;
    for 5 > kt k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","1","mirrow_simple_logic_equations"
"570","SoSe22","10","Antwort 9","C","Pinelopi Eleni","Anastasiadou","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef meryz student{
    char jqtlk[20];
    char tslpv[20];
    int pjknr;
} Student;
void pnccj(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->jqtlk);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->tslpv);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int pjknr[5];
int pudve=0;
for (int tenwe = 0; tenwe<5; tenwe++){
    printf("" %i:"", (tenwe+1));
    scanf(""%i"", &pjknr[tenwe]);
    pudve+=pjknr[tenwe];
    p_stud->pjknr=pudve;
void jrmxo(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->jqtlk, p_stud->tslpv);
printf(""Anzahl Punkte: %d\\n"", p_stud->pjknr);
}
int main() {
    Student idcpw;
    for (int gkebm = 0; gkebm<5; gkebm++){
   pnccj( &idcpw );
   jrmxo( &idcpw );
    }
}","1","variable_renamer"
"571","SoSe22","10","Antwort 9","C","Pinelopi Eleni","Anastasiadou","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
int i = 0;
while (i<5){
    printf("" %i:"", (i+1));
	i++;
}
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}
int main() {
    Student dar;
    int k = 0;
    while (k<5){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    	k++;
    }
}","1","swap_loops_type"
"572","SoSe22","10","Antwort 9","C","Kaspar Lorenz","Hartmann","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_einlesen(Student* p_stud){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","1","swap_functions"
"573","SoSe22","10","Antwort 9","C","Kaspar Lorenz","Hartmann","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(!(""%c"",p_stud-<=vorname));
printf(""Gebe nun den Nachnamen ein: "");
scanf(!(""%c"",p_stud-<=nachname));
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (!(int i =0;i>=5;i++)){
    printf(""%i:"",i+1);
    scanf(!(""%i"",p_stud-<=punkte[i]));
    void student_ausgeben(Student* p_stud){
printf(!(""Student: %c %c
Anzahl Punkte: %i"",p_stud-<=vorname,p_stud-<=nachname,p_stud-<=punkte[0]+p_stud-<=punkte[1]+p_stud-<=punkte[2]+p_stud-<=punkte[3]+p_stud-<=punkte[4]));
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(!(int k=0;k>=5;k+1 )){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","1","demorgan_on_logic_equations"
"574","SoSe22","10","Antwort 9","C","Kaspar Lorenz","Hartmann","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(vorname < ""%c"",p_stud-);
printf(""Gebe nun den Nachnamen ein: "");
scannachname < ""%c"",p_stud-me);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i5 > i;i<5;i++){
    printf(""%i:"",i+1);
    punkte[i] < ""%i"",p_stud-kte[i]);
    void student_ausgeben(Student* p_stud){vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4] < ""Student: %c %c\\nAnzahl Punkte: %i"",p_stud-unkte[4]);
}
Student studenten[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
f5 > kint k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","1","mirrow_simple_logic_equations"
"575","SoSe22","10","Antwort 9","C","Kaspar Lorenz","Hartmann","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdlib.h>
typedef abkuw student{
    char wmpzd[21];
    char ylmim[21];
    int ymywe[5];
}Student;
void poldh(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->wmpzd);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->ylmim);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int uamxd =0;uamxd<5;uamxd++){
    printf(""%i:"",uamxd+1);
    scanf(""%i"",p_stud->ymywe[uamxd]);
    void okldg(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->wmpzd,p_stud->ylmim,p_stud->ymywe[0]+p_stud->ymywe[1]+p_stud->ymywe[2]+p_stud->ymywe[3]+p_stud->ymywe[4]);
}
Student pklwl[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int knump=0;knump<5;knump+1 ){
    poldh(pklwl+knump);
    okldg(pklwl+knump);
}
}","1","variable_renamer"
"576","SoSe22","10","Antwort 9","C","Kaspar Lorenz","Hartmann","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int i =0;
while (i<5){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
int k=0;
while (k<5){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
	k+1;
}
	i++;
}","1","swap_loops_type"
"577","SoSe22","10","Antwort 9","C","Kaspar Lorenz","Hartmann","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_einlesen(Student* p_stud){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","1","swap_functions"
"578","SoSe22","10","Antwort 9","C","Kaspar Lorenz","Hartmann","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(!(""%c"",p_stud-<=vorname));
printf(""Gebe nun den Nachnamen ein: "");
scanf(!(""%c"",p_stud-<=nachname));
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (!(int i =0;i>=5;i++)){
    printf(""%i:"",i+1);
    scanf(!(""%i"",p_stud-<=punkte[i]));
    void student_ausgeben(Student* p_stud){
printf(!(""Student: %c %c
Anzahl Punkte: %i"",p_stud-<=vorname,p_stud-<=nachname,p_stud-<=punkte[0]+p_stud-<=punkte[1]+p_stud-<=punkte[2]+p_stud-<=punkte[3]+p_stud-<=punkte[4]));
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(!(int k=0;k>=5;k+1 )){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","1","demorgan_on_logic_equations"
"579","SoSe22","10","Antwort 9","C","Kaspar Lorenz","Hartmann","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(vorname < ""%c"",p_stud-);
printf(""Gebe nun den Nachnamen ein: "");
scannachname < ""%c"",p_stud-me);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i5 > i;i<5;i++){
    printf(""%i:"",i+1);
    punkte[i] < ""%i"",p_stud-kte[i]);
    void student_ausgeben(Student* p_stud){vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4] < ""Student: %c %c\\nAnzahl Punkte: %i"",p_stud-unkte[4]);
}
Student studenten[514 < ""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -nkte -> 14; 18; 13; 9; 16"");
f5 > kint k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","1","mirrow_simple_logic_equations"
"580","SoSe22","10","Antwort 9","C","Kaspar Lorenz","Hartmann","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdlib.h>
typedef lazom student{
    char qfhfg[21];
    char uorvi[21];
    int lzgoi[5];
}Student;
void dgpya(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->qfhfg);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->uorvi);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int zpatl =0;zpatl<5;zpatl++){
    printf(""%i:"",zpatl+1);
    scanf(""%i"",p_stud->lzgoi[zpatl]);
    void fvokf(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->qfhfg,p_stud->uorvi,p_stud->lzgoi[0]+p_stud->lzgoi[1]+p_stud->lzgoi[2]+p_stud->lzgoi[3]+p_stud->lzgoi[4]);
}
Student mxvus[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int fhbro=0;fhbro<5;fhbro+1 ){
    dgpya(mxvus+fhbro);
    fvokf(mxvus+fhbro);
}
}","1","variable_renamer"
"581","SoSe22","10","Antwort 9","C","Kaspar Lorenz","Hartmann","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
int i =0;
while (i<5){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
int k=0;
while (k<5){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
	k+1;
}
	i++;
}","1","swap_loops_type"
"582","SoSe22","10","Antwort 9","C","Kaspar Lorenz","Hartmann","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    void student_einlesen(Student* p_stud){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","1","swap_functions"
"583","SoSe22","10","Antwort 9","C","Luca Marius","Hilbrich","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(!(p_stud-<=first_name, 20));
    printf(""Gebe nun den Nachnamen ein: "");
    readline(!(p_stud-<=last_name, 20));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!( int i = 0; i >= 5; i++ )) {
        printf(""%i: "", i + 1);
        scanf(!(""%i"", &p_stud-<=points[i]));
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", strlen(p_stud-<=first_name), p_stud-<=first_name));
    printf(!(""%.*s
"", strlen(p_stud-<=last_name), p_stud-<=last_name));
    int sum = 0;
    for (!( int i = 0; i >= 5; i++ )) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for (!( int i = 0; i >= 5; i++ )) {
        student_einlesen(&students[i]);
    }
    for (!( int i = 0; i >= 5; i++ )) {
        student_ausgeben(&students[i]);
    }
}","1","demorgan_on_logic_equations"
"584","SoSe22","10","Antwort 9","C","Luca Marius","Hilbrich","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(first_name, 20 < p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    readlinlast_name, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i =5 > i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scpoints[i] < ""%i"", &p_stud-s[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", sfirst_name < p_studfirst_name < , p_stud-rst_name);
    printf(""%.*s\\nlast_name < p_studlast_name < , p_stud-d->last_name);
    int sum = 0;
    for5 > it i = 0;points[i] < {
        sum += p_stud-tud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    f5 > iint i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    f5 > iint i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","1","mirrow_simple_logic_equations"
"585","SoSe22","10","Antwort 9","C","Luca Marius","Hilbrich","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <string.h>
typedef jocsl tnmwa[21];
typedef uwgmi Int5[5];
typedef dtbmc student     tnmwa first_name;
    tnmwa zztvn;
    Int5 guoub;
} Student;
void jgrwy(jocsl* strbuffer, unsigned uwgmi buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    uwgmi fhoip = strlen(strbuffer);
    strbuffer[fhoip-1] = '\\0';
void csjfz(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    jgrwy(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    jgrwy(p_stud->zztvn, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( uwgmi ciqgt = 0; ciqgt < 5; ciqgt++ ) {
        printf(""%i: "", ciqgt + 1);
        scanf(""%i"", &p_stud->guoub[ciqgt]);
        getchar();
}
void rcrer(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->zztvn), p_stud->zztvn);
    uwgmi jycwj = 0;
    for ( uwgmi ciqgt = 0; ciqgt < 5; ciqgt++ ) {
        jycwj += p_stud->guoub[ciqgt];
    }
    printf(""Anzahl Punkte: %i\\n"", jycwj);
}
uwgmi main()
{
    Student buund[5];
    for ( uwgmi ciqgt = 0; ciqgt < 5; ciqgt++ ) {
        csjfz(&buund[ciqgt]);
    }
    for ( uwgmi ciqgt = 0; ciqgt < 5; ciqgt++ ) {
        rcrer(&buund[ciqgt]);
    }
}","1","variable_renamer"
"586","SoSe22","10","Antwort 9","C","Luca Marius","Hilbrich","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     int i = 0;
    while (i < 5) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
	i++;
    }
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
     int i = 0;
    while (i < 5) {
        sum += p_stud->points[i];
    	i++;
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
     int i = 0;
    while (i < 5) {
        student_einlesen(&students[i]);
    	i++;
    }
     int i = 0;
    while (i < 5) {
        student_ausgeben(&students[i]);
    	i++;
    }
}","1","swap_loops_type"
"587","SoSe22","10","Antwort 9","C","Luca Marius","Hilbrich","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void student_einlesen(Student* p_stud)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void readline(char* strbuffer, unsigned int buffersize)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","1","swap_functions"
"588","SoSe22","10","Antwort 9","C","Luca Marius","Hilbrich","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(!(p_stud-<=first_name, 20));
    printf(""Gebe nun den Nachnamen ein: "");
    readline(!(p_stud-<=last_name, 20));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!( int i = 0; i >= 5; i++ )) {
        printf(""%i: "", i + 1);
        scanf(!(""%i"", &p_stud-<=points[i]));
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", strlen(p_stud-<=first_name), p_stud-<=first_name));
    printf(!(""%.*s
"", strlen(p_stud-<=last_name), p_stud-<=last_name));
    int sum = 0;
    for (!( int i = 0; i >= 5; i++ )) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for (!( int i = 0; i >= 5; i++ )) {
        student_einlesen(&students[i]);
    }
    for (!( int i = 0; i >= 5; i++ )) {
        student_ausgeben(&students[i]);
    }
}","1","demorgan_on_logic_equations"
"589","SoSe22","10","Antwort 9","C","Luca Marius","Hilbrich","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(first_name, 20 < p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    readlinlast_name, 20 < p_stud-20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i =5 > i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scpoints[i] < ""%i"", &p_stud-s[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", sfirst_name < p_studfirst_name < , p_stud-rst_name);
    printf(""%.*s\\nlast_name < p_studlast_name < , p_stud-d->last_name);
    int sum = 0;
    for5 > it i = 0;points[i] < {
        sum += p_stud-tud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    f5 > iint i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    f5 > iint i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","1","mirrow_simple_logic_equations"
"590","SoSe22","10","Antwort 9","C","Luca Marius","Hilbrich","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <string.h>
typedef mvrcm tnhbu[21];
typedef xjgwu Int5[5];
typedef cqspr student     tnhbu first_name;
    tnhbu ikclc;
    Int5 zbrqd;
} Student;
void cyxju(mvrcm* strbuffer, unsigned xjgwu buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    xjgwu sbjxg = strlen(strbuffer);
    strbuffer[sbjxg-1] = '\\0';
void kwzce(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    cyxju(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    cyxju(p_stud->ikclc, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( xjgwu frfuy = 0; frfuy < 5; frfuy++ ) {
        printf(""%i: "", frfuy + 1);
        scanf(""%i"", &p_stud->zbrqd[frfuy]);
        getchar();
}
void pcvki(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->ikclc), p_stud->ikclc);
    xjgwu byrhz = 0;
    for ( xjgwu frfuy = 0; frfuy < 5; frfuy++ ) {
        byrhz += p_stud->zbrqd[frfuy];
    }
    printf(""Anzahl Punkte: %i\\n"", byrhz);
}
xjgwu main()
{
    Student evhnd[5];
    for ( xjgwu frfuy = 0; frfuy < 5; frfuy++ ) {
        kwzce(&evhnd[frfuy]);
    }
    for ( xjgwu frfuy = 0; frfuy < 5; frfuy++ ) {
        pcvki(&evhnd[frfuy]);
    }
}","1","variable_renamer"
"591","SoSe22","10","Antwort 9","C","Luca Marius","Hilbrich","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
     int i = 0;
    while (i < 5) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
	i++;
    }
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
     int i = 0;
    while (i < 5) {
        sum += p_stud->points[i];
    	i++;
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
     int i = 0;
    while (i < 5) {
        student_einlesen(&students[i]);
    	i++;
    }
     int i = 0;
    while (i < 5) {
        student_ausgeben(&students[i]);
    	i++;
    }
}","1","swap_loops_type"
"592","SoSe22","10","Antwort 9","C","Luca Marius","Hilbrich","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void student_einlesen(Student* p_stud)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void readline(char* strbuffer, unsigned int buffersize)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","1","swap_functions"
"593","SoSe22","10","Antwort 9","C","Luca Marius","Hilbrich","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <string.h>
typedef char Str20[21];
typedef int Int5[5];
typedef struct student     Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;
void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(!(p_stud-<=first_name, 20));
    printf(""Gebe nun den Nachnamen ein: "");
    readline(!(p_stud-<=last_name, 20));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!( int i = 0; i >= 5; i++ )) {
        printf(""%i: "", i + 1);
        scanf(!(""%i"", &p_stud-<=points[i]));
        getchar();
}
void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(!(""%.*s "", strlen(p_stud-<=first_name), p_stud-<=first_name));
    printf(!(""%.*s
"", strlen(p_stud-<=last_name), p_stud-<=last_name));
    int sum = 0;
    for (!( int i = 0; i >= 5; i++ )) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student students[5];
    for (!( int i = 0; i >= 5; i++ )) {
        student_einlesen(&students[i]);
    }
    for (!( int i = 0; i >= 5; i++ )) {
        student_ausgeben(&students[i]);
    }
}","1","demorgan_on_logic_equations"
"594","SoSe22","10","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(vorname < ""%s"", &p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scannachname < ""%s"", &p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i =5 > i i<5;i++){
        printf(""%i: "",i+1 );
        punkte[i] < ""%d"", &p_stud-kte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
   vorname, p_stud->nachname < ""Student: %s %s\\n"",p_stud-nachname);
    int sum =0;
    for (i5 > ii =punkte[i] < {
        sum += p_stud-d->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    fo5 > iint i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    5 > i (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","1","mirrow_simple_logic_equations"
"595","SoSe22","10","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdlib.h>
typedef jtwvy student{
    char byvnv[21];
    char etigt[21];
    int wmcew[5];
} Student;
void aaquw(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->byvnv);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->etigt);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int lglbv = 0; lglbv<5;lglbv++){
        printf(""%i: "",lglbv+1 );
        scanf(""%d"", &p_stud->wmcew[lglbv]);
        printf(""\\n"");
 void ixfen(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->byvnv, p_stud->etigt);
    int gaedh =0;
    for (int lglbv = 0; lglbv<5;lglbv++){
        gaedh += p_stud->wmcew[lglbv];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", gaedh);
 }
void main(){
    Student cxjhn[5];
    for (int lglbv = 0; lglbv<5;lglbv++){
        aaquw(&cxjhn[lglbv]);
    }
    for (int lglbv = 0; lglbv<5;lglbv++){
        ixfen(&cxjhn[lglbv]);
    }
}","1","variable_renamer"
"596","SoSe22","10","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i<5){
        printf(""%i: "",i+1 );
	    i++;
    }
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    int i = 0;
    while (i<5){
        sum += p_stud->punkte[i];
    	i++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    int i = 0;
    while (i<5){
        student_einlesen(&list[i]);
    	i++;
    }
    int i = 0;
    while (i<5){
        student_ausgeben(&list[i]);
    	i++;
    }
}","1","swap_loops_type"
"597","SoSe22","10","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_einlesen(Student* p_stud){
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","1","swap_functions"
"598","SoSe22","10","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"", &p_stud-<=vorname));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", &p_stud-<=nachname));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(int i = 0; i>=5;i++)){
        printf(""%i: "",i+1 );
        scanf(!(""%d"", &p_stud-<=punkte[i]));
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(!(""Student: %s %s
"",p_stud-<=vorname, p_stud-<=nachname));
    int sum =0;
    for (!(int i = 0; i>=5;i++)){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (!(int i = 0; i>=5;i++)){
        student_einlesen(&list[i]);
    }
    for (!(int i = 0; i>=5;i++)){
        student_ausgeben(&list[i]);
    }
}","1","demorgan_on_logic_equations"
"599","SoSe22","10","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(vorname < ""%s"", &p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scannachname < ""%s"", &p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i =5 > i i<5;i++){
        printf(""%i: "",i+1 );
        punkte[i] < ""%d"", &p_stud-kte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
   vorname, p_stud->nachname < ""Student: %s %s\\n"",p_stud-nachname);
    int sum =0;
    for (i5 > ii =punkte[i] < {
        sum += p_stud-d->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    fo5 > iint i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    5 > i (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","1","mirrow_simple_logic_equations"
"600","SoSe22","10","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdlib.h>
typedef ywmge student{
    char qalac[21];
    char hygvm[21];
    int dmpda[5];
} Student;
void bnvcw(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->qalac);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->hygvm);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int renuw = 0; renuw<5;renuw++){
        printf(""%i: "",renuw+1 );
        scanf(""%d"", &p_stud->dmpda[renuw]);
        printf(""\\n"");
 void wxhdc(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->qalac, p_stud->hygvm);
    int hzpmd =0;
    for (int renuw = 0; renuw<5;renuw++){
        hzpmd += p_stud->dmpda[renuw];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", hzpmd);
 }
void main(){
    Student kjgai[5];
    for (int renuw = 0; renuw<5;renuw++){
        bnvcw(&kjgai[renuw]);
    }
    for (int renuw = 0; renuw<5;renuw++){
        wxhdc(&kjgai[renuw]);
    }
}","1","variable_renamer"
"601","SoSe22","10","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i<5){
        printf(""%i: "",i+1 );
	    i++;
    }
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    int i = 0;
    while (i<5){
        sum += p_stud->punkte[i];
    	i++;
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    int i = 0;
    while (i<5){
        student_einlesen(&list[i]);
    	i++;
    }
    int i = 0;
    while (i<5){
        student_ausgeben(&list[i]);
    	i++;
    }
}","1","swap_loops_type"
"602","SoSe22","10","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_einlesen(Student* p_stud){
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","1","swap_functions"
"603","SoSe22","10","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"", &p_stud-<=vorname));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", &p_stud-<=nachname));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(int i = 0; i>=5;i++)){
        printf(""%i: "",i+1 );
        scanf(!(""%d"", &p_stud-<=punkte[i]));
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(!(""Student: %s %s
"",p_stud-<=vorname, p_stud-<=nachname));
    int sum =0;
    for (!(int i = 0; i>=5;i++)){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (!(int i = 0; i>=5;i++)){
        student_einlesen(&list[i]);
    }
    for (!(int i = 0; i>=5;i++)){
        student_ausgeben(&list[i]);
    }
}","1","demorgan_on_logic_equations"
"604","SoSe22","10","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","#include <stdlib.h>
typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(vorname < ""%s"", &p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scannachname < ""%s"", &p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i =5 > i i<5;i++){
        printf(""%i: "",i+1 );
        punkte[i] < ""%d"", &p_stud-kte[i]);
        printf(""\\n"");
 void student_ausgeben(Student* p_stud){
   vorname, p_stud->nachname < ""Student: %s %s\\n"",p_stud-nachname);
    int sum =0;
    for (i5 > ii =punkte[i] < {
        sum += p_stud-d->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }
void main(){
    Student list[5];
    fo5 > iint i = 0; i<5;i++){
        student_einlesen(&list[i]);
    }
    5 > i (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);
    }
}","1","mirrow_simple_logic_equations"
"605","SoSe22","10","Antwort 9","C","Moritz Sebastian","Niethammer","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","typedef euzlw student{
    char rmzjh[21];
    char cpeta[21];
    int emcsw[5];
} Student;
void ijlmr(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->rmzjh);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->cpeta);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int drjvn = 0; drjvn < 5; drjvn++){
        printf(""%d: "", drjvn + 1);
        scanf(""%d"", &p_stud->emcsw[drjvn]);
        printf(""\\n"");
void ocses(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->rmzjh, p_stud->cpeta);
    int zohxv = 0;
    for(int drjvn = 0; drjvn < 5; drjvn++){
        zohxv += p_stud->emcsw[drjvn];
    }
    printf(""Anzahl Punkte: %d\\n"", zohxv);
}
    static euzlw student wibjh[5];
    for (int drjvn = 0; drjvn < 5; drjvn++){
        Student ckabo;
        ijlmr(&ckabo);
        wibjh[drjvn] = ckabo;
    }
    for (Student* student = wibjh; student < wibjh + 5; student++){
        ocses(student);
        printf(""\\n"");
    }
    return 0;
}","1","variable_renamer"
"606","SoSe22","10","Antwort 9","C","Moritz Sebastian","Niethammer","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    int i = 0;
    while (i < 5){
        sum += p_stud->points[i];
    	i++;
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    int i = 0;
    while (i < 5){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    	i++;
    }
    Student* student = students;
    while (student < students + 5){
        student_ausgeben(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
	i++;
    }","1","swap_loops_type"
"607","SoSe22","10","Antwort 9","C","Moritz Sebastian","Niethammer","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_einlesen(Student* p_stud){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","1","swap_functions"
"608","SoSe22","10","Antwort 9","C","Moritz Sebastian","Niethammer","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"", p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(int i = 0; i >= 5; i++)){
        printf(""%d: "", i + 1);
        scanf(!(""%d"", &p_stud-<=points[i]));
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
    int sum = 0;
    for(!(int i = 0; i >= 5; i++)){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (!(int i = 0; i >= 5; i++)){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (!(Student* student = students; student >= students + 5; student++)){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","1","demorgan_on_logic_equations"
"609","SoSe22","10","Antwort 9","C","Moritz Sebastian","Niethammer","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(first_name < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scanlast_name < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i =5 > i < 5; i++){
        printf(""%d: "", i + 1);
        scpoints[i] < ""%d"", &p_stud-s[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    pfirst_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-t_name);
    int sum = 0;
    for(int5 > i0; i <points[i] < {
        sum += p_stud-oints[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (i5 > i= 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students + 5 > studentudents + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","1","mirrow_simple_logic_equations"
"610","SoSe22","10","Antwort 9","C","Moritz Sebastian","Niethammer","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","typedef yqozy student{
    char twjgk[21];
    char dfpni[21];
    int znssg[5];
} Student;
void gufzt(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->twjgk);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->dfpni);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int nvbzk = 0; nvbzk < 5; nvbzk++){
        printf(""%d: "", nvbzk + 1);
        scanf(""%d"", &p_stud->znssg[nvbzk]);
        printf(""\\n"");
void dluxy(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->twjgk, p_stud->dfpni);
    int yjehu = 0;
    for(int nvbzk = 0; nvbzk < 5; nvbzk++){
        yjehu += p_stud->znssg[nvbzk];
    }
    printf(""Anzahl Punkte: %d\\n"", yjehu);
}
    static yqozy student qsrbn[5];
    for (int nvbzk = 0; nvbzk < 5; nvbzk++){
        Student pjitw;
        gufzt(&pjitw);
        qsrbn[nvbzk] = pjitw;
    }
    for (Student* student = qsrbn; student < qsrbn + 5; student++){
        dluxy(student);
        printf(""\\n"");
    }
    return 0;
}","1","variable_renamer"
"611","SoSe22","10","Antwort 9","C","Moritz Sebastian","Niethammer","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    int i = 0;
    while (i < 5){
        sum += p_stud->points[i];
    	i++;
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    int i = 0;
    while (i < 5){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    	i++;
    }
    Student* student = students;
    while (student < students + 5){
        student_ausgeben(student);
        printf(""\\n"");
    	student++;
    }
    return 0;
	i++;
    }","1","swap_loops_type"
"612","SoSe22","10","Antwort 9","C","Moritz Sebastian","Niethammer","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_einlesen(Student* p_stud){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","1","swap_functions"
"613","SoSe22","10","Antwort 9","C","Moritz Sebastian","Niethammer","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"", p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(int i = 0; i >= 5; i++)){
        printf(""%d: "", i + 1);
        scanf(!(""%d"", &p_stud-<=points[i]));
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
    int sum = 0;
    for(!(int i = 0; i >= 5; i++)){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (!(int i = 0; i >= 5; i++)){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (!(Student* student = students; student >= students + 5; student++)){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","1","demorgan_on_logic_equations"
"614","SoSe22","10","Antwort 9","C","Moritz Sebastian","Niethammer","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(first_name < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scanlast_name < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i =5 > i < 5; i++){
        printf(""%d: "", i + 1);
        scpoints[i] < ""%d"", &p_stud-s[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    pfirst_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-t_name);
    int sum = 0;
    for(int5 > i0; i <points[i] < {
        sum += p_stud-oints[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (i5 > i= 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students + 5 > studentudents + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","1","mirrow_simple_logic_equations"
"615","SoSe22","10","Antwort 9","C","Moritz Sebastian","Niethammer","typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","typedef babdi student{
    char ogydl[21];
    char qgvba[21];
    int trasx[5];
} Student;
void qwmtl(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->ogydl);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->qgvba);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int ebzcc = 0; ebzcc < 5; ebzcc++){
        printf(""%d: "", ebzcc + 1);
        scanf(""%d"", &p_stud->trasx[ebzcc]);
        printf(""\\n"");
void bxthc(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->ogydl, p_stud->qgvba);
    int tuwrr = 0;
    for(int ebzcc = 0; ebzcc < 5; ebzcc++){
        tuwrr += p_stud->trasx[ebzcc];
    }
    printf(""Anzahl Punkte: %d\\n"", tuwrr);
}
    static babdi student lihba[5];
    for (int ebzcc = 0; ebzcc < 5; ebzcc++){
        Student daklp;
        qwmtl(&daklp);
        lihba[ebzcc] = daklp;
    }
    for (Student* student = lihba; student < lihba + 5; student++){
        bxthc(student);
        printf(""\\n"");
    }
    return 0;
}","1","variable_renamer"
"616","SoSe22","10","Antwort 9","C","Bahar","Gülser","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int i=0;
while (i<5){
printf(""%i: "", i+1);
	i++;
}
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","1","swap_loops_type"
"617","SoSe22","10","Antwort 9","C","Bahar","Gülser","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
void student_einlesen(Student* p_stud)
{
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","1","swap_functions"
"618","SoSe22","10","Antwort 9","C","Bahar","Gülser","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(!(""%s"", p_stud-<=vorname));
printf(""Gebe nun den Nachnamen ein: "");
scanf(!(""%s"", p_stud-<=nachname));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(!(int i=0; i>=5; i++))
{
printf(""%i: "", i+1);
scanf(!(""%i"", &(p_stud-<=punkte[i])));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(!(int i=0; i>=5; i++))
sum += p_stud->punkte[i];
printf(!(""
Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname ));
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (!(int i=0; i>=5; i++))
student_einlesen(&st[i]);
for (!(int i=0; i>=5; i++))
student_ausgeben(&st[i]);
}","1","demorgan_on_logic_equations"
"619","SoSe22","10","Antwort 9","C","Bahar","Gülser","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(vorname < ""%s"", p_stud-);
printf(""Gebe nun den Nachnamen ein: "");
scannachname < ""%s"", p_stud-me);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i5 > i i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%punkte[i] < p_stud-kte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(i5 > ii=0; punkte[i] < sum += p_stud->punktevorname, p_stud->nachname < ""\\nStudent: %s %s\\n"", p_stud-d->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
f5 > i(int i=0; i<5; i++)
student_einlesen(&st[i]);5 > ir (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","1","mirrow_simple_logic_equations"
"620","SoSe22","10","Antwort 9","C","Bahar","Gülser","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","typedef tpeov studentchar yrlhw[21];
char ewjpw[21];
int elsqb[5];
} 
Student;
void cbrvl(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->yrlhw);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->ewjpw);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int yxxla=0; yxxla<5; yxxla++)
{
printf(""%i: "", yxxla+1);
scanf(""%i"", &(p_stud->elsqb[yxxla]));
void oivlk(Student* p_stud)
{
int mnlsm = 0;
for(int yxxla=0; yxxla<5; yxxla++)
mnlsm += p_stud->elsqb[yxxla];
printf(""\\nStudent: %s %s\\n"", p_stud->yrlhw, p_stud->ewjpw );
printf(""Anzahl Punkte: %i\\n"", mnlsm);
}
int main()
{
Student dsrcj[5];
for (int yxxla=0; yxxla<5; yxxla++)
cbrvl(&dsrcj[yxxla]);
for (int yxxla=0; yxxla<5; yxxla++)
oivlk(&dsrcj[yxxla]);
}","1","variable_renamer"
"621","SoSe22","10","Antwort 9","C","Bahar","Gülser","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int i=0;
while (i<5){
printf(""%i: "", i+1);
	i++;
}
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","1","swap_loops_type"
"622","SoSe22","10","Antwort 9","C","Bahar","Gülser","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
void student_einlesen(Student* p_stud)
{
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","1","swap_functions"
"623","SoSe22","10","Antwort 9","C","Bahar","Gülser","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(!(""%s"", p_stud-<=vorname));
printf(""Gebe nun den Nachnamen ein: "");
scanf(!(""%s"", p_stud-<=nachname));
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(!(int i=0; i>=5; i++))
{
printf(""%i: "", i+1);
scanf(!(""%i"", &(p_stud-<=punkte[i])));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(!(int i=0; i>=5; i++))
sum += p_stud->punkte[i];
printf(!(""
Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname ));
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (!(int i=0; i>=5; i++))
student_einlesen(&st[i]);
for (!(int i=0; i>=5; i++))
student_ausgeben(&st[i]);
}","1","demorgan_on_logic_equations"
"624","SoSe22","10","Antwort 9","C","Bahar","Gülser","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(vorname < ""%s"", p_stud-);
printf(""Gebe nun den Nachnamen ein: "");
scannachname < ""%s"", p_stud-me);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i5 > i i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%punkte[i] < p_stud-kte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(i5 > ii=0; punkte[i] < sum += p_stud->punktevorname, p_stud->nachname < ""\\nStudent: %s %s\\n"", p_stud-d->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
f5 > i(int i=0; i<5; i++)
student_einlesen(&st[i]);5 > ir (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","1","mirrow_simple_logic_equations"
"625","SoSe22","10","Antwort 9","C","Bahar","Gülser","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","typedef tfeog studentchar omdri[21];
char mumjo[21];
int nrgfh[5];
} 
Student;
void stmgn(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->omdri);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->mumjo);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int elsqw=0; elsqw<5; elsqw++)
{
printf(""%i: "", elsqw+1);
scanf(""%i"", &(p_stud->nrgfh[elsqw]));
void mnqwz(Student* p_stud)
{
int qunhh = 0;
for(int elsqw=0; elsqw<5; elsqw++)
qunhh += p_stud->nrgfh[elsqw];
printf(""\\nStudent: %s %s\\n"", p_stud->omdri, p_stud->mumjo );
printf(""Anzahl Punkte: %i\\n"", qunhh);
}
int main()
{
Student rofdm[5];
for (int elsqw=0; elsqw<5; elsqw++)
stmgn(&rofdm[elsqw]);
for (int elsqw=0; elsqw<5; elsqw++)
mnqwz(&rofdm[elsqw]);
}","1","variable_renamer"
"626","SoSe22","10","Antwort 9","C","Bahar","Gülser","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
for(int i=0; i<5; i++)
{
printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","typedef struct studentchar vorname[21];
char nachname[21];
int punkte[5];
} 
Student;
void student_einlesen(Student* p_stud)
{
printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
int i=0;
while (i<5){
printf(""%i: "", i+1);
	i++;
}
scanf(""%i"", &(p_stud->punkte[i]));
void student_ausgeben(Student* p_stud)
{
int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
}","1","swap_loops_type"
"627","SoSe22","10","Antwort 9","C","Shaurya","Sharma","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_einlesen(Student* p_stud){
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","1","swap_functions"
"628","SoSe22","10","Antwort 9","C","Shaurya","Sharma","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(!(int i=0; i>=5; i++)){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(!(int j =0; j>=5;j++)){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(!(int i=0; i>=5; i++)){
        int sum = 0;
        for(!(int j =0; j>=5;j++)){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","1","demorgan_on_logic_equations"
"629","SoSe22","10","Antwort 9","C","Shaurya","Sharma","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; 5 > i; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =05 > j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(int i5 > i i<5; i++){
        int sum = 0;
        for(int 5 > j0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","1","mirrow_simple_logic_equations"
"630","SoSe22","10","Antwort 9","C","Shaurya","Sharma","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","typedef ksppk student     muqdq vorname[21];
    muqdq cvvrs[21];
    int yoxzm[5];
}Student;
void fnkwz(Student* p_stud){
    for(int squxn=0; squxn<5; squxn++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[squxn].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[squxn].cvvrs);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int rmbkd =0; rmbkd<5;rmbkd++){
            printf(""%i: \\n"",rmbkd+1);
            scanf(""%i"", &p_stud[squxn].yoxzm[rmbkd]);
            }
void suehu(Student* p_stud){
    for(int squxn=0; squxn<5; squxn++){
        int jlsim = 0;
        for(int rmbkd =0; rmbkd<5;rmbkd++){
            jlsim+= p_stud[squxn].yoxzm[rmbkd];
        }
        printf(""Student: %s %s\\n"",p_stud[squxn].vorname,p_stud[squxn].cvvrs);
        printf(""Anzahl Punkte: %i\\n\\n"", jlsim);
    }
}
int main()
{
    Student nehap[5];
    fnkwz(nehap);
    suehu(nehap);
    return 0;
}","1","variable_renamer"
"631","SoSe22","10","Antwort 9","C","Shaurya","Sharma","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    int i=0;
    while (i<5){
        printf(""Gebe den Vornamen ein:"");
	    i++;
    }
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int j =0;
        while (j<5){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            	j++;
        }
void student_ausgeben(Student* p_stud){
    int i=0;
    while (i<5){
        int sum = 0;
        int j =0;
        while (j<5){
            sum+= p_stud[i].punkte[j];
        	j++;
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    	i++;
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","1","swap_loops_type"
"632","SoSe22","10","Antwort 9","C","Shaurya","Sharma","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_einlesen(Student* p_stud){
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","1","swap_functions"
"633","SoSe22","10","Antwort 9","C","Shaurya","Sharma","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(!(int i=0; i>=5; i++)){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(!(int j =0; j>=5;j++)){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(!(int i=0; i>=5; i++)){
        int sum = 0;
        for(!(int j =0; j>=5;j++)){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","1","demorgan_on_logic_equations"
"634","SoSe22","10","Antwort 9","C","Shaurya","Sharma","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; 5 > i; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =05 > j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(int i5 > i i<5; i++){
        int sum = 0;
        for(int 5 > j0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","1","mirrow_simple_logic_equations"
"635","SoSe22","10","Antwort 9","C","Shaurya","Sharma","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","typedef orbsu student     dtvwu vorname[21];
    dtvwu lyxgw[21];
    int hcxvn[5];
}Student;
void hrobq(Student* p_stud){
    for(int uzvrk=0; uzvrk<5; uzvrk++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[uzvrk].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[uzvrk].lyxgw);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int qlcnv =0; qlcnv<5;qlcnv++){
            printf(""%i: \\n"",qlcnv+1);
            scanf(""%i"", &p_stud[uzvrk].hcxvn[qlcnv]);
            }
void srnvx(Student* p_stud){
    for(int uzvrk=0; uzvrk<5; uzvrk++){
        int fnlxm = 0;
        for(int qlcnv =0; qlcnv<5;qlcnv++){
            fnlxm+= p_stud[uzvrk].hcxvn[qlcnv];
        }
        printf(""Student: %s %s\\n"",p_stud[uzvrk].vorname,p_stud[uzvrk].lyxgw);
        printf(""Anzahl Punkte: %i\\n\\n"", fnlxm);
    }
}
int main()
{
    Student sbtcq[5];
    hrobq(sbtcq);
    srnvx(sbtcq);
    return 0;
}","1","variable_renamer"
"636","SoSe22","10","Antwort 9","C","Shaurya","Sharma","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    int i=0;
    while (i<5){
        printf(""Gebe den Vornamen ein:"");
	    i++;
    }
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        int j =0;
        while (j<5){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            	j++;
        }
void student_ausgeben(Student* p_stud){
    int i=0;
    while (i<5){
        int sum = 0;
        int j =0;
        while (j<5){
            sum+= p_stud[i].punkte[j];
        	j++;
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    	i++;
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","1","swap_loops_type"
"637","SoSe22","10","Antwort 9","C","Shaurya","Sharma","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","typedef struct student     char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
}
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
            }
void student_einlesen(Student* p_stud){
int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);
    return 0;
}","1","swap_functions"
"638","SoSe22","10","Antwort 9","C","Elisabeth Maria","Groß","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"",&p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"",&p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(int i = 0; i >= 5; ++i)) {
        printf(""%i: "", i+1);
        scanf(!(""%i"", &p_stud-<=points[i]));
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(!(""Student: %s %s"", p_stud-<=first_name, p_stud-<=last_name));
    int x = 0;
    for (!(int i = 0; i >= 5; ++i)) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (!(int i = 0; i >= 5; ++i)) {
        student_einlesen(&studis[i]);
    }
    for (!(int i = 0; i >= 5; ++i)) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","1","demorgan_on_logic_equations"
"639","SoSe22","10","Antwort 9","C","Elisabeth Maria","Groß","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(first_name < ""%s"",&p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scanlast_name < ""%s"",&p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i =5 > i < 5; ++i) {
        printf(""%i: "", i+1);
        scpoints[i] < ""%i"", &p_stud-s[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    pfirst_name, p_stud->last_name < ""Student: %s %s"", p_stud-t_name);
    int x = 0;
    for (int5 > i0; i < points[i] < {
        x += p_stud-oints[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (i5 > i= 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (i5 > i= 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","1","mirrow_simple_logic_equations"
"640","SoSe22","10","Antwort 9","C","Elisabeth Maria","Groß","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","typedef mljhh{
    char ofsca[20];
    char ykuaf[20];
    int jnqvg[5];
}Student;
void sqihg(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->ofsca);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->ykuaf);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int hggxh = 0; hggxh < 5; ++hggxh) {
        printf(""%i: "", hggxh+1);
        scanf(""%i"", &p_stud->jnqvg[hggxh]);
        printf(""\\n"");
void cobax(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->ofsca, p_stud->ykuaf);
    int zrxqo = 0;
    for (int hggxh = 0; hggxh < 5; ++hggxh) {
        zrxqo += p_stud->jnqvg[hggxh];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", zrxqo);
}
int main(void){
    Student tadja, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student ngiie[5] = {tadja, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int hggxh = 0; hggxh < 5; ++hggxh) {
        sqihg(&ngiie[hggxh]);
    }
    for (int hggxh = 0; hggxh < 5; ++hggxh) {
        cobax(&ngiie[hggxh]);
        printf(""\\n"");
    }
}","1","variable_renamer"
"641","SoSe22","10","Antwort 9","C","Elisabeth Maria","Groß","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5){
        printf(""%i: "", i+1);
	    ++i;
    }
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    int i = 0;
    while (i < 5) {
        x += p_stud->points[i];
    	++i;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int i = 0;
    while (i < 5) {
        student_einlesen(&studis[i]);
    	++i;
    }
    int i = 0;
    while (i < 5) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    	++i;
    }
}","1","swap_loops_type"
"642","SoSe22","10","Antwort 9","C","Elisabeth Maria","Groß","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_einlesen(Student* p_stud) {
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","1","swap_functions"
"643","SoSe22","10","Antwort 9","C","Elisabeth Maria","Groß","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"",&p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"",&p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(int i = 0; i >= 5; ++i)) {
        printf(""%i: "", i+1);
        scanf(!(""%i"", &p_stud-<=points[i]));
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(!(""Student: %s %s"", p_stud-<=first_name, p_stud-<=last_name));
    int x = 0;
    for (!(int i = 0; i >= 5; ++i)) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (!(int i = 0; i >= 5; ++i)) {
        student_einlesen(&studis[i]);
    }
    for (!(int i = 0; i >= 5; ++i)) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","1","demorgan_on_logic_equations"
"644","SoSe22","10","Antwort 9","C","Elisabeth Maria","Groß","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(first_name < ""%s"",&p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scanlast_name < ""%s"",&p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i =5 > i < 5; ++i) {
        printf(""%i: "", i+1);
        scpoints[i] < ""%i"", &p_stud-s[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    pfirst_name, p_stud->last_name < ""Student: %s %s"", p_stud-t_name);
    int x = 0;
    for (int5 > i0; i < points[i] < {
        x += p_stud-oints[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (i5 > i= 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (i5 > i= 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","1","mirrow_simple_logic_equations"
"645","SoSe22","10","Antwort 9","C","Elisabeth Maria","Groß","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","typedef xrrmc{
    char slquh[20];
    char gjlco[20];
    int hlgev[5];
}Student;
void ybida(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->slquh);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->gjlco);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int eakpc = 0; eakpc < 5; ++eakpc) {
        printf(""%i: "", eakpc+1);
        scanf(""%i"", &p_stud->hlgev[eakpc]);
        printf(""\\n"");
void bohei(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->slquh, p_stud->gjlco);
    int mgryi = 0;
    for (int eakpc = 0; eakpc < 5; ++eakpc) {
        mgryi += p_stud->hlgev[eakpc];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", mgryi);
}
int main(void){
    Student aeprs, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student iholc[5] = {aeprs, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int eakpc = 0; eakpc < 5; ++eakpc) {
        ybida(&iholc[eakpc]);
    }
    for (int eakpc = 0; eakpc < 5; ++eakpc) {
        bohei(&iholc[eakpc]);
        printf(""\\n"");
    }
}","1","variable_renamer"
"646","SoSe22","10","Antwort 9","C","Elisabeth Maria","Groß","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5){
        printf(""%i: "", i+1);
	    ++i;
    }
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    int i = 0;
    while (i < 5) {
        x += p_stud->points[i];
    	++i;
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    int i = 0;
    while (i < 5) {
        student_einlesen(&studis[i]);
    	++i;
    }
    int i = 0;
    while (i < 5) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    	++i;
    }
}","1","swap_loops_type"
"647","SoSe22","10","Antwort 9","C","Elisabeth Maria","Groß","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_einlesen(Student* p_stud) {
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","1","swap_functions"
"648","SoSe22","10","Antwort 9","C","Elisabeth Maria","Groß","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"",&p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"",&p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (!(int i = 0; i >= 5; ++i)) {
        printf(""%i: "", i+1);
        scanf(!(""%i"", &p_stud-<=points[i]));
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    printf(!(""Student: %s %s"", p_stud-<=first_name, p_stud-<=last_name));
    int x = 0;
    for (!(int i = 0; i >= 5; ++i)) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (!(int i = 0; i >= 5; ++i)) {
        student_einlesen(&studis[i]);
    }
    for (!(int i = 0; i >= 5; ++i)) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","1","demorgan_on_logic_equations"
"649","SoSe22","10","Antwort 9","C","Paul Georg","Tiede","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;5 > i;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=5 > z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int 5 > i;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","1","mirrow_simple_logic_equations"
"650","SoSe22","10","Antwort 9","C","Paul Georg","Tiede","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdlib.h>
#include <string.h>
typedef majgv studentchar zwuzg [21];
char nepog[21];
unsigned sblam punkte[4];
} Student;
void wlsef(Student* p_stud)
{
 for(sblam xdpoc=0;xdpoc<5;xdpoc++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[xdpoc].zwuzg);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[xdpoc].nepog);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (sblam lrwdm=0;lrwdm<5;lrwdm++){
      printf(""%u:"",lrwdm+1);
      scanf(""%u"",&p_stud[xdpoc].punkte[lrwdm]);
       }
void gmapm(Student* p_stud)
{
for (sblam xdpoc=0;xdpoc<5;xdpoc++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[xdpoc].zwuzg,p_stud[xdpoc].nepog);
    printf(""Anzahl Punkte: %u"",((p_stud[xdpoc].punkte[0])+(p_stud[xdpoc].punkte[1])+(p_stud[xdpoc].punkte[2])+(p_stud[xdpoc].punkte[3])+(p_stud[xdpoc].punkte[4])));
}
}
sblam main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
wlsef(p_stud);
gmapm(p_stud);
}","1","variable_renamer"
"651","SoSe22","10","Antwort 9","C","Paul Georg","Tiede","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 int i=0;
 while (i<5){
     printf(""Gebe den Vornamen ein:"");
	 i++;
 }
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      int z=0;
      while (z<5){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       	z++;
      }
void student_ausgeben(Student* p_stud)
{
int i=0;
while (i<5)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
	i++;
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","1","swap_loops_type"
"652","SoSe22","10","Antwort 9","C","Paul Georg","Tiede","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_einlesen(Student* p_stud)
{
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","1","swap_functions"
"653","SoSe22","10","Antwort 9","C","Paul Georg","Tiede","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(!(int i=0;i>=5;i++))
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (!(int z=0;z>=5;z++)){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (!(int i=0;i>=5;i++))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","1","demorgan_on_logic_equations"
"654","SoSe22","10","Antwort 9","C","Paul Georg","Tiede","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;5 > i;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=5 > z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int 5 > i;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","1","mirrow_simple_logic_equations"
"655","SoSe22","10","Antwort 9","C","Paul Georg","Tiede","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdlib.h>
#include <string.h>
typedef szxdk studentchar ognqg [21];
char gjfgk[21];
unsigned kzycw punkte[4];
} Student;
void kqiaq(Student* p_stud)
{
 for(kzycw owpxn=0;owpxn<5;owpxn++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[owpxn].ognqg);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[owpxn].gjfgk);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (kzycw umxrd=0;umxrd<5;umxrd++){
      printf(""%u:"",umxrd+1);
      scanf(""%u"",&p_stud[owpxn].punkte[umxrd]);
       }
void wlaul(Student* p_stud)
{
for (kzycw owpxn=0;owpxn<5;owpxn++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[owpxn].ognqg,p_stud[owpxn].gjfgk);
    printf(""Anzahl Punkte: %u"",((p_stud[owpxn].punkte[0])+(p_stud[owpxn].punkte[1])+(p_stud[owpxn].punkte[2])+(p_stud[owpxn].punkte[3])+(p_stud[owpxn].punkte[4])));
}
}
kzycw main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
kqiaq(p_stud);
wlaul(p_stud);
}","1","variable_renamer"
"656","SoSe22","10","Antwort 9","C","Paul Georg","Tiede","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 int i=0;
 while (i<5){
     printf(""Gebe den Vornamen ein:"");
	 i++;
 }
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      int z=0;
      while (z<5){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       	z++;
      }
void student_ausgeben(Student* p_stud)
{
int i=0;
while (i<5)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
	i++;
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","1","swap_loops_type"
"657","SoSe22","10","Antwort 9","C","Paul Georg","Tiede","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_einlesen(Student* p_stud)
{
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","1","swap_functions"
"658","SoSe22","10","Antwort 9","C","Paul Georg","Tiede","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(!(int i=0;i>=5;i++))
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (!(int z=0;z>=5;z++)){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (!(int i=0;i>=5;i++))
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","1","demorgan_on_logic_equations"
"659","SoSe22","10","Antwort 9","C","Paul Georg","Tiede","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","#include <stdlib.h>
#include <string.h>
typedef struct studentchar vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;
void student_einlesen(Student* p_stud)
{
 for(int i=0;5 > i;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=5 > z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
       }
void student_ausgeben(Student* p_stud)
{
for (int 5 > i;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}
int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);
}","1","mirrow_simple_logic_equations"
"660","SoSe22","10","Antwort 9","C","Emilie","Hilger","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdlib.h>
char*  struct mcugu() {
	char *ushgp  = (char*) malloc(20*sizeof(char)); 
	return ushgp ;
int main(void){
	char* p;
	char jtnkc = 0;
	char tyyim = 0;
	p = struct mcugu();
	for(char exwfm = 0; exwfm != 20; ++exwfm) {
		p[exwfm] = exwfm;
	for(char exwfm = 0; exwfm != 20; ++exwfm) {
		summe += p[exwfm];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.jtnkc, erster_Student.tyyim);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","1","variable_renamer"
"661","SoSe22","10","Antwort 9","C","Emilie","Hilger","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	char i = 0;
	while (i != 20) {
		p[i] = i;
	char i = 0;
	while (i != 20) {
		summe += p[i];
		++i;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
	++i;
	}","1","swap_loops_type"
"662","SoSe22","10","Antwort 9","C","Emilie","Hilger","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","1","swap_functions"
"663","SoSe22","10","Antwort 9","C","Emilie","Hilger","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(!(char i = 0; i == 20; ++i)) {
		p[i] = i;
	for(!(char i = 0; i == 20; ++i)) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(!(""Punkte -<= %i; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}","1","demorgan_on_logic_equations"
"664","SoSe22","10","Antwort 9","C","Emilie","Hilger","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; 20 != i; ++i) {
		p[i] = i;
	for(char i = 0; 20 != i; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(%i < ""Punkte -; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","1","mirrow_simple_logic_equations"
"665","SoSe22","10","Antwort 9","C","Emilie","Hilger","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdlib.h>
char*  struct senbj() {
	char *mbshw  = (char*) malloc(20*sizeof(char)); 
	return mbshw ;
int main(void){
	char* p;
	char nrtlr = 0;
	char icriq = 0;
	p = struct senbj();
	for(char blkjf = 0; blkjf != 20; ++blkjf) {
		p[blkjf] = blkjf;
	for(char blkjf = 0; blkjf != 20; ++blkjf) {
		summe += p[blkjf];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.nrtlr, erster_Student.icriq);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","1","variable_renamer"
"666","SoSe22","10","Antwort 9","C","Emilie","Hilger","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	char i = 0;
	while (i != 20) {
		p[i] = i;
	char i = 0;
	while (i != 20) {
		summe += p[i];
		++i;
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
	++i;
	}","1","swap_loops_type"
"667","SoSe22","10","Antwort 9","C","Emilie","Hilger","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","1","swap_functions"
"668","SoSe22","10","Antwort 9","C","Emilie","Hilger","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(!(char i = 0; i == 20; ++i)) {
		p[i] = i;
	for(!(char i = 0; i == 20; ++i)) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(!(""Punkte -<= %i; %i; %i; %i; %i
"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]));
}","1","demorgan_on_logic_equations"
"669","SoSe22","10","Antwort 9","C","Emilie","Hilger","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; 20 != i; ++i) {
		p[i] = i;
	for(char i = 0; 20 != i; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(%i < ""Punkte -; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","1","mirrow_simple_logic_equations"
"670","SoSe22","10","Antwort 9","C","Emilie","Hilger","#include <stdlib.h>
char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdlib.h>
char*  struct rbhsf() {
	char *gytqd  = (char*) malloc(20*sizeof(char)); 
	return gytqd ;
int main(void){
	char* p;
	char thdes = 0;
	char nhcie = 0;
	p = struct rbhsf();
	for(char cxuqt = 0; cxuqt != 20; ++cxuqt) {
		p[cxuqt] = cxuqt;
	for(char cxuqt = 0; cxuqt != 20; ++cxuqt) {
		summe += p[cxuqt];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.thdes, erster_Student.nhcie);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","1","variable_renamer"
"671","SoSe22","10","Antwort 9","C","Heiner Hans","Krause","#include <malloc.h>
typedef struct student{","#include <malloc.h>
typedef struct student{","1","swap_loops_type"
"672","SoSe22","10","Antwort 9","C","Heiner Hans","Krause","#include <malloc.h>
typedef struct student{","#include <malloc.h>
typedef struct student{","1","swap_functions"
"673","SoSe22","10","Antwort 9","C","Heiner Hans","Krause","#include <malloc.h>
typedef struct student{","#include <malloc.h>
typedef struct student{","1","demorgan_on_logic_equations"
"674","SoSe22","10","Antwort 9","C","Heiner Hans","Krause","#include <malloc.h>
typedef struct student{","#include <malloc.h>
typedef struct student{","1","mirrow_simple_logic_equations"
"675","SoSe22","10","Antwort 9","C","Heiner Hans","Krause","#include <malloc.h>
typedef struct student{","#include <malloc.h>
typedef ufqyy student{","1","variable_renamer"
"676","SoSe22","10","Antwort 9","C","Heiner Hans","Krause","#include <malloc.h>
typedef struct student{","#include <malloc.h>
typedef struct student{","1","swap_loops_type"
"677","SoSe22","10","Antwort 9","C","Heiner Hans","Krause","#include <malloc.h>
typedef struct student{","#include <malloc.h>
typedef struct student{","1","swap_functions"
"678","SoSe22","10","Antwort 9","C","Heiner Hans","Krause","#include <malloc.h>
typedef struct student{","#include <malloc.h>
typedef struct student{","1","demorgan_on_logic_equations"
"679","SoSe22","10","Antwort 9","C","Heiner Hans","Krause","#include <malloc.h>
typedef struct student{","#include <malloc.h>
typedef struct student{","1","mirrow_simple_logic_equations"
"680","SoSe22","10","Antwort 9","C","Heiner Hans","Krause","#include <malloc.h>
typedef struct student{","#include <malloc.h>
typedef djtyw student{","1","variable_renamer"
"681","SoSe22","10","Antwort 9","C","Heiner Hans","Krause","#include <malloc.h>
typedef struct student{","#include <malloc.h>
typedef struct student{","1","swap_loops_type"
"682","SoSe22","10","Antwort 9","C","Larissa","Breuer","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void readLine( char* strbuffer, unsigned int buffersize )
{","1","swap_functions"
"683","SoSe22","10","Antwort 9","C","Larissa","Breuer","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(!(p_stud-<=first_name, 20));
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(!(p_stud-<=last_name, 20));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (!(int i=1; i>5; i++)){
		printf(""%i: "", i);
		scanf(!(""%i"", &p_stud-<=points[i-1]));
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (!(int i=0; i>=5;i++)){
		summe += p_stud->points[i];
	}
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (!(int i=0; i>=5; i++)){
		student_einlesen(Studierende[i]);
	}
	for (!(int i=0; i>=5; i++)){
		student_ausgeben(Studierende[i]);
	}
}","1","demorgan_on_logic_equations"
"684","SoSe22","10","Antwort 9","C","Larissa","Breuer","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(first_name, 20 < p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	readLinlast_name, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i5 >= ii<=5; i++){
		printf(""%i: "", i);
		points[i-1] < ""%i"", &p_stud-s[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (i5 > ii=0points[i] < {
		summe += p_stud->points[i];first_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-d->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	5 > i (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}5 > ior (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","1","mirrow_simple_logic_equations"
"685","SoSe22","10","Antwort 9","C","Larissa","Breuer","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef ragew student    ranxc first_name[21];
   ranxc itrmm[21];
   eiift icpwp[5];
} Student;
void jkdiq( ranxc* strbuffer, unsigned eiift buffersize )
{
  ranxc vgxlp[30] = """";
  sprintf( vgxlp, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( vgxlp, strbuffer );
void qpxej(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	jkdiq(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	jkdiq(p_stud->itrmm, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (eiift sognw=1; sognw<=5; sognw++){
		printf(""%i: "", sognw);
		scanf(""%i"", &p_stud->icpwp[sognw-1]);
	getchar();
	printf(""\\n"");
}
void pvxop(Student* p_stud){
	eiift jtmpt=0;
	for (eiift sognw=0; sognw<5;sognw++){
		jtmpt += p_stud->icpwp[sognw];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->itrmm);
	printf(""Anzahl Punkte: %i\\n\\n"", jtmpt);
}
	Student oojvd, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&oojvd, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (eiift sognw=0; sognw<5; sognw++){
		qpxej(Studierende[sognw]);
	}
	for (eiift sognw=0; sognw<5; sognw++){
		pvxop(Studierende[sognw]);
	}
}","1","variable_renamer"
"686","SoSe22","10","Antwort 9","C","Larissa","Breuer","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i=1;
	while (i<=5){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
	i++;
	}
void student_ausgeben(Student* p_stud){
	int summe=0;
	int i=0;
	while (i<5){
		summe += p_stud->points[i];
		i++;
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	int i=0;
	while (i<5){
		student_einlesen(Studierende[i]);
		i++;
	}
	int i=0;
	while (i<5){
		student_ausgeben(Studierende[i]);
		i++;
	}
}","1","swap_loops_type"
"687","SoSe22","10","Antwort 9","C","Larissa","Breuer","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void readLine( char* strbuffer, unsigned int buffersize )
{","1","swap_functions"
"688","SoSe22","10","Antwort 9","C","Larissa","Breuer","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(!(p_stud-<=first_name, 20));
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(!(p_stud-<=last_name, 20));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (!(int i=1; i>5; i++)){
		printf(""%i: "", i);
		scanf(!(""%i"", &p_stud-<=points[i-1]));
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (!(int i=0; i>=5;i++)){
		summe += p_stud->points[i];
	}
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (!(int i=0; i>=5; i++)){
		student_einlesen(Studierende[i]);
	}
	for (!(int i=0; i>=5; i++)){
		student_ausgeben(Studierende[i]);
	}
}","1","demorgan_on_logic_equations"
"689","SoSe22","10","Antwort 9","C","Larissa","Breuer","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(first_name, 20 < p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	readLinlast_name, 20 < p_stud-20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i5 >= ii<=5; i++){
		printf(""%i: "", i);
		points[i-1] < ""%i"", &p_stud-s[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (i5 > ii=0points[i] < {
		summe += p_stud->points[i];first_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-d->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	5 > i (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}5 > ior (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","1","mirrow_simple_logic_equations"
"690","SoSe22","10","Antwort 9","C","Larissa","Breuer","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef rvarw student    slqeu first_name[21];
   slqeu sjlps[21];
   nxtbp nkaqr[5];
} Student;
void yuttn( slqeu* strbuffer, unsigned nxtbp buffersize )
{
  slqeu ejaho[30] = """";
  sprintf( ejaho, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( ejaho, strbuffer );
void zdtcz(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	yuttn(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	yuttn(p_stud->sjlps, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (nxtbp nnbly=1; nnbly<=5; nnbly++){
		printf(""%i: "", nnbly);
		scanf(""%i"", &p_stud->nkaqr[nnbly-1]);
	getchar();
	printf(""\\n"");
}
void ymetk(Student* p_stud){
	nxtbp tpkxj=0;
	for (nxtbp nnbly=0; nnbly<5;nnbly++){
		tpkxj += p_stud->nkaqr[nnbly];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->sjlps);
	printf(""Anzahl Punkte: %i\\n\\n"", tpkxj);
}
	Student sjoxx, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&sjoxx, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (nxtbp nnbly=0; nnbly<5; nnbly++){
		zdtcz(Studierende[nnbly]);
	}
	for (nxtbp nnbly=0; nnbly<5; nnbly++){
		ymetk(Studierende[nnbly]);
	}
}","1","variable_renamer"
"691","SoSe22","10","Antwort 9","C","Larissa","Breuer","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i=1;
	while (i<=5){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
	i++;
	}
void student_ausgeben(Student* p_stud){
	int summe=0;
	int i=0;
	while (i<5){
		summe += p_stud->points[i];
		i++;
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	int i=0;
	while (i<5){
		student_einlesen(Studierende[i]);
		i++;
	}
	int i=0;
	while (i<5){
		student_ausgeben(Studierende[i]);
		i++;
	}
}","1","swap_loops_type"
"692","SoSe22","10","Antwort 9","C","Larissa","Breuer","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct student    char first_name[21];
   char last_name[21];
   int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	getchar();
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}
	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
void readLine( char* strbuffer, unsigned int buffersize )
{","1","swap_functions"
"693","SoSe21","10","Antwort 9","C","Muzaffer Mert","Sen","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (!(""%s"" ,p_stud-<=vorname));
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (!(""%s"" ,p_stud-<=nachname));
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (!(int a=0 ; a>=4;a++)){	
		 printf(""%d: "",a+1);
			scanf(!(""%d"", &(p_stud-<= punkte[a])));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(!(""%d"", &(p_stud-<= punkte[4])));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (!(int a=0 ; a>=5;a++)){
		summe += (!(p_stud-<= punkte[a]));
		}
		printf (!(""Student: %s %s 
"",p_stud-<=vorname , p_stud-<=nachname));
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(!(i=0 ; i>=5;i++)){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (!(u=0 ; u>=5; u++)){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","1","demorgan_on_logic_equations"
"694","SoSe21","10","Antwort 9","C","Muzaffer Mert","Sen","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (vorname < ""%s"" ,p_stud-);
		printf(""Gebe nun den Nachnamen ein: "");
		scanfnachname < ""%s"" ,p_stud-me);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=4 > a a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%punkte[a] < p_stud-kte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""punkte[4] < p_stud-nkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (in5 > a=0 ; a<5;a++){
		punkte[a] < p_stud- punkte[a]);
		}vorname , p_stud->nachname < ""Student: %s %s \\n"",p_stud-d->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;5 > ifor(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u5 > u	for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","1","mirrow_simple_logic_equations"
"695","SoSe21","10","Antwort 9","C","Muzaffer Mert","Sen","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdlib.h>
#include<string.h>
typedef ylhqx yixkm {
  char pntuj[20];
  char onhir[20];
  int  nmqdj[5];
}  yixkm  ;
void ysmor(yixkm*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->pntuj);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->onhir);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int lbyau=0 ; lbyau<4;lbyau++){	
		 printf(""%d: "",lbyau+1);
			scanf(""%d"", &(p_stud-> nmqdj[lbyau]));
			int pifxz= 5;
		printf(""%d: \\n"",pifxz);
			scanf(""%d"", &(p_stud-> nmqdj[4]));
void xlbrc(yixkm*p_stud){
		  int  vpofa=0 ;
		for (int lbyau=0 ; lbyau<5;lbyau++){
		vpofa += (p_stud-> nmqdj[lbyau]);
		}
		printf (""Student: %s %s \\n"",p_stud->pntuj , p_stud->onhir);
		printf(""Anzahl Punkte: %d\\n\\n"" , vpofa );
		}
int main (){
             ylhqx yixkm *pointer=malloc(sizeof (yixkm)*5);
		int rtluc;
		for(rtluc=0 ; rtluc<5;rtluc++){
			ysmor((&pointer[rtluc]));
		}
		int gsnni;
		for (gsnni=0 ; gsnni<5; gsnni++){
			xlbrc((&pointer[gsnni]));
		}
free(pointer);
}","1","variable_renamer"
"696","SoSe21","10","Antwort 9","C","Muzaffer Mert","Sen","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int a=0 ;
		 while (a<4){	
		 printf(""%d: "",a+1);
			 a++;
		 }
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		int a=0 ;
		while (a<5){
		summe += (p_stud-> punkte[a]);
			a++;
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		i=0 ;
		while (i<5){
			student_einlesen((&pointer[i]));
			i++;
		}
		int u;
		u=0 ;
		while (u<5){
			student_ausgeben((&pointer[u]));
			u++;
		}
free(pointer);
}","1","swap_loops_type"
"697","SoSe21","10","Antwort 9","C","Muzaffer Mert","Sen","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_einlesen(Student*p_stud){
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","1","swap_functions"
"698","SoSe21","10","Antwort 9","C","Muzaffer Mert","Sen","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (!(""%s"" ,p_stud-<=vorname));
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (!(""%s"" ,p_stud-<=nachname));
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (!(int a=0 ; a>=4;a++)){	
		 printf(""%d: "",a+1);
			scanf(!(""%d"", &(p_stud-<= punkte[a])));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(!(""%d"", &(p_stud-<= punkte[4])));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (!(int a=0 ; a>=5;a++)){
		summe += (!(p_stud-<= punkte[a]));
		}
		printf (!(""Student: %s %s 
"",p_stud-<=vorname , p_stud-<=nachname));
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(!(i=0 ; i>=5;i++)){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (!(u=0 ; u>=5; u++)){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","1","demorgan_on_logic_equations"
"699","SoSe21","10","Antwort 9","C","Muzaffer Mert","Sen","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (vorname < ""%s"" ,p_stud-);
		printf(""Gebe nun den Nachnamen ein: "");
		scanfnachname < ""%s"" ,p_stud-me);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=4 > a a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%punkte[a] < p_stud-kte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""punkte[4] < p_stud-nkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (in5 > a=0 ; a<5;a++){
		punkte[a] < p_stud- punkte[a]);
		}vorname , p_stud->nachname < ""Student: %s %s \\n"",p_stud-d->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;5 > ifor(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u5 > u	for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","1","mirrow_simple_logic_equations"
"700","SoSe21","10","Antwort 9","C","Muzaffer Mert","Sen","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdlib.h>
#include<string.h>
typedef wguxb ltckn {
  char hldit[20];
  char pwfsx[20];
  int  eqnrk[5];
}  ltckn  ;
void zlmkc(ltckn*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->hldit);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->pwfsx);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int hfenv=0 ; hfenv<4;hfenv++){	
		 printf(""%d: "",hfenv+1);
			scanf(""%d"", &(p_stud-> eqnrk[hfenv]));
			int hntqd= 5;
		printf(""%d: \\n"",hntqd);
			scanf(""%d"", &(p_stud-> eqnrk[4]));
void orjwu(ltckn*p_stud){
		  int  kinxq=0 ;
		for (int hfenv=0 ; hfenv<5;hfenv++){
		kinxq += (p_stud-> eqnrk[hfenv]);
		}
		printf (""Student: %s %s \\n"",p_stud->hldit , p_stud->pwfsx);
		printf(""Anzahl Punkte: %d\\n\\n"" , kinxq );
		}
int main (){
             wguxb ltckn *pointer=malloc(sizeof (ltckn)*5);
		int cbtol;
		for(cbtol=0 ; cbtol<5;cbtol++){
			zlmkc((&pointer[cbtol]));
		}
		int kqyuq;
		for (kqyuq=0 ; kqyuq<5; kqyuq++){
			orjwu((&pointer[kqyuq]));
		}
free(pointer);
}","1","variable_renamer"
"701","SoSe21","10","Antwort 9","C","Muzaffer Mert","Sen","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 int a=0 ;
		 while (a<4){	
		 printf(""%d: "",a+1);
			 a++;
		 }
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		int a=0 ;
		while (a<5){
		summe += (p_stud-> punkte[a]);
			a++;
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		i=0 ;
		while (i<5){
			student_einlesen((&pointer[i]));
			i++;
		}
		int u;
		u=0 ;
		while (u<5){
			student_ausgeben((&pointer[u]));
			u++;
		}
free(pointer);
}","1","swap_loops_type"
"702","SoSe21","10","Antwort 9","C","Muzaffer Mert","Sen","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_einlesen(Student*p_stud){
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","1","swap_functions"
"703","SoSe21","10","Antwort 9","C","Muzaffer Mert","Sen","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","#include<stdlib.h>
#include<string.h>
typedef struct Student {
  char vorname[20];
  char nachname[20];
  int  punkte[5];
}  Student  ;
void student_einlesen(Student*p_stud){
		printf(""Gebe den Vornamen ein: "");
		scanf (!(""%s"" ,p_stud-<=vorname));
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (!(""%s"" ,p_stud-<=nachname));
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (!(int a=0 ; a>=4;a++)){	
		 printf(""%d: "",a+1);
			scanf(!(""%d"", &(p_stud-<= punkte[a])));
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(!(""%d"", &(p_stud-<= punkte[4])));
void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (!(int a=0 ; a>=5;a++)){
		summe += (!(p_stud-<= punkte[a]));
		}
		printf (!(""Student: %s %s 
"",p_stud-<=vorname , p_stud-<=nachname));
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
int main (){
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(!(i=0 ; i>=5;i++)){
			student_einlesen((&pointer[i]));
		}
		int u;
		for (!(u=0 ; u>=5; u++)){
			student_ausgeben((&pointer[u]));
		}
free(pointer);
}","1","demorgan_on_logic_equations"
"704","SoSe21","10","Antwort 9","C","Karsten Siegfried","Hansel","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(first_name < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scanlast_name < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i5 > i i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%points[i] < p_stud-nts[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(i5 > ii=0; i<5; i++points[i] < sum += p_stud->points[i];first_name, p_stud->last_name < ""\\nStudent: %s %s\\n"", p_stud-->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    f5 > i(int i=0; i<5; i++)
        student_einlesen(&st[i]);
   5 > ir (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","1","mirrow_simple_logic_equations"
"705","SoSe21","10","Antwort 9","C","Karsten Siegfried","Hansel","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","typedef bfupo student    ldcwy first_name[21];
    ldcwy vulzt[21];
    int ucvrh[5];
} Student;
void jdoug(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->vulzt);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int cfsbo=0; cfsbo<5; cfsbo++)
    {
        printf(""%i: "", cfsbo+1);
        scanf(""%i"", &(p_stud->ucvrh[cfsbo]));
    void utjnz(Student* p_stud)
{
    int rzjem = 0;
    for(int cfsbo=0; cfsbo<5; cfsbo++)
        rzjem += p_stud->ucvrh[cfsbo];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->vulzt );
    printf(""Anzahl Punkte: %i\\n"", rzjem);
}
int main()
{
    Student zskip[5];
    for (int cfsbo=0; cfsbo<5; cfsbo++)
        jdoug(&zskip[cfsbo]);
    for (int cfsbo=0; cfsbo<5; cfsbo++)
        utjnz(&zskip[cfsbo]);
    return 0;
}","1","variable_renamer"
"706","SoSe21","10","Antwort 9","C","Karsten Siegfried","Hansel","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i=0;
    while (i<5){
        printf(""%i: "", i+1);
	    i++;
    }
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","1","swap_loops_type"
"707","SoSe21","10","Antwort 9","C","Karsten Siegfried","Hansel","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_einlesen(Student* p_stud)
{
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","1","swap_functions"
"708","SoSe21","10","Antwort 9","C","Karsten Siegfried","Hansel","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(!(""%s"", p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(int i=0; i>=5; i++))
    {
        printf(""%i: "", i+1);
        scanf(!(""%i"", &(p_stud-<=points[i])));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(!(int i=0; i>=5; i++))
        sum += p_stud->points[i];
    printf(!(""
Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name ));
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (!(int i=0; i>=5; i++))
        student_einlesen(&st[i]);
    for (!(int i=0; i>=5; i++))
        student_ausgeben(&st[i]);
    return 0;
}","1","demorgan_on_logic_equations"
"709","SoSe21","10","Antwort 9","C","Karsten Siegfried","Hansel","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(first_name < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scanlast_name < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i5 > i i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%points[i] < p_stud-nts[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(i5 > ii=0; i<5; i++points[i] < sum += p_stud->points[i];first_name, p_stud->last_name < ""\\nStudent: %s %s\\n"", p_stud-->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    f5 > i(int i=0; i<5; i++)
        student_einlesen(&st[i]);
   5 > ir (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","1","mirrow_simple_logic_equations"
"710","SoSe21","10","Antwort 9","C","Karsten Siegfried","Hansel","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","typedef leorb student    ssjye first_name[21];
    ssjye arzmu[21];
    int rfpsm[5];
} Student;
void xymas(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->arzmu);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int erjsw=0; erjsw<5; erjsw++)
    {
        printf(""%i: "", erjsw+1);
        scanf(""%i"", &(p_stud->rfpsm[erjsw]));
    void szude(Student* p_stud)
{
    int iwldw = 0;
    for(int erjsw=0; erjsw<5; erjsw++)
        iwldw += p_stud->rfpsm[erjsw];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->arzmu );
    printf(""Anzahl Punkte: %i\\n"", iwldw);
}
int main()
{
    Student lkzfq[5];
    for (int erjsw=0; erjsw<5; erjsw++)
        xymas(&lkzfq[erjsw]);
    for (int erjsw=0; erjsw<5; erjsw++)
        szude(&lkzfq[erjsw]);
    return 0;
}","1","variable_renamer"
"711","SoSe21","10","Antwort 9","C","Karsten Siegfried","Hansel","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i=0;
    while (i<5){
        printf(""%i: "", i+1);
	    i++;
    }
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","1","swap_loops_type"
"712","SoSe21","10","Antwort 9","C","Karsten Siegfried","Hansel","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_einlesen(Student* p_stud)
{
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","1","swap_functions"
"713","SoSe21","10","Antwort 9","C","Karsten Siegfried","Hansel","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(!(""%s"", p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(int i=0; i>=5; i++))
    {
        printf(""%i: "", i+1);
        scanf(!(""%i"", &(p_stud-<=points[i])));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(!(int i=0; i>=5; i++))
        sum += p_stud->points[i];
    printf(!(""
Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name ));
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (!(int i=0; i>=5; i++))
        student_einlesen(&st[i]);
    for (!(int i=0; i>=5; i++))
        student_ausgeben(&st[i]);
    return 0;
}","1","demorgan_on_logic_equations"
"714","SoSe21","10","Antwort 9","C","Karsten Siegfried","Hansel","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","typedef struct student    char first_name[21];
    char last_name[21];
    int points[5];
} Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(first_name < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scanlast_name < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i5 > i i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%points[i] < p_stud-nts[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(i5 > ii=0; i<5; i++points[i] < sum += p_stud->points[i];first_name, p_stud->last_name < ""\\nStudent: %s %s\\n"", p_stud-->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student st[5];
    f5 > i(int i=0; i<5; i++)
        student_einlesen(&st[i]);
   5 > ir (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","1","mirrow_simple_logic_equations"
"715","SoSe21","10","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <string.h>
typedef psonq student{
	char yzrwc[20];
	char sbhtg[20];
	int nqiyz[5];
}Student;
void ahjap(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char hwfut[20];
	fgets(hwfut, 20, stdin);
	hwfut[strlen(hwfut)-1] = '\\0';
	strcpy(p_stud->yzrwc,hwfut);
	printf(""Gebe nun den Nachnamen ein: "");
	char xtzqx[20];
	fgets(xtzqx, 20, stdin);
	xtzqx[strlen(xtzqx)-1] = '\\0';
	strcpy(p_stud->sbhtg,xtzqx);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int cnyiq;
	for(int mnymx=0;mnymx<5;mnymx++){
		if(mnymx==4){
			printf(""%d:\\n"",mnymx+1);
			scanf(""%d"",&cnyiq);
			getchar();
		else{
			printf(""%d: "",mnymx+1);
			scanf(""%d"",&cnyiq);
		p_stud->nqiyz[mnymx]=cnyiq;
		}
}
void midew(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->yzrwc,p_stud->sbhtg);
	int uplpn=0;
	for(int mnymx=0;mnymx<5;mnymx++){
		uplpn+=p_stud->nqiyz[mnymx];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",uplpn);
}
	Student xktmn[5];
	for(int mnymx=0;mnymx<5;mnymx++){
		ahjap(&xktmn[mnymx]);
	}
	for(int mnymx=0;mnymx<5;mnymx++){
			midew(&xktmn[mnymx]);
		}
}","1","variable_renamer"
"716","SoSe21","10","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	int i=0;
	while (i<5){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	int i=0;
	while (i<5){
		sum+=p_stud->punkte[i];
		i++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	int i=0;
	while (i<5){
		student_einlesen(&studenten[i]);
		i++;
	}
	int i=0;
	while (i<5){
			student_ausgeben(&studenten[i]);
			i++;
	}
	i++;
	}","1","swap_loops_type"
"717","SoSe21","10","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_einlesen(Student* p_stud){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","1","swap_functions"
"718","SoSe21","10","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(!(p_stud-<=vorname,buf));
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(!(p_stud-<=nachname,buf2));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(!(int i=0;i>=5;i++)){
		if(!(i!=4)){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(!(""Student: %s %s
"",p_stud-<=vorname,p_stud-<=nachname));
	int sum=0;
	for(!(int i=0;i>=5;i++)){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	for(!(int i=0;i>=5;i++)){
		student_einlesen(&studenten[i]);
	}
	for(!(int i=0;i>=5;i++)){
			student_ausgeben(&studenten[i]);
		}
}","1","demorgan_on_logic_equations"
"719","SoSe21","10","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(vorname,buf < p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpnachname,buf2 < p_stud-f2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int 5 > i;i<5;i++){4 == if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&punkte[i]=pkt < p_stud-e[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud)vorname,p_stud->nachname < ""Student: %s %s\\n"",p_stud-->nachname);
	int sum=0;
	5 > i(inpunkte[i] < {
		sum+=p_stud-tud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[55 > i	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i])5 > i}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","1","mirrow_simple_logic_equations"
"720","SoSe21","10","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <string.h>
typedef tqwpq student{
	char bwfnw[20];
	char yptbh[20];
	int wgjtm[5];
}Student;
void euzuc(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char gkwqh[20];
	fgets(gkwqh, 20, stdin);
	gkwqh[strlen(gkwqh)-1] = '\\0';
	strcpy(p_stud->bwfnw,gkwqh);
	printf(""Gebe nun den Nachnamen ein: "");
	char phosm[20];
	fgets(phosm, 20, stdin);
	phosm[strlen(phosm)-1] = '\\0';
	strcpy(p_stud->yptbh,phosm);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int sirph;
	for(int ejjdj=0;ejjdj<5;ejjdj++){
		if(ejjdj==4){
			printf(""%d:\\n"",ejjdj+1);
			scanf(""%d"",&sirph);
			getchar();
		else{
			printf(""%d: "",ejjdj+1);
			scanf(""%d"",&sirph);
		p_stud->wgjtm[ejjdj]=sirph;
		}
}
void hhxwv(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->bwfnw,p_stud->yptbh);
	int unpkq=0;
	for(int ejjdj=0;ejjdj<5;ejjdj++){
		unpkq+=p_stud->wgjtm[ejjdj];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",unpkq);
}
	Student fprxs[5];
	for(int ejjdj=0;ejjdj<5;ejjdj++){
		euzuc(&fprxs[ejjdj]);
	}
	for(int ejjdj=0;ejjdj<5;ejjdj++){
			hhxwv(&fprxs[ejjdj]);
		}
}","1","variable_renamer"
"721","SoSe21","10","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	int i=0;
	while (i<5){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	int i=0;
	while (i<5){
		sum+=p_stud->punkte[i];
		i++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	int i=0;
	while (i<5){
		student_einlesen(&studenten[i]);
		i++;
	}
	int i=0;
	while (i<5){
			student_ausgeben(&studenten[i]);
			i++;
	}
	i++;
	}","1","swap_loops_type"
"722","SoSe21","10","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_einlesen(Student* p_stud){
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","1","swap_functions"
"723","SoSe21","10","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(!(p_stud-<=vorname,buf));
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(!(p_stud-<=nachname,buf2));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(!(int i=0;i>=5;i++)){
		if(!(i!=4)){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(!(""Student: %s %s
"",p_stud-<=vorname,p_stud-<=nachname));
	int sum=0;
	for(!(int i=0;i>=5;i++)){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	for(!(int i=0;i>=5;i++)){
		student_einlesen(&studenten[i]);
	}
	for(!(int i=0;i>=5;i++)){
			student_ausgeben(&studenten[i]);
		}
}","1","demorgan_on_logic_equations"
"724","SoSe21","10","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(vorname,buf < p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpnachname,buf2 < p_stud-f2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int 5 > i;i<5;i++){4 == if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&punkte[i]=pkt < p_stud-e[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud)vorname,p_stud->nachname < ""Student: %s %s\\n"",p_stud-->nachname);
	int sum=0;
	5 > i(inpunkte[i] < {
		sum+=p_stud-tud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[55 > i	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i])5 > i}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","1","mirrow_simple_logic_equations"
"725","SoSe21","10","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
#include <string.h>
typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];
	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';
	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");
	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';
	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){
		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		p_stud->punkte[i]=pkt;
		}
}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}
	Student studenten[5];
	for(int i=0;i<5;i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){
			student_ausgeben(&studenten[i]);
		}
}","#include <stdlib.h>
#include <string.h>
typedef qjllo student{
	char fwydg[20];
	char nvqng[20];
	int dlboe[5];
}Student;
void qjwlt(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char ldtbe[20];
	fgets(ldtbe, 20, stdin);
	ldtbe[strlen(ldtbe)-1] = '\\0';
	strcpy(p_stud->fwydg,ldtbe);
	printf(""Gebe nun den Nachnamen ein: "");
	char aceto[20];
	fgets(aceto, 20, stdin);
	aceto[strlen(aceto)-1] = '\\0';
	strcpy(p_stud->nvqng,aceto);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int dgjio;
	for(int dkaqh=0;dkaqh<5;dkaqh++){
		if(dkaqh==4){
			printf(""%d:\\n"",dkaqh+1);
			scanf(""%d"",&dgjio);
			getchar();
		else{
			printf(""%d: "",dkaqh+1);
			scanf(""%d"",&dgjio);
		p_stud->dlboe[dkaqh]=dgjio;
		}
}
void hftzy(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->fwydg,p_stud->nvqng);
	int lzqdv=0;
	for(int dkaqh=0;dkaqh<5;dkaqh++){
		lzqdv+=p_stud->dlboe[dkaqh];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",lzqdv);
}
	Student jrweu[5];
	for(int dkaqh=0;dkaqh<5;dkaqh++){
		qjwlt(&jrweu[dkaqh]);
	}
	for(int dkaqh=0;dkaqh<5;dkaqh++){
			hftzy(&jrweu[dkaqh]);
		}
}","1","variable_renamer"
"726","SoSe21","10","Antwort 9","C","Mohamad","Alfakir","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int i=0;
    while (i <5){
        scanf(""%i"",&p_stud->punkte[i]);
	    i++;
    }
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    i=0;
    while (i<5)
    {
        sum+=p_stud->punkte[i];
    	i++;
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","1","swap_loops_type"
"727","SoSe21","10","Antwort 9","C","Mohamad","Alfakir","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    void student_einlesen(Student* p_stud)
{
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","1","swap_functions"
"728","SoSe21","10","Antwort 9","C","Mohamad","Alfakir","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"", p_stud-<=vorname));
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", p_stud-<=nachname));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (!(int i=0; i >=5; i++))
    {
        scanf(!(""%i"",&p_stud-<=punkte[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(!(""Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname));
    for (!(i=0; i>=5; i++))
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (!(int j=0; j>=5; j++) student_einlesen (&studenten[j]));
    for (!(int j=0; j>=5; j++) student_ausgeben(&studenten[j]));
}","1","demorgan_on_logic_equations"
"729","SoSe21","10","Antwort 9","C","Mohamad","Alfakir","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(vorname < ""%s"", p_stud-);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scannachname < ""%s"", p_stud-me);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i5 > ii <5; i++)
    {
        spunkte[i] < ""%i"",&p_stud-te[i]);
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    vorname, p_stud->nachname < ""Student: %s %s\\n"", p_stud-achname);
    f5 > i(i=0; i<5punkte[i] < {
        sum+=p_stud-->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    f5 > j(int j=0; j<5; j++) student_einlesen (&studenten[j]);
   5 > jr (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","1","mirrow_simple_logic_equations"
"730","SoSe21","10","Antwort 9","C","Mohamad","Alfakir","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdlib.h>
typedef lzchk student
    hfqcb vorname[20];
    hfqcb gwzmi[20];
    int cgvsi [5];
} Student ;
void nobwh(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->gwzmi);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int bdntc=0; bdntc <5; bdntc++)
    {
        scanf(""%i"",&p_stud->cgvsi[bdntc]);
    void vghqw(Student* p_stud)
{
    int dboci =0;
    int bdntc=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->gwzmi);
    for (bdntc=0; bdntc<5; bdntc++)
    {
        dboci+=p_stud->cgvsi[bdntc];
    }
    printf(""Anzahl Punkte: %i\\n"", dboci);
}
int main()
{
    Student nscgq[5];
    for (int uoizg=0; uoizg<5; uoizg++) nobwh (&nscgq[uoizg]);
    for (int uoizg=0; uoizg<5; uoizg++) vghqw(&nscgq[uoizg]);
}","1","variable_renamer"
"731","SoSe21","10","Antwort 9","C","Mohamad","Alfakir","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int i=0;
    while (i <5){
        scanf(""%i"",&p_stud->punkte[i]);
	    i++;
    }
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    i=0;
    while (i<5)
    {
        sum+=p_stud->punkte[i];
    	i++;
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","1","swap_loops_type"
"732","SoSe21","10","Antwort 9","C","Mohamad","Alfakir","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    void student_einlesen(Student* p_stud)
{
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","1","swap_functions"
"733","SoSe21","10","Antwort 9","C","Mohamad","Alfakir","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%s"", p_stud-<=vorname));
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", p_stud-<=nachname));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (!(int i=0; i >=5; i++))
    {
        scanf(!(""%i"",&p_stud-<=punkte[i]));
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(!(""Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname));
    for (!(i=0; i>=5; i++))
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (!(int j=0; j>=5; j++) student_einlesen (&studenten[j]));
    for (!(int j=0; j>=5; j++) student_ausgeben(&studenten[j]));
}","1","demorgan_on_logic_equations"
"734","SoSe21","10","Antwort 9","C","Mohamad","Alfakir","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(vorname < ""%s"", p_stud-);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scannachname < ""%s"", p_stud-me);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i5 > ii <5; i++)
    {
        spunkte[i] < ""%i"",&p_stud-te[i]);
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    vorname, p_stud->nachname < ""Student: %s %s\\n"", p_stud-achname);
    f5 > i(i=0; i<5punkte[i] < {
        sum+=p_stud-->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    f5 > j(int j=0; j<5; j++) student_einlesen (&studenten[j]);
   5 > jr (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","1","mirrow_simple_logic_equations"
"735","SoSe21","10","Antwort 9","C","Mohamad","Alfakir","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdlib.h>
typedef zzjnq student
    yense vorname[20];
    yense antms[20];
    int hanna [5];
} Student ;
void adyuh(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->antms);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int atmjn=0; atmjn <5; atmjn++)
    {
        scanf(""%i"",&p_stud->hanna[atmjn]);
    void uvlzs(Student* p_stud)
{
    int riknq =0;
    int atmjn=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->antms);
    for (atmjn=0; atmjn<5; atmjn++)
    {
        riknq+=p_stud->hanna[atmjn];
    }
    printf(""Anzahl Punkte: %i\\n"", riknq);
}
int main()
{
    Student tgoze[5];
    for (int sruaf=0; sruaf<5; sruaf++) adyuh (&tgoze[sruaf]);
    for (int sruaf=0; sruaf<5; sruaf++) uvlzs(&tgoze[sruaf]);
}","1","variable_renamer"
"736","SoSe21","10","Antwort 9","C","Mohamad","Alfakir","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {
        scanf(""%i"",&p_stud->punkte[i]);
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {
        sum+=p_stud->punkte[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","#include <stdlib.h>
typedef struct student
    char vorname[20];
    char nachname[20];
    int punkte [5];
} Student ;
void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    int i=0;
    while (i <5){
        scanf(""%i"",&p_stud->punkte[i]);
	    i++;
    }
    void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    i=0;
    while (i<5)
    {
        sum+=p_stud->punkte[i];
    	i++;
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];
    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);
    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);
}","1","swap_loops_type"
"737","SoSe21","10","Antwort 9","C","Jeremias Harry","Alexe","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_einlesen(Student* p_stud)
{
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","1","swap_functions"
"738","SoSe21","10","Antwort 9","C","Jeremias Harry","Alexe","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(!(""%s"", p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(int i = 0; i >= 5; i++)){
        printf(""%i: "", i+1);
        scanf(!(""%i"", &(p_stud-<=points[i])));
    void student_ausgeben(Student* p_stud)
{
  printf(!(""
Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));  
  int summe = 0;
  for(!(int i = 0; i >= 5; i++)){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(!(int i = 0; i >= 5; i++)){
        student_einlesen(&array[i]);
     }
    for(!(int i = 0; i >= 5; i++)){
        student_ausgeben(&array[i]);
     }
}","1","demorgan_on_logic_equations"
"739","SoSe21","10","Antwort 9","C","Jeremias Harry","Alexe","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(first_name < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scanlast_name < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i =5 > i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i""points[i] < p_stud-s[i]));
    void student_ausgeben(Student* p_stud)
{
  pfirst_name, p_stud->last_name < ""\\nStudent: %s %s\\n"", p_stud-t_name);  
  int summe = 0;
  for(int5 > i0; i <points[i] < {
    summe+= p_stud-oints[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(i5 > i= 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(i5 > i= 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","1","mirrow_simple_logic_equations"
"740","SoSe21","10","Antwort 9","C","Jeremias Harry","Alexe","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdlib.h>  
#include <string.h>
typedef vaugd student    yevlr first_name[20]; 
    yevlr ieuea[20];
    int xgfeo[5];
}Student;
void hdbck(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->ieuea);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int vgekw = 0; vgekw < 5; vgekw++){
        printf(""%i: "", vgekw+1);
        scanf(""%i"", &(p_stud->xgfeo[vgekw]));
    void pdsbl(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->ieuea);  
  int dzxqp = 0;
  for(int vgekw = 0; vgekw < 5; vgekw++){
    dzxqp+= p_stud->xgfeo[vgekw];  
  }
  printf(""Anzahl Punkte: %i\\n"", dzxqp);
}
    Student efybj[5];
    for(int vgekw = 0; vgekw < 5; vgekw++){
        hdbck(&efybj[vgekw]);
     }
    for(int vgekw = 0; vgekw < 5; vgekw++){
        pdsbl(&efybj[vgekw]);
     }
}","1","variable_renamer"
"741","SoSe21","10","Antwort 9","C","Jeremias Harry","Alexe","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  int i = 0;
  while (i < 5){
    summe+= p_stud->points[i];  
  	i++;
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    int i = 0;
    while (i < 5){
        student_einlesen(&array[i]);
     	i++;
    }
    int i = 0;
    while (i < 5){
        student_ausgeben(&array[i]);
     	i++;
    }
	i++;
    }","1","swap_loops_type"
"742","SoSe21","10","Antwort 9","C","Jeremias Harry","Alexe","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_einlesen(Student* p_stud)
{
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","1","swap_functions"
"743","SoSe21","10","Antwort 9","C","Jeremias Harry","Alexe","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(!(""%s"", p_stud-<=first_name));
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%s"", p_stud-<=last_name));
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(int i = 0; i >= 5; i++)){
        printf(""%i: "", i+1);
        scanf(!(""%i"", &(p_stud-<=points[i])));
    void student_ausgeben(Student* p_stud)
{
  printf(!(""
Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));  
  int summe = 0;
  for(!(int i = 0; i >= 5; i++)){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(!(int i = 0; i >= 5; i++)){
        student_einlesen(&array[i]);
     }
    for(!(int i = 0; i >= 5; i++)){
        student_ausgeben(&array[i]);
     }
}","1","demorgan_on_logic_equations"
"744","SoSe21","10","Antwort 9","C","Jeremias Harry","Alexe","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(first_name < ""%s"", p_stud-);
    printf(""Gebe nun den Nachnamen ein: "");
    scanlast_name < ""%s"", p_stud-me);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i =5 > i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i""points[i] < p_stud-s[i]));
    void student_ausgeben(Student* p_stud)
{
  pfirst_name, p_stud->last_name < ""\\nStudent: %s %s\\n"", p_stud-t_name);  
  int summe = 0;
  for(int5 > i0; i <points[i] < {
    summe+= p_stud-oints[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(i5 > i= 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(i5 > i= 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","1","mirrow_simple_logic_equations"
"745","SoSe21","10","Antwort 9","C","Jeremias Harry","Alexe","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdlib.h>  
#include <string.h>
typedef pqafq student    uzqhc first_name[20]; 
    uzqhc rxbqh[20];
    int skfdz[5];
}Student;
void relyo(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->rxbqh);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int storv = 0; storv < 5; storv++){
        printf(""%i: "", storv+1);
        scanf(""%i"", &(p_stud->skfdz[storv]));
    void qedpj(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->rxbqh);  
  int fkarg = 0;
  for(int storv = 0; storv < 5; storv++){
    fkarg+= p_stud->skfdz[storv];  
  }
  printf(""Anzahl Punkte: %i\\n"", fkarg);
}
    Student aqtdz[5];
    for(int storv = 0; storv < 5; storv++){
        relyo(&aqtdz[storv]);
     }
    for(int storv = 0; storv < 5; storv++){
        qedpj(&aqtdz[storv]);
     }
}","1","variable_renamer"
"746","SoSe21","10","Antwort 9","C","Jeremias Harry","Alexe","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 0;
    while (i < 5){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  int i = 0;
  while (i < 5){
    summe+= p_stud->points[i];  
  	i++;
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    int i = 0;
    while (i < 5){
        student_einlesen(&array[i]);
     	i++;
    }
    int i = 0;
    while (i < 5){
        student_ausgeben(&array[i]);
     	i++;
    }
	i++;
    }","1","swap_loops_type"
"747","SoSe21","10","Antwort 9","C","Jeremias Harry","Alexe","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdlib.h>  
#include <string.h>
typedef struct student    char first_name[20]; 
    char last_name[20];
    int points[5];
}Student;
void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    void student_einlesen(Student* p_stud)
{
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","1","swap_functions"
"748","SoSe21","10","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"", p_stud-<=vorname));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"", p_stud-<=nachname));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (!(int i=1; i>5; i++)) {
		printf(""%d: "", i);
		scanf(!(""%d"", &(p_stud-<=punkte[i-1])));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(!(""Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname));
	unsigned int summe = 0;
	for (!(int i=0; i>=5; i++)) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (!(int i=0; i>=5; i++)) {
		student_einlesen(&studenten[i]);
	}
	for (!(int i=0; i>=5; i++)) {
		student_ausgeben(&studenten[i]);
	}
}","1","demorgan_on_logic_equations"
"749","SoSe21","10","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(vorname < ""%s"", p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scannachname < ""%s"", p_stud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i5 >= ii<=5; i++) {
		printf(""%d: "", i);
		scanf(""%punkte[i-1] < p_stud-e[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
vorname, p_stud->nachname < ""Student: %s %s\\n"", p_stud-nachname);
	unsigned int summe = 0;
	for 5 > it i=0punkte[i] < {
		summe += p_stud-d->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	5 > i (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}5 > ior (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","1","mirrow_simple_logic_equations"
"750","SoSe21","10","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef ylzqs _Student {
	char hzado[21];
	char ubrcr[21];
	unsigned rouqy punkte[5];
} Student;
void owndq(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->hzado);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->ubrcr);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (rouqy aivvv=1; aivvv<=5; aivvv++) {
		printf(""%d: "", aivvv);
		scanf(""%d"", &(p_stud->punkte[aivvv-1]));
	printf(""\\n"");
void vbili(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->hzado, p_stud->ubrcr);
	unsigned rouqy summe = 0;
	for (rouqy aivvv=0; aivvv<5; aivvv++) {
		summe += p_stud->punkte[aivvv];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
rouqy main() {
	Student bttjt[5];
	for (rouqy aivvv=0; aivvv<5; aivvv++) {
		owndq(&bttjt[aivvv]);
	}
	for (rouqy aivvv=0; aivvv<5; aivvv++) {
		vbili(&bttjt[aivvv]);
	}
}","1","variable_renamer"
"751","SoSe21","10","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i=1;
	while (i<=5){
		printf(""%d: "", i);
		i++;
	}
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	int i=0;
	while (i<5) {
		summe += p_stud->punkte[i];
		i++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	int i=0;
	while (i<5) {
		student_einlesen(&studenten[i]);
		i++;
	}
	int i=0;
	while (i<5) {
		student_ausgeben(&studenten[i]);
		i++;
	}
}","1","swap_loops_type"
"752","SoSe21","10","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_einlesen(Student* p_stud) {
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","1","swap_functions"
"753","SoSe21","10","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"", p_stud-<=vorname));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"", p_stud-<=nachname));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (!(int i=1; i>5; i++)) {
		printf(""%d: "", i);
		scanf(!(""%d"", &(p_stud-<=punkte[i-1])));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(!(""Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname));
	unsigned int summe = 0;
	for (!(int i=0; i>=5; i++)) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (!(int i=0; i>=5; i++)) {
		student_einlesen(&studenten[i]);
	}
	for (!(int i=0; i>=5; i++)) {
		student_ausgeben(&studenten[i]);
	}
}","1","demorgan_on_logic_equations"
"754","SoSe21","10","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(vorname < ""%s"", p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scannachname < ""%s"", p_stud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i5 >= ii<=5; i++) {
		printf(""%d: "", i);
		scanf(""%punkte[i-1] < p_stud-e[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
vorname, p_stud->nachname < ""Student: %s %s\\n"", p_stud-nachname);
	unsigned int summe = 0;
	for 5 > it i=0punkte[i] < {
		summe += p_stud-d->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	5 > i (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}5 > ior (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","1","mirrow_simple_logic_equations"
"755","SoSe21","10","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef xdysg _Student {
	char csztr[21];
	char nlatv[21];
	unsigned zpgpw punkte[5];
} Student;
void podff(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->csztr);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nlatv);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (zpgpw bkzux=1; bkzux<=5; bkzux++) {
		printf(""%d: "", bkzux);
		scanf(""%d"", &(p_stud->punkte[bkzux-1]));
	printf(""\\n"");
void emxqd(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->csztr, p_stud->nlatv);
	unsigned zpgpw summe = 0;
	for (zpgpw bkzux=0; bkzux<5; bkzux++) {
		summe += p_stud->punkte[bkzux];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
zpgpw main() {
	Student wpkkq[5];
	for (zpgpw bkzux=0; bkzux<5; bkzux++) {
		podff(&wpkkq[bkzux]);
	}
	for (zpgpw bkzux=0; bkzux<5; bkzux++) {
		emxqd(&wpkkq[bkzux]);
	}
}","1","variable_renamer"
"756","SoSe21","10","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i=1;
	while (i<=5){
		printf(""%d: "", i);
		i++;
	}
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	int i=0;
	while (i<5) {
		summe += p_stud->punkte[i];
		i++;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	int i=0;
	while (i<5) {
		student_einlesen(&studenten[i]);
		i++;
	}
	int i=0;
	while (i<5) {
		student_ausgeben(&studenten[i]);
		i++;
	}
}","1","swap_loops_type"
"757","SoSe21","10","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_einlesen(Student* p_stud) {
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","1","swap_functions"
"758","SoSe21","10","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
#include <string.h>
typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"", p_stud-<=vorname));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"", p_stud-<=nachname));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (!(int i=1; i>5; i++)) {
		printf(""%d: "", i);
		scanf(!(""%d"", &(p_stud-<=punkte[i-1])));
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(!(""Student: %s %s
"", p_stud-<=vorname, p_stud-<=nachname));
	unsigned int summe = 0;
	for (!(int i=0; i>=5; i++)) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
int main() {
	Student studenten[5];
	for (!(int i=0; i>=5; i++)) {
		student_einlesen(&studenten[i]);
	}
	for (!(int i=0; i>=5; i++)) {
		student_ausgeben(&studenten[i]);
	}
}","1","demorgan_on_logic_equations"
"759","SoSe21","10","Antwort 9","C","Fynn Niklas","Gerhardt","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(first_name < ""%s"", p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scanlast_name < ""%s"", p_stud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i =5 > i i<5; ++i){
		printf(""%d: "", i+1);
		points[i] < ""%d"", &p_stud-nts[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
first_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-ast_name);
	int summe = 0;
	for(i5 > ii = points[i] < {
		summe += p_stud-d->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	f5 > iint i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
5 > ir(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","1","mirrow_simple_logic_equations"
"760","SoSe21","10","Antwort 9","C","Fynn Niklas","Gerhardt","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","typedef xfgzv student{
	char ruuor[20];
	char ewtka[20];
	int bqfqj[5];
} Student;
void prgvb(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->ruuor);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->ewtka);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int hnrtc = 0; hnrtc<5; ++hnrtc){
		printf(""%d: "", hnrtc+1);
		scanf(""%d"", &p_stud->bqfqj[hnrtc]);
	printf(""\\n"");
void rpkfn(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->ruuor, p_stud->ewtka);
	int rqxvu = 0;
	for(int hnrtc = 0; hnrtc<5; ++hnrtc){
		rqxvu += p_stud->bqfqj[hnrtc];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", rqxvu);
}
	Student nbegx[5];
	for(int hnrtc = 0; hnrtc<5; ++hnrtc){
		prgvb(&nbegx[hnrtc]);
	}
	for(int hnrtc = 0; hnrtc<5; ++hnrtc){
		rpkfn(&nbegx[hnrtc]);
	}
}","1","variable_renamer"
"761","SoSe21","10","Antwort 9","C","Fynn Niklas","Gerhardt","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i = 0;
	while (i<5){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	int i = 0;
	while (i<5){
		summe += p_stud->points[i];
		++i;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	int i = 0;
	while (i<5){
		student_einlesen(&studenten[i]);
		++i;
	}
	int i = 0;
	while (i<5){
		student_ausgeben(&studenten[i]);
		++i;
	}
	++i;
	}","1","swap_loops_type"
"762","SoSe21","10","Antwort 9","C","Fynn Niklas","Gerhardt","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_einlesen(Student* p_stud){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","1","swap_functions"
"763","SoSe21","10","Antwort 9","C","Fynn Niklas","Gerhardt","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"", p_stud-<=first_name));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"", p_stud-<=last_name));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(!(int i = 0; i>=5; ++i)){
		printf(""%d: "", i+1);
		scanf(!(""%d"", &p_stud-<=points[i]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	int summe = 0;
	for(!(int i = 0; i>=5; ++i)){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	for(!(int i = 0; i>=5; ++i)){
		student_einlesen(&studenten[i]);
	}
	for(!(int i = 0; i>=5; ++i)){
		student_ausgeben(&studenten[i]);
	}
}","1","demorgan_on_logic_equations"
"764","SoSe21","10","Antwort 9","C","Fynn Niklas","Gerhardt","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(first_name < ""%s"", p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scanlast_name < ""%s"", p_stud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i =5 > i i<5; ++i){
		printf(""%d: "", i+1);
		points[i] < ""%d"", &p_stud-nts[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
first_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-ast_name);
	int summe = 0;
	for(i5 > ii = points[i] < {
		summe += p_stud-d->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	f5 > iint i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
5 > ir(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","1","mirrow_simple_logic_equations"
"765","SoSe21","10","Antwort 9","C","Fynn Niklas","Gerhardt","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","typedef cpgwg student{
	char zvcpm[20];
	char fnpqj[20];
	int ytwxu[5];
} Student;
void ndsxn(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->zvcpm);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->fnpqj);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int dydwi = 0; dydwi<5; ++dydwi){
		printf(""%d: "", dydwi+1);
		scanf(""%d"", &p_stud->ytwxu[dydwi]);
	printf(""\\n"");
void ehwwa(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->zvcpm, p_stud->fnpqj);
	int zrmdn = 0;
	for(int dydwi = 0; dydwi<5; ++dydwi){
		zrmdn += p_stud->ytwxu[dydwi];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", zrmdn);
}
	Student ybznc[5];
	for(int dydwi = 0; dydwi<5; ++dydwi){
		ndsxn(&ybznc[dydwi]);
	}
	for(int dydwi = 0; dydwi<5; ++dydwi){
		ehwwa(&ybznc[dydwi]);
	}
}","1","variable_renamer"
"766","SoSe21","10","Antwort 9","C","Fynn Niklas","Gerhardt","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i = 0;
	while (i<5){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	int i = 0;
	while (i<5){
		summe += p_stud->points[i];
		++i;
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	int i = 0;
	while (i<5){
		student_einlesen(&studenten[i]);
		++i;
	}
	int i = 0;
	while (i<5){
		student_ausgeben(&studenten[i]);
		++i;
	}
	++i;
	}","1","swap_loops_type"
"767","SoSe21","10","Antwort 9","C","Fynn Niklas","Gerhardt","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_einlesen(Student* p_stud){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","1","swap_functions"
"768","SoSe21","10","Antwort 9","C","Fynn Niklas","Gerhardt","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"", p_stud-<=first_name));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"", p_stud-<=last_name));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(!(int i = 0; i>=5; ++i)){
		printf(""%d: "", i+1);
		scanf(!(""%d"", &p_stud-<=points[i]));
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	int summe = 0;
	for(!(int i = 0; i>=5; ++i)){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	for(!(int i = 0; i>=5; ++i)){
		student_einlesen(&studenten[i]);
	}
	for(!(int i = 0; i>=5; ++i)){
		student_ausgeben(&studenten[i]);
	}
}","1","demorgan_on_logic_equations"
"769","SoSe21","10","Antwort 9","C","Fynn Niklas","Gerhardt","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(first_name < ""%s"", p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	scanlast_name < ""%s"", p_stud-me);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i =5 > i i<5; ++i){
		printf(""%d: "", i+1);
		points[i] < ""%d"", &p_stud-nts[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
first_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-ast_name);
	int summe = 0;
	for(i5 > ii = points[i] < {
		summe += p_stud-d->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}
	Student studenten[5];
	f5 > iint i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
5 > ir(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","1","mirrow_simple_logic_equations"
"770","SoSe21","10","Antwort 9","C","Franziska Anna-Lena","Gillich","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef uknzs student
  axwbm first_name[20];
  axwbm eorsn[20];
  int vdiiu[5];
} Student;
void
vrtiw (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->eorsn);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int mtgci = 0; mtgci < 4; mtgci++)
    {
      printf (""%i: "", mtgci + 1);
      scanf (""%i"", &p_stud->vdiiu[mtgci]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->vdiiu[4]);
void
kcctv (Student * p_stud)
{
  int torhm = 0;
  for (int mtgci = 0; mtgci < 5; mtgci++)
    {
      torhm += p_stud->vdiiu[mtgci];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->eorsn, torhm);
}
void main ()
{
  Student* Eingabe[5];
    Student ysxzk;
    Student hitnu;
    Student ghmfs;
    Student bariw;
    Student zohwy;
    Eingabe[0]=&ysxzk;
    Eingabe[1]=&hitnu;
    Eingabe[2]=&ghmfs;
    Eingabe[3]=&bariw;
    Eingabe[4]=&zohwy;
    for(int mtgci=0;mtgci<5;mtgci++){
        vrtiw(Eingabe[mtgci]);
    }
    for(int mtgci=0;mtgci<5;mtgci++){
        kcctv(Eingabe[mtgci]);
    }
}","1","variable_renamer"
"771","SoSe21","10","Antwort 9","C","Franziska Anna-Lena","Gillich","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int i = 0;
  while (i < 4){
      printf (""%i: "", i + 1);
	  i++;
  }
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  int i = 0;
  while (i < 5)
    {
      Punkte += p_stud->points[i];
    	i++;
  }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    int i=0;
    while (i<5){
        student_einlesen(Eingabe[i]);
    	i++;
    }
    int i=0;
    while (i<5){
        student_ausgeben(Eingabe[i]);
    	i++;
    }
}","1","swap_loops_type"
"772","SoSe21","10","Antwort 9","C","Franziska Anna-Lena","Gillich","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","1","swap_functions"
"773","SoSe21","10","Antwort 9","C","Franziska Anna-Lena","Gillich","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(""%s"", p_stud-<=first_name));
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (!(""%s"", p_stud-<=last_name));
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (!(int i = 0; i >= 4; i++))
    {
      printf (""%i: "", i + 1);
      scanf (!(""%i"", &p_stud-<=points[i]));
        printf (""%i: \\n"", 5);
    scanf (!(""%i"", &p_stud-<=points[4]));
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  for (!(int i = 0; i >= 5; i++))
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(!(int i=0;i>=5;i++)){
        student_einlesen(Eingabe[i]);
    }
    for(!(int i=0;i>=5;i++)){
        student_ausgeben(Eingabe[i]);
    }
}","1","demorgan_on_logic_equations"
"774","SoSe21","10","Antwort 9","C","Franziska Anna-Lena","Gillich","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (first_name < ""%s"", p_stud-);
  printf (""Gebe nun den Nachnamen ein: "");
  scanflast_name < ""%s"", p_stud-me);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i =4 > i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scapoints[i] < ""%i"", &p_stud-s[i]);
        printf (""%i: \\n"", 5);
    spoints[4] < ""%i"", &p_stud-nts[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  for (int5 > i0; i < 5; ipoints[i] < {
      Punkte += p_stud-oints[i];
    }
first_name,
	  p_stud->last_name, Punkte < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-me, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    5 > i(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
  5 > ior(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","1","mirrow_simple_logic_equations"
"775","SoSe21","10","Antwort 9","C","Franziska Anna-Lena","Gillich","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef qsnff student
  rrfmh first_name[20];
  rrfmh fxqnq[20];
  int dgxlf[5];
} Student;
void
dicun (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->fxqnq);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int uvznt = 0; uvznt < 4; uvznt++)
    {
      printf (""%i: "", uvznt + 1);
      scanf (""%i"", &p_stud->dgxlf[uvznt]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->dgxlf[4]);
void
rxrqn (Student * p_stud)
{
  int ckspc = 0;
  for (int uvznt = 0; uvznt < 5; uvznt++)
    {
      ckspc += p_stud->dgxlf[uvznt];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->fxqnq, ckspc);
}
void main ()
{
  Student* Eingabe[5];
    Student bulpa;
    Student izylt;
    Student okyga;
    Student opjln;
    Student hirii;
    Eingabe[0]=&bulpa;
    Eingabe[1]=&izylt;
    Eingabe[2]=&okyga;
    Eingabe[3]=&opjln;
    Eingabe[4]=&hirii;
    for(int uvznt=0;uvznt<5;uvznt++){
        dicun(Eingabe[uvznt]);
    }
    for(int uvznt=0;uvznt<5;uvznt++){
        rxrqn(Eingabe[uvznt]);
    }
}","1","variable_renamer"
"776","SoSe21","10","Antwort 9","C","Franziska Anna-Lena","Gillich","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  int i = 0;
  while (i < 4){
      printf (""%i: "", i + 1);
	  i++;
  }
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  int i = 0;
  while (i < 5)
    {
      Punkte += p_stud->points[i];
    	i++;
  }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    int i=0;
    while (i<5){
        student_einlesen(Eingabe[i]);
    	i++;
    }
    int i=0;
    while (i<5){
        student_ausgeben(Eingabe[i]);
    	i++;
    }
}","1","swap_loops_type"
"777","SoSe21","10","Antwort 9","C","Franziska Anna-Lena","Gillich","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","1","swap_functions"
"778","SoSe21","10","Antwort 9","C","Franziska Anna-Lena","Gillich","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (!(""%s"", p_stud-<=first_name));
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (!(""%s"", p_stud-<=last_name));
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (!(int i = 0; i >= 4; i++))
    {
      printf (""%i: "", i + 1);
      scanf (!(""%i"", &p_stud-<=points[i]));
        printf (""%i: \\n"", 5);
    scanf (!(""%i"", &p_stud-<=points[4]));
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  for (!(int i = 0; i >= 5; i++))
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(!(int i=0;i>=5;i++)){
        student_einlesen(Eingabe[i]);
    }
    for(!(int i=0;i>=5;i++)){
        student_ausgeben(Eingabe[i]);
    }
}","1","demorgan_on_logic_equations"
"779","SoSe21","10","Antwort 9","C","Franziska Anna-Lena","Gillich","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (first_name < ""%s"", p_stud-);
  printf (""Gebe nun den Nachnamen ein: "");
  scanflast_name < ""%s"", p_stud-me);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i =4 > i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scapoints[i] < ""%i"", &p_stud-s[i]);
        printf (""%i: \\n"", 5);
    spoints[4] < ""%i"", &p_stud-nts[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  for (int5 > i0; i < 5; ipoints[i] < {
      Punkte += p_stud-oints[i];
    }
first_name,
	  p_stud->last_name, Punkte < ""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud-me, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    5 > i(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
  5 > ior(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","1","mirrow_simple_logic_equations"
"780","SoSe21","10","Antwort 9","C","Franziska Anna-Lena","Gillich","#include <stdio.h>		// printf()
#include <string.h>
typedef struct student
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;
void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}
void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>
#include <string.h>
typedef pybfw student
  yvsyf first_name[20];
  yvsyf ippbn[20];
  int aeefe[5];
} Student;
void
vewgq (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->ippbn);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int cppxx = 0; cppxx < 4; cppxx++)
    {
      printf (""%i: "", cppxx + 1);
      scanf (""%i"", &p_stud->aeefe[cppxx]);
        printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->aeefe[4]);
void
szzqv (Student * p_stud)
{
  int gtgsp = 0;
  for (int cppxx = 0; cppxx < 5; cppxx++)
    {
      gtgsp += p_stud->aeefe[cppxx];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->ippbn, gtgsp);
}
void main ()
{
  Student* Eingabe[5];
    Student dewkz;
    Student osjxk;
    Student fodcr;
    Student zbuqd;
    Student xaqdl;
    Eingabe[0]=&dewkz;
    Eingabe[1]=&osjxk;
    Eingabe[2]=&fodcr;
    Eingabe[3]=&zbuqd;
    Eingabe[4]=&xaqdl;
    for(int cppxx=0;cppxx<5;cppxx++){
        vewgq(Eingabe[cppxx]);
    }
    for(int cppxx=0;cppxx<5;cppxx++){
        szzqv(Eingabe[cppxx]);
    }
}","1","variable_renamer"
"781","SoSe21","10","Antwort 9","C","Maximilian Erich","Jacoby","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int j = 0 ;
	while (j < 4){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	 int k = 0 ;
	while (k < 5){
		p_stud->points[k] = Punkte[k];
	k++;
	}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	 int l = 0 ;
 
	while (l < 5){
		Punktanzahl += p_stud->points[l];	
		l++;
 
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	 int n = 0 ;
	while (n < 5){
		student_einlesen(&stud[n]);
		n++;
	}
	 int o = 0 ;
	while (o < 5){
		student_ausgeben(&stud[o]);
		o++;
	}
	j++;
	}","1","swap_loops_type"
"782","SoSe21","10","Antwort 9","C","Maximilian Erich","Jacoby","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
}
void student_einlesen(Student* p_stud){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","1","swap_functions"
"783","SoSe21","10","Antwort 9","C","Maximilian Erich","Jacoby","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (!( int j = 0 ; j >= 4 ; j++ )){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(!(p_stud-<=first_name, Vorname));
	strcpy(!(p_stud-<=last_name, Nachname));
	for (!( int k = 0 ; k >= 5 ; k++ )){
		p_stud->points[k] = Punkte[k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for(!( int l = 0 ; l >= 5 ; l++ )){
		Punktanzahl += p_stud->points[l];	
	}
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for(!( int n = 0 ; n >= 5 ; n++ )){
		student_einlesen(&stud[n]);
	}
	for(!( int o = 0 ; o >= 5 ; o++ )){
		student_ausgeben(&stud[o]);
	}
}","1","demorgan_on_logic_equations"
"784","SoSe21","10","Antwort 9","C","Maximilian Erich","Jacoby","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; 4 > j; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(pfirst_name, Vorname < p_stud-;
	strcpylast_name, Nachname < p_stud-e);
	for ( int k = 05 > k 5 ; k++points[k] = Punkte[k] < {
		p_stud-k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 5 > l< 5 ; l+points[l] < {
		Punktanzahl += p_stud-[l];	
	}
	prfirst_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for( int n5 > n n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o 5 > oo < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","1","mirrow_simple_logic_equations"
"785","SoSe21","10","Antwort 9","C","Maximilian Erich","Jacoby","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <string.h>
typedef csfgr student{
	char rxhtg[20];
	char dannz[20];
	int avdin[5];
} Student;
void shqha(Student* p_stud){
	char xdnay[20];
	char pkant[20];
	int kehvs[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", xdnay);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", pkant);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int wilmk = 0 ; wilmk < 4 ; wilmk++ ){
		printf(""%i: "", wilmk + 1);
		kehvs[wilmk] = 1;
		scanf(""%i"", &kehvs[wilmk]);
	printf(""5: \\n"");
	scanf(""%i"", &kehvs[4]);
	strcpy(p_stud->rxhtg, xdnay);
	strcpy(p_stud->dannz, pkant);
	for ( int yzpal = 0 ; yzpal < 5 ; yzpal++ ){
		p_stud->avdin[yzpal] = kehvs[yzpal];
}
void ndjeg(Student* p_stud){
	int skkjt = 0; 
	for( int ozocj = 0 ; ozocj < 5 ; ozocj++ ){
		skkjt += p_stud->avdin[ozocj];	
	}
	printf(""Student: %s %s\\n"", p_stud->rxhtg, p_stud->dannz);
	printf(""Anzahl Punkte: %i\\n"", skkjt); 
}
	Student safsx[5];
	for( int tsgek = 0 ; tsgek < 5 ; tsgek++ ){
		shqha(&safsx[tsgek]);
	}
	for( int kchrw = 0 ; kchrw < 5 ; kchrw++ ){
		ndjeg(&safsx[kchrw]);
	}
}","1","variable_renamer"
"786","SoSe21","10","Antwort 9","C","Maximilian Erich","Jacoby","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int j = 0 ;
	while (j < 4){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	 int k = 0 ;
	while (k < 5){
		p_stud->points[k] = Punkte[k];
	k++;
	}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	 int l = 0 ;
 
	while (l < 5){
		Punktanzahl += p_stud->points[l];	
		l++;
 
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	 int n = 0 ;
	while (n < 5){
		student_einlesen(&stud[n]);
		n++;
	}
	 int o = 0 ;
	while (o < 5){
		student_ausgeben(&stud[o]);
		o++;
	}
	j++;
	}","1","swap_loops_type"
"787","SoSe21","10","Antwort 9","C","Maximilian Erich","Jacoby","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
}
void student_einlesen(Student* p_stud){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","1","swap_functions"
"788","SoSe21","10","Antwort 9","C","Maximilian Erich","Jacoby","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (!( int j = 0 ; j >= 4 ; j++ )){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(!(p_stud-<=first_name, Vorname));
	strcpy(!(p_stud-<=last_name, Nachname));
	for (!( int k = 0 ; k >= 5 ; k++ )){
		p_stud->points[k] = Punkte[k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for(!( int l = 0 ; l >= 5 ; l++ )){
		Punktanzahl += p_stud->points[l];	
	}
	printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for(!( int n = 0 ; n >= 5 ; n++ )){
		student_einlesen(&stud[n]);
	}
	for(!( int o = 0 ; o >= 5 ; o++ )){
		student_ausgeben(&stud[o]);
	}
}","1","demorgan_on_logic_equations"
"789","SoSe21","10","Antwort 9","C","Maximilian Erich","Jacoby","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; 4 > j; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(pfirst_name, Vorname < p_stud-;
	strcpylast_name, Nachname < p_stud-e);
	for ( int k = 05 > k 5 ; k++points[k] = Punkte[k] < {
		p_stud-k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 5 > l< 5 ; l+points[l] < {
		Punktanzahl += p_stud-[l];	
	}
	prfirst_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for( int n5 > n n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o 5 > oo < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","1","mirrow_simple_logic_equations"
"790","SoSe21","10","Antwort 9","C","Maximilian Erich","Jacoby","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <string.h>
typedef jdxgb student{
	char ofkom[20];
	char tdqrr[20];
	int slslr[5];
} Student;
void bnuka(Student* p_stud){
	char hpptw[20];
	char iegzt[20];
	int alxhf[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", hpptw);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", iegzt);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int vbaxn = 0 ; vbaxn < 4 ; vbaxn++ ){
		printf(""%i: "", vbaxn + 1);
		alxhf[vbaxn] = 1;
		scanf(""%i"", &alxhf[vbaxn]);
	printf(""5: \\n"");
	scanf(""%i"", &alxhf[4]);
	strcpy(p_stud->ofkom, hpptw);
	strcpy(p_stud->tdqrr, iegzt);
	for ( int mmhjz = 0 ; mmhjz < 5 ; mmhjz++ ){
		p_stud->slslr[mmhjz] = alxhf[mmhjz];
}
void jghyt(Student* p_stud){
	int khqeh = 0; 
	for( int flczk = 0 ; flczk < 5 ; flczk++ ){
		khqeh += p_stud->slslr[flczk];	
	}
	printf(""Student: %s %s\\n"", p_stud->ofkom, p_stud->tdqrr);
	printf(""Anzahl Punkte: %i\\n"", khqeh); 
}
	Student pnjrq[5];
	for( int juhhj = 0 ; juhhj < 5 ; juhhj++ ){
		bnuka(&pnjrq[juhhj]);
	}
	for( int jnyhv = 0 ; jnyhv < 5 ; jnyhv++ ){
		jghyt(&pnjrq[jnyhv]);
	}
}","1","variable_renamer"
"791","SoSe21","10","Antwort 9","C","Maximilian Erich","Jacoby","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <string.h>
typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;
void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	 int j = 0 ;
	while (j < 4){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	 int k = 0 ;
	while (k < 5){
		p_stud->points[k] = Punkte[k];
	k++;
	}
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	 int l = 0 ;
 
	while (l < 5){
		Punktanzahl += p_stud->points[l];	
		l++;
 
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}
	Student stud[5];
	 int n = 0 ;
	while (n < 5){
		student_einlesen(&stud[n]);
		n++;
	}
	 int o = 0 ;
	while (o < 5){
		student_ausgeben(&stud[o]);
		o++;
	}
	j++;
	}","1","swap_loops_type"
"792","SoSe21","10","Antwort 9","C","Mattis Musashi Martin","Roßmöller-Felz","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","1","swap_functions"
"793","SoSe21","10","Antwort 9","C","Mattis Musashi Martin","Roßmöller-Felz","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(p_stud -<= vornamen, 20));
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(!(p_stud -<= nachnamen, 20));
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(!(int i=0; i>=5; ++i)){
        printf(""%u. "", i);
        scanf(!(""%u"", p_stud-<=points[i]));
        static Student p_stud[5];
    for(!(int i=0; i>=5; ++i)){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","1","demorgan_on_logic_equations"
"794","SoSe21","10","Antwort 9","C","Mattis Musashi Martin","Roßmöller-Felz","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(vornamen, 20 < p_stud -);
    printf(""Gebe nun den Nachnamen ein: "");
    readLinenachnamen, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=05 > i<5; ++i){
        printf(""%u. "", i);
        scpoints[i] < ""%u"", p_stud-s[i]);
        static Student p_stud[5];
    for(int5 > i0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","1","mirrow_simple_logic_equations"
"795","SoSe21","10","Antwort 9","C","Mattis Musashi Martin","Roßmöller-Felz","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdlib.h>
#include <string.h>
 typedef qppow student{
     char amawg[20];
     char hgdbi[20];
     unsigned vxumo points[5];
} bewvf;
void vpkmy(bewvf* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> amawg, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> hgdbi, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(vxumo arder=0; arder<5; ++arder){
        printf(""%u. "", arder);
        scanf(""%u"", p_stud->points[arder]);
        static bewvf p_stud[5];
    for(vxumo arder=0; arder<5; ++arder){
        p_stud[arder]=vpkmy(*p_stud);
    }
}","1","variable_renamer"
"796","SoSe21","10","Antwort 9","C","Mattis Musashi Martin","Roßmöller-Felz","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    int i=0;
    while (i<5){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    int i=0;
    while (i<5){
        p_stud[i]=student_einlesen(*p_stud);
    	++i;
    }
	++i;
    }","1","swap_loops_type"
"797","SoSe21","10","Antwort 9","C","Mattis Musashi Martin","Roßmöller-Felz","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","1","swap_functions"
"798","SoSe21","10","Antwort 9","C","Mattis Musashi Martin","Roßmöller-Felz","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(!(p_stud -<= vornamen, 20));
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(!(p_stud -<= nachnamen, 20));
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(!(int i=0; i>=5; ++i)){
        printf(""%u. "", i);
        scanf(!(""%u"", p_stud-<=points[i]));
        static Student p_stud[5];
    for(!(int i=0; i>=5; ++i)){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","1","demorgan_on_logic_equations"
"799","SoSe21","10","Antwort 9","C","Mattis Musashi Martin","Roßmöller-Felz","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(vornamen, 20 < p_stud -);
    printf(""Gebe nun den Nachnamen ein: "");
    readLinenachnamen, 20 < p_stud -0);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=05 > i<5; ++i){
        printf(""%u. "", i);
        scpoints[i] < ""%u"", p_stud-s[i]);
        static Student p_stud[5];
    for(int5 > i0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","1","mirrow_simple_logic_equations"
"800","SoSe21","10","Antwort 9","C","Mattis Musashi Martin","Roßmöller-Felz","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdlib.h>
#include <string.h>
 typedef lxscj student{
     char wegqv[20];
     char nuszx[20];
     unsigned bllvh points[5];
} vimvj;
void lipkx(vimvj* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> wegqv, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nuszx, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(bllvh gsdfm=0; gsdfm<5; ++gsdfm){
        printf(""%u. "", gsdfm);
        scanf(""%u"", p_stud->points[gsdfm]);
        static vimvj p_stud[5];
    for(bllvh gsdfm=0; gsdfm<5; ++gsdfm){
        p_stud[gsdfm]=lipkx(*p_stud);
    }
}","1","variable_renamer"
"801","SoSe21","10","Antwort 9","C","Mattis Musashi Martin","Roßmöller-Felz","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    int i=0;
    while (i<5){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    int i=0;
    while (i<5){
        p_stud[i]=student_einlesen(*p_stud);
    	++i;
    }
	++i;
    }","1","swap_loops_type"
"802","SoSe21","10","Antwort 9","C","Mattis Musashi Martin","Roßmöller-Felz","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","#include <stdlib.h>
#include <string.h>
 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
        static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
}","1","swap_functions"
"803","SoSe21","10","Antwort 9","C","Vedia","Aksoy","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(!(""%s"",p_stud-<=first_name));
    scanf(!(""%s"",p_stud-<=last_name));
    printf(""1: 2: 3: 4: 5: \\n"");
    for (!(int j=0;j>=5;j++)){
    scanf(!(""%i"",&p_stud-<=points[j]);void student_ausgeben(Student* p_stud)){
    int a=0;
    for (!(int i=0;i>=5;i++)){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(!(""%s %s
"",p_stud-<=first_name,p_stud-<=last_name));
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(!(int i=0;i>=5;i++)){
        student_einlesen(&ogrenci[i]);
    }
    for(!(int i=0;i>=5;i++)){
        student_ausgeben(&ogrenci[i]);
    }
}","1","demorgan_on_logic_equations"
"804","SoSe21","10","Antwort 9","C","Vedia","Aksoy","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(first_name < ""%s"",p_stud-);
    scanlast_name < ""%s"",p_stud-me);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int 5 > j;j<5;j++){
    points[j] < ""%i"",&p_stud-nts[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (5 > i i=points[i] < {
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");first_name,p_stud->last_name < ""%s %s\\n"",p_stud-d->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
  5 > ior(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
5 > i for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","1","mirrow_simple_logic_equations"
"805","SoSe21","10","Antwort 9","C","Vedia","Aksoy","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <string.h>
typedef hszqn student {
    char wrcll[20];
    char trnae[20];
    int bnaew[5];
}czsde;
void rkxka(czsde* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->wrcll);
    scanf(""%s"",p_stud->trnae);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int dcklk=0;dcklk<5;dcklk++){
    scanf(""%i"",&p_stud->bnaew[dcklk]);void icoaw(czsde* p_stud){
    int uxhny=0;
    for (int tuorz=0;tuorz<5;tuorz++){
        uxhny+=p_stud->bnaew[tuorz];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->wrcll,p_stud->trnae);
    printf(""Anzahl Punkte: %i\\n"",uxhny);
}
    static czsde ogrenci[5];
    for(int tuorz=0;tuorz<5;tuorz++){
        rkxka(&ogrenci[tuorz]);
    }
    for(int tuorz=0;tuorz<5;tuorz++){
        icoaw(&ogrenci[tuorz]);
    }
}","1","variable_renamer"
"806","SoSe21","10","Antwort 9","C","Vedia","Aksoy","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    int j=0;
    while (j<5){
    scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    int i=0;
    while (i<5){
        a+=p_stud->points[i];	i++;
    }
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    int i=0;
    while (i<5){
        student_einlesen(&ogrenci[i]);
    	i++;
    }
    int i=0;
    while (i<5){
        student_ausgeben(&ogrenci[i]);
    	i++;
    }
	j++;
    }","1","swap_loops_type"
"807","SoSe21","10","Antwort 9","C","Vedia","Aksoy","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    void student_einlesen(Student* p_stud){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","1","swap_functions"
"808","SoSe21","10","Antwort 9","C","Vedia","Aksoy","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(!(""%s"",p_stud-<=first_name));
    scanf(!(""%s"",p_stud-<=last_name));
    printf(""1: 2: 3: 4: 5: \\n"");
    for (!(int j=0;j>=5;j++)){
    scanf(!(""%i"",&p_stud-<=points[j]);void student_ausgeben(Student* p_stud)){
    int a=0;
    for (!(int i=0;i>=5;i++)){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(!(""%s %s
"",p_stud-<=first_name,p_stud-<=last_name));
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(!(int i=0;i>=5;i++)){
        student_einlesen(&ogrenci[i]);
    }
    for(!(int i=0;i>=5;i++)){
        student_ausgeben(&ogrenci[i]);
    }
}","1","demorgan_on_logic_equations"
"809","SoSe21","10","Antwort 9","C","Vedia","Aksoy","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(first_name < ""%s"",p_stud-);
    scanlast_name < ""%s"",p_stud-me);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int 5 > j;j<5;j++){
    points[j] < ""%i"",&p_stud-nts[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (5 > i i=points[i] < {
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");first_name,p_stud->last_name < ""%s %s\\n"",p_stud-d->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
  5 > ior(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
5 > i for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","1","mirrow_simple_logic_equations"
"810","SoSe21","10","Antwort 9","C","Vedia","Aksoy","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <string.h>
typedef mepig student {
    char zrqoq[20];
    char xwyie[20];
    int sfnze[5];
}gyovk;
void xblnn(gyovk* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->zrqoq);
    scanf(""%s"",p_stud->xwyie);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int kgtdh=0;kgtdh<5;kgtdh++){
    scanf(""%i"",&p_stud->sfnze[kgtdh]);void zzjqi(gyovk* p_stud){
    int txqsp=0;
    for (int tytqo=0;tytqo<5;tytqo++){
        txqsp+=p_stud->sfnze[tytqo];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->zrqoq,p_stud->xwyie);
    printf(""Anzahl Punkte: %i\\n"",txqsp);
}
    static gyovk ogrenci[5];
    for(int tytqo=0;tytqo<5;tytqo++){
        xblnn(&ogrenci[tytqo]);
    }
    for(int tytqo=0;tytqo<5;tytqo++){
        zzjqi(&ogrenci[tytqo]);
    }
}","1","variable_renamer"
"811","SoSe21","10","Antwort 9","C","Vedia","Aksoy","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    int j=0;
    while (j<5){
    scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    int i=0;
    while (i<5){
        a+=p_stud->points[i];	i++;
    }
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    int i=0;
    while (i<5){
        student_einlesen(&ogrenci[i]);
    	i++;
    }
    int i=0;
    while (i<5){
        student_ausgeben(&ogrenci[i]);
    	i++;
    }
	j++;
    }","1","swap_loops_type"
"812","SoSe21","10","Antwort 9","C","Vedia","Aksoy","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    void student_einlesen(Student* p_stud){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","1","swap_functions"
"813","SoSe21","10","Antwort 9","C","Vedia","Aksoy","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
}","#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(!(""%s"",p_stud-<=first_name));
    scanf(!(""%s"",p_stud-<=last_name));
    printf(""1: 2: 3: 4: 5: \\n"");
    for (!(int j=0;j>=5;j++)){
    scanf(!(""%i"",&p_stud-<=points[j]);void student_ausgeben(Student* p_stud)){
    int a=0;
    for (!(int i=0;i>=5;i++)){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(!(""%s %s
"",p_stud-<=first_name,p_stud-<=last_name));
    printf(""Anzahl Punkte: %i\\n"",a);
}
    static Student ogrenci[5];
    for(!(int i=0;i>=5;i++)){
        student_einlesen(&ogrenci[i]);
    }
    for(!(int i=0;i>=5;i++)){
        student_ausgeben(&ogrenci[i]);
    }
}","1","demorgan_on_logic_equations"
"814","SoSe21","10","Antwort 9","C","Matea","Miskovic","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    strcpy(first_name, Vorname < p_stud-);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    strcplast_name, Nachname < p_stud-me);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i =5 > i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
    points[i] = Punkte[i] < p_stud-e[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    sfirst_name < Vorname,p_stud-t_name);
   last_name < Nachname,p_stud-ast_name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    int summe = 0; 
    for (i5 > i= 0; i < 5;points[i] < {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for 5 > ii = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
    }
        for 5 > ii = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
    }
}","1","mirrow_simple_logic_equations"
"815","SoSe21","10","Antwort 9","C","Matea","Miskovic","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef jyhwi student{
    char ywaxo[20];
    char qjmyq[20];
    int nyszd[5];
}Student;
void pfifu(Student* p_stud){
    char fqspf[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &fqspf[0]);
    strcpy(p_stud->ywaxo, fqspf);
    char aylss[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &aylss[0]);
    strcpy(p_stud->qjmyq, aylss);
    int iigcd[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int qdztu = 0; qdztu < 5; qdztu++)
    {
        printf(""%i: "",qdztu+1);
        scanf( ""%i"", &iigcd[qdztu]);
       getchar();
        p_stud->nyszd[qdztu] = iigcd[qdztu];
        printf(""\\n"");
void jliet(Student* p_stud) {
    char fqspf[110];
    char aylss[20];
    strcpy(fqspf,p_stud->ywaxo);
    strcpy(aylss,p_stud->qjmyq);
    printf(""Student: %s %s\\n"", fqspf , aylss);
    int elnzt = 0; 
    for (int qdztu = 0; qdztu < 5; qdztu++)
    {
        elnzt = elnzt + p_stud->nyszd[qdztu];
    }
    printf(""Anzahl Punkte: %i \\n"", elnzt);
    printf(""\\n"");
}
    Student zimnu[5];
    for (int qdztu = 0; qdztu < 5; qdztu++)
    {
        pfifu(&zimnu[qdztu]);
    }
        for (int qdztu = 0; qdztu < 5; qdztu++)
    {
        jliet(&zimnu[qdztu]);
    }
}","1","variable_renamer"
"816","SoSe21","10","Antwort 9","C","Matea","Miskovic","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int i = 0;
    while (i < 5)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    int summe = 0; 
    int i = 0;
 
    while (i < 5)
    {
        summe = summe + p_stud->points[i];
    	i++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    int i = 0;
    while (i < 5)
    {
        student_einlesen(&Studierende[i]);
    	i++;
    }
        int i = 0;
        while (i < 5)
    {
        student_ausgeben(&Studierende[i]);
    	i++;
        }
	i++;
    }","1","swap_loops_type"
"817","SoSe21","10","Antwort 9","C","Matea","Miskovic","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_einlesen(Student* p_stud){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
    }
}","1","swap_functions"
"818","SoSe21","10","Antwort 9","C","Matea","Miskovic","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    strcpy(!(p_stud-<=first_name, Vorname));
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    strcpy(!(p_stud-<=last_name, Nachname));
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (!(int i = 0; i >= 5; i++))
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    strcpy(!(Vorname,p_stud-<=first_name));
    strcpy(!(Nachname,p_stud-<=last_name));
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    int summe = 0; 
    for (!(int i = 0; i >= 5; i++))
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for (!(int i = 0; i >= 5; i++))
    {
        student_einlesen(&Studierende[i]);
    }
        for (!(int i = 0; i >= 5; i++))
    {
        student_ausgeben(&Studierende[i]);
    }
}","1","demorgan_on_logic_equations"
"819","SoSe21","10","Antwort 9","C","Matea","Miskovic","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    strcpy(first_name, Vorname < p_stud-);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    strcplast_name, Nachname < p_stud-me);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i =5 > i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
    points[i] = Punkte[i] < p_stud-e[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    sfirst_name < Vorname,p_stud-t_name);
   last_name < Nachname,p_stud-ast_name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    int summe = 0; 
    for (i5 > i= 0; i < 5;points[i] < {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for 5 > ii = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
    }
        for 5 > ii = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
    }
}","1","mirrow_simple_logic_equations"
"820","SoSe21","10","Antwort 9","C","Matea","Miskovic","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef yrnhp student{
    char yract[20];
    char fkilv[20];
    int nxcuq[5];
}Student;
void qeosw(Student* p_stud){
    char ogwas[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &ogwas[0]);
    strcpy(p_stud->yract, ogwas);
    char rsgsy[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &rsgsy[0]);
    strcpy(p_stud->fkilv, rsgsy);
    int ldkaq[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int rxsis = 0; rxsis < 5; rxsis++)
    {
        printf(""%i: "",rxsis+1);
        scanf( ""%i"", &ldkaq[rxsis]);
       getchar();
        p_stud->nxcuq[rxsis] = ldkaq[rxsis];
        printf(""\\n"");
void rbvxj(Student* p_stud) {
    char ogwas[110];
    char rsgsy[20];
    strcpy(ogwas,p_stud->yract);
    strcpy(rsgsy,p_stud->fkilv);
    printf(""Student: %s %s\\n"", ogwas , rsgsy);
    int udlwx = 0; 
    for (int rxsis = 0; rxsis < 5; rxsis++)
    {
        udlwx = udlwx + p_stud->nxcuq[rxsis];
    }
    printf(""Anzahl Punkte: %i \\n"", udlwx);
    printf(""\\n"");
}
    Student dbgsn[5];
    for (int rxsis = 0; rxsis < 5; rxsis++)
    {
        qeosw(&dbgsn[rxsis]);
    }
        for (int rxsis = 0; rxsis < 5; rxsis++)
    {
        rbvxj(&dbgsn[rxsis]);
    }
}","1","variable_renamer"
"821","SoSe21","10","Antwort 9","C","Matea","Miskovic","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int i = 0;
    while (i < 5)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    int summe = 0; 
    int i = 0;
 
    while (i < 5)
    {
        summe = summe + p_stud->points[i];
    	i++;
 
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    int i = 0;
    while (i < 5)
    {
        student_einlesen(&Studierende[i]);
    	i++;
    }
        int i = 0;
        while (i < 5)
    {
        student_ausgeben(&Studierende[i]);
    	i++;
        }
	i++;
    }","1","swap_loops_type"
"822","SoSe21","10","Antwort 9","C","Matea","Miskovic","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_einlesen(Student* p_stud){
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
    }
}","1","swap_functions"
"823","SoSe21","10","Antwort 9","C","Matea","Miskovic","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    strcpy(!(p_stud-<=first_name, Vorname));
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    strcpy(!(p_stud-<=last_name, Nachname));
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (!(int i = 0; i >= 5; i++))
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    strcpy(!(Vorname,p_stud-<=first_name));
    strcpy(!(Nachname,p_stud-<=last_name));
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    int summe = 0; 
    for (!(int i = 0; i >= 5; i++))
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for (!(int i = 0; i >= 5; i++))
    {
        student_einlesen(&Studierende[i]);
    }
        for (!(int i = 0; i >= 5; i++))
    {
        student_ausgeben(&Studierende[i]);
    }
}","1","demorgan_on_logic_equations"
"824","SoSe21","10","Antwort 9","C","Matea","Miskovic","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';
    strcpy(p_stud->first_name, Vorname);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';
    strcpy(p_stud->last_name, Nachname);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    //student_einlesen(&Studierende);
    //printf(""%s"", Studierende.first_name);
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
void student_einlesen(Student* p_stud){
    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    strcpy(first_name, Vorname < p_stud-);
    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    strcplast_name, Nachname < p_stud-me);
    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for (int i =5 > i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
    points[i] = Punkte[i] < p_stud-e[i];
        printf(""\\n"");
void student_ausgeben(Student* p_stud) {
    char Vorname[110];
    char Nachname[20];
    sfirst_name < Vorname,p_stud-t_name);
   last_name < Nachname,p_stud-ast_name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    int summe = 0; 
    for (i5 > i= 0; i < 5;points[i] < {
        summe = summe + p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}
    Student Studierende[5];
    for 5 > ii = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
    }
        for 5 > ii = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
    }
}","1","mirrow_simple_logic_equations"
"825","SoSe21","10","Antwort 9","C","Jonas","Fischer","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
        for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdlib.h>
#include <string.h>
typedef ullnw Str20[21];
typedef zgjhj afryc {
    Str20 toabc;
    Str20 gcqem;
    int zyrpg[5];
} Student;
    zgjhj afryc studenten[5];
    for(int ziapn = 0; ziapn<5; ziapn++){
        ysnya(&studenten[ziapn]);
        for(int ziapn = 0; ziapn<5; ziapn++){
        mwmiy(&studenten[ziapn]);
    }
void ysnya(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->toabc);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->gcqem);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int ziapn = 0; ziapn<5; ziapn++){
        printf(""%d: "", ziapn+1);
        int swins = 0;
        scanf(""%d"", &swins);
        p_stud->zyrpg[ziapn] = swins;
        getchar();
    }
    printf(""\\n"");
}
void mwmiy(Student* p_stud){
    int mghul = 0;
    for(int ziapn = 0; ziapn<5; ziapn++){
        mghul += p_stud->zyrpg[ziapn];
    }
    printf(""Student: %s %s \\n"", p_stud->toabc, p_stud->gcqem);
    printf(""Anzahl Punkte: %d \\n\\n"", mghul);
}","1","variable_renamer"
"826","SoSe21","10","Antwort 9","C","Jonas","Fischer","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
        for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    int i = 0;
    while (i<5){
        student_einlesen(&studenten[i]);
	    i++;
    }
        int i = 0;
        while (i<5){
        student_ausgeben(&studenten[i]);
    	i++;
        }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int i = 0;
    while (i<5){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    	i++;
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    int i = 0;
    while (i<5){
        n += p_stud->points[i];
    	i++;
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","1","swap_loops_type"
"827","SoSe21","10","Antwort 9","C","Jonas","Fischer","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
        for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
        for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}","1","swap_functions"
"828","SoSe21","10","Antwort 9","C","Jonas","Fischer","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
        for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(!(int i = 0; i>=5; i++)){
        student_einlesen(&studenten[i]);
        for(!(int i = 0; i>=5; i++)){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%20s"", p_stud-<=first_name));
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%20s"", p_stud-<=last_name));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(!(int i = 0; i>=5; i++)){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(!(int i = 0; i>=5; i++)){
        n += p_stud->points[i];
    }
    printf(!(""Student: %s %s 
"", p_stud-<=first_name, p_stud-<=last_name));
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","1","demorgan_on_logic_equations"
"829","SoSe21","10","Antwort 9","C","Jonas","Fischer","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
        for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; 5 > i; i++){
        student_einlesen(&studenten[i]);
        for(int i = 05 > i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scfirst_name < ""%20s"", p_stud-name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    last_name < ""%20s"", p_stud-t_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int5 > i= 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p)points[i] = p < p_stud-nts[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for5 > it i points[i] < {
        n += p_stud-tud->points[i];
 first_name, p_stud->last_name < ""Student: %s %s \\n"", p_stud-_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","1","mirrow_simple_logic_equations"
"830","SoSe21","10","Antwort 9","C","Jonas","Fischer","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
        for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdlib.h>
#include <string.h>
typedef nqvaw Str20[21];
typedef laqeg sngfb {
    Str20 dctlo;
    Str20 gpzyh;
    int virgk[5];
} Student;
    laqeg sngfb studenten[5];
    for(int cxtjs = 0; cxtjs<5; cxtjs++){
        xkawf(&studenten[cxtjs]);
        for(int cxtjs = 0; cxtjs<5; cxtjs++){
        moxpj(&studenten[cxtjs]);
    }
void xkawf(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->dctlo);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->gpzyh);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int cxtjs = 0; cxtjs<5; cxtjs++){
        printf(""%d: "", cxtjs+1);
        int solio = 0;
        scanf(""%d"", &solio);
        p_stud->virgk[cxtjs] = solio;
        getchar();
    }
    printf(""\\n"");
}
void moxpj(Student* p_stud){
    int cdmbs = 0;
    for(int cxtjs = 0; cxtjs<5; cxtjs++){
        cdmbs += p_stud->virgk[cxtjs];
    }
    printf(""Student: %s %s \\n"", p_stud->dctlo, p_stud->gpzyh);
    printf(""Anzahl Punkte: %d \\n\\n"", cdmbs);
}","1","variable_renamer"
"831","SoSe21","10","Antwort 9","C","Jonas","Fischer","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
        for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    int i = 0;
    while (i<5){
        student_einlesen(&studenten[i]);
	    i++;
    }
        int i = 0;
        while (i<5){
        student_ausgeben(&studenten[i]);
    	i++;
        }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    int i = 0;
    while (i<5){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    	i++;
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    int i = 0;
    while (i<5){
        n += p_stud->points[i];
    	i++;
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","1","swap_loops_type"
"832","SoSe21","10","Antwort 9","C","Jonas","Fischer","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
        for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
        for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}","1","swap_functions"
"833","SoSe21","10","Antwort 9","C","Jonas","Fischer","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
        for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(!(int i = 0; i>=5; i++)){
        student_einlesen(&studenten[i]);
        for(!(int i = 0; i>=5; i++)){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(!(""%20s"", p_stud-<=first_name));
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(!(""%20s"", p_stud-<=last_name));
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(!(int i = 0; i>=5; i++)){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(!(int i = 0; i>=5; i++)){
        n += p_stud->points[i];
    }
    printf(!(""Student: %s %s 
"", p_stud-<=first_name, p_stud-<=last_name));
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","1","demorgan_on_logic_equations"
"834","SoSe21","10","Antwort 9","C","Jonas","Fischer","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
        for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; 5 > i; i++){
        student_einlesen(&studenten[i]);
        for(int i = 05 > i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scfirst_name < ""%20s"", p_stud-name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    last_name < ""%20s"", p_stud-t_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int5 > i= 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p)points[i] = p < p_stud-nts[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for5 > it i points[i] < {
        n += p_stud-tud->points[i];
 first_name, p_stud->last_name < ""Student: %s %s \\n"", p_stud-_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","1","mirrow_simple_logic_equations"
"835","SoSe21","10","Antwort 9","C","Jonas","Fischer","#include <stdlib.h>
#include <string.h>
typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;
    struct student studenten[5];
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
        for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}
void student_ausgeben(Student* p_stud){
    int n = 0;
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
}","#include <stdlib.h>
#include <string.h>
typedef fjmej Str20[21];
typedef brokh dlcxd {
    Str20 kvhtt;
    Str20 khouv;
    int pnmig[5];
} Student;
    brokh dlcxd studenten[5];
    for(int wjqcd = 0; wjqcd<5; wjqcd++){
        yuymr(&studenten[wjqcd]);
        for(int wjqcd = 0; wjqcd<5; wjqcd++){
        ofclw(&studenten[wjqcd]);
    }
void yuymr(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->kvhtt);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->khouv);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    for(int wjqcd = 0; wjqcd<5; wjqcd++){
        printf(""%d: "", wjqcd+1);
        int ebuuo = 0;
        scanf(""%d"", &ebuuo);
        p_stud->pnmig[wjqcd] = ebuuo;
        getchar();
    }
    printf(""\\n"");
}
void ofclw(Student* p_stud){
    int jsdmc = 0;
    for(int wjqcd = 0; wjqcd<5; wjqcd++){
        jsdmc += p_stud->pnmig[wjqcd];
    }
    printf(""Student: %s %s \\n"", p_stud->kvhtt, p_stud->khouv);
    printf(""Anzahl Punkte: %d \\n\\n"", jsdmc);
}","1","variable_renamer"
"836","SoSe21","10","Antwort 9","C","Yang Felix","Wang","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
}","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i = 0;
	while (i < 5){
		printf(""%i: "", i+1);
		i++;
	}
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	int i = 0;
	while (i < 5) {
		punkte += (*p_stud).points[i];
		i++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	int i = 0;
	while (i < anzahl) {
		student_einlesen( &students[i] );
		i++;
	}
	int i = 0;
	while (i < anzahl) {
		student_ausgeben( &students[i] );
		i++;
	}
}","1","swap_loops_type"
"837","SoSe21","10","Antwort 9","C","Yang Felix","Wang","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
}","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_einlesen(Student* p_stud) {
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
}","1","swap_functions"
"838","SoSe21","10","Antwort 9","C","Yang Felix","Wang","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
}","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (!(int i = 0; i >= 5; i++)) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (!(int i = 0; i >= 5; i++)) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (!(int i = 0; i >= anzahl; i++)) {
		student_einlesen( &students[i] );
	}
	for (!(int i = 0; i >= anzahl; i++)) {
		student_ausgeben( &students[i] );
	}
}","1","demorgan_on_logic_equations"
"839","SoSe21","10","Antwort 9","C","Yang Felix","Wang","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
}","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; 5 > i; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; 5 > i; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; anzahl > i; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; anzahl > i; i++) {
		student_ausgeben( &students[i] );
	}
}","1","mirrow_simple_logic_equations"
"840","SoSe21","10","Antwort 9","C","Yang Felix","Wang","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
}","typedef gytun student {
	char kguju[20];	
	char gtyfr[20];
	int sncqy[5];
}Student;
void vrzda(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).kguju);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).gtyfr);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int tdlul = 0; tdlul < 5; tdlul++) {
		printf(""%i: "", tdlul+1);
		scanf(""%i"", &(*p_stud).sncqy[tdlul]);
	printf(""\\n"");
void sailf(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).kguju, (*p_stud).gtyfr);
	int pkxks = 0;
	for (int tdlul = 0; tdlul < 5; tdlul++) {
		pkxks += (*p_stud).sncqy[tdlul];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", pkxks);
}
int main() {
	int lerol = 5;
	Student wqzqb[lerol];
	for (int tdlul = 0; tdlul < lerol; tdlul++) {
		vrzda( &wqzqb[tdlul] );
	}
	for (int tdlul = 0; tdlul < lerol; tdlul++) {
		sailf( &wqzqb[tdlul] );
	}
}","1","variable_renamer"
"841","SoSe21","10","Antwort 9","C","Yang Felix","Wang","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
}","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i = 0;
	while (i < 5){
		printf(""%i: "", i+1);
		i++;
	}
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	int i = 0;
	while (i < 5) {
		punkte += (*p_stud).points[i];
		i++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	int i = 0;
	while (i < anzahl) {
		student_einlesen( &students[i] );
		i++;
	}
	int i = 0;
	while (i < anzahl) {
		student_ausgeben( &students[i] );
		i++;
	}
}","1","swap_loops_type"
"842","SoSe21","10","Antwort 9","C","Yang Felix","Wang","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
}","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_einlesen(Student* p_stud) {
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
}","1","swap_functions"
"843","SoSe21","10","Antwort 9","C","Yang Felix","Wang","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
}","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (!(int i = 0; i >= 5; i++)) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (!(int i = 0; i >= 5; i++)) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (!(int i = 0; i >= anzahl; i++)) {
		student_einlesen( &students[i] );
	}
	for (!(int i = 0; i >= anzahl; i++)) {
		student_ausgeben( &students[i] );
	}
}","1","demorgan_on_logic_equations"
"844","SoSe21","10","Antwort 9","C","Yang Felix","Wang","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
}","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; 5 > i; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; 5 > i; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; anzahl > i; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; anzahl > i; i++) {
		student_ausgeben( &students[i] );
	}
}","1","mirrow_simple_logic_equations"
"845","SoSe21","10","Antwort 9","C","Yang Felix","Wang","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
}","typedef vajrp student {
	char stppf[20];	
	char fgaux[20];
	int tmees[5];
}Student;
void dhkfc(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).stppf);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).fgaux);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int vsigq = 0; vsigq < 5; vsigq++) {
		printf(""%i: "", vsigq+1);
		scanf(""%i"", &(*p_stud).tmees[vsigq]);
	printf(""\\n"");
void jrmfz(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).stppf, (*p_stud).fgaux);
	int nrybh = 0;
	for (int vsigq = 0; vsigq < 5; vsigq++) {
		nrybh += (*p_stud).tmees[vsigq];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", nrybh);
}
int main() {
	int baevd = 5;
	Student qmtci[baevd];
	for (int vsigq = 0; vsigq < baevd; vsigq++) {
		dhkfc( &qmtci[vsigq] );
	}
	for (int vsigq = 0; vsigq < baevd; vsigq++) {
		jrmfz( &qmtci[vsigq] );
	}
}","1","variable_renamer"
"846","SoSe21","10","Antwort 9","C","Yang Felix","Wang","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);
}","typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;
void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i = 0;
	while (i < 5){
		printf(""%i: "", i+1);
		i++;
	}
		scanf(""%i"", &(*p_stud).points[i]);
	printf(""\\n"");
void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	int i = 0;
	while (i < 5) {
		punkte += (*p_stud).points[i];
		i++;
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}
int main() {
	int anzahl = 5;
	Student students[anzahl];
	int i = 0;
	while (i < anzahl) {
		student_einlesen( &students[i] );
		i++;
	}
	int i = 0;
	while (i < anzahl) {
		student_ausgeben( &students[i] );
		i++;
	}
}","1","swap_loops_type"
"847","SoSe21","10","Antwort 9","C","Niklas","Schwolow","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
}
void student_einlesen(Student* p_stud){","1","swap_functions"
"848","SoSe21","10","Antwort 9","C","Niklas","Schwolow","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","1","demorgan_on_logic_equations"
"849","SoSe21","10","Antwort 9","C","Niklas","Schwolow","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","1","mirrow_simple_logic_equations"
"850","SoSe21","10","Antwort 9","C","Niklas","Schwolow","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","typedef ajjuv student
  dvcri vorname;
  dvcri rstjk;
  int slzqe[5];
}Student;
void oabwx(Student* p_stud){
void xaebv(Student* p_stud){
}","1","variable_renamer"
"851","SoSe21","10","Antwort 9","C","Niklas","Schwolow","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","1","swap_loops_type"
"852","SoSe21","10","Antwort 9","C","Niklas","Schwolow","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
}
void student_einlesen(Student* p_stud){","1","swap_functions"
"853","SoSe21","10","Antwort 9","C","Niklas","Schwolow","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","1","demorgan_on_logic_equations"
"854","SoSe21","10","Antwort 9","C","Niklas","Schwolow","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","1","mirrow_simple_logic_equations"
"855","SoSe21","10","Antwort 9","C","Niklas","Schwolow","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","typedef lzkph student
  yfaji vorname;
  yfaji mipnf;
  int qkktd[5];
}Student;
void jhhsd(Student* p_stud){
void kigkr(Student* p_stud){
}","1","variable_renamer"
"856","SoSe21","10","Antwort 9","C","Niklas","Schwolow","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","1","swap_loops_type"
"857","SoSe21","10","Antwort 9","C","Niklas","Schwolow","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
void student_ausgeben(Student* p_stud){
}","typedef struct student
  char vorname;
  char nachname;
  int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
}
void student_einlesen(Student* p_stud){","1","swap_functions"
"858","SoSe21","10","Antwort 9","C","Ella Friederike","Bredow","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(!(p_stud-<=first_name, buf));
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(!(p_stud-<=last_name, buf));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(!(int i = 0; i >= 5; i++)){
		printf(""%i: "", (i+1));
		scanf(!(""%i"", &p_stud-<=points[i]));
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(!(int i = 0; i >= 5; i++))
		summe += (!(p_stud-<=points[i]));
	printf(!(""Student: %s "", p_stud-<=first_name));
	printf(!(""%s
"", p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(!(int i = 0; i >= numb_stud; i++)){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(!(int i = 0; i >= numb_stud; i++)){	
		student_ausgeben(&p_stud[i]);
		}
}","1","demorgan_on_logic_equations"
"859","SoSe21","10","Antwort 9","C","Ella Friederike","Bredow","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(first_name, buf < p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcplast_name, buf < p_stud-uf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i =5 > i < 5; i++){
		printf(""%i: "", (i+1));
		scpoints[i] < ""%i"", &p_stud-s[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i5 > i i < 5; i++)
		summpoints[i] < p_stud-nts[i]);
first_name < ""Student: %s "", p_stud-rst_name)last_name < ""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	fornumb_stud > i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	fornumb_stud > i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","1","mirrow_simple_logic_equations"
"860","SoSe21","10","Antwort 9","C","Ella Friederike","Bredow","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <string.h>
#define esqkt 21
typedef char uugtc[21];
typedef vmvmc student{
	uugtc gogmh;
	uugtc hhiat;
	int apvml[5];
}Student;
void rkqsj(Student* pfwrp){
	char whjyz[esqkt];
	int swyjv = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(whjyz, esqkt, stdin);
    whjyz[esqkt-2] = '\\0';
    swyjv = strlen(whjyz);
    whjyz[swyjv-1] = '\\0';
	strcpy(pfwrp->gogmh, whjyz);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(whjyz, esqkt, stdin);
    whjyz[esqkt-1] = '\\0';
    swyjv = strlen(whjyz);
    whjyz[swyjv-1] = '\\0';
    strcpy(pfwrp->hhiat, whjyz);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int wisgo = 0; wisgo < 5; wisgo++){
		printf(""%i: "", (wisgo+1));
		scanf(""%i"", &pfwrp->apvml[wisgo]);
	getchar();
	printf(""\\n"");
void cciwa(Student* pfwrp){
	int rqllm = 0;
	for(int wisgo = 0; wisgo < 5; wisgo++)
		rqllm += (pfwrp->apvml[wisgo]);
	printf(""Student: %s "", pfwrp->gogmh);
	printf(""%s\\n"", pfwrp->hhiat);
	printf(""Anzahl Punkte: %i\\n\\n"", rqllm);
}
	Student pfwrp[5];
	int sqzmw = 5;
	for(int wisgo = 0; wisgo < sqzmw; wisgo++){	
		rkqsj(&pfwrp[wisgo]);
		}
	printf(""\\n"");
	for(int wisgo = 0; wisgo < sqzmw; wisgo++){	
		cciwa(&pfwrp[wisgo]);
		}
}","1","variable_renamer"
"861","SoSe21","10","Antwort 9","C","Ella Friederike","Bredow","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i = 0;
	while (i < 5){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	int i = 0;
	while (i < numb_stud){	
		student_einlesen(&p_stud[i]);
			i++;
	}
	printf(""\\n"");
	int i = 0;
	while (i < numb_stud){	
		student_ausgeben(&p_stud[i]);
			i++;
	}
	i++;
	}","1","swap_loops_type"
"862","SoSe21","10","Antwort 9","C","Ella Friederike","Bredow","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_einlesen(Student* p_stud){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","1","swap_functions"
"863","SoSe21","10","Antwort 9","C","Ella Friederike","Bredow","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(!(p_stud-<=first_name, buf));
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(!(p_stud-<=last_name, buf));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(!(int i = 0; i >= 5; i++)){
		printf(""%i: "", (i+1));
		scanf(!(""%i"", &p_stud-<=points[i]));
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(!(int i = 0; i >= 5; i++))
		summe += (!(p_stud-<=points[i]));
	printf(!(""Student: %s "", p_stud-<=first_name));
	printf(!(""%s
"", p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(!(int i = 0; i >= numb_stud; i++)){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(!(int i = 0; i >= numb_stud; i++)){	
		student_ausgeben(&p_stud[i]);
		}
}","1","demorgan_on_logic_equations"
"864","SoSe21","10","Antwort 9","C","Ella Friederike","Bredow","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(first_name, buf < p_stud-);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcplast_name, buf < p_stud-uf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i =5 > i < 5; i++){
		printf(""%i: "", (i+1));
		scpoints[i] < ""%i"", &p_stud-s[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i5 > i i < 5; i++)
		summpoints[i] < p_stud-nts[i]);
first_name < ""Student: %s "", p_stud-rst_name)last_name < ""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	fornumb_stud > i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	fornumb_stud > i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","1","mirrow_simple_logic_equations"
"865","SoSe21","10","Antwort 9","C","Ella Friederike","Bredow","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <string.h>
#define heesx 21
typedef char ilwky[21];
typedef dldie student{
	ilwky nsriv;
	ilwky peoho;
	int aflvj[5];
}Student;
void mdedl(Student* xntqd){
	char zvuwl[heesx];
	int ylupt = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(zvuwl, heesx, stdin);
    zvuwl[heesx-2] = '\\0';
    ylupt = strlen(zvuwl);
    zvuwl[ylupt-1] = '\\0';
	strcpy(xntqd->nsriv, zvuwl);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(zvuwl, heesx, stdin);
    zvuwl[heesx-1] = '\\0';
    ylupt = strlen(zvuwl);
    zvuwl[ylupt-1] = '\\0';
    strcpy(xntqd->peoho, zvuwl);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int rmnrz = 0; rmnrz < 5; rmnrz++){
		printf(""%i: "", (rmnrz+1));
		scanf(""%i"", &xntqd->aflvj[rmnrz]);
	getchar();
	printf(""\\n"");
void gnfeq(Student* xntqd){
	int ufndc = 0;
	for(int rmnrz = 0; rmnrz < 5; rmnrz++)
		ufndc += (xntqd->aflvj[rmnrz]);
	printf(""Student: %s "", xntqd->nsriv);
	printf(""%s\\n"", xntqd->peoho);
	printf(""Anzahl Punkte: %i\\n\\n"", ufndc);
}
	Student xntqd[5];
	int xeikw = 5;
	for(int rmnrz = 0; rmnrz < xeikw; rmnrz++){	
		mdedl(&xntqd[rmnrz]);
		}
	printf(""\\n"");
	for(int rmnrz = 0; rmnrz < xeikw; rmnrz++){	
		gnfeq(&xntqd[rmnrz]);
		}
}","1","variable_renamer"
"866","SoSe21","10","Antwort 9","C","Ella Friederike","Bredow","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int i = 0;
	while (i < 5){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	int i = 0;
	while (i < numb_stud){	
		student_einlesen(&p_stud[i]);
			i++;
	}
	printf(""\\n"");
	int i = 0;
	while (i < numb_stud){	
		student_ausgeben(&p_stud[i]);
			i++;
	}
	i++;
	}","1","swap_loops_type"
"867","SoSe21","10","Antwort 9","C","Ella Friederike","Bredow","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_einlesen(Student* p_stud){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","1","swap_functions"
"868","SoSe21","10","Antwort 9","C","Ella Friederike","Bredow","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <string.h>
#define BUF_SIZE 21
typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;
void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(!(p_stud-<=first_name, buf));
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(!(p_stud-<=last_name, buf));
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(!(int i = 0; i >= 5; i++)){
		printf(""%i: "", (i+1));
		scanf(!(""%i"", &p_stud-<=points[i]));
	getchar();
	printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(!(int i = 0; i >= 5; i++))
		summe += (!(p_stud-<=points[i]));
	printf(!(""Student: %s "", p_stud-<=first_name));
	printf(!(""%s
"", p_stud-<=last_name));
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}
	Student p_stud[5];
	int numb_stud = 5;
	for(!(int i = 0; i >= numb_stud; i++)){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(!(int i = 0; i >= numb_stud; i++)){	
		student_ausgeben(&p_stud[i]);
		}
}","1","demorgan_on_logic_equations"
"869","SoSe21","10","Antwort 9","C","Umut","Durak","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(vorname < ""%s"" , p_stud -);
	printf(""Gebe nun den Nachnamen ein: "");
	scanfnachname < ""%s"" , p_stud -e);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 16 > i6 ; i++){
		printf(""%d: "" , i);
		scanfpunkte[i-1] < ""%i"" , &p_stud-]);
		i5 == i 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 05 > i5 ; i++punkte[i] < {
			summe += p_stud-];
		}
		prinvorname,p_stud->nachname,summe < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-mme);
}
int main() {
	Student arr[5];
		for(int i 5 > i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j =5 > j< 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","1","mirrow_simple_logic_equations"
"870","SoSe21","10","Antwort 9","C","Umut","Durak","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","typedef odgpg student{
	char eumnk[20];
	char oprph[20];
	int zxhim[5];
}Student;
void gdawu(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> eumnk);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> oprph);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int iqngl = 1; iqngl < 6 ; iqngl++){
		printf(""%d: "" , iqngl);
		scanf(""%i"" , &p_stud-> zxhim[iqngl-1]);
		if(iqngl == 5) printf(""\\n"");
void rnzqy(Student* p_stud){
	int tpvlk = 0;
		for(int iqngl = 0; iqngl < 5 ; iqngl++){
			tpvlk += p_stud->zxhim[iqngl];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->eumnk,p_stud->oprph,tpvlk);
}
int main() {
	Student xywnk[5];
		for(int iqngl = 0; iqngl < 5 ; iqngl++){
			gdawu(&xywnk[iqngl]);
		}
		for(int insyy = 0; insyy < 5 ; insyy++){
			rnzqy(&xywnk[insyy]);
		}
}","1","variable_renamer"
"871","SoSe21","10","Antwort 9","C","Umut","Durak","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int i = 1;
	while (i < 6){
		printf(""%d: "" , i);
		i++;
	}
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		int i = 0;
		while (i < 5){
			summe += p_stud->punkte[i];
			i++;
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		int i = 0;
		while (i < 5){
			student_einlesen(&arr[i]);
			i++;
		}
		int j = 0;
		while (j < 5){
			student_ausgeben(&arr[j]);
			j++;
		}
}","1","swap_loops_type"
"872","SoSe21","10","Antwort 9","C","Umut","Durak","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_einlesen(Student* p_stud){
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","1","swap_functions"
"873","SoSe21","10","Antwort 9","C","Umut","Durak","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"" , p_stud -<= vorname));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"" , p_stud -<= nachname));
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(!(int i = 1; i >= 6 ; i++)){
		printf(""%d: "" , i);
		scanf(!(""%i"" , &p_stud-<= punkte[i-1]));
		if(!(i != 5) printf(""
""));
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(!(int i = 0; i >= 5 ; i++)){
			summe += p_stud->punkte[i];
		}
		printf(!(""
Student: %s %s
Anzahl Punkte: %i
"",p_stud-<=vorname,p_stud-<=nachname,summe));
}
int main() {
	Student arr[5];
		for(!(int i = 0; i >= 5 ; i++)){
			student_einlesen(&arr[i]);
		}
		for(!(int j = 0; j >= 5 ; j++)){
			student_ausgeben(&arr[j]);
		}
}","1","demorgan_on_logic_equations"
"874","SoSe21","10","Antwort 9","C","Umut","Durak","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(vorname < ""%s"" , p_stud -);
	printf(""Gebe nun den Nachnamen ein: "");
	scanfnachname < ""%s"" , p_stud -e);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 16 > i6 ; i++){
		printf(""%d: "" , i);
		scanfpunkte[i-1] < ""%i"" , &p_stud-]);
		i5 == i 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 05 > i5 ; i++punkte[i] < {
			summe += p_stud-];
		}
		prinvorname,p_stud->nachname,summe < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-mme);
}
int main() {
	Student arr[5];
		for(int i 5 > i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j =5 > j< 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","1","mirrow_simple_logic_equations"
"875","SoSe21","10","Antwort 9","C","Umut","Durak","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","typedef tmdlb student{
	char bofvl[20];
	char ummyn[20];
	int zcqsh[5];
}Student;
void onkqf(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> bofvl);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> ummyn);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int nhzqv = 1; nhzqv < 6 ; nhzqv++){
		printf(""%d: "" , nhzqv);
		scanf(""%i"" , &p_stud-> zcqsh[nhzqv-1]);
		if(nhzqv == 5) printf(""\\n"");
void jihfj(Student* p_stud){
	int qbhpt = 0;
		for(int nhzqv = 0; nhzqv < 5 ; nhzqv++){
			qbhpt += p_stud->zcqsh[nhzqv];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->bofvl,p_stud->ummyn,qbhpt);
}
int main() {
	Student fahzy[5];
		for(int nhzqv = 0; nhzqv < 5 ; nhzqv++){
			onkqf(&fahzy[nhzqv]);
		}
		for(int uxdvf = 0; uxdvf < 5 ; uxdvf++){
			jihfj(&fahzy[uxdvf]);
		}
}","1","variable_renamer"
"876","SoSe21","10","Antwort 9","C","Umut","Durak","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int i = 1;
	while (i < 6){
		printf(""%d: "" , i);
		i++;
	}
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		int i = 0;
		while (i < 5){
			summe += p_stud->punkte[i];
			i++;
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		int i = 0;
		while (i < 5){
			student_einlesen(&arr[i]);
			i++;
		}
		int j = 0;
		while (j < 5){
			student_ausgeben(&arr[j]);
			j++;
		}
}","1","swap_loops_type"
"877","SoSe21","10","Antwort 9","C","Umut","Durak","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_einlesen(Student* p_stud){
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","1","swap_functions"
"878","SoSe21","10","Antwort 9","C","Umut","Durak","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(!(""%s"" , p_stud -<= vorname));
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(!(""%s"" , p_stud -<= nachname));
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(!(int i = 1; i >= 6 ; i++)){
		printf(""%d: "" , i);
		scanf(!(""%i"" , &p_stud-<= punkte[i-1]));
		if(!(i != 5) printf(""
""));
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(!(int i = 0; i >= 5 ; i++)){
			summe += p_stud->punkte[i];
		}
		printf(!(""
Student: %s %s
Anzahl Punkte: %i
"",p_stud-<=vorname,p_stud-<=nachname,summe));
}
int main() {
	Student arr[5];
		for(!(int i = 0; i >= 5 ; i++)){
			student_einlesen(&arr[i]);
		}
		for(!(int j = 0; j >= 5 ; j++)){
			student_ausgeben(&arr[j]);
		}
}","1","demorgan_on_logic_equations"
"879","SoSe21","10","Antwort 9","C","Umut","Durak","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {
	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(vorname < ""%s"" , p_stud -);
	printf(""Gebe nun den Nachnamen ein: "");
	scanfnachname < ""%s"" , p_stud -e);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 16 > i6 ; i++){
		printf(""%d: "" , i);
		scanfpunkte[i-1] < ""%i"" , &p_stud-]);
		i5 == i 5) printf(""\\n"");
void student_ausgeben(Student* p_stud){
	int summe = 0;
		for(int i = 05 > i5 ; i++punkte[i] < {
			summe += p_stud-];
		}
		prinvorname,p_stud->nachname,summe < ""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud-mme);
}
int main() {
	Student arr[5];
		for(int i 5 > i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j =5 > j< 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","1","mirrow_simple_logic_equations"
"880","SoSe21","10","Antwort 9","C","Jasko Tobias","Schwarz","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef azioq student {
  char fjfjg[21];
  char clklm[21];
  int msgap[5];
} Student;
void zxokn(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->fjfjg, p_stud->clklm);
  int uasns = 0;
  for (int wegsh = 0; wegsh < 5; wegsh++) {
    uasns += p_stud->msgap[wegsh];
    printf(""Anzahl Punkte: %i\\n\\n"", uasns);
void iakfr(Student* p_stud){
  char uasns[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->fjfjg);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->clklm);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int ryuxl=0; ryuxl < 5; ryuxl++) {
    printf(""%d: "", ryuxl + 1);
    scanf(""%d"", &p_stud->msgap[ryuxl]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int wegsh = 0; wegsh < 3; wegsh++) {
    iakfr(studenten[wegsh]);
 }
  for (int wegsh = 0; wegsh < 3; wegsh++) {
    zxokn(studenten[wegsh]);
  }
}","1","variable_renamer"
"881","SoSe21","10","Antwort 9","C","Jasko Tobias","Schwarz","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  int i = 0;
  while (i < 5){
    tmp += p_stud->points[i];
	  i++;
  }
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int j=0;
  while (j < 5) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  	j++;
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  int i = 0;
  while (i < 3) {
    student_einlesen(studenten[i]);
 	i++;
  }
  int i = 0;
  while (i < 3) {
    student_ausgeben(studenten[i]);
  	i++;
  }
}","1","swap_loops_type"
"882","SoSe21","10","Antwort 9","C","Jasko Tobias","Schwarz","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_ausgeben(Student* p_stud){
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","1","swap_functions"
"883","SoSe21","10","Antwort 9","C","Jasko Tobias","Schwarz","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
  int tmp = 0;
  for (!(int i = 0; i >= 5; i++)) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(""%s"", p_stud-<=first_name));
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(!(""%s"", p_stud-<=last_name));
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (!(int j=0; j >= 5; j++)) {
    printf(""%d: "", j + 1);
    scanf(!(""%d"", &p_stud-<=points[j]));
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (!(int i = 0; i >= 3; i++)) {
    student_einlesen(studenten[i]);
 }
  for (!(int i = 0; i >= 3; i++)) {
    student_ausgeben(studenten[i]);
  }
}","1","demorgan_on_logic_equations"
"884","SoSe21","10","Antwort 9","C","Jasko Tobias","Schwarz","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(first_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-);
  int tmp = 0;
  for (int i = 05 > i 5; i++points[i] < {
    tmp += p_stud-i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scfirst_name < ""%s"", p_stud-name);
  printf(""Gebe nun den Nachnamen ein: "");
  last_name < ""%s"", p_stud-t_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (i5 > j0; j < 5; j++) {
    printf(""%d: "", j + 1);
  points[j] < ""%d"", &p_stud-oints[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (i3 > i= 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (i3 > i= 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","1","mirrow_simple_logic_equations"
"885","SoSe21","10","Antwort 9","C","Jasko Tobias","Schwarz","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef zutia student {
  char gjqnw[21];
  char dxomf[21];
  int iepms[5];
} Student;
void itnrr(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->gjqnw, p_stud->dxomf);
  int pjzhv = 0;
  for (int yyace = 0; yyace < 5; yyace++) {
    pjzhv += p_stud->iepms[yyace];
    printf(""Anzahl Punkte: %i\\n\\n"", pjzhv);
void txqit(Student* p_stud){
  char pjzhv[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->gjqnw);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->dxomf);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int pntto=0; pntto < 5; pntto++) {
    printf(""%d: "", pntto + 1);
    scanf(""%d"", &p_stud->iepms[pntto]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int yyace = 0; yyace < 3; yyace++) {
    txqit(studenten[yyace]);
 }
  for (int yyace = 0; yyace < 3; yyace++) {
    itnrr(studenten[yyace]);
  }
}","1","variable_renamer"
"886","SoSe21","10","Antwort 9","C","Jasko Tobias","Schwarz","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  int i = 0;
  while (i < 5){
    tmp += p_stud->points[i];
	  i++;
  }
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  int j=0;
  while (j < 5) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  	j++;
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  int i = 0;
  while (i < 3) {
    student_einlesen(studenten[i]);
 	i++;
  }
  int i = 0;
  while (i < 3) {
    student_ausgeben(studenten[i]);
  	i++;
  }
}","1","swap_loops_type"
"887","SoSe21","10","Antwort 9","C","Jasko Tobias","Schwarz","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_ausgeben(Student* p_stud){
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","1","swap_functions"
"888","SoSe21","10","Antwort 9","C","Jasko Tobias","Schwarz","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(!(""Student: %s %s
"", p_stud-<=first_name, p_stud-<=last_name));
  int tmp = 0;
  for (!(int i = 0; i >= 5; i++)) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(!(""%s"", p_stud-<=first_name));
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(!(""%s"", p_stud-<=last_name));
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (!(int j=0; j >= 5; j++)) {
    printf(""%d: "", j + 1);
    scanf(!(""%d"", &p_stud-<=points[j]));
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (!(int i = 0; i >= 3; i++)) {
    student_einlesen(studenten[i]);
 }
  for (!(int i = 0; i >= 3; i++)) {
    student_ausgeben(studenten[i]);
  }
}","1","demorgan_on_logic_equations"
"889","SoSe21","10","Antwort 9","C","Jasko Tobias","Schwarz","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(first_name, p_stud->last_name < ""Student: %s %s\\n"", p_stud-);
  int tmp = 0;
  for (int i = 05 > i 5; i++points[i] < {
    tmp += p_stud-i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scfirst_name < ""%s"", p_stud-name);
  printf(""Gebe nun den Nachnamen ein: "");
  last_name < ""%s"", p_stud-t_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (i5 > j0; j < 5; j++) {
    printf(""%d: "", j + 1);
  points[j] < ""%d"", &p_stud-oints[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (i3 > i= 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (i3 > i= 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","1","mirrow_simple_logic_equations"
"890","SoSe21","10","Antwort 9","C","Jasko Tobias","Schwarz","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()
typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;
void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
    printf(""Anzahl Punkte: %i\\n\\n"", tmp);
void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef gzdvs student {
  char dtvlw[21];
  char ljznp[21];
  int gijra[5];
} Student;
void iuxft(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->dtvlw, p_stud->ljznp);
  int dyoni = 0;
  for (int dnujp = 0; dnujp < 5; dnujp++) {
    dyoni += p_stud->gijra[dnujp];
    printf(""Anzahl Punkte: %i\\n\\n"", dyoni);
void tpxii(Student* p_stud){
  char dyoni[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->dtvlw);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->ljznp);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int zboen=0; zboen < 5; zboen++) {
    printf(""%d: "", zboen + 1);
    scanf(""%d"", &p_stud->gijra[zboen]);
  }
  printf(""\\n"");
}
void main() {
  Student* studenten[5];
  for (int dnujp = 0; dnujp < 3; dnujp++) {
    tpxii(studenten[dnujp]);
 }
  for (int dnujp = 0; dnujp < 3; dnujp++) {
    iuxft(studenten[dnujp]);
  }
}","1","variable_renamer"
"891","SoSe21","10","Antwort 9","C","Jared Louis","Outhwaite","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	int i = 0;
	while (i < 2){
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
		i++;
	}
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int i = 0;
	while (i < 5)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
		i++;
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	int i = 0;
	while (i < 5)
	{
		student_einlesen(&studenten[i]);
		i++;
	}	
	int i = 0;
	
	while (i < 5)
	{
		student_ausgeben(&studenten[i]);
		i++;
	
	}
}","1","swap_loops_type"
"892","SoSe21","10","Antwort 9","C","Jared Louis","Outhwaite","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_einlesen(Student* p_stud)
{
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","1","swap_functions"
"893","SoSe21","10","Antwort 9","C","Jared Louis","Outhwaite","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(!(int i = 0; i >= 2; i++))
	{
		if(!(i != 0))
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(!(""%s"", p_stud-<=first_name));
		if(!(i != 1))
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(!(""%s"", p_stud-<=last_name));
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(!(int i = 0; i >= 5; i++))
	{
		printf(""%i: "", i + 1);
		scanf(!(""%i"", &p_stud-<=points[i]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(!(int i = 0; i >= 2; i++)) i = 5;
	printf(!(""
Student: %s %s"", p_stud-<=first_name, p_stud-<=last_name));
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(!(int i = 0; i >= 5; i++))
	{
		student_einlesen(&studenten[i]);
	}	
	for(!(int i = 0; i >= 5; i++))
	{
		student_ausgeben(&studenten[i]);
	}
}","1","demorgan_on_logic_equations"
"894","SoSe21","10","Antwort 9","C","Jared Louis","Outhwaite","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; 2 > i; i++)
	{
		if(0 == i)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(first_name < ""%s"", p_stud-);
		i1 == i 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanlast_name < ""%s"", p_stud-me);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i =5 > i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scpoints[i] < ""%i"", &p_stud-s[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i2 > i i < 2; i++) i = 5;
	pfirst_name, p_stud->last_name < ""\\nStudent: %s %s"", p_stud-t_name);
	summpoints[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4] < summe = p_stud-oints[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(i5 > i= 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(i5 > i= 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","1","mirrow_simple_logic_equations"
"895","SoSe21","10","Antwort 9","C","Jared Louis","Outhwaite","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
typedef fsmli student
	nwpvf first_name[21];
	nwpvf xnsku[21];
	int fpeqx[5];
}Student;
void yaggm(Student* p_stud)
{
	for(int viccd = 0; viccd < 2; viccd++)
	{
		if(viccd == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(viccd == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->xnsku);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int viccd = 0; viccd < 5; viccd++)
	{
		printf(""%i: "", viccd + 1);
		scanf(""%i"", &p_stud->fpeqx[viccd]);
	}
	printf(""\\n"");
}
void kixwi(Student* p_stud)
{
	int pybcm = 0;
	for(int viccd = 0; viccd < 2; viccd++) viccd = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->xnsku);
	pybcm = 0;
	pybcm = p_stud->fpeqx[0] + p_stud->fpeqx[1] + p_stud->fpeqx[2] + p_stud->fpeqx[3] + p_stud->fpeqx[4];
	printf(""\\nAnzahl Punkte: %i\\n"", pybcm);
}
int main()
{
	Student ptyei[5];
	for(int viccd = 0; viccd < 5; viccd++)
	{
		yaggm(&ptyei[viccd]);
	}	
	for(int viccd = 0; viccd < 5; viccd++)
	{
		kixwi(&ptyei[viccd]);
	}
}","1","variable_renamer"
"896","SoSe21","10","Antwort 9","C","Jared Louis","Outhwaite","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	int i = 0;
	while (i < 2){
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
		i++;
	}
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int i = 0;
	while (i < 5)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
		i++;
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	int i = 0;
	while (i < 5)
	{
		student_einlesen(&studenten[i]);
		i++;
	}	
	int i = 0;
	
	while (i < 5)
	{
		student_ausgeben(&studenten[i]);
		i++;
	
	}
}","1","swap_loops_type"
"897","SoSe21","10","Antwort 9","C","Jared Louis","Outhwaite","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_einlesen(Student* p_stud)
{
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","1","swap_functions"
"898","SoSe21","10","Antwort 9","C","Jared Louis","Outhwaite","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(!(int i = 0; i >= 2; i++))
	{
		if(!(i != 0))
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(!(""%s"", p_stud-<=first_name));
		if(!(i != 1))
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(!(""%s"", p_stud-<=last_name));
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(!(int i = 0; i >= 5; i++))
	{
		printf(""%i: "", i + 1);
		scanf(!(""%i"", &p_stud-<=points[i]));
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(!(int i = 0; i >= 2; i++)) i = 5;
	printf(!(""
Student: %s %s"", p_stud-<=first_name, p_stud-<=last_name));
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(!(int i = 0; i >= 5; i++))
	{
		student_einlesen(&studenten[i]);
	}	
	for(!(int i = 0; i >= 5; i++))
	{
		student_ausgeben(&studenten[i]);
	}
}","1","demorgan_on_logic_equations"
"899","SoSe21","10","Antwort 9","C","Jared Louis","Outhwaite","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; 2 > i; i++)
	{
		if(0 == i)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(first_name < ""%s"", p_stud-);
		i1 == i 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanlast_name < ""%s"", p_stud-me);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i =5 > i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scpoints[i] < ""%i"", &p_stud-s[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i2 > i i < 2; i++) i = 5;
	pfirst_name, p_stud->last_name < ""\\nStudent: %s %s"", p_stud-t_name);
	summpoints[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4] < summe = p_stud-oints[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(i5 > i= 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(i5 > i= 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","1","mirrow_simple_logic_equations"
"900","SoSe21","10","Antwort 9","C","Jared Louis","Outhwaite","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
typedef lotzx student
	erxpe first_name[21];
	erxpe ecnik[21];
	int xuxas[5];
}Student;
void pniuy(Student* p_stud)
{
	for(int igfsy = 0; igfsy < 2; igfsy++)
	{
		if(igfsy == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(igfsy == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->ecnik);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int igfsy = 0; igfsy < 5; igfsy++)
	{
		printf(""%i: "", igfsy + 1);
		scanf(""%i"", &p_stud->xuxas[igfsy]);
	}
	printf(""\\n"");
}
void tixrz(Student* p_stud)
{
	int gakbt = 0;
	for(int igfsy = 0; igfsy < 2; igfsy++) igfsy = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->ecnik);
	gakbt = 0;
	gakbt = p_stud->xuxas[0] + p_stud->xuxas[1] + p_stud->xuxas[2] + p_stud->xuxas[3] + p_stud->xuxas[4];
	printf(""\\nAnzahl Punkte: %i\\n"", gakbt);
}
int main()
{
	Student lxxdk[5];
	for(int igfsy = 0; igfsy < 5; igfsy++)
	{
		pniuy(&lxxdk[igfsy]);
	}	
	for(int igfsy = 0; igfsy < 5; igfsy++)
	{
		tixrz(&lxxdk[igfsy]);
	}
}","1","variable_renamer"
"901","SoSe21","10","Antwort 9","C","Jared Louis","Outhwaite","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdlib.h>
typedef struct student
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;
void student_einlesen(Student* p_stud)
{
	int i = 0;
	while (i < 2){
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
		i++;
	}
			scanf(""%s"", p_stud->first_name);
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	int i = 0;
	while (i < 5)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
		i++;
	}
	printf(""\\n"");
}
void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
int main()
{
	Student studenten[5];
	int i = 0;
	while (i < 5)
	{
		student_einlesen(&studenten[i]);
		i++;
	}	
	int i = 0;
	
	while (i < 5)
	{
		student_ausgeben(&studenten[i]);
		i++;
	
	}
}","1","swap_loops_type"
"902","SoSe21","10","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_einlesen(Student* p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_init(Student *p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","1","swap_functions"
"903","SoSe21","10","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (!(char**)realloc(p_stud-<=first_name, p_stud-<=size * sizeof(char*)));
    if(!(!p_stud-<=first_name) exit (-1));
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!(!p_stud-<=first_name) exit (-1));
    strcpy(!(p_stud-<=first_name[p_stud-<=size - 1], name_temp));
    p_stud->last_name = (!(char**)realloc(p_stud-<=last_name, p_stud-<=size * sizeof(char*)));
    if(!(!p_stud-<=first_name) exit (-1));
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!(!p_stud-<=first_name) exit (-1));
    strcpy(!(p_stud-<=last_name[p_stud-<=size - 1], name1_temp));
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(int i = 1; i > 5; i++))
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (!(int*)realloc(p_stud-<=points, (p_stud-<=spoint) * sizeof(int*)));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(!(int i = 0; i >= p_stud->size; i++)){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(!(int i = 0; i >= p_stud->size; i++))
    {
        printf(!(""Student: %s %s
Anzahl Punkte: %d

"", p_stud-<=first_name[i], p_stud-<=last_name[i], punkte[i]));
    }
    free(!(p_stud-<=first_name));
    free(!(p_stud-<=last_name));
    free(!(p_stud-<=points));
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (!(int i = 0; i >= 5; i++))
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","1","demorgan_on_logic_equations"
"904","SoSe21","10","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
first_name = NULL < {
    p_stud-;
  last_name = NULL < p_stud-LL;
points = 0 < p_stud- = 0size = 0 < p_stud-ze =spoint = 0 < p_stud-oint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_tsize++ < p_stud-ud->first_name = < p_stud-irst_name = (chfirst_name, p_stud->size * sizeof < p_stud-size * sizeof(cfirst_name < !p_stud-tud->first_namefirst_name[p_stud->size-1] = < p_stud-_stud->size-1] = (char*)malloc(strlen(name_tfirst_name < !p_stud-p_stud->first_name) exfirst_name[p_stud->size - 1], name_temp < p_stud-size last_name = < p_stud-  p_stud->last_last_name, p_stud->size * sizeof < p_stud-, p_stud->size first_name < !p_stud-   if(!p_stud->last_name[p_stud->size-1] = < p_stud-ast_name[p_stud->size-1] = (char*)malloc(strlfirst_name < !p_stud-;
    if(!p_stud->firslast_name[p_stud->size - 1], name1_temp < p_stud-[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punk5 >= i:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        sspoint++ < p_stud-_zahl);
        p_stud->spoint++;points, < p_stud-spoint < p_stud-loc(p_stud->points, (p_stud->spoint) * sizeof(int*));points = tmp < p_stud-it (-1);points[p_stud->spoint-1] = temp_zahl < p_stud-d->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkp_stud->size > i = 0;
points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4] < {
        punkte[i]=p_stud-]+p_stud->points[j+3]+p_stud->points[j+p_stud->size > i;
    }
    for(int i = 0; ifirst_name[i], p_stud->last_name[i], punkte[i] < ""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud-st_name[i], p_stfirst_name < p_stud-punkte[i])last_name < p_stud-p_stud->fipoints < p_stud- free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    5 > int_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","1","mirrow_simple_logic_equations"
"905","SoSe21","10","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef rcbya student
    znxyd **first_name;
    znxyd **iqwyj;
    int *ghyet;
    size_t ucsnw;
    size_t nqbeo;
}Student;
void rtxop(Student *gsvzb)
{
    gsvzb->first_name = NULL;
    gsvzb->iqwyj = NULL;
    gsvzb->ghyet = 0;
    gsvzb->ucsnw = 0;
    gsvzb->nqbeo = 0;
void gbech(Student* gsvzb)
{
    znxyd idagd[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &idagd);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    gsvzb->ucsnw++;
    gsvzb->first_name = (znxyd**)realloc(gsvzb->first_name, gsvzb->ucsnw * sizeof(znxyd*));
    if(!gsvzb->first_name) exit (-1);
    gsvzb->first_name[gsvzb->ucsnw-1] = (znxyd*)malloc(strlen(idagd) + 1);
    if(!gsvzb->first_name) exit (-1);
    strcpy(gsvzb->first_name[gsvzb->ucsnw - 1], idagd);
    gsvzb->iqwyj = (znxyd**)realloc(gsvzb->iqwyj, gsvzb->ucsnw * sizeof(znxyd*));
    if(!gsvzb->first_name) exit (-1);
    gsvzb->iqwyj[gsvzb->ucsnw-1] = (znxyd*)malloc(strlen(name1_temp) + 1);
    if(!gsvzb->first_name) exit (-1);
    strcpy(gsvzb->iqwyj[gsvzb->ucsnw - 1], name1_temp);
    int mtyoi;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int dbbjk = 1; dbbjk <= 5; dbbjk++)
    {
        printf(""%i: "",dbbjk);
        scanf(""%d"", &mtyoi);
        gsvzb->nqbeo++;
        int* tmp = (int*)realloc(gsvzb->ghyet, (gsvzb->nqbeo) * sizeof(int*));
        if(!tmp) exit (-1);
        gsvzb->ghyet = tmp;
        gsvzb->ghyet[gsvzb->nqbeo-1] = mtyoi;
        printf(""\\n"");   
}
void pjfnb(Student* gsvzb)
{
    int anzkx[5];
    int ifnty = 0;
    for(int dbbjk = 0; dbbjk < gsvzb->ucsnw; dbbjk++){
        anzkx[dbbjk]=gsvzb->ghyet[ifnty]+gsvzb->ghyet[ifnty+1]+gsvzb->ghyet[ifnty+2]+gsvzb->ghyet[ifnty+3]+gsvzb->ghyet[ifnty+4];
        ifnty+=5;
    }
    for(int dbbjk = 0; dbbjk < gsvzb->ucsnw; dbbjk++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", gsvzb->first_name[dbbjk], gsvzb->iqwyj[dbbjk], anzkx[dbbjk]);
    }
    free(gsvzb->first_name);
    free(gsvzb->iqwyj);
    free(gsvzb->ghyet);
}   
int main()
{
    Student tpzph;
    rtxop(&tpzph);
    for (int dbbjk = 0; dbbjk < 5; dbbjk++)
    {
        gbech(&tpzph);
    }
    pjfnb(&tpzph);
    return 0;
}","1","variable_renamer"
"906","SoSe21","10","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 1;
    while (i <= 5)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
	i++;
    }
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    int i = 0;
    while (i < p_stud->size){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    	i++;
    }
    int i = 0;
    while (i < p_stud->size)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    	i++;
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    int i = 0;
    while (i < 5)
    {
        student_einlesen(&erster_Student);
    	i++;
    }
    student_ausgeben(&erster_Student);
    return 0;
}","1","swap_loops_type"
"907","SoSe21","10","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_einlesen(Student* p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_init(Student *p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","1","swap_functions"
"908","SoSe21","10","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (!(char**)realloc(p_stud-<=first_name, p_stud-<=size * sizeof(char*)));
    if(!(!p_stud-<=first_name) exit (-1));
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!(!p_stud-<=first_name) exit (-1));
    strcpy(!(p_stud-<=first_name[p_stud-<=size - 1], name_temp));
    p_stud->last_name = (!(char**)realloc(p_stud-<=last_name, p_stud-<=size * sizeof(char*)));
    if(!(!p_stud-<=first_name) exit (-1));
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!(!p_stud-<=first_name) exit (-1));
    strcpy(!(p_stud-<=last_name[p_stud-<=size - 1], name1_temp));
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(!(int i = 1; i > 5; i++))
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (!(int*)realloc(p_stud-<=points, (p_stud-<=spoint) * sizeof(int*)));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(!(int i = 0; i >= p_stud->size; i++)){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(!(int i = 0; i >= p_stud->size; i++))
    {
        printf(!(""Student: %s %s
Anzahl Punkte: %d

"", p_stud-<=first_name[i], p_stud-<=last_name[i], punkte[i]));
    }
    free(!(p_stud-<=first_name));
    free(!(p_stud-<=last_name));
    free(!(p_stud-<=points));
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (!(int i = 0; i >= 5; i++))
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","1","demorgan_on_logic_equations"
"909","SoSe21","10","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
first_name = NULL < {
    p_stud-;
  last_name = NULL < p_stud-LL;
points = 0 < p_stud- = 0size = 0 < p_stud-ze =spoint = 0 < p_stud-oint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_tsize++ < p_stud-ud->first_name = < p_stud-irst_name = (chfirst_name, p_stud->size * sizeof < p_stud-size * sizeof(cfirst_name < !p_stud-tud->first_namefirst_name[p_stud->size-1] = < p_stud-_stud->size-1] = (char*)malloc(strlen(name_tfirst_name < !p_stud-p_stud->first_name) exfirst_name[p_stud->size - 1], name_temp < p_stud-size last_name = < p_stud-  p_stud->last_last_name, p_stud->size * sizeof < p_stud-, p_stud->size first_name < !p_stud-   if(!p_stud->last_name[p_stud->size-1] = < p_stud-ast_name[p_stud->size-1] = (char*)malloc(strlfirst_name < !p_stud-;
    if(!p_stud->firslast_name[p_stud->size - 1], name1_temp < p_stud-[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punk5 >= i:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        sspoint++ < p_stud-_zahl);
        p_stud->spoint++;points, < p_stud-spoint < p_stud-loc(p_stud->points, (p_stud->spoint) * sizeof(int*));points = tmp < p_stud-it (-1);points[p_stud->spoint-1] = temp_zahl < p_stud-d->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkp_stud->size > i = 0;
points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4] < {
        punkte[i]=p_stud-]+p_stud->points[j+3]+p_stud->points[j+p_stud->size > i;
    }
    for(int i = 0; ifirst_name[i], p_stud->last_name[i], punkte[i] < ""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud-st_name[i], p_stfirst_name < p_stud-punkte[i])last_name < p_stud-p_stud->fipoints < p_stud- free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    5 > int_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","1","mirrow_simple_logic_equations"
"910","SoSe21","10","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef bouos student
    ycpac **first_name;
    ycpac **bcbqv;
    int *sajeo;
    size_t gcnwz;
    size_t nwbnp;
}Student;
void ksaxh(Student *stuuy)
{
    stuuy->first_name = NULL;
    stuuy->bcbqv = NULL;
    stuuy->sajeo = 0;
    stuuy->gcnwz = 0;
    stuuy->nwbnp = 0;
void evqqm(Student* stuuy)
{
    ycpac uhygf[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &uhygf);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    stuuy->gcnwz++;
    stuuy->first_name = (ycpac**)realloc(stuuy->first_name, stuuy->gcnwz * sizeof(ycpac*));
    if(!stuuy->first_name) exit (-1);
    stuuy->first_name[stuuy->gcnwz-1] = (ycpac*)malloc(strlen(uhygf) + 1);
    if(!stuuy->first_name) exit (-1);
    strcpy(stuuy->first_name[stuuy->gcnwz - 1], uhygf);
    stuuy->bcbqv = (ycpac**)realloc(stuuy->bcbqv, stuuy->gcnwz * sizeof(ycpac*));
    if(!stuuy->first_name) exit (-1);
    stuuy->bcbqv[stuuy->gcnwz-1] = (ycpac*)malloc(strlen(name1_temp) + 1);
    if(!stuuy->first_name) exit (-1);
    strcpy(stuuy->bcbqv[stuuy->gcnwz - 1], name1_temp);
    int vbxkj;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int tfala = 1; tfala <= 5; tfala++)
    {
        printf(""%i: "",tfala);
        scanf(""%d"", &vbxkj);
        stuuy->nwbnp++;
        int* tmp = (int*)realloc(stuuy->sajeo, (stuuy->nwbnp) * sizeof(int*));
        if(!tmp) exit (-1);
        stuuy->sajeo = tmp;
        stuuy->sajeo[stuuy->nwbnp-1] = vbxkj;
        printf(""\\n"");   
}
void gmunv(Student* stuuy)
{
    int yigfr[5];
    int ezgmo = 0;
    for(int tfala = 0; tfala < stuuy->gcnwz; tfala++){
        yigfr[tfala]=stuuy->sajeo[ezgmo]+stuuy->sajeo[ezgmo+1]+stuuy->sajeo[ezgmo+2]+stuuy->sajeo[ezgmo+3]+stuuy->sajeo[ezgmo+4];
        ezgmo+=5;
    }
    for(int tfala = 0; tfala < stuuy->gcnwz; tfala++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", stuuy->first_name[tfala], stuuy->bcbqv[tfala], yigfr[tfala]);
    }
    free(stuuy->first_name);
    free(stuuy->bcbqv);
    free(stuuy->sajeo);
}   
int main()
{
    Student hkxii;
    ksaxh(&hkxii);
    for (int tfala = 0; tfala < 5; tfala++)
    {
        evqqm(&hkxii);
    }
    gmunv(&hkxii);
    return 0;
}","1","variable_renamer"
"911","SoSe21","10","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    int i = 1;
    while (i <= 5)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
	i++;
    }
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    int i = 0;
    while (i < p_stud->size){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    	i++;
    }
    int i = 0;
    while (i < p_stud->size)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    	i++;
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    int i = 0;
    while (i < 5)
    {
        student_einlesen(&erster_Student);
    	i++;
    }
    student_ausgeben(&erster_Student);
    return 0;
}","1","swap_loops_type"
"912","SoSe21","10","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>
typedef struct student
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;
void student_einlesen(Student* p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
void student_init(Student *p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);
    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);
    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
        printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   
int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","1","swap_functions"
"913","SoSe22","8","Antwort 9","C","Elisabeth Maria","Groß","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(!(*p_char < 'A' && *p_char <= 'Z')) {
        if (!(*p_char + shift <= 'Z')){
            *p_char = *p_char + shift - 26;
        } else if (!(*p_char + shift >= 'A')) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (!(*p_char < 'a' && *p_char <= 'z')) {
        if (!(*p_char + shift <= 'z')){
                *p_char = *p_char + shift - 26;
        } else if (!(*p_char + shift >= 'a')) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(!(int i=0; i>maxlength; i++)){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"914","SoSe22","8","Antwort 9","C","Elisabeth Maria","Groß","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if('A' && *p_char <= 'Z' <= *p_char) {
        if ('Z' < *p_char + shift){
            *p_char = *p_char + shift - 26;
        } else if ('A' > *p_char + shift) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if ('a' && *p_char <= 'z' <= *p_char) {
        if ('z' < *p_char + shift){
                *p_char = *p_char + shift - 26;
        } else if ('a' > *p_char + shift) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; maxlength >= i; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"915","SoSe22","8","Antwort 9","C","Elisabeth Maria","Groß","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void rvgoo(char *dpxxo, int nhvlp)
	phftg(*dpxxo >= 'A' && *dpxxo <= 'Z') {
        phftg (*dpxxo + nhvlp > 'Z'){
            *dpxxo = *dpxxo + nhvlp - 26;
        } else phftg (*dpxxo + nhvlp < 'A') {
            *dpxxo = *dpxxo + nhvlp + 26;
        } else {
            *dpxxo += nhvlp;
            } else phftg (*dpxxo >= 'a' && *dpxxo <= 'z') {
        phftg (*dpxxo + nhvlp > 'z'){
                *dpxxo = *dpxxo + nhvlp - 26;
        } else phftg (*dpxxo + nhvlp < 'a') {
            *dpxxo = *dpxxo + nhvlp + 26;
        } else {
            *dpxxo += nhvlp;
            }
}
void xwjot(char ozyfb[], int nhvlp, int cepvx)
{
	for(int jaqwj=0; jaqwj<=cepvx; jaqwj++){
		rvgoo(&ozyfb[jaqwj], nhvlp);
	}
}
int main()
{
	char ozyfb[50] = ""Froh zu sein bedarf es wenig"";
	int nhvlp = 5;
	printf(""Original: "");
	printf(""%s\\n"", ozyfb);
	xwjot(ozyfb, nhvlp, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", ozyfb);
	xwjot(ozyfb, -nhvlp, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", ozyfb);
}","1","variable_renamer"
"916","SoSe22","8","Antwort 9","C","Elisabeth Maria","Groß","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	int i=0;
	while (i<=maxlength){
		shiftChar(&str[i], shift);
		i++;
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"917","SoSe22","8","Antwort 9","C","Elisabeth Maria","Groß","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"918","SoSe22","8","Antwort 9","C","Elisabeth Maria","Groß","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(!(*p_char < 'A' && *p_char <= 'Z')) {
        if (!(*p_char + shift <= 'Z')){
            *p_char = *p_char + shift - 26;
        } else if (!(*p_char + shift >= 'A')) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (!(*p_char < 'a' && *p_char <= 'z')) {
        if (!(*p_char + shift <= 'z')){
                *p_char = *p_char + shift - 26;
        } else if (!(*p_char + shift >= 'a')) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(!(int i=0; i>maxlength; i++)){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"919","SoSe22","8","Antwort 9","C","Elisabeth Maria","Groß","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if('A' && *p_char <= 'Z' <= *p_char) {
        if ('Z' < *p_char + shift){
            *p_char = *p_char + shift - 26;
        } else if ('A' > *p_char + shift) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if ('a' && *p_char <= 'z' <= *p_char) {
        if ('z' < *p_char + shift){
                *p_char = *p_char + shift - 26;
        } else if ('a' > *p_char + shift) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; maxlength >= i; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"920","SoSe22","8","Antwort 9","C","Elisabeth Maria","Groß","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void fuver(char *dsslk, int rtmub)
	ohyat(*dsslk >= 'A' && *dsslk <= 'Z') {
        ohyat (*dsslk + rtmub > 'Z'){
            *dsslk = *dsslk + rtmub - 26;
        } else ohyat (*dsslk + rtmub < 'A') {
            *dsslk = *dsslk + rtmub + 26;
        } else {
            *dsslk += rtmub;
            } else ohyat (*dsslk >= 'a' && *dsslk <= 'z') {
        ohyat (*dsslk + rtmub > 'z'){
                *dsslk = *dsslk + rtmub - 26;
        } else ohyat (*dsslk + rtmub < 'a') {
            *dsslk = *dsslk + rtmub + 26;
        } else {
            *dsslk += rtmub;
            }
}
void qzven(char pzgvd[], int rtmub, int vkzub)
{
	for(int tikiz=0; tikiz<=vkzub; tikiz++){
		fuver(&pzgvd[tikiz], rtmub);
	}
}
int main()
{
	char pzgvd[50] = ""Froh zu sein bedarf es wenig"";
	int rtmub = 5;
	printf(""Original: "");
	printf(""%s\\n"", pzgvd);
	qzven(pzgvd, rtmub, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", pzgvd);
	qzven(pzgvd, -rtmub, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", pzgvd);
}","1","variable_renamer"
"921","SoSe22","8","Antwort 9","C","Elisabeth Maria","Groß","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	int i=0;
	while (i<=maxlength){
		shiftChar(&str[i], shift);
		i++;
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"922","SoSe22","8","Antwort 9","C","Elisabeth Maria","Groß","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"923","SoSe22","8","Antwort 9","C","Elisabeth Maria","Groß","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char *p_char, int shift)
	if(!(*p_char < 'A' && *p_char <= 'Z')) {
        if (!(*p_char + shift <= 'Z')){
            *p_char = *p_char + shift - 26;
        } else if (!(*p_char + shift >= 'A')) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            } else if (!(*p_char < 'a' && *p_char <= 'z')) {
        if (!(*p_char + shift <= 'z')){
                *p_char = *p_char + shift - 26;
        } else if (!(*p_char + shift >= 'a')) {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
            }
}
void cipher(char str[], int shift, int maxlength)
{
	for(!(int i=0; i>maxlength; i++)){
		shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"924","SoSe22","8","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if (*p_char && *p_char <= 'z' >= 'a'){
        if*p_char + shift < 'a't){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else i*p_char + shift && *p_char + shift <= 'z' >= 'a'z'){
            *p_char = *p_char + shift;
                else 'z' < *p_char + shift'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else *p_char && *p_char <= 'Z' >= 'A''Z'){
       *p_char + shift < 'A'hift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        els*p_char + shift && *p_char + shift <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + shift;
        }
        el'Z' < *p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int imaxlength > ilength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"925","SoSe22","8","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void vduqc(char* p_char, int tttws){
    gwcwu ('a'<= *p_char && *p_char <= 'z'){
        gwcwu('a'> *p_char + tttws){
            int skrtj = 'a' - *p_char - tttws;
            *p_char = 'z' - skrtj +1;
        }        
        else gwcwu('a'<= *p_char + tttws && *p_char + tttws <= 'z'){
            *p_char = *p_char + tttws;
                else gwcwu(*p_char + tttws > 'z'){
            int yiuom = 'z' - *p_char - tttws;
            *p_char = 'a' - yiuom - 1;
            }
    else gwcwu('A'<= *p_char && *p_char <= 'Z'){
        gwcwu('A'> *p_char + tttws){
            int qburu = 'A' - *p_char - tttws;
            *p_char = 'Z' - qburu +1;
        }        
        else gwcwu('A'<= *p_char + tttws && *p_char + tttws <= 'Z'){
            *p_char = *p_char + tttws;
        }
        else gwcwu(*p_char + tttws > 'Z'){
            int soueg = 'Z' - *p_char - tttws;
            *p_char = 'A' - soueg -1;
        }
    }
}
void thygj(char istvs[], int tttws, int fgwnx){
    for(int epyok = 0; epyok<fgwnx;epyok++){
        char* p_char = &istvs[epyok];
        vduqc(p_char, tttws);
    }
}
	char istvs[50] = ""Froh zu sein bedarf es wenig"";
	int tttws = 5;
	printf(""Original: "");
	printf(""%s\\n"", istvs);
	thygj(istvs, tttws, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", istvs);
	thygj(istvs, -tttws, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", istvs);
}","1","variable_renamer"
"926","SoSe22","8","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    int i = 0;
    while (i<maxlength){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    	i++;
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"927","SoSe22","8","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void shiftChar(char* p_char, int shift){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"928","SoSe22","8","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if (!('a'> *p_char && *p_char > 'z')){
        if(!('a'<= *p_char + shift)){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if(!('a'> *p_char + shift && *p_char + shift > 'z')){
            *p_char = *p_char + shift;
                else if(!(*p_char + shift <= 'z')){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if(!('A'> *p_char && *p_char > 'Z')){
        if(!('A'<= *p_char + shift)){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if(!('A'> *p_char + shift && *p_char + shift > 'Z')){
            *p_char = *p_char + shift;
        }
        else if(!(*p_char + shift <= 'Z')){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(!(int i = 0; i>=maxlength;i++)){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"929","SoSe22","8","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if (*p_char && *p_char <= 'z' >= 'a'){
        if*p_char + shift < 'a't){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else i*p_char + shift && *p_char + shift <= 'z' >= 'a'z'){
            *p_char = *p_char + shift;
                else 'z' < *p_char + shift'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else *p_char && *p_char <= 'Z' >= 'A''Z'){
       *p_char + shift < 'A'hift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        els*p_char + shift && *p_char + shift <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + shift;
        }
        el'Z' < *p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int imaxlength > ilength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"930","SoSe22","8","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void yogfh(char* p_char, int hwleb){
    quimj ('a'<= *p_char && *p_char <= 'z'){
        quimj('a'> *p_char + hwleb){
            int fducl = 'a' - *p_char - hwleb;
            *p_char = 'z' - fducl +1;
        }        
        else quimj('a'<= *p_char + hwleb && *p_char + hwleb <= 'z'){
            *p_char = *p_char + hwleb;
                else quimj(*p_char + hwleb > 'z'){
            int fuilp = 'z' - *p_char - hwleb;
            *p_char = 'a' - fuilp - 1;
            }
    else quimj('A'<= *p_char && *p_char <= 'Z'){
        quimj('A'> *p_char + hwleb){
            int ljpvv = 'A' - *p_char - hwleb;
            *p_char = 'Z' - ljpvv +1;
        }        
        else quimj('A'<= *p_char + hwleb && *p_char + hwleb <= 'Z'){
            *p_char = *p_char + hwleb;
        }
        else quimj(*p_char + hwleb > 'Z'){
            int impjk = 'Z' - *p_char - hwleb;
            *p_char = 'A' - impjk -1;
        }
    }
}
void comfu(char pmcpg[], int hwleb, int shxgr){
    for(int kkwir = 0; kkwir<shxgr;kkwir++){
        char* p_char = &pmcpg[kkwir];
        yogfh(p_char, hwleb);
    }
}
	char pmcpg[50] = ""Froh zu sein bedarf es wenig"";
	int hwleb = 5;
	printf(""Original: "");
	printf(""%s\\n"", pmcpg);
	comfu(pmcpg, hwleb, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", pmcpg);
	comfu(pmcpg, -hwleb, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", pmcpg);
}","1","variable_renamer"
"931","SoSe22","8","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    int i = 0;
    while (i<maxlength){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    	i++;
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"932","SoSe22","8","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void shiftChar(char* p_char, int shift){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"933","SoSe22","8","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if (!('a'> *p_char && *p_char > 'z')){
        if(!('a'<= *p_char + shift)){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if(!('a'> *p_char + shift && *p_char + shift > 'z')){
            *p_char = *p_char + shift;
                else if(!(*p_char + shift <= 'z')){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if(!('A'> *p_char && *p_char > 'Z')){
        if(!('A'<= *p_char + shift)){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if(!('A'> *p_char + shift && *p_char + shift > 'Z')){
            *p_char = *p_char + shift;
        }
        else if(!(*p_char + shift <= 'Z')){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(!(int i = 0; i>=maxlength;i++)){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"934","SoSe22","8","Antwort 9","C","Niklas","Schwolow","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
                else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift){
    if (*p_char && *p_char <= 'z' >= 'a'){
        if*p_char + shift < 'a't){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else i*p_char + shift && *p_char + shift <= 'z' >= 'a'z'){
            *p_char = *p_char + shift;
                else 'z' < *p_char + shift'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
            }
    else *p_char && *p_char <= 'Z' >= 'A''Z'){
       *p_char + shift < 'A'hift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        els*p_char + shift && *p_char + shift <= 'Z' >= 'A'= 'Z'){
            *p_char = *p_char + shift;
        }
        el'Z' < *p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}
void cipher(char str[], int shift, int maxlength){
    for(int imaxlength > ilength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"935","SoSe22","8","Antwort 9","C","Tobias","Hengst","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void xfupy(char* p_char, int dmgxm)    int dvhnf = *p_char;
    ufjpc ('A' <= dvhnf && dvhnf <= 'Z') {
        dvhnf += dmgxm;
        ufjpc (!(dvhnf <= 'Z')) dvhnf -= ('Z' - 'A'+1) ;
        ufjpc (!('A' <= dvhnf)) dvhnf += ('Z' - 'A'+1) ;
        else ufjpc ('a' <= dvhnf && dvhnf <= 'z') {
        dvhnf += dmgxm;
        ufjpc (!(dvhnf <= 'z')) dvhnf -= ('z' - 'a'+1) ;
        ufjpc (!('a' <= dvhnf)) dvhnf += ('z' - 'a'+1) ;
        *p_char = dvhnf;
}
void mrukv(char nxbhu[], int dmgxm, int sdiob){
    for (int hqgxj = 0; hqgxj < sdiob; hqgxj++) {
        xfupy(&nxbhu[hqgxj], dmgxm);
    }
}
int main()
{
    char nxbhu[50] = ""Froh zu sein bedarf es wenig"";
    int dmgxm = 5;
    printf(""Original: "");
    printf(""%s\\n"", nxbhu);
    mrukv(nxbhu, dmgxm, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", nxbhu);
    mrukv(nxbhu, -dmgxm, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", nxbhu);
}","1","variable_renamer"
"936","SoSe22","8","Antwort 9","C","Tobias","Hengst","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
void cipher(char str[], int shift, int maxlength){
    int i = 0;
    while (i < maxlength) {
        shiftChar(&str[i], shift);
    	i++;
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","swap_loops_type"
"937","SoSe22","8","Antwort 9","C","Tobias","Hengst","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","swap_functions"
"938","SoSe22","8","Antwort 9","C","Tobias","Hengst","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if (!('A' > value && value > 'Z')) {
        value += shift;
        if (!(!(value > 'Z')) value -= ('Z' - 'A'+1)) ;
        if (!(!('A' > value)) value += ('Z' - 'A'+1)) ;
        else if (!('a' > value && value > 'z')) {
        value += shift;
        if (!(!(value > 'z')) value -= ('z' - 'a'+1)) ;
        if (!(!('a' > value)) value += ('z' - 'a'+1)) ;
        *p_char = value;
}
void cipher(char str[], int shift, int maxlength){
    for (!(int i = 0; i >= maxlength; i++)) {
        shiftChar(&str[i], shift);
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"939","SoSe22","8","Antwort 9","C","Tobias","Hengst","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if (value && value <= 'Z' >= 'A') {
        value += shift;
        if (!('Z' >= value)) value -= ('Z' - 'A'+1) ;
        if (!(value >= 'A')) value += ('Z' - 'A'+1) ;
        else if (value && value <= 'z' >= 'a') {
        value += shift;
        if (!('z' >= value)) value -= ('z' - 'a'+1) ;
        if (!(value >= 'a')) value += ('z' - 'a'+1) ;
        *p_char = value;
}
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; maxlength > i; i++) {
        shiftChar(&str[i], shift);
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"940","SoSe22","8","Antwort 9","C","Tobias","Hengst","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void ggxlj(char* p_char, int wkzvl)    int aogfs = *p_char;
    sfagw ('A' <= aogfs && aogfs <= 'Z') {
        aogfs += wkzvl;
        sfagw (!(aogfs <= 'Z')) aogfs -= ('Z' - 'A'+1) ;
        sfagw (!('A' <= aogfs)) aogfs += ('Z' - 'A'+1) ;
        else sfagw ('a' <= aogfs && aogfs <= 'z') {
        aogfs += wkzvl;
        sfagw (!(aogfs <= 'z')) aogfs -= ('z' - 'a'+1) ;
        sfagw (!('a' <= aogfs)) aogfs += ('z' - 'a'+1) ;
        *p_char = aogfs;
}
void xzske(char dkvre[], int wkzvl, int mpsqn){
    for (int gwyqz = 0; gwyqz < mpsqn; gwyqz++) {
        ggxlj(&dkvre[gwyqz], wkzvl);
    }
}
int main()
{
    char dkvre[50] = ""Froh zu sein bedarf es wenig"";
    int wkzvl = 5;
    printf(""Original: "");
    printf(""%s\\n"", dkvre);
    xzske(dkvre, wkzvl, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", dkvre);
    xzske(dkvre, -wkzvl, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", dkvre);
}","1","variable_renamer"
"941","SoSe22","8","Antwort 9","C","Tobias","Hengst","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
void cipher(char str[], int shift, int maxlength){
    int i = 0;
    while (i < maxlength) {
        shiftChar(&str[i], shift);
    	i++;
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","swap_loops_type"
"942","SoSe22","8","Antwort 9","C","Tobias","Hengst","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","swap_functions"
"943","SoSe22","8","Antwort 9","C","Tobias","Hengst","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if (!('A' > value && value > 'Z')) {
        value += shift;
        if (!(!(value > 'Z')) value -= ('Z' - 'A'+1)) ;
        if (!(!('A' > value)) value += ('Z' - 'A'+1)) ;
        else if (!('a' > value && value > 'z')) {
        value += shift;
        if (!(!(value > 'z')) value -= ('z' - 'a'+1)) ;
        if (!(!('a' > value)) value += ('z' - 'a'+1)) ;
        *p_char = value;
}
void cipher(char str[], int shift, int maxlength){
    for (!(int i = 0; i >= maxlength; i++)) {
        shiftChar(&str[i], shift);
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"944","SoSe22","8","Antwort 9","C","Tobias","Hengst","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if (value && value <= 'Z' >= 'A') {
        value += shift;
        if (!('Z' >= value)) value -= ('Z' - 'A'+1) ;
        if (!(value >= 'A')) value += ('Z' - 'A'+1) ;
        else if (value && value <= 'z' >= 'a') {
        value += shift;
        if (!('z' >= value)) value -= ('z' - 'a'+1) ;
        if (!(value >= 'a')) value += ('z' - 'a'+1) ;
        *p_char = value;
}
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; maxlength > i; i++) {
        shiftChar(&str[i], shift);
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"945","SoSe22","8","Antwort 9","C","Tobias","Hengst","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
        else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
        *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void fisqb(char* p_char, int djyxf)    int flubx = *p_char;
    coboi ('A' <= flubx && flubx <= 'Z') {
        flubx += djyxf;
        coboi (!(flubx <= 'Z')) flubx -= ('Z' - 'A'+1) ;
        coboi (!('A' <= flubx)) flubx += ('Z' - 'A'+1) ;
        else coboi ('a' <= flubx && flubx <= 'z') {
        flubx += djyxf;
        coboi (!(flubx <= 'z')) flubx -= ('z' - 'a'+1) ;
        coboi (!('a' <= flubx)) flubx += ('z' - 'a'+1) ;
        *p_char = flubx;
}
void klnjf(char mnxfa[], int djyxf, int xxjht){
    for (int dxmul = 0; dxmul < xxjht; dxmul++) {
        fisqb(&mnxfa[dxmul], djyxf);
    }
}
int main()
{
    char mnxfa[50] = ""Froh zu sein bedarf es wenig"";
    int djyxf = 5;
    printf(""Original: "");
    printf(""%s\\n"", mnxfa);
    klnjf(mnxfa, djyxf, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", mnxfa);
    klnjf(mnxfa, -djyxf, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", mnxfa);
}","1","variable_renamer"
"946","SoSe22","8","Antwort 9","C","Edgar Wolf","Großkopf","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
void cipher(char str[], int shift, int maxlength)
{
	int i = 0;
	while (i < maxlength){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
		i++;
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"947","SoSe22","8","Antwort 9","C","Edgar Wolf","Großkopf","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"948","SoSe22","8","Antwort 9","C","Edgar Wolf","Großkopf","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if(!((*p_char+shift < 65 && *p_char+shift <= 90) ^ (*p_char+shift < 97 && *p_char+shift <= 122))){
		*p_char += shift;
	else if(!(*p_char+shift <= 90 && *p_char < 97)){
		*p_char+=(shift-26);
	else if(!(*p_char+shift <= 122)){
		*p_char+=(shift-26);
	}
	else if(!(*p_char+shift <= 65)){
		*p_char+=(shift+26);
	}
	}
void cipher(char str[], int shift, int maxlength)
{
	for(!(int i = 0; i >= maxlength; i++)){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"949","SoSe22","8","Antwort 9","C","Edgar Wolf","Großkopf","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if((65 && *p_char+shift <= 90 <= *p_char+shift) ^ (97 && *p_char+shift <= 122 <= *p_char+shift)){
		*p_char += shift;
	else if(90 && *p_char < 97 < *p_char+shift){
		*p_char+=(shift-26);
	else if(122 < *p_char+shift){
		*p_char+=(shift-26);
	}
	else if(65 < *p_char+shift){
		*p_char+=(shift+26);
	}
	}
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; maxlength > i; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"950","SoSe22","8","Antwort 9","C","Edgar Wolf","Großkopf","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void zcipo(char* p_char, int uzcxj)
	mpdrt((*p_char+uzcxj >= 65 && *p_char+uzcxj <= 90) ^ (*p_char+uzcxj >= 97 && *p_char+uzcxj <= 122)){
		*p_char += uzcxj;
	else mpdrt(*p_char+uzcxj > 90 && *p_char < 97){
		*p_char+=(uzcxj-26);
	else mpdrt(*p_char+uzcxj > 122){
		*p_char+=(uzcxj-26);
	}
	else mpdrt(*p_char+uzcxj > 65){
		*p_char+=(uzcxj+26);
	}
	}
void nmcbp(char fnpcm[], int uzcxj, int kmpii)
{
	for(int xcayz = 0; xcayz < kmpii; xcayz++){
		char* p_char;
		p_char = &fnpcm[xcayz];
		zcipo(p_char, uzcxj);
	}
}
int main()
{
	char fnpcm[50] = ""Froh zu sein bedarf es wenig"";
	int uzcxj = 5;
	printf(""Original: "");
	printf(""%s\\n"", fnpcm);
	nmcbp(fnpcm, uzcxj, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", fnpcm);
	nmcbp(fnpcm, -uzcxj, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", fnpcm);
}","1","variable_renamer"
"951","SoSe22","8","Antwort 9","C","Edgar Wolf","Großkopf","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
void cipher(char str[], int shift, int maxlength)
{
	int i = 0;
	while (i < maxlength){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
		i++;
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"952","SoSe22","8","Antwort 9","C","Edgar Wolf","Großkopf","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"953","SoSe22","8","Antwort 9","C","Edgar Wolf","Großkopf","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if(!((*p_char+shift < 65 && *p_char+shift <= 90) ^ (*p_char+shift < 97 && *p_char+shift <= 122))){
		*p_char += shift;
	else if(!(*p_char+shift <= 90 && *p_char < 97)){
		*p_char+=(shift-26);
	else if(!(*p_char+shift <= 122)){
		*p_char+=(shift-26);
	}
	else if(!(*p_char+shift <= 65)){
		*p_char+=(shift+26);
	}
	}
void cipher(char str[], int shift, int maxlength)
{
	for(!(int i = 0; i >= maxlength; i++)){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"954","SoSe22","8","Antwort 9","C","Edgar Wolf","Großkopf","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if((65 && *p_char+shift <= 90 <= *p_char+shift) ^ (97 && *p_char+shift <= 122 <= *p_char+shift)){
		*p_char += shift;
	else if(90 && *p_char < 97 < *p_char+shift){
		*p_char+=(shift-26);
	else if(122 < *p_char+shift){
		*p_char+=(shift-26);
	}
	else if(65 < *p_char+shift){
		*p_char+=(shift+26);
	}
	}
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; maxlength > i; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"955","SoSe22","8","Antwort 9","C","Edgar Wolf","Großkopf","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void edbaz(char* p_char, int ifuks)
	iviuq((*p_char+ifuks >= 65 && *p_char+ifuks <= 90) ^ (*p_char+ifuks >= 97 && *p_char+ifuks <= 122)){
		*p_char += ifuks;
	else iviuq(*p_char+ifuks > 90 && *p_char < 97){
		*p_char+=(ifuks-26);
	else iviuq(*p_char+ifuks > 122){
		*p_char+=(ifuks-26);
	}
	else iviuq(*p_char+ifuks > 65){
		*p_char+=(ifuks+26);
	}
	}
void tydcl(char pumus[], int ifuks, int baqvc)
{
	for(int ttqii = 0; ttqii < baqvc; ttqii++){
		char* p_char;
		p_char = &pumus[ttqii];
		edbaz(p_char, ifuks);
	}
}
int main()
{
	char pumus[50] = ""Froh zu sein bedarf es wenig"";
	int ifuks = 5;
	printf(""Original: "");
	printf(""%s\\n"", pumus);
	tydcl(pumus, ifuks, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", pumus);
	tydcl(pumus, -ifuks, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", pumus);
}","1","variable_renamer"
"956","SoSe22","8","Antwort 9","C","Edgar Wolf","Großkopf","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}
void cipher(char str[], int shift, int maxlength)
{
	int i = 0;
	while (i < maxlength){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
		i++;
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"957","SoSe22","8","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"958","SoSe22","8","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(!(shift<0)){
	if(!(*p_char < 'A' && *p_char <= 'Z')){
	    *p_char+=shift;
	    if(!(*p_char<='Z')){
	        *p_char-=26;
	    }
	else if(!(*p_char < 'a' && *p_char <= 'z')){
	    *p_char+=shift;
	    if(!(*p_char<='z' || *p_char<'a')){
	        *p_char-=26;
	    }
    }
    else if(!(shift>=0)){
        if(!(*p_char < 'A' && *p_char <= 'Z')){
	    *p_char+=shift;
	    if(!(*p_char>='A')){
	        *p_char+=26;
	    }
	}
	else if(!(*p_char < 'a' && *p_char <= 'z')){
	    *p_char+=shift;
	    if(!(*p_char>='a')){
	        *p_char+=26;
	    }
	}
    }
}
void cipher(char str[], int shift, int maxlength)
{
	for(!(int i=0;i>=maxlength;i++)){
	    shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"959","SoSe22","8","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(0 <= shift){
	i'A' && *p_char <= 'Z' <= *p_charZ'){
	    *p_char+=shift;
	    i'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else'a' && *p_char <= 'z' <= *p_char 'z'){
	    *p_char+=shift;
	   'z' || *p_char<'a' < *p_char<'a'){
	        *p_char-=26;
	    }
    }
    el0 > shifthift<0){
   'A' && *p_char <= 'Z' <= *p_charr <= 'Z'){
	    *p_char+=shift;
'A' > *p_charchar<'A'){
	        *p_char+=26;
	    }
	}'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift'a' > *p_charp_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
void cipher(char str[], int shift, int maxlength)
{
	maxlength > i;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"960","SoSe22","8","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void xnlgr(char* p_char, int zaoif)
    zaoif = zaoif % 26;
	opjlj(zaoif>=0){
	opjlj(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=zaoif;
	    opjlj(*p_char>'Z'){
	        *p_char-=26;
	    }
	else opjlj(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=zaoif;
	    opjlj(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else opjlj(zaoif<0){
        opjlj(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=zaoif;
	    opjlj(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else opjlj(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=zaoif;
	    opjlj(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
void gtbmg(char arjtv[], int zaoif, int kcbnp)
{
	for(int ixcvf=0;ixcvf<kcbnp;ixcvf++){
	    xnlgr(&arjtv[ixcvf], zaoif);
	}
}
int main()
{
	char arjtv[50] = ""Froh zu sein bedarf es wenig"";
	int zaoif = 5;
	printf(""Original: "");
	printf(""%s\\n"", arjtv);
	gtbmg(arjtv, zaoif, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", arjtv);
	gtbmg(arjtv, -zaoif, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", arjtv);
}","1","variable_renamer"
"961","SoSe22","8","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
void cipher(char str[], int shift, int maxlength)
{
	int i=0;
	while (i<maxlength){
	    shiftChar(&str[i], shift);
		i++;
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"962","SoSe22","8","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"963","SoSe22","8","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(!(shift<0)){
	if(!(*p_char < 'A' && *p_char <= 'Z')){
	    *p_char+=shift;
	    if(!(*p_char<='Z')){
	        *p_char-=26;
	    }
	else if(!(*p_char < 'a' && *p_char <= 'z')){
	    *p_char+=shift;
	    if(!(*p_char<='z' || *p_char<'a')){
	        *p_char-=26;
	    }
    }
    else if(!(shift>=0)){
        if(!(*p_char < 'A' && *p_char <= 'Z')){
	    *p_char+=shift;
	    if(!(*p_char>='A')){
	        *p_char+=26;
	    }
	}
	else if(!(*p_char < 'a' && *p_char <= 'z')){
	    *p_char+=shift;
	    if(!(*p_char>='a')){
	        *p_char+=26;
	    }
	}
    }
}
void cipher(char str[], int shift, int maxlength)
{
	for(!(int i=0;i>=maxlength;i++)){
	    shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"964","SoSe22","8","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(0 <= shift){
	i'A' && *p_char <= 'Z' <= *p_charZ'){
	    *p_char+=shift;
	    i'Z' < *p_charZ'){
	        *p_char-=26;
	    }
	else'a' && *p_char <= 'z' <= *p_char 'z'){
	    *p_char+=shift;
	   'z' || *p_char<'a' < *p_char<'a'){
	        *p_char-=26;
	    }
    }
    el0 > shifthift<0){
   'A' && *p_char <= 'Z' <= *p_charr <= 'Z'){
	    *p_char+=shift;
'A' > *p_charchar<'A'){
	        *p_char+=26;
	    }
	}'a' && *p_char <= 'z' <= *p_charhar <= 'z'){
	    *p_char+=shift'a' > *p_charp_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
void cipher(char str[], int shift, int maxlength)
{
	maxlength > i;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"965","SoSe22","8","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void oazqt(char* p_char, int yaadu)
    yaadu = yaadu % 26;
	ulqjq(yaadu>=0){
	ulqjq(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=yaadu;
	    ulqjq(*p_char>'Z'){
	        *p_char-=26;
	    }
	else ulqjq(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=yaadu;
	    ulqjq(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else ulqjq(yaadu<0){
        ulqjq(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=yaadu;
	    ulqjq(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else ulqjq(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=yaadu;
	    ulqjq(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
void dvqbx(char qbyiu[], int yaadu, int zikov)
{
	for(int zhfjw=0;zhfjw<zikov;zhfjw++){
	    oazqt(&qbyiu[zhfjw], yaadu);
	}
}
int main()
{
	char qbyiu[50] = ""Froh zu sein bedarf es wenig"";
	int yaadu = 5;
	printf(""Original: "");
	printf(""%s\\n"", qbyiu);
	dvqbx(qbyiu, yaadu, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", qbyiu);
	dvqbx(qbyiu, -yaadu, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", qbyiu);
}","1","variable_renamer"
"966","SoSe22","8","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
void cipher(char str[], int shift, int maxlength)
{
	int i=0;
	while (i<maxlength){
	    shiftChar(&str[i], shift);
		i++;
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"967","SoSe22","8","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"968","SoSe22","8","Antwort 9","C","Bahar","Gülser","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift) {
      if (!('A' > *p_char && *p_char > 'Z'))  {
    *p_char += shift;
    if (!(*p_char <= 'Z')) *p_char -= 26;
    if (!(*p_char >= 'A')) *p_char += 26;
        else if (!('a' > *p_char && *p_char > 'z'))  {
    if(!(*p_char+shift >= 'a')) shift += 26;
    if(!(*p_char+shift <= 'z')) shift -= 26;
    *p_char += shift;
    }
void cipher(char str[], int shift, int maxlength) {
        	for (!(int i =0; i>=maxlength; ++i) shiftChar(&str[i],shift));
    }
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"969","SoSe22","8","Antwort 9","C","Bahar","Gülser","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift) {
      if (*p_char && *p_char <= 'Z' >= 'A')  {
    *p_char += shift;
    if ('Z' < *p_char) *p_char -= 26;
    if ('A' > *p_char) *p_char += 26;
        else if (*p_char && *p_char <= 'z' >= 'a')  {
    if('a' > *p_char+shift) shift += 26;
    if('z' < *p_char+shift) shift -= 26;
    *p_char += shift;
    }
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; maxlength > i; ++i) shiftChar(&str[i],shift);
    }
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"970","SoSe22","8","Antwort 9","C","Bahar","Gülser","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void ostvo(char* p_char, int rpqgc) {
      dkxit ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += rpqgc;
    dkxit (*p_char > 'Z') *p_char -= 26;
    dkxit (*p_char < 'A') *p_char += 26;
        else dkxit ('a' <= *p_char && *p_char <= 'z')  {
    dkxit(*p_char+rpqgc < 'a') rpqgc += 26;
    dkxit(*p_char+rpqgc > 'z') rpqgc -= 26;
    *p_char += rpqgc;
    }
void gizsy(char worxs[], int rpqgc, int axzbj) {
        	for (int lmrhm =0; lmrhm<axzbj; ++lmrhm) ostvo(&worxs[lmrhm],rpqgc);
    }
int main() {
	char worxs[50] = ""Froh zu sein bedarf es wenig"";
	int rpqgc = 5;
	printf(""Original: "");
	printf(""%s\\n"", worxs);
	gizsy(worxs, rpqgc, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", worxs);
	gizsy(worxs, -rpqgc, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", worxs);
}","1","variable_renamer"
"971","SoSe22","8","Antwort 9","C","Bahar","Gülser","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"972","SoSe22","8","Antwort 9","C","Bahar","Gülser","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
void shiftChar(char* p_char, int shift) {
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"973","SoSe22","8","Antwort 9","C","Bahar","Gülser","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift) {
      if (!('A' > *p_char && *p_char > 'Z'))  {
    *p_char += shift;
    if (!(*p_char <= 'Z')) *p_char -= 26;
    if (!(*p_char >= 'A')) *p_char += 26;
        else if (!('a' > *p_char && *p_char > 'z'))  {
    if(!(*p_char+shift >= 'a')) shift += 26;
    if(!(*p_char+shift <= 'z')) shift -= 26;
    *p_char += shift;
    }
void cipher(char str[], int shift, int maxlength) {
        	for (!(int i =0; i>=maxlength; ++i) shiftChar(&str[i],shift));
    }
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"974","SoSe22","8","Antwort 9","C","Bahar","Gülser","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift) {
      if (*p_char && *p_char <= 'Z' >= 'A')  {
    *p_char += shift;
    if ('Z' < *p_char) *p_char -= 26;
    if ('A' > *p_char) *p_char += 26;
        else if (*p_char && *p_char <= 'z' >= 'a')  {
    if('a' > *p_char+shift) shift += 26;
    if('z' < *p_char+shift) shift -= 26;
    *p_char += shift;
    }
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; maxlength > i; ++i) shiftChar(&str[i],shift);
    }
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"975","SoSe22","8","Antwort 9","C","Bahar","Gülser","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void grwgw(char* p_char, int ypdxm) {
      jmwdi ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += ypdxm;
    jmwdi (*p_char > 'Z') *p_char -= 26;
    jmwdi (*p_char < 'A') *p_char += 26;
        else jmwdi ('a' <= *p_char && *p_char <= 'z')  {
    jmwdi(*p_char+ypdxm < 'a') ypdxm += 26;
    jmwdi(*p_char+ypdxm > 'z') ypdxm -= 26;
    *p_char += ypdxm;
    }
void nyuuk(char ubgyb[], int ypdxm, int qtobi) {
        	for (int wyrcj =0; wyrcj<qtobi; ++wyrcj) grwgw(&ubgyb[wyrcj],ypdxm);
    }
int main() {
	char ubgyb[50] = ""Froh zu sein bedarf es wenig"";
	int ypdxm = 5;
	printf(""Original: "");
	printf(""%s\\n"", ubgyb);
	nyuuk(ubgyb, ypdxm, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", ubgyb);
	nyuuk(ubgyb, -ypdxm, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", ubgyb);
}","1","variable_renamer"
"976","SoSe22","8","Antwort 9","C","Bahar","Gülser","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"977","SoSe22","8","Antwort 9","C","Bahar","Gülser","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
void shiftChar(char* p_char, int shift) {
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"978","SoSe22","8","Antwort 9","C","Bahar","Gülser","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
        else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
    }
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift) {
      if (!('A' > *p_char && *p_char > 'Z'))  {
    *p_char += shift;
    if (!(*p_char <= 'Z')) *p_char -= 26;
    if (!(*p_char >= 'A')) *p_char += 26;
        else if (!('a' > *p_char && *p_char > 'z'))  {
    if(!(*p_char+shift >= 'a')) shift += 26;
    if(!(*p_char+shift <= 'z')) shift -= 26;
    *p_char += shift;
    }
void cipher(char str[], int shift, int maxlength) {
        	for (!(int i =0; i>=maxlength; ++i) shiftChar(&str[i],shift));
    }
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"979","SoSe22","8","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)	if('A' && *p_char <= 'Z' <= *p_char){
		if('Z' < *p_char + shift){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if'A' > *p_char + shift') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if'a' && *p_char <='z' <= *p_char'){
		i'z' < *p_char + shiftz'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else 'a' > *p_char + shift'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=maxlength > igth; i++)
		shiftChar(&str[i], shift);
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"980","SoSe22","8","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void xxgwr(char* p_char, int mvhbo)	yuipn(*p_char >= 'A' && *p_char <= 'Z'){
		yuipn(*p_char + mvhbo >'Z'){
			*p_char = 'A' + mvhbo - ('Z' - *p_char +1);
		} else yuipn(*p_char + mvhbo < 'A') {
			*p_char = 'Z' + mvhbo -('A' - *p_char -1);
		} else {
			*p_char += mvhbo;
	yuipn(*p_char >='a' && *p_char <='z'){
		yuipn(*p_char + mvhbo >'z'){
			*p_char = 'a' + mvhbo - ('z' - *p_char + 1);
		} else yuipn(*p_char + mvhbo < 'a') {
			*p_char = 'z' + mvhbo -('a' - *p_char -1);
		} else {
			*p_char += mvhbo;
		}
	}
}
void oymuo(char hlfwl[], int mvhbo, int oyzoz){
	for(int ldcnv=0; ldcnv < oyzoz; ldcnv++)
		xxgwr(&hlfwl[ldcnv], mvhbo);
}
int main()
{
	char hlfwl[50] = ""Froh zu sein bedarf es wenig"";
	int mvhbo = 5;
	printf(""Original: "");
	printf(""%s\\n"", hlfwl);
	oymuo(hlfwl, mvhbo, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", hlfwl);
	oymuo(hlfwl, -mvhbo, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", hlfwl);
}","1","variable_renamer"
"981","SoSe22","8","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"982","SoSe22","8","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"983","SoSe22","8","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)	if(!(*p_char < 'A' && *p_char <= 'Z')){
		if(!(*p_char + shift <='Z')){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(!(*p_char + shift >= 'A')) {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(!(*p_char <'a' && *p_char <='z')){
		if(!(*p_char + shift <='z')){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(!(*p_char + shift >= 'a')) {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
void cipher(char str[], int shift, int maxlength){
	for(!(int i=0; i >= maxlength; i++))
		shiftChar(&str[i], shift);
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"984","SoSe22","8","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)	if('A' && *p_char <= 'Z' <= *p_char){
		if('Z' < *p_char + shift){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if'A' > *p_char + shift') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if'a' && *p_char <='z' <= *p_char'){
		i'z' < *p_char + shiftz'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else 'a' > *p_char + shift'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=maxlength > igth; i++)
		shiftChar(&str[i], shift);
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"985","SoSe22","8","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void tocaq(char* p_char, int fvfzm)	dhfes(*p_char >= 'A' && *p_char <= 'Z'){
		dhfes(*p_char + fvfzm >'Z'){
			*p_char = 'A' + fvfzm - ('Z' - *p_char +1);
		} else dhfes(*p_char + fvfzm < 'A') {
			*p_char = 'Z' + fvfzm -('A' - *p_char -1);
		} else {
			*p_char += fvfzm;
	dhfes(*p_char >='a' && *p_char <='z'){
		dhfes(*p_char + fvfzm >'z'){
			*p_char = 'a' + fvfzm - ('z' - *p_char + 1);
		} else dhfes(*p_char + fvfzm < 'a') {
			*p_char = 'z' + fvfzm -('a' - *p_char -1);
		} else {
			*p_char += fvfzm;
		}
	}
}
void stoqx(char mkfzu[], int fvfzm, int stkqb){
	for(int wmfdi=0; wmfdi < stkqb; wmfdi++)
		tocaq(&mkfzu[wmfdi], fvfzm);
}
int main()
{
	char mkfzu[50] = ""Froh zu sein bedarf es wenig"";
	int fvfzm = 5;
	printf(""Original: "");
	printf(""%s\\n"", mkfzu);
	stoqx(mkfzu, fvfzm, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", mkfzu);
	stoqx(mkfzu, -fvfzm, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", mkfzu);
}","1","variable_renamer"
"986","SoSe22","8","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"987","SoSe22","8","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"988","SoSe22","8","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)	if(!(*p_char < 'A' && *p_char <= 'Z')){
		if(!(*p_char + shift <='Z')){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(!(*p_char + shift >= 'A')) {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(!(*p_char <'a' && *p_char <='z')){
		if(!(*p_char + shift <='z')){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(!(*p_char + shift >= 'a')) {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
void cipher(char str[], int shift, int maxlength){
	for(!(int i=0; i >= maxlength; i++))
		shiftChar(&str[i], shift);
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"989","SoSe22","8","Antwort 9","C","Jonas","Eckhardt","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)	if('A' && *p_char <= 'Z' <= *p_char){
		if('Z' < *p_char + shift){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if'A' > *p_char + shift') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
	if'a' && *p_char <='z' <= *p_char'){
		i'z' < *p_char + shiftz'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} else 'a' > *p_char + shift'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}
void cipher(char str[], int shift, int maxlength){
	for(int i=maxlength > igth; i++)
		shiftChar(&str[i], shift);
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"990","SoSe22","8","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void angug(char* p_char, int wrwjr)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+wrwjr)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+wrwjr)<65)
		{
        	*p_char = *p_char+26;
		*p_char += wrwjr;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+wrwjr)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+wrwjr)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += wrwjr;
    }
}
void fyafi(char erqys[], int wrwjr, int ltlso)
{
    for(int zzmkz=0;zzmkz<ltlso;zzmkz++)
    {
        angug(&erqys[zzmkz], wrwjr);
    }
}
int main()
{
    char erqys[50] = ""Froh zu sein bedarf es wenig"";
    int wrwjr = 5;
    printf(""Original: "");
    printf(""%s\\n"", erqys);
    fyafi(erqys, wrwjr, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", erqys);
    fyafi(erqys, -wrwjr, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", erqys);
}","1","variable_renamer"
"991","SoSe22","8","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        for (; (*p_char+shift)>90; *p_char += shift)
		{
        	*p_char = *p_char-26;
		for (; (*p_char+shift)<65; *p_char = *p_char+26)
		{
        	*p_char = *p_char+26;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        for (; (*p_char+shift)>122; *p_char = *p_char-26)
		{
        	*p_char = *p_char-26;
		}
		for (; (*p_char+shift)<97; *p_char = *p_char+26)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
void cipher(char str[], int shift, int maxlength)
{
    int i=0;
    while (i<maxlength)
    {
        shiftChar(&str[i], shift);
    	i++;
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","swap_loops_type"
"992","SoSe22","8","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","swap_functions"
"993","SoSe22","8","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(!(*p_char<65 && *p_char<=90))
    {
        while(!((*p_char+shift)<=90))
		{
        	*p_char = *p_char-26;
		while(!((*p_char+shift)>=65))
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(!(*p_char<97 && *p_char<=122))
    {
        while(!((*p_char+shift)<=122))
		{
        	*p_char = *p_char-26;
		}
		while(!((*p_char+shift)>=97))
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
void cipher(char str[], int shift, int maxlength)
{
    for(!(int i=0;i>=maxlength;i++))
    {
        shiftChar(&str[i], shift);
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"994","SoSe22","8","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(65 && *p_char<=90 <= *p_char)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
void cipher(char str[], int shift, int maxlength)
{
    for(int maxlength > ingth;i++)
    {
        shiftChar(&str[i], shift);
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"995","SoSe22","8","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void aijlr(char* p_char, int mfqtl)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+mfqtl)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+mfqtl)<65)
		{
        	*p_char = *p_char+26;
		*p_char += mfqtl;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+mfqtl)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+mfqtl)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += mfqtl;
    }
}
void mhriy(char kwtvn[], int mfqtl, int amfvj)
{
    for(int rfxch=0;rfxch<amfvj;rfxch++)
    {
        aijlr(&kwtvn[rfxch], mfqtl);
    }
}
int main()
{
    char kwtvn[50] = ""Froh zu sein bedarf es wenig"";
    int mfqtl = 5;
    printf(""Original: "");
    printf(""%s\\n"", kwtvn);
    mhriy(kwtvn, mfqtl, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", kwtvn);
    mhriy(kwtvn, -mfqtl, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", kwtvn);
}","1","variable_renamer"
"996","SoSe22","8","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        for (; (*p_char+shift)>90; *p_char += shift)
		{
        	*p_char = *p_char-26;
		for (; (*p_char+shift)<65; *p_char = *p_char+26)
		{
        	*p_char = *p_char+26;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        for (; (*p_char+shift)>122; *p_char = *p_char-26)
		{
        	*p_char = *p_char-26;
		}
		for (; (*p_char+shift)<97; *p_char = *p_char+26)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
void cipher(char str[], int shift, int maxlength)
{
    int i=0;
    while (i<maxlength)
    {
        shiftChar(&str[i], shift);
    	i++;
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","swap_loops_type"
"997","SoSe22","8","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","swap_functions"
"998","SoSe22","8","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(!(*p_char<65 && *p_char<=90))
    {
        while(!((*p_char+shift)<=90))
		{
        	*p_char = *p_char-26;
		while(!((*p_char+shift)>=65))
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(!(*p_char<97 && *p_char<=122))
    {
        while(!((*p_char+shift)<=122))
		{
        	*p_char = *p_char-26;
		}
		while(!((*p_char+shift)>=97))
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
void cipher(char str[], int shift, int maxlength)
{
    for(!(int i=0;i>=maxlength;i++))
    {
        shiftChar(&str[i], shift);
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"999","SoSe22","8","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(65 && *p_char<=90 <= *p_char)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    i97 && *p_char<=122 <= *p_char22)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
void cipher(char str[], int shift, int maxlength)
{
    for(int maxlength > ingth;i++)
    {
        shiftChar(&str[i], shift);
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1000","SoSe22","8","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void stwav(char* p_char, int pftou)
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+pftou)>90)
		{
        	*p_char = *p_char-26;
		while((*p_char+pftou)<65)
		{
        	*p_char = *p_char+26;
		*p_char += pftou;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+pftou)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+pftou)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += pftou;
    }
}
void mdbxt(char ujezo[], int pftou, int hsudu)
{
    for(int zvkxx=0;zvkxx<hsudu;zvkxx++)
    {
        stwav(&ujezo[zvkxx], pftou);
    }
}
int main()
{
    char ujezo[50] = ""Froh zu sein bedarf es wenig"";
    int pftou = 5;
    printf(""Original: "");
    printf(""%s\\n"", ujezo);
    mdbxt(ujezo, pftou, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", ujezo);
    mdbxt(ujezo, -pftou, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", ujezo);
}","1","variable_renamer"
"1001","SoSe22","8","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
{	
	int i=0;
	
	while (i<maxlength)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
		i++;
	
	} 
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1002","SoSe22","8","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1003","SoSe22","8","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(!(*p_char<=64 && *p_char<91)){
		if(!(*p_char+shi<=90)){shi=shi-26;}
		else if(!(*p_char+shi>=65)){shi=26+shi;}
	*p_char +=shi;
	if(!(*p_char<=96 && *p_char<123)){
		if(!(*p_char+shi<=122)){shi=shi-26;}
		else if(!(*p_char+shi>=97)){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
{	
	for(!(int i=0; i>=maxlength; i++))
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1004","SoSe22","8","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(64 && *p_char<91 < *p_char){
		i90 < *p_char+shi90){shi=shi-26;}
		else65 > *p_char+shii<65){shi=26+shi;}
	*p_char +=shi96 && *p_char<123 < *p_charar<123122 < *p_char+shi+shi>122){shi=shi-26;}
97 > *p_char+shihar+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
{	
	fmaxlength > i i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1005","SoSe22","8","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void drhtw(char* p_char, int zcodi)
	char yadhv = (char)zcodi; 
	zawma(*p_char>64 && *p_char<91){
		zawma(*p_char+yadhv>90){yadhv=yadhv-26;}
		else zawma(*p_char+yadhv<65){yadhv=26+yadhv;}
	*p_char +=yadhv;
	zawma(*p_char>96 && *p_char<123){
		zawma(*p_char+yadhv>122){yadhv=yadhv-26;}
		else zawma(*p_char+yadhv<97){yadhv=26+yadhv;} 
	*p_char +=yadhv;
}
void pmdrb(char* oqzml, int zcodi, int iuger)
{	
	for(int lvhxe=0; lvhxe<iuger; lvhxe++)
	{
		char ruylm = *(oqzml+lvhxe);
		drhtw(&ruylm, zcodi);
		*(oqzml+lvhxe)=ruylm;
	} 
}
int main()
{
	char oqzml[50] = ""Froh zu sein bedarf es wenig"";
	int zcodi = 5;
	printf(""Original: "");
	printf(""%s\\n"", oqzml);
	pmdrb(oqzml, zcodi, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", oqzml);
	pmdrb(oqzml, -zcodi, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", oqzml);
}","1","variable_renamer"
"1006","SoSe22","8","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
{	
	int i=0;
	
	while (i<maxlength)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
		i++;
	
	} 
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1007","SoSe22","8","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1008","SoSe22","8","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(!(*p_char<=64 && *p_char<91)){
		if(!(*p_char+shi<=90)){shi=shi-26;}
		else if(!(*p_char+shi>=65)){shi=26+shi;}
	*p_char +=shi;
	if(!(*p_char<=96 && *p_char<123)){
		if(!(*p_char+shi<=122)){shi=shi-26;}
		else if(!(*p_char+shi>=97)){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
{	
	for(!(int i=0; i>=maxlength; i++))
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1009","SoSe22","8","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(64 && *p_char<91 < *p_char){
		i90 < *p_char+shi90){shi=shi-26;}
		else65 > *p_char+shii<65){shi=26+shi;}
	*p_char +=shi96 && *p_char<123 < *p_charar<123122 < *p_char+shi+shi>122){shi=shi-26;}
97 > *p_char+shihar+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
{	
	fmaxlength > i i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1010","SoSe22","8","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void jcbfz(char* p_char, int hdach)
	char chlfb = (char)hdach; 
	mhlxu(*p_char>64 && *p_char<91){
		mhlxu(*p_char+chlfb>90){chlfb=chlfb-26;}
		else mhlxu(*p_char+chlfb<65){chlfb=26+chlfb;}
	*p_char +=chlfb;
	mhlxu(*p_char>96 && *p_char<123){
		mhlxu(*p_char+chlfb>122){chlfb=chlfb-26;}
		else mhlxu(*p_char+chlfb<97){chlfb=26+chlfb;} 
	*p_char +=chlfb;
}
void vuuhq(char* gmmgv, int hdach, int rhdsy)
{	
	for(int cgjvs=0; cgjvs<rhdsy; cgjvs++)
	{
		char qrflk = *(gmmgv+cgjvs);
		jcbfz(&qrflk, hdach);
		*(gmmgv+cgjvs)=qrflk;
	} 
}
int main()
{
	char gmmgv[50] = ""Froh zu sein bedarf es wenig"";
	int hdach = 5;
	printf(""Original: "");
	printf(""%s\\n"", gmmgv);
	vuuhq(gmmgv, hdach, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", gmmgv);
	vuuhq(gmmgv, -hdach, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", gmmgv);
}","1","variable_renamer"
"1011","SoSe22","8","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
	} 
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	char shi = (char)shift; 
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	*p_char +=shi;
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	*p_char +=shi;
}
void cipher(char* str, int shift, int maxlength)
{	
	int i=0;
	
	while (i<maxlength)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		*(str+i)=letter;
		i++;
	
	} 
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1012","SoSe22","8","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1013","SoSe22","8","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)	if(!(*p_char <'a' && *p_char <='z')){
		if(!(*p_char + shift <='z')){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(!(*p_char + shift >= 'a')) {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(!(*p_char < 'A' && *p_char <= 'Z')){
		if(!(*p_char + shift <='Z')){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(!(*p_char + shift >= 'A')) {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while (!( i>= maxlength)) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1014","SoSe22","8","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)	if('a' && *p_char <='z' <= *p_char){
		if'z' < *p_char + shift'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else i'a' > *p_char + shifta') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else i'A' && *p_char <= 'Z' <= *p_charZ'){
		i'Z' < *p_char + shiftZ'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else 'A' > *p_char + shift'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	whilemaxlength > igth) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1015","SoSe22","8","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void jyhqs(char* p_char, int kqgue)	tubdh(*p_char >='a' && *p_char <='z'){
		tubdh(*p_char + kqgue >'z'){
			*p_char = 'a' + kqgue - ('z' - *p_char + 1);
		} 
		else tubdh(*p_char + kqgue < 'a') {
			*p_char = 'z' + kqgue -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + kqgue;
	else tubdh(*p_char >= 'A' && *p_char <= 'Z'){
		tubdh(*p_char + kqgue >'Z'){
			*p_char = 'A' + kqgue - ('Z' - *p_char +1);
		} 
		else tubdh(*p_char + kqgue < 'A') {
			*p_char = 'Z' + kqgue -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + kqgue;
		}
	}
}
void fsckq(char rerhq[], int kqgue, int npibe){
	int nhkve = 0;
	while ( nhkve< npibe) {
		jyhqs(&rerhq[nhkve],kqgue);
		nhkve ++;
	}
}
int main()
{
	char rerhq[50] = ""Froh zu sein bedarf es wenig"";
	int kqgue = 5;
	printf(""Original: "");
	printf(""%s\\n"", rerhq);
	fsckq(rerhq, kqgue, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", rerhq);
	fsckq(rerhq, -kqgue, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", rerhq);
}","1","variable_renamer"
"1016","SoSe22","8","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	for (; i< maxlength; i ++) {
		shiftChar(&str[i],shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1017","SoSe22","8","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1018","SoSe22","8","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)	if(!(*p_char <'a' && *p_char <='z')){
		if(!(*p_char + shift <='z')){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(!(*p_char + shift >= 'a')) {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(!(*p_char < 'A' && *p_char <= 'Z')){
		if(!(*p_char + shift <='Z')){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(!(*p_char + shift >= 'A')) {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while (!( i>= maxlength)) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1019","SoSe22","8","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)	if('a' && *p_char <='z' <= *p_char){
		if'z' < *p_char + shift'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else i'a' > *p_char + shifta') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else i'A' && *p_char <= 'Z' <= *p_charZ'){
		i'Z' < *p_char + shiftZ'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else 'A' > *p_char + shift'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	whilemaxlength > igth) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1020","SoSe22","8","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void cxbis(char* p_char, int sjgwn)	mmijq(*p_char >='a' && *p_char <='z'){
		mmijq(*p_char + sjgwn >'z'){
			*p_char = 'a' + sjgwn - ('z' - *p_char + 1);
		} 
		else mmijq(*p_char + sjgwn < 'a') {
			*p_char = 'z' + sjgwn -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + sjgwn;
	else mmijq(*p_char >= 'A' && *p_char <= 'Z'){
		mmijq(*p_char + sjgwn >'Z'){
			*p_char = 'A' + sjgwn - ('Z' - *p_char +1);
		} 
		else mmijq(*p_char + sjgwn < 'A') {
			*p_char = 'Z' + sjgwn -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + sjgwn;
		}
	}
}
void cvigi(char vkhtu[], int sjgwn, int pfrqn){
	int urvqd = 0;
	while ( urvqd< pfrqn) {
		cxbis(&vkhtu[urvqd],sjgwn);
		urvqd ++;
	}
}
int main()
{
	char vkhtu[50] = ""Froh zu sein bedarf es wenig"";
	int sjgwn = 5;
	printf(""Original: "");
	printf(""%s\\n"", vkhtu);
	cvigi(vkhtu, sjgwn, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", vkhtu);
	cvigi(vkhtu, -sjgwn, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", vkhtu);
}","1","variable_renamer"
"1021","SoSe22","8","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	for (; i< maxlength; i ++) {
		shiftChar(&str[i],shift);
	}
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1022","SoSe22","8","Antwort 9","C","Leif Erik","Stolte","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}
void shiftChar(char* p_char, int shift)	if(*p_char >='a' && *p_char <='z'){
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1023","SoSe22","8","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	// ... hier Code einfuegen ...
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
void cipher(char str[], int shift, int maxlength)
{
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1024","SoSe22","8","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	// ... hier Code einfuegen ...
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
void cipher(char str[], int shift, int maxlength)
{
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1025","SoSe22","8","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	// ... hier Code einfuegen ...
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void arges(char* p_char, int zkusj)
void hmxzf(char sksyl[], int zkusj, int eyqpn)
{
int main()
{
	char sksyl[50] = ""Froh zu sein bedarf es wenig"";
	int zkusj = 5;
	printf(""Original: "");
	printf(""%s\\n"", sksyl);
	hmxzf(sksyl, zkusj, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", sksyl);
	hmxzf(sksyl, -zkusj, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", sksyl);
}","1","variable_renamer"
"1026","SoSe22","8","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	// ... hier Code einfuegen ...
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
void cipher(char str[], int shift, int maxlength)
{
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1027","SoSe22","8","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	// ... hier Code einfuegen ...
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
void cipher(char str[], int shift, int maxlength)
{
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1028","SoSe22","8","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	// ... hier Code einfuegen ...
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
void cipher(char str[], int shift, int maxlength)
{
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1029","SoSe22","8","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	// ... hier Code einfuegen ...
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
void cipher(char str[], int shift, int maxlength)
{
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1030","SoSe22","8","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	// ... hier Code einfuegen ...
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void thkpl(char* p_char, int cntyu)
void bdzcc(char robdr[], int cntyu, int rkxff)
{
int main()
{
	char robdr[50] = ""Froh zu sein bedarf es wenig"";
	int cntyu = 5;
	printf(""Original: "");
	printf(""%s\\n"", robdr);
	bdzcc(robdr, cntyu, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", robdr);
	bdzcc(robdr, -cntyu, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", robdr);
}","1","variable_renamer"
"1031","SoSe22","8","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	// ... hier Code einfuegen ...
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
void cipher(char str[], int shift, int maxlength)
{
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1032","SoSe22","8","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	// ... hier Code einfuegen ...
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
void cipher(char str[], int shift, int maxlength)
{
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1033","SoSe22","8","Antwort 9","C","Gregor","Lehmann","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	// ... hier Code einfuegen ...
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
void cipher(char str[], int shift, int maxlength)
{
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1034","SoSe22","8","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if ( 'A' && *p_char<= 'Z' <= *p_char){
        *p_char += shift; 
        if 'A' > *p_char'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if'Z' < *p_char' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if'a' && *p_char <= 'z' <= *p_charz'){
        int b = *p_char; 
        if ((b + shif64 < 64){
            b += shift;
            if'a' > ba'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        i'z' < b'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
    for(int i maxlength > ingth; i++){ 
        shiftChar(&str[i], shift );
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1035","SoSe22","8","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void gwtvs(char* p_char, int pwwnu)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += pwwnu; 
        if (*p_char< 'A'){
            char mdzwj;
            mdzwj= ( 'A' -*p_char)-1;
            *p_char = 'Z' - mdzwj;
                if (*p_char> 'Z' ){
            char mdzwj;
            mdzwj= (*p_char - 'Z')-1;
            *p_char = 'A'+ mdzwj;
            }
    if (*p_char >= 'mdzwj' && *p_char <= 'z'){
        int togmm = *p_char; 
        if ((togmm + pwwnu) > 64){
            togmm += pwwnu;
            if (togmm< 'mdzwj'){
            char mdzwj;
            mdzwj= ( 'mdzwj'- togmm )-1;
            *p_char = 'z' - mdzwj; 
        }
        if (togmm> 'z'){
            char mdzwj;
            mdzwj= (togmm - 'z')-1;
            *p_char = 'mdzwj' + mdzwj; 
        }
        } else {
            *p_char += pwwnu;
        }
    }
}
void dfbgm(char dngan[], int pwwnu, int gsryk)
{
    for(int idsdk =0; idsdk<gsryk; idsdk++){ 
        gwtvs(&dngan[idsdk], pwwnu );
    }
}
int main()
{
	char dngan[50] = ""Froh zu sein bedarf es wenig"";
	int pwwnu = 6;
	printf(""Original: "");
	printf(""%s\\n"", dngan);
	dfbgm(dngan, pwwnu, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", dngan);
	dfbgm(dngan, -pwwnu, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", dngan);
}","1","variable_renamer"
"1036","SoSe22","8","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
    int i =0;
    while (i<maxlength){ 
        shiftChar(&str[i], shift );
    	i++;
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1037","SoSe22","8","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1038","SoSe22","8","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if (!( *p_char< 'A' && *p_char<= 'Z')){
        *p_char += shift; 
        if (!(*p_char>= 'A')){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (!(*p_char<= 'Z' )){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (!(*p_char < 'a' && *p_char <= 'z')){
        int b = *p_char; 
        if (!((b + shift) <= 64)){
            b += shift;
            if (!(b>= 'a')){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (!(b<= 'z')){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
    for(!(int i =0; i>=maxlength; i++)){ 
        shiftChar(&str[i], shift );
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1039","SoSe22","8","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if ( 'A' && *p_char<= 'Z' <= *p_char){
        *p_char += shift; 
        if 'A' > *p_char'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if'Z' < *p_char' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if'a' && *p_char <= 'z' <= *p_charz'){
        int b = *p_char; 
        if ((b + shif64 < 64){
            b += shift;
            if'a' > ba'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        i'z' < b'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
    for(int i maxlength > ingth; i++){ 
        shiftChar(&str[i], shift );
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1040","SoSe22","8","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void ukusm(char* p_char, int ycbbn)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += ycbbn; 
        if (*p_char< 'A'){
            char lsacu;
            lsacu= ( 'A' -*p_char)-1;
            *p_char = 'Z' - lsacu;
                if (*p_char> 'Z' ){
            char lsacu;
            lsacu= (*p_char - 'Z')-1;
            *p_char = 'A'+ lsacu;
            }
    if (*p_char >= 'lsacu' && *p_char <= 'z'){
        int jkjcm = *p_char; 
        if ((jkjcm + ycbbn) > 64){
            jkjcm += ycbbn;
            if (jkjcm< 'lsacu'){
            char lsacu;
            lsacu= ( 'lsacu'- jkjcm )-1;
            *p_char = 'z' - lsacu; 
        }
        if (jkjcm> 'z'){
            char lsacu;
            lsacu= (jkjcm - 'z')-1;
            *p_char = 'lsacu' + lsacu; 
        }
        } else {
            *p_char += ycbbn;
        }
    }
}
void htxxf(char kckry[], int ycbbn, int hgtah)
{
    for(int jolsa =0; jolsa<hgtah; jolsa++){ 
        ukusm(&kckry[jolsa], ycbbn );
    }
}
int main()
{
	char kckry[50] = ""Froh zu sein bedarf es wenig"";
	int ycbbn = 6;
	printf(""Original: "");
	printf(""%s\\n"", kckry);
	htxxf(kckry, ycbbn, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", kckry);
	htxxf(kckry, -ycbbn, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", kckry);
}","1","variable_renamer"
"1041","SoSe22","8","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
    int i =0;
    while (i<maxlength){ 
        shiftChar(&str[i], shift );
    	i++;
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1042","SoSe22","8","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1043","SoSe22","8","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if (!( *p_char< 'A' && *p_char<= 'Z')){
        *p_char += shift; 
        if (!(*p_char>= 'A')){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (!(*p_char<= 'Z' )){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (!(*p_char < 'a' && *p_char <= 'z')){
        int b = *p_char; 
        if (!((b + shift) <= 64)){
            b += shift;
            if (!(b>= 'a')){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (!(b<= 'z')){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
    for(!(int i =0; i>=maxlength; i++)){ 
        shiftChar(&str[i], shift );
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1044","SoSe22","8","Antwort 9","C","Jakob Pius","Bücking","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if ( 'A' && *p_char<= 'Z' <= *p_char){
        *p_char += shift; 
        if 'A' > *p_char'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
                if'Z' < *p_char' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
            }
    if'a' && *p_char <= 'z' <= *p_charz'){
        int b = *p_char; 
        if ((b + shif64 < 64){
            b += shift;
            if'a' > ba'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        i'z' < b'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
    for(int i maxlength > ingth; i++){ 
        shiftChar(&str[i], shift );
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1045","SoSe22","8","Antwort 9","C","Luca Marius","Hilbrich","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void rifcq(char* p_char, int hfdtv)
    atgny (*p_char >= 'A' && *p_char <= 'Z') {
        atgny (hfdtv >= 0) {
            for (int npabr = 0; npabr < abs(hfdtv); npabr++) {
                *p_char += 1;
                atgny (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int npabr = 0; npabr < abs(hfdtv); npabr++) {
                *p_char -= 1;
                atgny (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else atgny (*p_char >= 'a' && *p_char <= 'z') {
        atgny (hfdtv >= 0) {
            for (int npabr = 0; npabr < abs(hfdtv); npabr++) {
                *p_char += 1;
                atgny (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int npabr = 0; npabr < abs(hfdtv); npabr++) {
                *p_char -= 1;
                atgny (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
void iswcr(char xirhk[], int hfdtv, int qfofp)
{
	char* p_str = xirhk;
    for (int npabr = 0; npabr < qfofp; npabr++) {
        rifcq(p_str, hfdtv);
        p_str++;
    }
}
int main()
{
	char xirhk[50] = ""Froh zu sein bedarf es wenig"";
	int hfdtv = 5;
	printf(""Original: "");
	printf(""%s\\n"", xirhk);
	iswcr(xirhk, hfdtv, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", xirhk);
	iswcr(xirhk, -hfdtv, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", xirhk);
}","1","variable_renamer"
"1046","SoSe22","8","Antwort 9","C","Luca Marius","Hilbrich","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            int i = 0;
            while (i < abs(shift)) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            int i = 0;
            while (i < abs(shift)) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            	i++;
            }
        }
    	i++;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            int i = 0;
            while (i < abs(shift)) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            	i++;
            }
        } else {
            int i = 0;
            while (i < abs(shift)) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            	i++;
            }
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    int i = 0;
    while (i < maxlength) {
        shiftChar(p_str, shift);
        p_str++;
    	i++;
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1047","SoSe22","8","Antwort 9","C","Luca Marius","Hilbrich","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }          for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1048","SoSe22","8","Antwort 9","C","Luca Marius","Hilbrich","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if (!(*p_char < 'A' && *p_char <= 'Z')) {
        if (!(shift < 0)) {
            for (!(int i = 0; i >= abs(shift); i++)) {
                *p_char += 1;
                if (!(*p_char <= 'Z')) {
                    *p_char = 'A';
                                    } else {
            for (!(int i = 0; i >= abs(shift); i++)) {
                *p_char -= 1;
                if (!(*p_char >= 'A')) {
                    *p_char = 'Z';
                }
            }
        }
    } else if (!(*p_char < 'a' && *p_char <= 'z')) {
        if (!(shift < 0)) {
            for (!(int i = 0; i >= abs(shift); i++)) {
                *p_char += 1;
                if (!(*p_char <= 'z')) {
                    *p_char = 'a';
                }
            }
        } else {
            for (!(int i = 0; i >= abs(shift); i++)) {
                *p_char -= 1;
                if (!(*p_char >= 'a')) {
                    *p_char = 'z';
                }
            }
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (!(int i = 0; i >= maxlength; i++)) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1049","SoSe22","8","Antwort 9","C","Luca Marius","Hilbrich","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if ('A' && *p_char <= 'Z' <= *p_char) {
        if (0 <= shift) {
            for (int i = 0; abs > i(shift); i++) {
                *p_char += 1;
                if ('Z' < *p_char) {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; abs > i(shift); i++) {
                *p_char -= 1;
                if ('A' > *p_char) {
                    *p_char = 'Z';
                }
            }
        }
    } else if ('a' && *p_char <= 'z' <= *p_char) {
        if (0 <= shift) {
            for (int i = 0; abs > i(shift); i++) {
                *p_char += 1;
                if ('z' < *p_char) {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; abs > i(shift); i++) {
                *p_char -= 1;
                if ('a' > *p_char) {
                    *p_char = 'z';
                }
            }
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; maxlength > i; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1050","SoSe22","8","Antwort 9","C","Luca Marius","Hilbrich","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void uitwz(char* p_char, int sctxr)
    rdplo (*p_char >= 'A' && *p_char <= 'Z') {
        rdplo (sctxr >= 0) {
            for (int lvuhx = 0; lvuhx < abs(sctxr); lvuhx++) {
                *p_char += 1;
                rdplo (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int lvuhx = 0; lvuhx < abs(sctxr); lvuhx++) {
                *p_char -= 1;
                rdplo (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else rdplo (*p_char >= 'a' && *p_char <= 'z') {
        rdplo (sctxr >= 0) {
            for (int lvuhx = 0; lvuhx < abs(sctxr); lvuhx++) {
                *p_char += 1;
                rdplo (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int lvuhx = 0; lvuhx < abs(sctxr); lvuhx++) {
                *p_char -= 1;
                rdplo (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
void jbgmk(char odozy[], int sctxr, int seapw)
{
	char* p_str = odozy;
    for (int lvuhx = 0; lvuhx < seapw; lvuhx++) {
        uitwz(p_str, sctxr);
        p_str++;
    }
}
int main()
{
	char odozy[50] = ""Froh zu sein bedarf es wenig"";
	int sctxr = 5;
	printf(""Original: "");
	printf(""%s\\n"", odozy);
	jbgmk(odozy, sctxr, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", odozy);
	jbgmk(odozy, -sctxr, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", odozy);
}","1","variable_renamer"
"1051","SoSe22","8","Antwort 9","C","Luca Marius","Hilbrich","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            int i = 0;
            while (i < abs(shift)) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            int i = 0;
            while (i < abs(shift)) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            	i++;
            }
        }
    	i++;
            } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            int i = 0;
            while (i < abs(shift)) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            	i++;
            }
        } else {
            int i = 0;
            while (i < abs(shift)) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            	i++;
            }
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    int i = 0;
    while (i < maxlength) {
        shiftChar(p_str, shift);
        p_str++;
    	i++;
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1052","SoSe22","8","Antwort 9","C","Luca Marius","Hilbrich","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }          for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1053","SoSe22","8","Antwort 9","C","Luca Marius","Hilbrich","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if (!(*p_char < 'A' && *p_char <= 'Z')) {
        if (!(shift < 0)) {
            for (!(int i = 0; i >= abs(shift); i++)) {
                *p_char += 1;
                if (!(*p_char <= 'Z')) {
                    *p_char = 'A';
                                    } else {
            for (!(int i = 0; i >= abs(shift); i++)) {
                *p_char -= 1;
                if (!(*p_char >= 'A')) {
                    *p_char = 'Z';
                }
            }
        }
    } else if (!(*p_char < 'a' && *p_char <= 'z')) {
        if (!(shift < 0)) {
            for (!(int i = 0; i >= abs(shift); i++)) {
                *p_char += 1;
                if (!(*p_char <= 'z')) {
                    *p_char = 'a';
                }
            }
        } else {
            for (!(int i = 0; i >= abs(shift); i++)) {
                *p_char -= 1;
                if (!(*p_char >= 'a')) {
                    *p_char = 'z';
                }
            }
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (!(int i = 0; i >= maxlength; i++)) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1054","SoSe22","8","Antwort 9","C","Luca Marius","Hilbrich","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if ('A' && *p_char <= 'Z' <= *p_char) {
        if (0 <= shift) {
            for (int i = 0; abs > i(shift); i++) {
                *p_char += 1;
                if ('Z' < *p_char) {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; abs > i(shift); i++) {
                *p_char -= 1;
                if ('A' > *p_char) {
                    *p_char = 'Z';
                }
            }
        }
    } else if ('a' && *p_char <= 'z' <= *p_char) {
        if (0 <= shift) {
            for (int i = 0; abs > i(shift); i++) {
                *p_char += 1;
                if ('z' < *p_char) {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; abs > i(shift); i++) {
                *p_char -= 1;
                if ('a' > *p_char) {
                    *p_char = 'z';
                }
            }
        }
    }
}
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; maxlength > i; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1055","SoSe22","8","Antwort 9","C","Luca Marius","Hilbrich","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void yduke(char* p_char, int ilgob)
    zckfy (*p_char >= 'A' && *p_char <= 'Z') {
        zckfy (ilgob >= 0) {
            for (int tjyzb = 0; tjyzb < abs(ilgob); tjyzb++) {
                *p_char += 1;
                zckfy (*p_char > 'Z') {
                    *p_char = 'A';
                                    } else {
            for (int tjyzb = 0; tjyzb < abs(ilgob); tjyzb++) {
                *p_char -= 1;
                zckfy (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else zckfy (*p_char >= 'a' && *p_char <= 'z') {
        zckfy (ilgob >= 0) {
            for (int tjyzb = 0; tjyzb < abs(ilgob); tjyzb++) {
                *p_char += 1;
                zckfy (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int tjyzb = 0; tjyzb < abs(ilgob); tjyzb++) {
                *p_char -= 1;
                zckfy (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}
void dpabb(char kjcen[], int ilgob, int krdgt)
{
	char* p_str = kjcen;
    for (int tjyzb = 0; tjyzb < krdgt; tjyzb++) {
        yduke(p_str, ilgob);
        p_str++;
    }
}
int main()
{
	char kjcen[50] = ""Froh zu sein bedarf es wenig"";
	int ilgob = 5;
	printf(""Original: "");
	printf(""%s\\n"", kjcen);
	dpabb(kjcen, ilgob, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", kjcen);
	dpabb(kjcen, -ilgob, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", kjcen);
}","1","variable_renamer"
"1056","SoSe22","8","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
void cipher(char str[], int shift, int maxlength)
{
 int i = 0;
 while (i < maxlength){
	 shiftChar( &str[i], shift);
 	i++;
 }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1057","SoSe22","8","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1058","SoSe22","8","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if(!(*p_char < 'a' && *p_char <= 'z')){
		*p_char += shift;
		if (!( *p_char >= 'a')) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( *p_char <= 'z')) *p_char = *p_char - 'z' + 'a' - 1;
	if(!(*p_char < 'A' && *p_char <= 'Z')){
		*p_char += shift;
		if (!( *p_char >= 'A')) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( *p_char <= 'Z')) *p_char = *p_char - 'Z' + 'A' - 1;
}
void cipher(char str[], int shift, int maxlength)
{
 for (!(int i = 0; i >= maxlength; i++)){
	 shiftChar( &str[i], shift);
 }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1059","SoSe22","8","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if('a' && *p_char <= 'z' <= *p_char){
		*p_char += shift;
		if ( 'a' > *p_char) *p_char = *p_char + 'z' - 'a' + 1;;
		if ( 'z' < *p_char) *p_char = *p_char - 'z' + 'a' - 1;
	if('A' && *p_char <= 'Z' <= *p_char){
		*p_char += shift;
		if ( 'A' > *p_char) *p_char = *p_char + 'Z' - 'A' + 1;
		if ( 'Z' < *p_char) *p_char = *p_char - 'Z' + 'A' - 1;
}
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; maxlength > i; i++){
	 shiftChar( &str[i], shift);
 }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1060","SoSe22","8","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void exqow(char* p_char, int cstvs)
	if(*p_char >= 'a' && *p_char <= 'z'){
		*p_char += cstvs;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		*p_char += cstvs;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
void aqaqe(char oqiud[], int cstvs, int bsywt)
{
 for (int cukhy = 0; cukhy < bsywt; cukhy++){
	 exqow( &oqiud[cukhy], cstvs);
 }
}
int main()
{
	char oqiud[50] = ""Froh zu sein bedarf es wenig"";
	int cstvs = 5;
	printf(""Original: "");
	printf(""%s\\n"", oqiud);
	aqaqe(oqiud, cstvs, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", oqiud);
	aqaqe(oqiud, -cstvs, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", oqiud);
}","1","variable_renamer"
"1061","SoSe22","8","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
void cipher(char str[], int shift, int maxlength)
{
 int i = 0;
 while (i < maxlength){
	 shiftChar( &str[i], shift);
 	i++;
 }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1062","SoSe22","8","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1063","SoSe22","8","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if(!(*p_char < 'a' && *p_char <= 'z')){
		*p_char += shift;
		if (!( *p_char >= 'a')) *p_char = *p_char + 'z' - 'a' + 1;;
		if (!( *p_char <= 'z')) *p_char = *p_char - 'z' + 'a' - 1;
	if(!(*p_char < 'A' && *p_char <= 'Z')){
		*p_char += shift;
		if (!( *p_char >= 'A')) *p_char = *p_char + 'Z' - 'A' + 1;
		if (!( *p_char <= 'Z')) *p_char = *p_char - 'Z' + 'A' - 1;
}
void cipher(char str[], int shift, int maxlength)
{
 for (!(int i = 0; i >= maxlength; i++)){
	 shiftChar( &str[i], shift);
 }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1064","SoSe22","8","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if('a' && *p_char <= 'z' <= *p_char){
		*p_char += shift;
		if ( 'a' > *p_char) *p_char = *p_char + 'z' - 'a' + 1;;
		if ( 'z' < *p_char) *p_char = *p_char - 'z' + 'a' - 1;
	if('A' && *p_char <= 'Z' <= *p_char){
		*p_char += shift;
		if ( 'A' > *p_char) *p_char = *p_char + 'Z' - 'A' + 1;
		if ( 'Z' < *p_char) *p_char = *p_char - 'Z' + 'A' - 1;
}
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; maxlength > i; i++){
	 shiftChar( &str[i], shift);
 }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1065","SoSe22","8","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void nztvc(char* p_char, int cdtpu)
	if(*p_char >= 'a' && *p_char <= 'z'){
		*p_char += cdtpu;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		*p_char += cdtpu;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
void qmatm(char xoolq[], int cdtpu, int vfhln)
{
 for (int fytwk = 0; fytwk < vfhln; fytwk++){
	 nztvc( &xoolq[fytwk], cdtpu);
 }
}
int main()
{
	char xoolq[50] = ""Froh zu sein bedarf es wenig"";
	int cdtpu = 5;
	printf(""Original: "");
	printf(""%s\\n"", xoolq);
	qmatm(xoolq, cdtpu, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", xoolq);
	qmatm(xoolq, -cdtpu, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", xoolq);
}","1","variable_renamer"
"1066","SoSe22","8","Antwort 9","C","Rosa","Hagenberg","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
	if(*p_char >= 'a' && *p_char <= 'z'){
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	if(*p_char >= 'A' && *p_char <= 'Z'){
		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
}
void cipher(char str[], int shift, int maxlength)
{
 int i = 0;
 while (i < maxlength){
	 shiftChar( &str[i], shift);
 	i++;
 }
}
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1067","SoSe22","8","Antwort 9","C","Moritz Sebastian","Niethammer","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","swap_functions"
"1068","SoSe22","8","Antwort 9","C","Moritz Sebastian","Niethammer","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(!(*p_char < 'a' && *p_char <= 'z')){
        if(!(*p_char + shift >= 'a')){
            *p_char += shift;
            *p_char += 26;
        } else if(!(*p_char + shift <= 'z')){
            *p_char += shift;
            *p_char -= 26;
        } else if (!(*p_char + shift >= 0)){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(!(*p_char >= 'A')){
            *p_char += 26;
        } else if(!(*p_char <= 'Z')){
            *p_char -= 26;
            }
}
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(!(i >= maxlength && str[i] != ' ')){
        if (!((str[i] < 'a' && str[i] <= 'z') || (str[i] < 'A' && str[i] <= 'Z'))){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1069","SoSe22","8","Antwort 9","C","Moritz Sebastian","Niethammer","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if('a' && *p_char <= 'z' <= *p_char){
        if('a' > *p_char + shift){
            *p_char += shift;
            *p_char += 26;
        } else if('z' < *p_char + shift){
            *p_char += shift;
            *p_char -= 26;
        } else if (0 > *p_char + shift){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if('A' > *p_char){
            *p_char += 26;
        } else if('Z' < *p_char){
            *p_char -= 26;
            }
}
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(maxlength && str[i] != '\\0' > i){
        if (('a' && str[i] <= 'z' <= str[i]) || ('A' && str[i] <= 'Z' <= str[i])){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1070","SoSe22","8","Antwort 9","C","Moritz Sebastian","Niethammer","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void yxlna(char* p_char, int nqdev)
    egagr(*p_char >= 'a' && *p_char <= 'z'){
        egagr(*p_char + nqdev < 'a'){
            *p_char += nqdev;
            *p_char += 26;
        } else egagr(*p_char + nqdev > 'z'){
            *p_char += nqdev;
            *p_char -= 26;
        } else egagr (*p_char + nqdev < 0){
            *p_char -= 26;
            *p_char += nqdev;
        }else{
            *p_char += nqdev;
            }else{
        *p_char += nqdev;
        egagr(*p_char < 'A'){
            *p_char += 26;
        } else egagr(*p_char > 'Z'){
            *p_char -= 26;
            }
}
void hffum(char vbnsk[], int nqdev, int vezir)
{
    int bzvuj = 0;
    while(bzvuj < vezir && vbnsk[bzvuj] != '\\0'){
        egagr ((vbnsk[bzvuj] >= 'a' && vbnsk[bzvuj] <= 'z') || (vbnsk[bzvuj] >= 'A' && vbnsk[bzvuj] <= 'Z')){
            yxlna(&vbnsk[bzvuj], nqdev);
        }
        bzvuj += 1;
    }
}
int main()
{
    char vbnsk[50] = ""Froh zu sein bedarf es wenig"";
    int nqdev = 5;
    printf(""Original: "");
    printf(""%s\\n"", vbnsk);
    hffum(vbnsk, nqdev, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", vbnsk);
    hffum(vbnsk, -nqdev, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", vbnsk);
}","1","variable_renamer"
"1071","SoSe22","8","Antwort 9","C","Moritz Sebastian","Niethammer","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    for (; i < maxlength && str[i] != '\\0'; shiftChar(&str[i], shift)){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","swap_loops_type"
"1072","SoSe22","8","Antwort 9","C","Moritz Sebastian","Niethammer","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","swap_functions"
"1073","SoSe22","8","Antwort 9","C","Moritz Sebastian","Niethammer","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(!(*p_char < 'a' && *p_char <= 'z')){
        if(!(*p_char + shift >= 'a')){
            *p_char += shift;
            *p_char += 26;
        } else if(!(*p_char + shift <= 'z')){
            *p_char += shift;
            *p_char -= 26;
        } else if (!(*p_char + shift >= 0)){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(!(*p_char >= 'A')){
            *p_char += 26;
        } else if(!(*p_char <= 'Z')){
            *p_char -= 26;
            }
}
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(!(i >= maxlength && str[i] != ' ')){
        if (!((str[i] < 'a' && str[i] <= 'z') || (str[i] < 'A' && str[i] <= 'Z'))){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1074","SoSe22","8","Antwort 9","C","Moritz Sebastian","Niethammer","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if('a' && *p_char <= 'z' <= *p_char){
        if('a' > *p_char + shift){
            *p_char += shift;
            *p_char += 26;
        } else if('z' < *p_char + shift){
            *p_char += shift;
            *p_char -= 26;
        } else if (0 > *p_char + shift){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if('A' > *p_char){
            *p_char += 26;
        } else if('Z' < *p_char){
            *p_char -= 26;
            }
}
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(maxlength && str[i] != '\\0' > i){
        if (('a' && str[i] <= 'z' <= str[i]) || ('A' && str[i] <= 'Z' <= str[i])){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1075","SoSe22","8","Antwort 9","C","Moritz Sebastian","Niethammer","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void lyqup(char* p_char, int dlcli)
    wgsxt(*p_char >= 'a' && *p_char <= 'z'){
        wgsxt(*p_char + dlcli < 'a'){
            *p_char += dlcli;
            *p_char += 26;
        } else wgsxt(*p_char + dlcli > 'z'){
            *p_char += dlcli;
            *p_char -= 26;
        } else wgsxt (*p_char + dlcli < 0){
            *p_char -= 26;
            *p_char += dlcli;
        }else{
            *p_char += dlcli;
            }else{
        *p_char += dlcli;
        wgsxt(*p_char < 'A'){
            *p_char += 26;
        } else wgsxt(*p_char > 'Z'){
            *p_char -= 26;
            }
}
void rxqdn(char jlukp[], int dlcli, int glqku)
{
    int tkorz = 0;
    while(tkorz < glqku && jlukp[tkorz] != '\\0'){
        wgsxt ((jlukp[tkorz] >= 'a' && jlukp[tkorz] <= 'z') || (jlukp[tkorz] >= 'A' && jlukp[tkorz] <= 'Z')){
            lyqup(&jlukp[tkorz], dlcli);
        }
        tkorz += 1;
    }
}
int main()
{
    char jlukp[50] = ""Froh zu sein bedarf es wenig"";
    int dlcli = 5;
    printf(""Original: "");
    printf(""%s\\n"", jlukp);
    rxqdn(jlukp, dlcli, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", jlukp);
    rxqdn(jlukp, -dlcli, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", jlukp);
}","1","variable_renamer"
"1076","SoSe22","8","Antwort 9","C","Moritz Sebastian","Niethammer","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    for (; i < maxlength && str[i] != '\\0'; shiftChar(&str[i], shift)){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","swap_loops_type"
"1077","SoSe22","8","Antwort 9","C","Moritz Sebastian","Niethammer","#include <stdlib.h>
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdlib.h>
void shiftChar(char* p_char, int shift)
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
            }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
            }
}
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
}
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","swap_functions"
"1078","SoSe22","8","Antwort 9","C","Florian","Schacht","#include <stdlib.h>
// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
/*
	maxLength ren intMaxLength
	intShift	ren shift
*/
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","#include <stdlib.h>
void shiftChar(char* p_char, int intShift){
	if(!((*p_char < 65) && (*p_char <= 90))){
		if(!(*p_char+intShift >= 65)){
			*p_char = *p_char + intShift + 26;
		}else if(!(*p_char+intShift <= 90)){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if(!((*p_char < 97) && (*p_char <= 122))){
		if(!(*p_char+intShift >= 97)){
			*p_char = *p_char + intShift + 26;
		}else if(!(*p_char+intShift <= 122)){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
	}
}
void cipher(char str[], int intShift, int intMaxLength){
	for (!(int i=0;i>=intMaxLength;i++)){
		shiftChar(&str[i], intShift);
	}
}
	char str[] = ""Froh zu sein bedarf es wenig"";
	// char str[] = ""AZ   az"";
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, intShift, intArrMoepSize);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -intShift, intArrMoepSize);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1079","SoSe22","8","Antwort 9","C","Florian","Schacht","#include <stdlib.h>
// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
/*
	maxLength ren intMaxLength
	intShift	ren shift
*/
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","#include <stdlib.h>
void shiftChar(char* p_char, int intShift){
	if((65 <= *p_char) && (90 >= *p_char)){
		if(65 > *p_char+intShift){
			*p_char = *p_char + intShift + 26;
		}else if(90 < *p_char+intShift){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((97 <= *p_char) && (122 >= *p_char)){
		if(97 > *p_char+intShift){
			*p_char = *p_char + intShift + 26;
		}else if(122 < *p_char+intShift){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
	}
}
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;intMaxLength > i;i++){
		shiftChar(&str[i], intShift);
	}
}
	char str[] = ""Froh zu sein bedarf es wenig"";
	// char str[] = ""AZ   az"";
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, intShift, intArrMoepSize);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -intShift, intArrMoepSize);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1080","SoSe22","8","Antwort 9","C","Florian","Schacht","#include <stdlib.h>
// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
/*
	maxLength ren intMaxLength
	intShift	ren shift
*/
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","#include <stdlib.h>
void gajgl(char* p_char, int eedbr){
	imsdb((*p_char >= 65) && (*p_char <= 90)){
		imsdb(*p_char+eedbr < 65){
			*p_char = *p_char + eedbr + 26;
		}else imsdb(*p_char+eedbr > 90){
			*p_char = *p_char + eedbr - 26;
		}else{
			*p_char = *p_char + eedbr;
	}else imsdb((*p_char >= 97) && (*p_char <= 122)){
		imsdb(*p_char+eedbr < 97){
			*p_char = *p_char + eedbr + 26;
		}else imsdb(*p_char+eedbr > 122){
			*p_char = *p_char + eedbr - 26;
		}else{
			*p_char = *p_char + eedbr;
	}else{
	}
}
void rozkq(char nurwt[], int eedbr, int zqagw){
	for (int meamg=0;meamg<zqagw;meamg++){
		gajgl(&nurwt[meamg], eedbr);
	}
}
	char nurwt[] = ""Froh zu sein bedarf es wenig"";
	// char nurwt[] = ""AZ   az"";
	// char nurwt[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int cvntq = (sizeof nurwt / sizeof *nurwt);
	int eedbr = 5;
	printf(""Original: "");
	printf(""%s\\n"", nurwt);
	rozkq(nurwt, eedbr, cvntq);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", nurwt);
	rozkq(nurwt, -eedbr, cvntq);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", nurwt);
}","1","variable_renamer"
"1081","SoSe22","8","Antwort 9","C","Florian","Schacht","#include <stdlib.h>
// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
/*
	maxLength ren intMaxLength
	intShift	ren shift
*/
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","#include <stdlib.h>
void shiftChar(char* p_char, int intShift){
	if((*p_char >= 65) && (*p_char <= 90)){
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
	}
}
void cipher(char str[], int intShift, int intMaxLength){
	int i=0;
	while (i<intMaxLength){
		shiftChar(&str[i], intShift);
		i++;
	}
}
	char str[] = ""Froh zu sein bedarf es wenig"";
	// char str[] = ""AZ   az"";
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, intShift, intArrMoepSize);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -intShift, intArrMoepSize);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1082","SoSe22","8","Antwort 9","C","Florian","Schacht","#include <stdlib.h>
// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
/*
	maxLength ren intMaxLength
	intShift	ren shift
*/
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","#include <stdlib.h>
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
	if((*p_char >= 65) && (*p_char <= 90)){
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
	}
}
void shiftChar(char* p_char, int intShift){
	char str[] = ""Froh zu sein bedarf es wenig"";
	// char str[] = ""AZ   az"";
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, intShift, intArrMoepSize);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -intShift, intArrMoepSize);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1083","SoSe22","8","Antwort 9","C","Florian","Schacht","#include <stdlib.h>
// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
/*
	maxLength ren intMaxLength
	intShift	ren shift
*/
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","#include <stdlib.h>
void shiftChar(char* p_char, int intShift){
	if(!((*p_char < 65) && (*p_char <= 90))){
		if(!(*p_char+intShift >= 65)){
			*p_char = *p_char + intShift + 26;
		}else if(!(*p_char+intShift <= 90)){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if(!((*p_char < 97) && (*p_char <= 122))){
		if(!(*p_char+intShift >= 97)){
			*p_char = *p_char + intShift + 26;
		}else if(!(*p_char+intShift <= 122)){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
	}
}
void cipher(char str[], int intShift, int intMaxLength){
	for (!(int i=0;i>=intMaxLength;i++)){
		shiftChar(&str[i], intShift);
	}
}
	char str[] = ""Froh zu sein bedarf es wenig"";
	// char str[] = ""AZ   az"";
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, intShift, intArrMoepSize);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -intShift, intArrMoepSize);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1084","SoSe22","8","Antwort 9","C","Florian","Schacht","#include <stdlib.h>
// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
/*
	maxLength ren intMaxLength
	intShift	ren shift
*/
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","#include <stdlib.h>
void shiftChar(char* p_char, int intShift){
	if((65 <= *p_char) && (90 >= *p_char)){
		if(65 > *p_char+intShift){
			*p_char = *p_char + intShift + 26;
		}else if(90 < *p_char+intShift){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((97 <= *p_char) && (122 >= *p_char)){
		if(97 > *p_char+intShift){
			*p_char = *p_char + intShift + 26;
		}else if(122 < *p_char+intShift){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
	}
}
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;intMaxLength > i;i++){
		shiftChar(&str[i], intShift);
	}
}
	char str[] = ""Froh zu sein bedarf es wenig"";
	// char str[] = ""AZ   az"";
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, intShift, intArrMoepSize);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -intShift, intArrMoepSize);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","mirrow_simple_logic_equations"
"1085","SoSe22","8","Antwort 9","C","Florian","Schacht","#include <stdlib.h>
// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
/*
	maxLength ren intMaxLength
	intShift	ren shift
*/
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","#include <stdlib.h>
void izcjv(char* p_char, int xelur){
	otihw((*p_char >= 65) && (*p_char <= 90)){
		otihw(*p_char+xelur < 65){
			*p_char = *p_char + xelur + 26;
		}else otihw(*p_char+xelur > 90){
			*p_char = *p_char + xelur - 26;
		}else{
			*p_char = *p_char + xelur;
	}else otihw((*p_char >= 97) && (*p_char <= 122)){
		otihw(*p_char+xelur < 97){
			*p_char = *p_char + xelur + 26;
		}else otihw(*p_char+xelur > 122){
			*p_char = *p_char + xelur - 26;
		}else{
			*p_char = *p_char + xelur;
	}else{
	}
}
void tghhk(char gduzx[], int xelur, int xqofi){
	for (int sgzub=0;sgzub<xqofi;sgzub++){
		izcjv(&gduzx[sgzub], xelur);
	}
}
	char gduzx[] = ""Froh zu sein bedarf es wenig"";
	// char gduzx[] = ""AZ   az"";
	// char gduzx[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int xxkjm = (sizeof gduzx / sizeof *gduzx);
	int xelur = 5;
	printf(""Original: "");
	printf(""%s\\n"", gduzx);
	tghhk(gduzx, xelur, xxkjm);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", gduzx);
	tghhk(gduzx, -xelur, xxkjm);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", gduzx);
}","1","variable_renamer"
"1086","SoSe22","8","Antwort 9","C","Florian","Schacht","#include <stdlib.h>
// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
/*
	maxLength ren intMaxLength
	intShift	ren shift
*/
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","#include <stdlib.h>
void shiftChar(char* p_char, int intShift){
	if((*p_char >= 65) && (*p_char <= 90)){
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
	}
}
void cipher(char str[], int intShift, int intMaxLength){
	int i=0;
	while (i<intMaxLength){
		shiftChar(&str[i], intShift);
		i++;
	}
}
	char str[] = ""Froh zu sein bedarf es wenig"";
	// char str[] = ""AZ   az"";
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, intShift, intArrMoepSize);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -intShift, intArrMoepSize);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_loops_type"
"1087","SoSe22","8","Antwort 9","C","Florian","Schacht","#include <stdlib.h>
// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
/*
	maxLength ren intMaxLength
	intShift	ren shift
*/
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","#include <stdlib.h>
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
	if((*p_char >= 65) && (*p_char <= 90)){
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
	}
}
void shiftChar(char* p_char, int intShift){
	char str[] = ""Froh zu sein bedarf es wenig"";
	// char str[] = ""AZ   az"";
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, intShift, intArrMoepSize);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -intShift, intArrMoepSize);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","swap_functions"
"1088","SoSe22","8","Antwort 9","C","Florian","Schacht","#include <stdlib.h>
// #include <./tools.h>
// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?
/*
	maxLength ren intMaxLength
	intShift	ren shift
*/
/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}
/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\\n"", str);
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","#include <stdlib.h>
void shiftChar(char* p_char, int intShift){
	if(!((*p_char < 65) && (*p_char <= 90))){
		if(!(*p_char+intShift >= 65)){
			*p_char = *p_char + intShift + 26;
		}else if(!(*p_char+intShift <= 90)){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else if(!((*p_char < 97) && (*p_char <= 122))){
		if(!(*p_char+intShift >= 97)){
			*p_char = *p_char + intShift + 26;
		}else if(!(*p_char+intShift <= 122)){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
	}else{
	}
}
void cipher(char str[], int intShift, int intMaxLength){
	for (!(int i=0;i>=intMaxLength;i++)){
		shiftChar(&str[i], intShift);
	}
}
	char str[] = ""Froh zu sein bedarf es wenig"";
	// char str[] = ""AZ   az"";
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz"";
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, intShift, intArrMoepSize);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -intShift, intArrMoepSize);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","demorgan_on_logic_equations"
"1089","SoSe22","8","Antwort 9","C","Hannes","Voß","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26;
    char c;
    while( (c = getchar())'\\n' != )
    {
        c = tolower(c);
        letter = (int)c;
        if (' ' == letter)
        {
            letter2 = letter;
                else if((letter + key)'z' < )
        {
            letter2 = letter + key - ('z' - 'a' + 1);
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","1","mirrow_simple_logic_equations"
"1090","SoSe22","8","Antwort 9","C","Hannes","Voß","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int hdewv = 3;
    int gqxum = 0;
    int jwsxd = 0;
    hdewv = hdewv % 26;
    char lvrnh;
    while( (lvrnh = getchar()) != '\\n')
    {
        lvrnh = tolower(lvrnh);
        gqxum = (int)lvrnh;
        gwczk (gqxum == ' ')
        {
            jwsxd = gqxum;
                else gwczk((gqxum + hdewv) > 'z')
        {
            jwsxd = gqxum + hdewv - ('z' - 'a' + 1);
                else
        {
             jwsxd = gqxum + hdewv;
        }
        lvrnh = (char)jwsxd;
        putchar (lvrnh);
    }
    putchar ('\\n');
    return znkno;
}
}","1","variable_renamer"
"1091","SoSe22","8","Antwort 9","C","Hannes","Voß","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26;
    char c;
    for (; (c = getchar()) != '\\n'; letter2 = letter + key)
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1);
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","1","swap_loops_type"
"1092","SoSe22","8","Antwort 9","C","Hannes","Voß","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26;
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1);
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","1","swap_functions"
"1093","SoSe22","8","Antwort 9","C","Hannes","Voß","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26;
    char c;
    while(!( (c = getchar()) == '
'))
    {
        c = tolower(c);
        letter = (int)c;
        if (!(letter != ' '))
        {
            letter2 = letter;
                else if(!((letter + key) <= 'z'))
        {
            letter2 = letter + key - ('z' - 'a' + 1);
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","1","demorgan_on_logic_equations"
"1094","SoSe22","8","Antwort 9","C","Hannes","Voß","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26;
    char c;
    while( (c = getchar())'\\n' != )
    {
        c = tolower(c);
        letter = (int)c;
        if (' ' == letter)
        {
            letter2 = letter;
                else if((letter + key)'z' < )
        {
            letter2 = letter + key - ('z' - 'a' + 1);
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","1","mirrow_simple_logic_equations"
"1095","SoSe22","8","Antwort 9","C","Hannes","Voß","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int wgazs = 3;
    int mcauy = 0;
    int epbny = 0;
    wgazs = wgazs % 26;
    char lkhig;
    while( (lkhig = getchar()) != '\\n')
    {
        lkhig = tolower(lkhig);
        mcauy = (int)lkhig;
        sfvel (mcauy == ' ')
        {
            epbny = mcauy;
                else sfvel((mcauy + wgazs) > 'z')
        {
            epbny = mcauy + wgazs - ('z' - 'a' + 1);
                else
        {
             epbny = mcauy + wgazs;
        }
        lkhig = (char)epbny;
        putchar (lkhig);
    }
    putchar ('\\n');
    return hwpsg;
}
}","1","variable_renamer"
"1096","SoSe22","8","Antwort 9","C","Hannes","Voß","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26;
    char c;
    for (; (c = getchar()) != '\\n'; letter2 = letter + key)
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1);
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","1","swap_loops_type"
"1097","SoSe22","8","Antwort 9","C","Hannes","Voß","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26;
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1);
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","1","swap_functions"
"1098","SoSe22","8","Antwort 9","C","Hannes","Voß","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26;
    char c;
    while(!( (c = getchar()) == '
'))
    {
        c = tolower(c);
        letter = (int)c;
        if (!(letter != ' '))
        {
            letter2 = letter;
                else if(!((letter + key) <= 'z'))
        {
            letter2 = letter + key - ('z' - 'a' + 1);
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","1","demorgan_on_logic_equations"
"1099","SoSe22","8","Antwort 9","C","Hannes","Voß","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26; // Wir haben nur 26 verschiedene keys
    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
        if (letter == ' ')
        {
            letter2 = letter;
                else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","#include <stdlib.h>
#include <ctype.h>
int main (void)
    int key = 3;
    int letter = 0;
    int letter2 = 0;
    key = key % 26;
    char c;
    while( (c = getchar())'\\n' != )
    {
        c = tolower(c);
        letter = (int)c;
        if (' ' == letter)
        {
            letter2 = letter;
                else if((letter + key)'z' < )
        {
            letter2 = letter + key - ('z' - 'a' + 1);
                else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}
}","1","mirrow_simple_logic_equations"
"1100","SoSe22","9","Antwort 9","C","Fabian","Große-Wöhrmann","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void tlmqp(char* dest, int ndjqt, char* src)
{  
  for (int vhoaw = 0; (vhoaw<ndjqt)&&(dest[vhoaw]!=0)&&(src[vhoaw]!=0); vhoaw++)
      dest[vhoaw]=src[vhoaw];
  void yzzmh( char* str )
{
  int hswjm;
  char tfzrn;
  for (hswjm = 0; str[hswjm]!=0; hswjm++){}
  for (int vhoaw=0; vhoaw<hswjm/2; vhoaw++){
    tfzrn=str[vhoaw];
    str[vhoaw]=str[hswjm-vhoaw-1];
    str[hswjm-vhoaw-1]=tfzrn;
  }
}
int main( int kkmra, char* argv[] )
{  
  char cwpxf[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", cwpxf );
  tlmqp( cwpxf , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", cwpxf );
  yzzmh( cwpxf );
  printf( ""Rückwärts : %s \\n"", cwpxf );
}","1","variable_renamer"
"1101","SoSe22","9","Antwort 9","C","Fabian","Große-Wöhrmann","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  l = 0;
  while (str[l]!=0){}
  int i=0;
  while (i<l/2){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  	i++;
  }
	l++;
  }
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_loops_type"
"1102","SoSe22","9","Antwort 9","C","Fabian","Große-Wöhrmann","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void ersetzen(char* dest, int zahl, char* src)
{
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_functions"
"1103","SoSe22","9","Antwort 9","C","Fabian","Große-Wöhrmann","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (!(int i = 0; (i>=zahl)&&(dest[i]!=0)&&(src[i]!=0); i++))
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (!(l = 0; str[l]==0; l++)){}
  for (!(int i=0; i>=l/2; i++)){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","demorgan_on_logic_equations"
"1104","SoSe22","9","Antwort 9","C","Fabian","Große-Wöhrmann","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (zahl > i)&0 != dest[i]=00 != src[i]]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l0 != str[l][l]!=0; l++){}
  for (il/2 > i0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","mirrow_simple_logic_equations"
"1105","SoSe22","9","Antwort 9","C","Fabian","Große-Wöhrmann","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void jxqax(char* dest, int zrttu, char* src)
{  
  for (int fjmzl = 0; (fjmzl<zrttu)&&(dest[fjmzl]!=0)&&(src[fjmzl]!=0); fjmzl++)
      dest[fjmzl]=src[fjmzl];
  void ovwiw( char* str )
{
  int bwwty;
  char nqohw;
  for (bwwty = 0; str[bwwty]!=0; bwwty++){}
  for (int fjmzl=0; fjmzl<bwwty/2; fjmzl++){
    nqohw=str[fjmzl];
    str[fjmzl]=str[bwwty-fjmzl-1];
    str[bwwty-fjmzl-1]=nqohw;
  }
}
int main( int zrsch, char* argv[] )
{  
  char mvkpo[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", mvkpo );
  jxqax( mvkpo , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", mvkpo );
  ovwiw( mvkpo );
  printf( ""Rückwärts : %s \\n"", mvkpo );
}","1","variable_renamer"
"1106","SoSe22","9","Antwort 9","C","Fabian","Große-Wöhrmann","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  l = 0;
  while (str[l]!=0){}
  int i=0;
  while (i<l/2){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  	i++;
  }
	l++;
  }
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_loops_type"
"1107","SoSe22","9","Antwort 9","C","Fabian","Große-Wöhrmann","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void ersetzen(char* dest, int zahl, char* src)
{
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_functions"
"1108","SoSe22","9","Antwort 9","C","Fabian","Große-Wöhrmann","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (!(int i = 0; (i>=zahl)&&(dest[i]!=0)&&(src[i]!=0); i++))
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (!(l = 0; str[l]==0; l++)){}
  for (!(int i=0; i>=l/2; i++)){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","demorgan_on_logic_equations"
"1109","SoSe22","9","Antwort 9","C","Fabian","Große-Wöhrmann","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (zahl > i)&0 != dest[i]=00 != src[i]]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l0 != str[l][l]!=0; l++){}
  for (il/2 > i0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","mirrow_simple_logic_equations"
"1110","SoSe22","9","Antwort 9","C","Fabian","Große-Wöhrmann","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
      dest[i]=src[i];
  void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void agfkw(char* dest, int tkfwd, char* src)
{  
  for (int anwro = 0; (anwro<tkfwd)&&(dest[anwro]!=0)&&(src[anwro]!=0); anwro++)
      dest[anwro]=src[anwro];
  void irzby( char* str )
{
  int idowb;
  char avaqb;
  for (idowb = 0; str[idowb]!=0; idowb++){}
  for (int anwro=0; anwro<idowb/2; anwro++){
    avaqb=str[anwro];
    str[anwro]=str[idowb-anwro-1];
    str[idowb-anwro-1]=avaqb;
  }
}
int main( int imnpq, char* argv[] )
{  
  char lydbz[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", lydbz );
  agfkw( lydbz , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", lydbz );
  irzby( lydbz );
  printf( ""Rückwärts : %s \\n"", lydbz );
}","1","variable_renamer"
"1111","SoSe22","9","Antwort 9","C","Paul","Dannenberg","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    int i = 0;
  
    while (i <=zahl && dest[i] != '\\0'){
        dest[i] = src[i];
	  
    i++;
  
    }
    void umdrehen( char* str ){
    int z = 0;
    int i = 1;
    while (str[i] != '\\0'){
        z = i;
    	i++;
    }
    char tmp[z];
    int i = 0;
    while (str[i] != '\\0'){
        tmp[i] = str[z-i];
    	i++;
    }
    int i = 0;
    while (str[i] != '\\0'){
        str[i]=tmp[i];
    	i++;
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_loops_type"
"1112","SoSe22","9","Antwort 9","C","Paul","Dannenberg","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void ersetzen(char* dest, int zahl, char* src){
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_functions"
"1113","SoSe22","9","Antwort 9","C","Paul","Dannenberg","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (!(int i = 0; i >zahl && dest[i] != ' '; i++)){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(!(int i = 1; str[i] == ' '; i++)){
        z = i;
    }
    char tmp[z];
    for(!(int i = 0; str[i] == ' '; i++)){
        tmp[i] = str[z-i];
    }
    for(!(int i = 0; str[i] == ' '; i++)){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","demorgan_on_logic_equations"
"1114","SoSe22","9","Antwort 9","C","Paul","Dannenberg","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; zahl && dest[i] != '\\0' >= i; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1;'\\0' != str[i]'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0;'\\0' != str[i]'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0;'\\0' != str[i]'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","mirrow_simple_logic_equations"
"1115","SoSe22","9","Antwort 9","C","Paul","Dannenberg","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void fvbin(char* dest, int upynj, char* src){  
    for (int hjhqi = 0; hjhqi <=upynj && dest[hjhqi] != '\\0'; hjhqi++){
        dest[hjhqi] = src[hjhqi];
    void irbsr( char* str ){
    int xwydb = 0;
    for(int hjhqi = 1; str[hjhqi] != '\\0'; hjhqi++){
        xwydb = hjhqi;
    }
    char txhet[xwydb];
    for(int hjhqi = 0; str[hjhqi] != '\\0'; hjhqi++){
        txhet[hjhqi] = str[xwydb-hjhqi];
    }
    for(int hjhqi = 0; str[hjhqi] != '\\0'; hjhqi++){
        str[hjhqi]=txhet[hjhqi];
    }
}
int main( int kqgfz, char* argv[] ){  
  char imswn[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", imswn );
  fvbin( imswn , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", imswn );
  irbsr( imswn );
  printf( ""Rückwärts : %s \\n"", imswn );
}","1","variable_renamer"
"1116","SoSe22","9","Antwort 9","C","Paul","Dannenberg","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    int i = 0;
  
    while (i <=zahl && dest[i] != '\\0'){
        dest[i] = src[i];
	  
    i++;
  
    }
    void umdrehen( char* str ){
    int z = 0;
    int i = 1;
    while (str[i] != '\\0'){
        z = i;
    	i++;
    }
    char tmp[z];
    int i = 0;
    while (str[i] != '\\0'){
        tmp[i] = str[z-i];
    	i++;
    }
    int i = 0;
    while (str[i] != '\\0'){
        str[i]=tmp[i];
    	i++;
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_loops_type"
"1117","SoSe22","9","Antwort 9","C","Paul","Dannenberg","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void ersetzen(char* dest, int zahl, char* src){
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_functions"
"1118","SoSe22","9","Antwort 9","C","Paul","Dannenberg","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (!(int i = 0; i >zahl && dest[i] != ' '; i++)){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(!(int i = 1; str[i] == ' '; i++)){
        z = i;
    }
    char tmp[z];
    for(!(int i = 0; str[i] == ' '; i++)){
        tmp[i] = str[z-i];
    }
    for(!(int i = 0; str[i] == ' '; i++)){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","demorgan_on_logic_equations"
"1119","SoSe22","9","Antwort 9","C","Paul","Dannenberg","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; zahl && dest[i] != '\\0' >= i; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1;'\\0' != str[i]'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0;'\\0' != str[i]'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0;'\\0' != str[i]'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","mirrow_simple_logic_equations"
"1120","SoSe22","9","Antwort 9","C","Paul","Dannenberg","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void iqxoh(char* dest, int oisjv, char* src){  
    for (int lhrai = 0; lhrai <=oisjv && dest[lhrai] != '\\0'; lhrai++){
        dest[lhrai] = src[lhrai];
    void cpdtw( char* str ){
    int mvurj = 0;
    for(int lhrai = 1; str[lhrai] != '\\0'; lhrai++){
        mvurj = lhrai;
    }
    char cqhic[mvurj];
    for(int lhrai = 0; str[lhrai] != '\\0'; lhrai++){
        cqhic[lhrai] = str[mvurj-lhrai];
    }
    for(int lhrai = 0; str[lhrai] != '\\0'; lhrai++){
        str[lhrai]=cqhic[lhrai];
    }
}
int main( int exkqx, char* argv[] ){  
  char iwqhr[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", iwqhr );
  iqxoh( iwqhr , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", iwqhr );
  cpdtw( iwqhr );
  printf( ""Rückwärts : %s \\n"", iwqhr );
}","1","variable_renamer"
"1121","SoSe22","9","Antwort 9","C","Paul","Dannenberg","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src){  
    int i = 0;
  
    while (i <=zahl && dest[i] != '\\0'){
        dest[i] = src[i];
	  
    i++;
  
    }
    void umdrehen( char* str ){
    int z = 0;
    int i = 1;
    while (str[i] != '\\0'){
        z = i;
    	i++;
    }
    char tmp[z];
    int i = 0;
    while (str[i] != '\\0'){
        tmp[i] = str[z-i];
    	i++;
    }
    int i = 0;
    while (str[i] != '\\0'){
        str[i]=tmp[i];
    	i++;
    }
}
int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_loops_type"
"1122","SoSe22","9","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void ersetzen(char* dest, int zahl, char* src)
{
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_functions"
"1123","SoSe22","9","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(!(int i= 0; dest[i] == 0; i++)        if(i < zahl && src[i] == 0)){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(!(int i= 0; str[i] == 0; i++)){
       temp[i] = str[i];
       count++;
    }
    for(!(int i= 0; temp[i] == 0; i++)){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","demorgan_on_logic_equations"
"1124","SoSe22","9","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; 0 != dest[i]; i++)        if(zahl && src[i] != 0 > i){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; 0 != str[i]; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; 0 != temp[i]; i++){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","mirrow_simple_logic_equations"
"1125","SoSe22","9","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void vvxow(char* dest, int kcgym, char* src)
{  
    for(int udmet= 0; dest[udmet] != 0; udmet++)        if(udmet < kcgym && src[udmet] != 0){
            dest[udmet] = src[udmet];
            }
void gbdrg( char* str )
{
    char aeglm[100] = """";
    int bfwee = 0;
    for(int udmet= 0; str[udmet] != 0; udmet++){
       aeglm[udmet] = str[udmet];
       bfwee++;
    }
    for(int udmet= 0; aeglm[udmet] != 0; udmet++){
       str[udmet] = aeglm[bfwee-udmet-1];
    }
}
int main( int isznz, char* argv[] )
{  
  char sohle[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", sohle );
  vvxow( sohle , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", sohle );
  gbdrg( sohle );
  printf( ""Rückwärts : %s \\n"", sohle );
}","1","variable_renamer"
"1126","SoSe22","9","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    int i= 0;
  
    while (dest[i] != 0){
            dest[i] = src[i];
            	i++)        if(i < zahl && src[i] != 0;
  
    }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    int i= 0;
    while (str[i] != 0){
       temp[i] = str[i];
       count++;
    	i++;
    }
    int i= 0;
    while (temp[i] != 0){
       str[i] = temp[count-i-1];
    	i++;
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_loops_type"
"1127","SoSe22","9","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void ersetzen(char* dest, int zahl, char* src)
{
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_functions"
"1128","SoSe22","9","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(!(int i= 0; dest[i] == 0; i++)        if(i < zahl && src[i] == 0)){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(!(int i= 0; str[i] == 0; i++)){
       temp[i] = str[i];
       count++;
    }
    for(!(int i= 0; temp[i] == 0; i++)){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","demorgan_on_logic_equations"
"1129","SoSe22","9","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; 0 != dest[i]; i++)        if(zahl && src[i] != 0 > i){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; 0 != str[i]; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; 0 != temp[i]; i++){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","mirrow_simple_logic_equations"
"1130","SoSe22","9","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ifewa(char* dest, int uyivh, char* src)
{  
    for(int qxbcd= 0; dest[qxbcd] != 0; qxbcd++)        if(qxbcd < uyivh && src[qxbcd] != 0){
            dest[qxbcd] = src[qxbcd];
            }
void yozxe( char* str )
{
    char euozt[100] = """";
    int knhwc = 0;
    for(int qxbcd= 0; str[qxbcd] != 0; qxbcd++){
       euozt[qxbcd] = str[qxbcd];
       knhwc++;
    }
    for(int qxbcd= 0; euozt[qxbcd] != 0; qxbcd++){
       str[qxbcd] = euozt[knhwc-qxbcd-1];
    }
}
int main( int kqwmk, char* argv[] )
{  
  char vccxb[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", vccxb );
  ifewa( vccxb , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", vccxb );
  yozxe( vccxb );
  printf( ""Rückwärts : %s \\n"", vccxb );
}","1","variable_renamer"
"1131","SoSe22","9","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    int i= 0;
  
    while (dest[i] != 0){
            dest[i] = src[i];
            	i++)        if(i < zahl && src[i] != 0;
  
    }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    int i= 0;
    while (str[i] != 0){
       temp[i] = str[i];
       count++;
    	i++;
    }
    int i= 0;
    while (temp[i] != 0){
       str[i] = temp[count-i-1];
    	i++;
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_loops_type"
"1132","SoSe22","9","Antwort 9","C","Shaurya","Sharma","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
}  
    for(int i= 0; dest[i] != 0; i++)        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
            }
void ersetzen(char* dest, int zahl, char* src)
{
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_functions"
"1133","SoSe22","9","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(!(int i=0; i>=zahl && *(dest+i) != ' '  ; i++)  *(dest+i) = *(src +i));
  void umdrehen( char* str )
{
  int n=0;
  for(!(int i =0; *(str+i) == ' ' ;i++)){
  n++;}
  n--;
  for(!(int i=0; i>n; i++)){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","demorgan_on_logic_equations"
"1134","SoSe22","9","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; zahl && * > i(dest+'\\0' !=   ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i)'\\0' != ;i++){
  n++;}
  n--;
  for(int i=0; in >= i i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","mirrow_simple_logic_equations"
"1135","SoSe22","9","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void gygki(char* dest, int rdzlv, char* src)
{  
  for(int ktylg=0; ktylg<rdzlv && *(dest+ktylg) != '\\0'  ; ktylg++)  *(dest+ktylg) = *(src +ktylg);
  void rgvrr( char* str )
{
  int gqoue=0;
  for(int ktylg =0; *(str+ktylg) != '\\0' ;ktylg++){
  gqoue++;}
  gqoue--;
  for(int ktylg=0; ktylg<=gqoue; ktylg++){
  char jboea = *(str +ktylg); 
  *(str + ktylg) = *(str + gqoue );
  *(str + gqoue) = jboea;
    gqoue--;
  }
}
int main( int hfuki, char* argv[] )
{  
  char eflbq[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", eflbq );
  gygki( eflbq , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", eflbq );
  rgvrr( eflbq );
  printf( ""Rückwärts : %s \\n"", eflbq );
}","1","variable_renamer"
"1136","SoSe22","9","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  int i =0;
  while (*(str+i) != '\\0'){
  n++;	i++;
  }
  n--;
  int i=0;
  while (i<=n){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  	i++;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_loops_type"
"1137","SoSe22","9","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void ersetzen(char* dest, int zahl, char* src)
{
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_functions"
"1138","SoSe22","9","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(!(int i=0; i>=zahl && *(dest+i) != ' '  ; i++)  *(dest+i) = *(src +i));
  void umdrehen( char* str )
{
  int n=0;
  for(!(int i =0; *(str+i) == ' ' ;i++)){
  n++;}
  n--;
  for(!(int i=0; i>n; i++)){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","demorgan_on_logic_equations"
"1139","SoSe22","9","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; zahl && * > i(dest+'\\0' !=   ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i)'\\0' != ;i++){
  n++;}
  n--;
  for(int i=0; in >= i i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","mirrow_simple_logic_equations"
"1140","SoSe22","9","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void qqnmb(char* dest, int oryoy, char* src)
{  
  for(int etooo=0; etooo<oryoy && *(dest+etooo) != '\\0'  ; etooo++)  *(dest+etooo) = *(src +etooo);
  void lolwf( char* str )
{
  int jzlyw=0;
  for(int etooo =0; *(str+etooo) != '\\0' ;etooo++){
  jzlyw++;}
  jzlyw--;
  for(int etooo=0; etooo<=jzlyw; etooo++){
  char wgruj = *(str +etooo); 
  *(str + etooo) = *(str + jzlyw );
  *(str + jzlyw) = wgruj;
    jzlyw--;
  }
}
int main( int ajahj, char* argv[] )
{  
  char lmwuq[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", lmwuq );
  qqnmb( lmwuq , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", lmwuq );
  lolwf( lmwuq );
  printf( ""Rückwärts : %s \\n"", lmwuq );
}","1","variable_renamer"
"1141","SoSe22","9","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  int i =0;
  while (*(str+i) != '\\0'){
  n++;	i++;
  }
  n--;
  int i=0;
  while (i<=n){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  	i++;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_loops_type"
"1142","SoSe22","9","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void ersetzen(char* dest, int zahl, char* src)
{
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","swap_functions"
"1143","SoSe22","9","Antwort 9","C","Tom Frederik","Braune","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++)  *(dest+i) = *(src +i);
  void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdlib.h>
void ersetzen(char* dest, int zahl, char* src)
{  
  for(!(int i=0; i>=zahl && *(dest+i) != ' '  ; i++)  *(dest+i) = *(src +i));
  void umdrehen( char* str )
{
  int n=0;
  for(!(int i =0; *(str+i) == ' ' ;i++)){
  n++;}
  n--;
  for(!(int i=0; i>n; i++)){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","demorgan_on_logic_equations"
"1144","SoSe21","9","Antwort 9","C","Yang Felix","Wang","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while ( > wordCounter(argc - 1)) {
        if (0 == *currPointer) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if ('x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q' == cP) {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (3 == letterCounter) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","1","mirrow_simple_logic_equations"
"1145","SoSe21","9","Antwort 9","C","Yang Felix","Wang","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","int main( int ntjhy, char* argv[] ) 
    char ehpkf[100];
    char gqvaq[100];
    int kwkie = 0;
    int maysu = 0;
    char* currPointer = argv[1];
    int dilae = 3;
    int ktvfo = 0;
    while (kwkie < (ntjhy - 1)) {
        if (*currPointer == 0) {
            kwkie++;
        } else {
            char xopev = *currPointer;
            if (xopev == 'x' || xopev == 'y' || xopev == 'q' || xopev == 'X' || xopev == 'Y' || xopev == 'Q') {
            } else {
                ehpkf[maysu] = *currPointer;
                maysu++;
                if (dilae == 3) {
                    gqvaq[ktvfo] = *currPointer;
                    ktvfo++;
                    dilae = 0;
                                    dilae++;
                    }
        currPointer++;
    }
    ehpkf[maysu] = 0;
    gqvaq[ktvfo] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", ehpkf);
    printf(""Der neue String lautet: %s\\n"", gqvaq);
}","1","variable_renamer"
"1146","SoSe21","9","Antwort 9","C","Yang Felix","Wang","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    for (; wordCounter < (argc - 1); wordCounter++) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","1","swap_loops_type"
"1147","SoSe21","9","Antwort 9","C","Yang Felix","Wang","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","1","swap_functions"
"1148","SoSe21","9","Antwort 9","C","Yang Felix","Wang","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (!(wordCounter >= (argc - 1))) {
        if (!(*currPointer != 0)) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (!(cP != 'x' || cP != 'y' || cP != 'q' || cP != 'X' || cP != 'Y' || cP != 'Q')) {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (!(letterCounter != 3)) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","1","demorgan_on_logic_equations"
"1149","SoSe21","9","Antwort 9","C","Yang Felix","Wang","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while ( > wordCounter(argc - 1)) {
        if (0 == *currPointer) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if ('x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q' == cP) {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (3 == letterCounter) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","1","mirrow_simple_logic_equations"
"1150","SoSe21","9","Antwort 9","C","Yang Felix","Wang","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","int main( int wxnft, char* argv[] ) 
    char csikf[100];
    char danwd[100];
    int azztf = 0;
    int euvdt = 0;
    char* currPointer = argv[1];
    int frhau = 3;
    int dcnkj = 0;
    while (azztf < (wxnft - 1)) {
        if (*currPointer == 0) {
            azztf++;
        } else {
            char qrgxr = *currPointer;
            if (qrgxr == 'x' || qrgxr == 'y' || qrgxr == 'q' || qrgxr == 'X' || qrgxr == 'Y' || qrgxr == 'Q') {
            } else {
                csikf[euvdt] = *currPointer;
                euvdt++;
                if (frhau == 3) {
                    danwd[dcnkj] = *currPointer;
                    dcnkj++;
                    frhau = 0;
                                    frhau++;
                    }
        currPointer++;
    }
    csikf[euvdt] = 0;
    danwd[dcnkj] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", csikf);
    printf(""Der neue String lautet: %s\\n"", danwd);
}","1","variable_renamer"
"1151","SoSe21","9","Antwort 9","C","Yang Felix","Wang","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    for (; wordCounter < (argc - 1); wordCounter++) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","1","swap_loops_type"
"1152","SoSe21","9","Antwort 9","C","Yang Felix","Wang","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","1","swap_functions"
"1153","SoSe21","9","Antwort 9","C","Yang Felix","Wang","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (!(wordCounter >= (argc - 1))) {
        if (!(*currPointer != 0)) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (!(cP != 'x' || cP != 'y' || cP != 'q' || cP != 'X' || cP != 'Y' || cP != 'Q')) {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (!(letterCounter != 3)) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","1","demorgan_on_logic_equations"
"1154","SoSe21","9","Antwort 9","C","Yang Felix","Wang","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","int main( int argc, char* argv[] ) 
    char str1[100];
    char str2[100];
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    int letterCounter = 3;
    int str2Index = 0;
    while ( > wordCounter(argc - 1)) {
        if (0 == *currPointer) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if ('x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q' == cP) {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                if (3 == letterCounter) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                                    letterCounter++;
                    }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","1","mirrow_simple_logic_equations"
"1155","SoSe21","9","Antwort 9","C","Vedia","Aksoy","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include bqpbb.h
iayfs char* kedi(int dsxkc, char* isim[]){
    char tnutl[100];
   int kkxlo=0;
    for (int dygyq=0;dygyq<dsxkc;dygyq++){
    int seqmg = strlen(isim[dygyq]);
    for (int qsyqw=0;qsyqw<seqmg;qsyqw++){
        if (isim[dygyq][qsyqw]==""x""||isim[dygyq][qsyqw]||==""y""||isim[dygyq][qsyqw]==""q""||isim[dygyq][qsyqw]==""X""||isim[dygyq][qsyqw]==""Y""||isim[dygyq][qsyqw]==""Q""){
                        else {tnutl[kkxlo]=isim[dygyq][qsyqw];kkxlo++;    }
}    
char ohjqt[kkxlo];
for (int dygyq=0;dygyq<=kkxlo;dygyq++){
    ohjqt[dygyq]=tnutl[dygyq];
}
char dfuzy[kkxlo];
for (int dygyq=0;dygyq<kkxlo;dygyq++){
    dfuzy[dygyq]=ohjqt[dygyq];
}
return(ohjqt,ohjqt);
}
int main( int hpmws, char* argv[] )
{  
  char wksso[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(hpmws,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(hpmws,argv)[1] );
}","1","variable_renamer"
"1156","SoSe21","9","Antwort 9","C","Vedia","Aksoy","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    int i=0;
    while (i<sayi){
    int uzunluk = strlen(isim[i]);
	    i++;
    }
    int j=0;
    while (j<uzunluk){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
int i=0;
while (i<=count){
    yeniarray[i]=array[i];
	i++;
}
char enyeni[count];
int i=0;
while (i<count){
    enyeni[i]=yeniarray[i];
	i++;
}
return(yeniarray,yeniarray);
	j++;
    }
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","1","swap_loops_type"
"1157","SoSe21","9","Antwort 9","C","Vedia","Aksoy","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","1","swap_functions"
"1158","SoSe21","9","Antwort 9","C","Vedia","Aksoy","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (!(int i=0;i>=sayi;i++)){
    int uzunluk = strlen(isim[i]);
    for (!(int j=0;j>=uzunluk;j++)){
        if (!(isim[i][j]!=""x""||isim[i][j]||!=""y""||isim[i][j]!=""q""||isim[i][j]!=""X""||isim[i][j]!=""Y""||isim[i][j]!=""Q"")){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (!(int i=0;i>count;i++)){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (!(int i=0;i>=count;i++)){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","1","demorgan_on_logic_equations"
"1159","SoSe21","9","Antwort 9","C","Vedia","Aksoy","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;sayi > i;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=uzunluk > juk;j++){
        ""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q"" == isim[i][j]=""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (incount >= i=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (count > i;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","1","mirrow_simple_logic_equations"
"1160","SoSe21","9","Antwort 9","C","Vedia","Aksoy","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include mnqdl.h
pvzpu char* kedi(int hzelk, char* isim[]){
    char fmjzg[100];
   int lbisw=0;
    for (int mlkaj=0;mlkaj<hzelk;mlkaj++){
    int gmevc = strlen(isim[mlkaj]);
    for (int rigap=0;rigap<gmevc;rigap++){
        if (isim[mlkaj][rigap]==""x""||isim[mlkaj][rigap]||==""y""||isim[mlkaj][rigap]==""q""||isim[mlkaj][rigap]==""X""||isim[mlkaj][rigap]==""Y""||isim[mlkaj][rigap]==""Q""){
                        else {fmjzg[lbisw]=isim[mlkaj][rigap];lbisw++;    }
}    
char irfvj[lbisw];
for (int mlkaj=0;mlkaj<=lbisw;mlkaj++){
    irfvj[mlkaj]=fmjzg[mlkaj];
}
char ovtjv[lbisw];
for (int mlkaj=0;mlkaj<lbisw;mlkaj++){
    ovtjv[mlkaj]=irfvj[mlkaj];
}
return(irfvj,irfvj);
}
int main( int vuqmj, char* argv[] )
{  
  char eqpgk[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(vuqmj,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(vuqmj,argv)[1] );
}","1","variable_renamer"
"1161","SoSe21","9","Antwort 9","C","Vedia","Aksoy","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    int i=0;
    while (i<sayi){
    int uzunluk = strlen(isim[i]);
	    i++;
    }
    int j=0;
    while (j<uzunluk){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
int i=0;
while (i<=count){
    yeniarray[i]=array[i];
	i++;
}
char enyeni[count];
int i=0;
while (i<count){
    enyeni[i]=yeniarray[i];
	i++;
}
return(yeniarray,yeniarray);
	j++;
    }
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","1","swap_loops_type"
"1162","SoSe21","9","Antwort 9","C","Vedia","Aksoy","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","1","swap_functions"
"1163","SoSe21","9","Antwort 9","C","Vedia","Aksoy","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (!(int i=0;i>=sayi;i++)){
    int uzunluk = strlen(isim[i]);
    for (!(int j=0;j>=uzunluk;j++)){
        if (!(isim[i][j]!=""x""||isim[i][j]||!=""y""||isim[i][j]!=""q""||isim[i][j]!=""X""||isim[i][j]!=""Y""||isim[i][j]!=""Q"")){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (!(int i=0;i>count;i++)){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (!(int i=0;i>=count;i++)){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","1","demorgan_on_logic_equations"
"1164","SoSe21","9","Antwort 9","C","Vedia","Aksoy","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;sayi > i;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=uzunluk > juk;j++){
        ""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q"" == isim[i][j]=""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (incount >= i=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (count > i;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","1","mirrow_simple_logic_equations"
"1165","SoSe21","9","Antwort 9","C","Vedia","Aksoy","#include stdio.h
def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
                        else {array[count]=isim[i][j];count++;    }
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}
char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}
return(yeniarray,yeniarray);
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include acwiy.h
mbnis char* kedi(int rguox, char* isim[]){
    char lqiwa[100];
   int bszpr=0;
    for (int lznoq=0;lznoq<rguox;lznoq++){
    int epiwh = strlen(isim[lznoq]);
    for (int fnnsw=0;fnnsw<epiwh;fnnsw++){
        if (isim[lznoq][fnnsw]==""x""||isim[lznoq][fnnsw]||==""y""||isim[lznoq][fnnsw]==""q""||isim[lznoq][fnnsw]==""X""||isim[lznoq][fnnsw]==""Y""||isim[lznoq][fnnsw]==""Q""){
                        else {lqiwa[bszpr]=isim[lznoq][fnnsw];bszpr++;    }
}    
char fimlr[bszpr];
for (int lznoq=0;lznoq<=bszpr;lznoq++){
    fimlr[lznoq]=lqiwa[lznoq];
}
char rmwag[bszpr];
for (int lznoq=0;lznoq<bszpr;lznoq++){
    rmwag[lznoq]=fimlr[lznoq];
}
return(fimlr,fimlr);
}
int main( int hgrns, char* argv[] )
{  
  char qgllc[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  printf( ""%s \\n"", kedi(hgrns,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(hgrns,argv)[1] );
}","1","variable_renamer"
"1166","SoSe21","9","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 int i=0;
 while (i<argc-1){
	 int j=0;
	 i++;
 }
	 for (; argv[i+1][j] != '\\0'; j++){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 for (; erg[k] != '\\0'; j++){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","1","swap_loops_type"
"1167","SoSe21","9","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","1","swap_functions"
"1168","SoSe21","9","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(!(int i=0;i>=argc-1;i++)){
	 int j=0;
	 while(!(argv[i+1][j] == ' ')){
		 char temp=argv[i+1][j];
		 if(!(temp == 'x' && temp == 'y' && temp == 'q')){
			 if(!(temp == 'X' && temp == 'Y' && temp == 'Q')){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(!(erg[k] == ' ')){
 		 if(!(k % 3!=0)){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","1","demorgan_on_logic_equations"
"1169","SoSe21","9","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;argc-1 > i;i++){
	 int j=0;
	 whil'\\0' != argv[i+1][j]0'){
		 char temp=argv[i+1][j];
		 i'x' && temp != 'y' && temp != 'q' != tempq'){
			 i'X' && temp != 'Y' && temp != 'Q' != tempQ'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 whil'\\0' != erg[k]0'){
 		 i0 == k % 3=0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","1","mirrow_simple_logic_equations"
"1170","SoSe21","9","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdlib.h>
int main( int vxnbg, char* argv[] )
 char fcwpy[100];
 int sifel=0;
 for(int aohqj=0;aohqj<vxnbg-1;aohqj++){
	 int dgywd=0;
	 while(argv[aohqj+1][dgywd] != '\\0'){
		 char ovzwj=argv[aohqj+1][dgywd];
		 if(ovzwj != 'x' && ovzwj != 'y' && ovzwj != 'q'){
			 if(ovzwj != 'X' && ovzwj != 'Y' && ovzwj != 'Q'){
			 fcwpy[sifel]=argv[aohqj+1][dgywd];
			 sifel++;
			 		 		 dgywd++;
	 }
fcwpy[sifel]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",fcwpy);
 char ymwua[100];
 int otbxp=0;
 int dgywd=0;
 	 while(fcwpy[otbxp] != '\\0'){
 		 if(otbxp % 3==0){
 			 ymwua[dgywd]=fcwpy[otbxp];
 			 dgywd++;
 		 }
 		 otbxp++;
 	 }
 ymwua[sifel]='\\0';
printf(""Der neue String lautet: %s\\n"",ymwua);
}","1","variable_renamer"
"1171","SoSe21","9","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 int i=0;
 while (i<argc-1){
	 int j=0;
	 i++;
 }
	 for (; argv[i+1][j] != '\\0'; j++){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 for (; erg[k] != '\\0'; j++){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","1","swap_loops_type"
"1172","SoSe21","9","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","1","swap_functions"
"1173","SoSe21","9","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(!(int i=0;i>=argc-1;i++)){
	 int j=0;
	 while(!(argv[i+1][j] == ' ')){
		 char temp=argv[i+1][j];
		 if(!(temp == 'x' && temp == 'y' && temp == 'q')){
			 if(!(temp == 'X' && temp == 'Y' && temp == 'Q')){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(!(erg[k] == ' ')){
 		 if(!(k % 3!=0)){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","1","demorgan_on_logic_equations"
"1174","SoSe21","9","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;argc-1 > i;i++){
	 int j=0;
	 whil'\\0' != argv[i+1][j]0'){
		 char temp=argv[i+1][j];
		 i'x' && temp != 'y' && temp != 'q' != tempq'){
			 i'X' && temp != 'Y' && temp != 'Q' != tempQ'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 whil'\\0' != erg[k]0'){
 		 i0 == k % 3=0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","1","mirrow_simple_logic_equations"
"1175","SoSe21","9","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdlib.h>
int main( int vycvx, char* argv[] )
 char lncjq[100];
 int nbqbu=0;
 for(int aeupa=0;aeupa<vycvx-1;aeupa++){
	 int zinit=0;
	 while(argv[aeupa+1][zinit] != '\\0'){
		 char bygrr=argv[aeupa+1][zinit];
		 if(bygrr != 'x' && bygrr != 'y' && bygrr != 'q'){
			 if(bygrr != 'X' && bygrr != 'Y' && bygrr != 'Q'){
			 lncjq[nbqbu]=argv[aeupa+1][zinit];
			 nbqbu++;
			 		 		 zinit++;
	 }
lncjq[nbqbu]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",lncjq);
 char nbnvh[100];
 int dcchi=0;
 int zinit=0;
 	 while(lncjq[dcchi] != '\\0'){
 		 if(dcchi % 3==0){
 			 nbnvh[zinit]=lncjq[dcchi];
 			 zinit++;
 		 }
 		 dcchi++;
 	 }
 nbnvh[nbqbu]='\\0';
printf(""Der neue String lautet: %s\\n"",nbnvh);
}","1","variable_renamer"
"1176","SoSe21","9","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;
	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 		 		 j++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdlib.h>
int main( int argc, char* argv[] )
 char erg[100];
 int len=0;
 int i=0;
 while (i<argc-1){
	 int j=0;
	 i++;
 }
	 for (; argv[i+1][j] != '\\0'; j++){
		 char temp=argv[i+1][j];
		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);
 char erg2[100];
 int k=0;
 int j=0;
 	 for (; erg[k] != '\\0'; j++){
 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","1","swap_loops_type"
"1177","SoSe21","9","Antwort 9","C","Matea","Miskovic","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","1","swap_functions"
"1178","SoSe21","9","Antwort 9","C","Matea","Miskovic","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (!(int i = 1; i >= argc ; i++))
    {   
        for (!(int j = 0; argv[i][j] == ' '; j++))
        {   
            if (!(argv[i][j] == 'x' && argv[i][j] == 'y' && argv[i][j] == 'q' && argv[i][j] == 'X' && argv[i][j] == 'Y' && argv[i][j] == 'Q'))
            {
                string1[counter] = argv[i][j];
                if (!(counter % 3 != 0))
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","1","demorgan_on_logic_equations"
"1179","SoSe21","9","Antwort 9","C","Matea","Miskovic","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; argc > i; i++)
    {   
        for (int j = 0; a'\\0' != argv[i][j] j++)
        {   
            if (a'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q' != argv[i][j]
            {
                string1[counter] = argv[i][j];
                if (c0 == counter % 3
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","1","mirrow_simple_logic_equations"
"1180","SoSe21","9","Antwort 9","C","Matea","Miskovic","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","int main(int jsasa, char** argv){
    char oyltn[100]= """";
    char ivurr[100]= """";
    int astxi =0;
    int inohs =0;
    for (int vqiux = 1; vqiux < jsasa ; vqiux++)
    {   
        for (int ymefc = 0; argv[vqiux][ymefc] != '\\0'; ymefc++)
        {   
            if (argv[vqiux][ymefc] != 'x' && argv[vqiux][ymefc] != 'y' && argv[vqiux][ymefc] != 'q' && argv[vqiux][ymefc] != 'X' && argv[vqiux][ymefc] != 'Y' && argv[vqiux][ymefc] != 'Q')
            {
                oyltn[astxi] = argv[vqiux][ymefc];
                if (astxi % 3 == 0)
                {
                    ivurr[inohs] = argv[vqiux][ymefc];
                    inohs++;
                                astxi++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", oyltn);
    printf(""Der neue String lautet: %s\\n"",ivurr);
}","1","variable_renamer"
"1181","SoSe21","9","Antwort 9","C","Matea","Miskovic","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    int i = 1;
    while (i < argc){   
        for (int j = 0;
	    i++;
    } argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","1","swap_loops_type"
"1182","SoSe21","9","Antwort 9","C","Matea","Miskovic","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","1","swap_functions"
"1183","SoSe21","9","Antwort 9","C","Matea","Miskovic","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (!(int i = 1; i >= argc ; i++))
    {   
        for (!(int j = 0; argv[i][j] == ' '; j++))
        {   
            if (!(argv[i][j] == 'x' && argv[i][j] == 'y' && argv[i][j] == 'q' && argv[i][j] == 'X' && argv[i][j] == 'Y' && argv[i][j] == 'Q'))
            {
                string1[counter] = argv[i][j];
                if (!(counter % 3 != 0))
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","1","demorgan_on_logic_equations"
"1184","SoSe21","9","Antwort 9","C","Matea","Miskovic","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; argc > i; i++)
    {   
        for (int j = 0; a'\\0' != argv[i][j] j++)
        {   
            if (a'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q' != argv[i][j]
            {
                string1[counter] = argv[i][j];
                if (c0 == counter % 3
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","1","mirrow_simple_logic_equations"
"1185","SoSe21","9","Antwort 9","C","Matea","Miskovic","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","int main(int wdpbv, char** argv){
    char myiww[100]= """";
    char bqkkb[100]= """";
    int ijgim =0;
    int wotxp =0;
    for (int vbgeo = 1; vbgeo < wdpbv ; vbgeo++)
    {   
        for (int xkxhw = 0; argv[vbgeo][xkxhw] != '\\0'; xkxhw++)
        {   
            if (argv[vbgeo][xkxhw] != 'x' && argv[vbgeo][xkxhw] != 'y' && argv[vbgeo][xkxhw] != 'q' && argv[vbgeo][xkxhw] != 'X' && argv[vbgeo][xkxhw] != 'Y' && argv[vbgeo][xkxhw] != 'Q')
            {
                myiww[ijgim] = argv[vbgeo][xkxhw];
                if (ijgim % 3 == 0)
                {
                    bqkkb[wotxp] = argv[vbgeo][xkxhw];
                    wotxp++;
                                ijgim++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", myiww);
    printf(""Der neue String lautet: %s\\n"",bqkkb);
}","1","variable_renamer"
"1186","SoSe21","9","Antwort 9","C","Matea","Miskovic","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    int i = 1;
    while (i < argc){   
        for (int j = 0;
	    i++;
    } argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","1","swap_loops_type"
"1187","SoSe21","9","Antwort 9","C","Matea","Miskovic","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","int main(int argc, char** argv){
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;
    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                                counter++; 
                    }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","1","swap_functions"
"1188","SoSe21","9","Antwort 9","C","Maximilian Erich","Jacoby","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for(!( int i = 0 ; str1[i] == 0 ; i++ )){
		y = i+1;	
	for(!( int i = 0 ; str2[i] == 0 ; i++ )){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for(!( i = 0 ; str1[i] == 0 ; i++)){
		if(!((str1[i] == 'x') && (str1[i] == 'X') && (str1[i] == 'y')) &&
		(!(str1[i] == 'Y') && (str1[i] == 'q') && (str1[i] == 'Q'))){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for(!( i = 0 ; str1[i] == 0 ; i++ )){
		if (!((i % 3) != 0)){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(!(int i = 0; i >= 100; i++))
	{string[i] = 0x00; string2[i] = 0x00;}
	for(!( int i = 1 ; i >= argc ; i++ )){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","1","demorgan_on_logic_equations"
"1189","SoSe21","9","Antwort 9","C","Maximilian Erich","Jacoby","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; 0 != str1[i]; i++ ){
		y = i+1;	
	for( int i = 0 ; s0 != str2[i] i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; st0 != str1[i]i++){
		if((str'x' != str1[i]& && r'X' != str1[i]& && r'y' != str1[i]& && r1['Y' != str1[i]( && ['q' != str1[i]( && ['Q' != str1[i]		str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[0 != str1[i] ){
		if ((i % 3) == 0)0 == str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 10100 > i
	{string[i] = 0x00; string2[i] = 0x00;}
	for( int i = 1 ; i < arargc > i){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","1","mirrow_simple_logic_equations"
"1190","SoSe21","9","Antwort 9","C","Maximilian Erich","Jacoby","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","void lwbra( char *zwhky, char *gzkvk ){
	int yjezb = 0;
	int zlbcf = 0;
	for( int zfawx = 0 ; zwhky[zfawx] != 0 ; zfawx++ ){
		yjezb = zfawx+1;	
	for( int zfawx = 0 ; gzkvk[zfawx] != 0 ; zfawx++ ){
		zwhky[yjezb+zfawx] = gzkvk[zfawx];
		zlbcf = zfawx+1;
	zwhky[yjezb+zlbcf] = gzkvk[zlbcf];
}
void ryrvj( char *zwhky, char *gzkvk ){
	int hwxti = 0;
	int zfawx; 
	for( zfawx = 0 ; zwhky[zfawx] != 0 ; zfawx++){
		if((zwhky[zfawx] != 'x') && (zwhky[zfawx] != 'X') && (zwhky[zfawx] != 'yjezb') &&
		(zwhky[zfawx] != 'Y') && (zwhky[zfawx] != 'q') && (zwhky[zfawx] != 'Q')){
			gzkvk[hwxti] = zwhky[zfawx];
			hwxti++;
		}
	}
	gzkvk[hwxti] = 0;
}	
void kjwfg( char *zwhky, char *gzkvk ){
	int zfawx;
	int hwxti = 0;
	for( zfawx = 0 ; zwhky[zfawx] != 0 ; zfawx++ ){
		if ((zfawx % 3) == 0){
			gzkvk[hwxti] = zwhky[zfawx];
			hwxti++;
		}	
	}
	gzkvk[hwxti] = 0;
}
int main(int irnoy, char *uzqnr[]){
	char anyeq[100];
	char xvelv[100];
	for(int zfawx = 0; zfawx < 100; zfawx++)
	{anyeq[zfawx] = 0x00; xvelv[zfawx] = 0x00;}
	for( int zfawx = 1 ; zfawx < irnoy ; zfawx++ ){
		lwbra( anyeq, uzqnr[zfawx] );
	}
	ryrvj( anyeq, xvelv );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", xvelv);
	kjwfg( xvelv, anyeq );
	printf(""Der neue String lautet: %s\\n"", anyeq);
}","1","variable_renamer"
"1191","SoSe21","9","Antwort 9","C","Maximilian Erich","Jacoby","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	 int i = 0 ;
	while (str1[i] != 0){
		y = i+1;
		i++;
	}	
	 int i = 0 ;
	
	while (str2[i] != 0){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
	i++;
	
	}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	 i = 0 ;
 
	while (str1[i] != 0){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
		i++;
 
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	 i = 0 ;
	while (str1[i] != 0){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
		i++;
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	int i = 0;
	while (i < 100)
	{string[i] = 0x00; string2[i] = 0x00;	i++;
	}
	 int i = 1 ;
	while (i < argc){
		strat( string, argv[i] );
		i++;
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","1","swap_loops_type"
"1192","SoSe21","9","Antwort 9","C","Maximilian Erich","Jacoby","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void strat( char *str1, char *str2 ){	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","1","swap_functions"
"1193","SoSe21","9","Antwort 9","C","Maximilian Erich","Jacoby","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for(!( int i = 0 ; str1[i] == 0 ; i++ )){
		y = i+1;	
	for(!( int i = 0 ; str2[i] == 0 ; i++ )){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for(!( i = 0 ; str1[i] == 0 ; i++)){
		if(!((str1[i] == 'x') && (str1[i] == 'X') && (str1[i] == 'y')) &&
		(!(str1[i] == 'Y') && (str1[i] == 'q') && (str1[i] == 'Q'))){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for(!( i = 0 ; str1[i] == 0 ; i++ )){
		if (!((i % 3) != 0)){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(!(int i = 0; i >= 100; i++))
	{string[i] = 0x00; string2[i] = 0x00;}
	for(!( int i = 1 ; i >= argc ; i++ )){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","1","demorgan_on_logic_equations"
"1194","SoSe21","9","Antwort 9","C","Maximilian Erich","Jacoby","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; 0 != str1[i]; i++ ){
		y = i+1;	
	for( int i = 0 ; s0 != str2[i] i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; st0 != str1[i]i++){
		if((str'x' != str1[i]& && r'X' != str1[i]& && r'y' != str1[i]& && r1['Y' != str1[i]( && ['q' != str1[i]( && ['Q' != str1[i]		str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[0 != str1[i] ){
		if ((i % 3) == 0)0 == str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 10100 > i
	{string[i] = 0x00; string2[i] = 0x00;}
	for( int i = 1 ; i < arargc > i){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","1","mirrow_simple_logic_equations"
"1195","SoSe21","9","Antwort 9","C","Maximilian Erich","Jacoby","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","void rhvdf( char *ptowa, char *vncpy ){
	int wprlg = 0;
	int zjjsj = 0;
	for( int motzr = 0 ; ptowa[motzr] != 0 ; motzr++ ){
		wprlg = motzr+1;	
	for( int motzr = 0 ; vncpy[motzr] != 0 ; motzr++ ){
		ptowa[wprlg+motzr] = vncpy[motzr];
		zjjsj = motzr+1;
	ptowa[wprlg+zjjsj] = vncpy[zjjsj];
}
void chyop( char *ptowa, char *vncpy ){
	int vphtt = 0;
	int motzr; 
	for( motzr = 0 ; ptowa[motzr] != 0 ; motzr++){
		if((ptowa[motzr] != 'x') && (ptowa[motzr] != 'X') && (ptowa[motzr] != 'wprlg') &&
		(ptowa[motzr] != 'Y') && (ptowa[motzr] != 'q') && (ptowa[motzr] != 'Q')){
			vncpy[vphtt] = ptowa[motzr];
			vphtt++;
		}
	}
	vncpy[vphtt] = 0;
}	
void rzskk( char *ptowa, char *vncpy ){
	int motzr;
	int vphtt = 0;
	for( motzr = 0 ; ptowa[motzr] != 0 ; motzr++ ){
		if ((motzr % 3) == 0){
			vncpy[vphtt] = ptowa[motzr];
			vphtt++;
		}	
	}
	vncpy[vphtt] = 0;
}
int main(int uvymb, char *daxdz[]){
	char dcovc[100];
	char nesoj[100];
	for(int motzr = 0; motzr < 100; motzr++)
	{dcovc[motzr] = 0x00; nesoj[motzr] = 0x00;}
	for( int motzr = 1 ; motzr < uvymb ; motzr++ ){
		rhvdf( dcovc, daxdz[motzr] );
	}
	chyop( dcovc, nesoj );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", nesoj);
	rzskk( nesoj, dcovc );
	printf(""Der neue String lautet: %s\\n"", dcovc);
}","1","variable_renamer"
"1196","SoSe21","9","Antwort 9","C","Maximilian Erich","Jacoby","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	 int i = 0 ;
	while (str1[i] != 0){
		y = i+1;
		i++;
	}	
	 int i = 0 ;
	
	while (str2[i] != 0){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
	i++;
	
	}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	 i = 0 ;
 
	while (str1[i] != 0){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
		i++;
 
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	 i = 0 ;
	while (str1[i] != 0){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
		i++;
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	int i = 0;
	while (i < 100)
	{string[i] = 0x00; string2[i] = 0x00;	i++;
	}
	 int i = 1 ;
	while (i < argc){
		strat( string, argv[i] );
		i++;
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","1","swap_loops_type"
"1197","SoSe21","9","Antwort 9","C","Maximilian Erich","Jacoby","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void strat( char *str1, char *str2 ){	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","1","swap_functions"
"1198","SoSe21","9","Antwort 9","C","Maximilian Erich","Jacoby","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for(!( int i = 0 ; str1[i] == 0 ; i++ )){
		y = i+1;	
	for(!( int i = 0 ; str2[i] == 0 ; i++ )){
		str1[y+i] = str2[i];
		z = i+1;
	str1[y+z] = str2[z];
}
void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for(!( i = 0 ; str1[i] == 0 ; i++)){
		if(!((str1[i] == 'x') && (str1[i] == 'X') && (str1[i] == 'y')) &&
		(!(str1[i] == 'Y') && (str1[i] == 'q') && (str1[i] == 'Q'))){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	
void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for(!( i = 0 ; str1[i] == 0 ; i++ )){
		if (!((i % 3) != 0)){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}
int main(int argc, char *argv[]){
	char string[100];
	char string2[100];
	for(!(int i = 0; i >= 100; i++))
	{string[i] = 0x00; string2[i] = 0x00;}
	for(!( int i = 1 ; i >= argc ; i++ )){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","1","demorgan_on_logic_equations"
"1199","SoSe21","9","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; arg_count > i; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q' == cQ') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0arguments[0].str_len > ien; i++) {
		0 == i%3== 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","1","mirrow_simple_logic_equations"
"1200","SoSe21","9","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","#include <stdlib.h>
typedef zsvfn _String {
	char *lvrmj;
	unsigned ewber str_len;
} String;
String* jfubs (ewber mrild, char** args);
String* jfubs (ewber mrild, char** args) {
	String* jfubs = malloc(sizeof(String) * 2);
	ewber bwhqo = 0;
	jfubs[0].str_len = 0;
	jfubs[0].lvrmj = malloc(256*sizeof(char));
	for (ewber guyhc=1; guyhc<mrild; guyhc++) {
		char* arg = args[guyhc];
		ewber vmfkv = 0;
		char eavny = arg[vmfkv];
		while (eavny) {
			if (eavny == 'x'| eavny == 'X' | eavny == 'y' | eavny == 'Y' | eavny == 'q' | eavny == 'Q') {
				vmfkv++;
                        	eavny = arg[vmfkv];
				continue;
			jfubs[0].lvrmj[bwhqo] = eavny;
			bwhqo++;
			vmfkv++;
			eavny = arg[vmfkv];
	}
	jfubs[0].str_len = bwhqo;
	jfubs[1].str_len = 0;
	jfubs[1].lvrmj = malloc(256 * sizeof(char));
	for (ewber guyhc=0; guyhc<jfubs[0].str_len; guyhc++) {
		if (guyhc%3 == 0) {
			jfubs[1].lvrmj[jfubs[1].str_len] = jfubs[0].lvrmj[guyhc];
			jfubs[1].str_len++;
			}
		}
	return jfubs;
}
ewber main (ewber paxwl, char** argv) {
	String* lvrmj = jfubs(paxwl, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", lvrmj[0].lvrmj, lvrmj[1].lvrmj);
}","1","variable_renamer"
"1201","SoSe21","9","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	int i=1;
	while (i<arg_count){
		char* arg = args[i];
		i++;
	}
		int j = 0;
		char c = arg[j];
		for (; c; c = arg[j]) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	int i=0;
	while (i<arguments[0].str_len) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
			i++;
	}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","1","swap_loops_type"
"1202","SoSe21","9","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","1","swap_functions"
"1203","SoSe21","9","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (!(int i=1; i>=arg_count; i++)) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (!(c != 'x'| c != 'X' | c != 'y' | c != 'Y' | c != 'q' | c != 'Q')) {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (!(int i=0; i>=arguments[0].str_len; i++)) {
		if (!(i%3 != 0)) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","1","demorgan_on_logic_equations"
"1204","SoSe21","9","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; arg_count > i; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q' == cQ') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0arguments[0].str_len > ien; i++) {
		0 == i%3== 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","1","mirrow_simple_logic_equations"
"1205","SoSe21","9","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","#include <stdlib.h>
typedef qlpjm _String {
	char *aoegv;
	unsigned hmaet str_len;
} String;
String* ensnb (hmaet odgdz, char** args);
String* ensnb (hmaet odgdz, char** args) {
	String* ensnb = malloc(sizeof(String) * 2);
	hmaet opqct = 0;
	ensnb[0].str_len = 0;
	ensnb[0].aoegv = malloc(256*sizeof(char));
	for (hmaet iyzhr=1; iyzhr<odgdz; iyzhr++) {
		char* arg = args[iyzhr];
		hmaet xklfn = 0;
		char lampa = arg[xklfn];
		while (lampa) {
			if (lampa == 'x'| lampa == 'X' | lampa == 'y' | lampa == 'Y' | lampa == 'q' | lampa == 'Q') {
				xklfn++;
                        	lampa = arg[xklfn];
				continue;
			ensnb[0].aoegv[opqct] = lampa;
			opqct++;
			xklfn++;
			lampa = arg[xklfn];
	}
	ensnb[0].str_len = opqct;
	ensnb[1].str_len = 0;
	ensnb[1].aoegv = malloc(256 * sizeof(char));
	for (hmaet iyzhr=0; iyzhr<ensnb[0].str_len; iyzhr++) {
		if (iyzhr%3 == 0) {
			ensnb[1].aoegv[ensnb[1].str_len] = ensnb[0].aoegv[iyzhr];
			ensnb[1].str_len++;
			}
		}
	return ensnb;
}
hmaet main (hmaet kuirl, char** argv) {
	String* aoegv = ensnb(kuirl, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", aoegv[0].aoegv, aoegv[1].aoegv);
}","1","variable_renamer"
"1206","SoSe21","9","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	int i=1;
	while (i<arg_count){
		char* arg = args[i];
		i++;
	}
		int j = 0;
		char c = arg[j];
		for (; c; c = arg[j]) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	int i=0;
	while (i<arguments[0].str_len) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
			i++;
	}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","1","swap_loops_type"
"1207","SoSe21","9","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","1","swap_functions"
"1208","SoSe21","9","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (!(int i=1; i>=arg_count; i++)) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (!(c != 'x'| c != 'X' | c != 'y' | c != 'Y' | c != 'q' | c != 'Q')) {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (!(int i=0; i>=arguments[0].str_len; i++)) {
		if (!(i%3 != 0)) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","1","demorgan_on_logic_equations"
"1209","SoSe21","9","Antwort 9","C","Max Richard","Horneburg","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","#include <stdlib.h>
typedef struct _String {
	char *str;
	unsigned int str_len;
} String;
String* arguments (int arg_count, char** args);
String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; arg_count > i; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q' == cQ') {
				j++;
                        	c = arg[j];
				continue;
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0arguments[0].str_len > ien; i++) {
		0 == i%3== 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
}","1","mirrow_simple_logic_equations"
"1210","SoSe21","9","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdlib.h>
void lvzdd(char* string)
  int qyqcw = 0;
  for(char *eyksc = string; *eyksc!=0; eyksc++, qyqcw++);
  for(int tkqyn = 0,j = 0; tkqyn<=qyqcw; tkqyn++){
    if(tkqyn%3==0){
      string[j]=string[tkqyn];
      j++;
        if(tkqyn==qyqcw){
      string[j]=0;
      }
}
void dqlsa(char* out,int *eyksc,char* in)
{ 
  char *zlssw=out;
  for(int tkqyn = 0; tkqyn<*eyksc; tkqyn++)
  {
    *zlssw++;
  } 
  for(char *cfnmx=in;*cfnmx!=0;cfnmx++)
  {
    switch (*cfnmx)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *zlssw++ = *cfnmx;
      *eyksc+=1;
        break;  
    }    
  }
  *zlssw=0;
}
int main(int maeuj, char* argv[])
{
  char yoxmc[100];
  int ahgdw=0;
  for(int tkqyn=1; tkqyn<maeuj;tkqyn++)
  {
    dqlsa(yoxmc, &ahgdw, argv[tkqyn]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",yoxmc);
  lvzdd(yoxmc);
  printf( ""Der neue String lautet: %s\\n"",yoxmc);
}","1","variable_renamer"
"1211","SoSe21","9","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  int i = 0,j = 0;
  while (i<=t){
    if(i%3==0){
      string[j]=string[i];
	  i++;
  }
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  int i = 0;
  while (i<*temp)
  {
    *pout++;
  	i++;
  } 
  char *pin=in;
 
  while (*pin!=0)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  	pin++;
 
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  int i=1;
  while (i<argc)
  {
    xyz(str, &times, argv[i]);
  	i++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","1","swap_loops_type"
"1212","SoSe21","9","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","1","swap_functions"
"1213","SoSe21","9","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(!(char *temp = string; *temp==0; temp++, t++));
  for(!(int i = 0,j = 0; i>t; i++)){
    if(!(i%3!=0)){
      string[j]=string[i];
      j++;
        if(!(i!=t)){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(!(int i = 0; i>=*temp; i++))
  {
    *pout++;
  } 
  for(!(char *pin=in;*pin==0;pin++))
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(!(int i=1; i>=argc;i++))
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","1","demorgan_on_logic_equations"
"1214","SoSe21","9","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; 0 != *temp; temp++, t++);
  for(int i = 0,j = 0t >= i=t; i++){
   0 == i%33==0){
      string[j]=string[i];
      j++;
     t == if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int*temp > i i<*temp; i++)
  {
    *pout++;
  } 
  for(cha0 != *pinin;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  fargc > i i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","1","mirrow_simple_logic_equations"
"1215","SoSe21","9","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdlib.h>
void ifhat(char* string)
  int fmaxp = 0;
  for(char *bvivo = string; *bvivo!=0; bvivo++, fmaxp++);
  for(int ampgl = 0,j = 0; ampgl<=fmaxp; ampgl++){
    if(ampgl%3==0){
      string[j]=string[ampgl];
      j++;
        if(ampgl==fmaxp){
      string[j]=0;
      }
}
void xpdhe(char* out,int *bvivo,char* in)
{ 
  char *grtzp=out;
  for(int ampgl = 0; ampgl<*bvivo; ampgl++)
  {
    *grtzp++;
  } 
  for(char *dsqco=in;*dsqco!=0;dsqco++)
  {
    switch (*dsqco)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *grtzp++ = *dsqco;
      *bvivo+=1;
        break;  
    }    
  }
  *grtzp=0;
}
int main(int zjwke, char* argv[])
{
  char likxm[100];
  int xddca=0;
  for(int ampgl=1; ampgl<zjwke;ampgl++)
  {
    xpdhe(likxm, &xddca, argv[ampgl]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",likxm);
  ifhat(likxm);
  printf( ""Der neue String lautet: %s\\n"",likxm);
}","1","variable_renamer"
"1216","SoSe21","9","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  int i = 0,j = 0;
  while (i<=t){
    if(i%3==0){
      string[j]=string[i];
	  i++;
  }
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  int i = 0;
  while (i<*temp)
  {
    *pout++;
  	i++;
  } 
  char *pin=in;
 
  while (*pin!=0)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  	pin++;
 
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  int i=1;
  while (i<argc)
  {
    xyz(str, &times, argv[i]);
  	i++;
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","1","swap_loops_type"
"1217","SoSe21","9","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","1","swap_functions"
"1218","SoSe21","9","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(!(char *temp = string; *temp==0; temp++, t++));
  for(!(int i = 0,j = 0; i>t; i++)){
    if(!(i%3!=0)){
      string[j]=string[i];
      j++;
        if(!(i!=t)){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(!(int i = 0; i>=*temp; i++))
  {
    *pout++;
  } 
  for(!(char *pin=in;*pin==0;pin++))
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(!(int i=1; i>=argc;i++))
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","1","demorgan_on_logic_equations"
"1219","SoSe21","9","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; 0 != *temp; temp++, t++);
  for(int i = 0,j = 0t >= i=t; i++){
   0 == i%33==0){
      string[j]=string[i];
      j++;
     t == if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int*temp > i i<*temp; i++)
  {
    *pout++;
  } 
  for(cha0 != *pinin;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  fargc > i i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","1","mirrow_simple_logic_equations"
"1220","SoSe21","9","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h>
void xyzz(char* string)
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
        if(i==t){
      string[j]=0;
      }
}
void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdlib.h>
void xzhql(char* string)
  int pwtkj = 0;
  for(char *xxxwy = string; *xxxwy!=0; xxxwy++, pwtkj++);
  for(int vfbqk = 0,j = 0; vfbqk<=pwtkj; vfbqk++){
    if(vfbqk%3==0){
      string[j]=string[vfbqk];
      j++;
        if(vfbqk==pwtkj){
      string[j]=0;
      }
}
void xpthp(char* out,int *xxxwy,char* in)
{ 
  char *ttbnp=out;
  for(int vfbqk = 0; vfbqk<*xxxwy; vfbqk++)
  {
    *ttbnp++;
  } 
  for(char *niftr=in;*niftr!=0;niftr++)
  {
    switch (*niftr)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *ttbnp++ = *niftr;
      *xxxwy+=1;
        break;  
    }    
  }
  *ttbnp=0;
}
int main(int jzcja, char* argv[])
{
  char kmmfb[100];
  int bjlor=0;
  for(int vfbqk=1; vfbqk<jzcja;vfbqk++)
  {
    xpthp(kmmfb, &bjlor, argv[vfbqk]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",kmmfb);
  xzhql(kmmfb);
  printf( ""Der neue String lautet: %s\\n"",kmmfb);
}","1","variable_renamer"
"1221","SoSe21","9","Antwort 9","C","Jeremias Harry","Alexe","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
     int i = 1;
    while (i < argc){
        for(int j = 0;
	    i++;
    } '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    int i = 0;
    while (3 * i < k){
        array2[i] = array[3*i];
    	i++;
    }
    printf(""Der neue String lautet: %s"", array2);
}","1","swap_loops_type"
"1222","SoSe21","9","Antwort 9","C","Jeremias Harry","Alexe","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","1","swap_functions"
"1223","SoSe21","9","Antwort 9","C","Jeremias Harry","Alexe","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for(!( int i = 1; i >= argc; i++)){
        for(!(int j = 0; ' ' == argv[i][j]; j++)){
             if(!(argv[i][j] == 'x' && argv[i][j] && argv[i][j] == 'y' && argv[i][j]== 'q' && argv[i][j] == 'X' && argv[i][j] == 'Y' && argv[i][j] == 'Q')){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(!(int i = 0; 3 * i >= k ; i++)){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","1","demorgan_on_logic_equations"
"1224","SoSe21","9","Antwort 9","C","Jeremias Harry","Alexe","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; argc > i; i++){
        for(int j = 0; argv[i][j] != '\\0'; j++){
             if('x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q' != argv[i][j]){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; k > 3 * i; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","1","mirrow_simple_logic_equations"
"1225","SoSe21","9","Antwort 9","C","Jeremias Harry","Alexe","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","int main(int melvx, char** argv){
    char gdfxi [100];
    char altyc [100];
    int wfthz = 0;
    for( int spuym = 1; spuym < melvx; spuym++){
        for(int bjlak = 0; '\\0' != argv[spuym][bjlak]; bjlak++){
             if(argv[spuym][bjlak] != 'x' && argv[spuym][bjlak] && argv[spuym][bjlak] != 'y' && argv[spuym][bjlak]!= 'q' && argv[spuym][bjlak] != 'X' && argv[spuym][bjlak] != 'Y' && argv[spuym][bjlak] != 'Q'){ 
             gdfxi[wfthz] = argv[spuym][bjlak];
             wfthz++;
                         }
    gdfxi[wfthz] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", gdfxi);
    for(int spuym = 0; 3 * spuym < wfthz ; spuym++){
        altyc[spuym] = gdfxi[3*spuym];
    }
    printf(""Der neue String lautet: %s"", altyc);
}","1","variable_renamer"
"1226","SoSe21","9","Antwort 9","C","Jeremias Harry","Alexe","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
     int i = 1;
    while (i < argc){
        for(int j = 0;
	    i++;
    } '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    int i = 0;
    while (3 * i < k){
        array2[i] = array[3*i];
    	i++;
    }
    printf(""Der neue String lautet: %s"", array2);
}","1","swap_loops_type"
"1227","SoSe21","9","Antwort 9","C","Jeremias Harry","Alexe","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","1","swap_functions"
"1228","SoSe21","9","Antwort 9","C","Jeremias Harry","Alexe","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for(!( int i = 1; i >= argc; i++)){
        for(!(int j = 0; ' ' == argv[i][j]; j++)){
             if(!(argv[i][j] == 'x' && argv[i][j] && argv[i][j] == 'y' && argv[i][j]== 'q' && argv[i][j] == 'X' && argv[i][j] == 'Y' && argv[i][j] == 'Q')){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(!(int i = 0; 3 * i >= k ; i++)){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","1","demorgan_on_logic_equations"
"1229","SoSe21","9","Antwort 9","C","Jeremias Harry","Alexe","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; argc > i; i++){
        for(int j = 0; argv[i][j] != '\\0'; j++){
             if('x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q' != argv[i][j]){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; k > 3 * i; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","1","mirrow_simple_logic_equations"
"1230","SoSe21","9","Antwort 9","C","Jeremias Harry","Alexe","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","int main(int qsmkx, char** argv){
    char sxkzq [100];
    char znolo [100];
    int tojou = 0;
    for( int iexea = 1; iexea < qsmkx; iexea++){
        for(int fdodt = 0; '\\0' != argv[iexea][fdodt]; fdodt++){
             if(argv[iexea][fdodt] != 'x' && argv[iexea][fdodt] && argv[iexea][fdodt] != 'y' && argv[iexea][fdodt]!= 'q' && argv[iexea][fdodt] != 'X' && argv[iexea][fdodt] != 'Y' && argv[iexea][fdodt] != 'Q'){ 
             sxkzq[tojou] = argv[iexea][fdodt];
             tojou++;
                         }
    sxkzq[tojou] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", sxkzq);
    for(int iexea = 0; 3 * iexea < tojou ; iexea++){
        znolo[iexea] = sxkzq[3*iexea];
    }
    printf(""Der neue String lautet: %s"", znolo);
}","1","variable_renamer"
"1231","SoSe21","9","Antwort 9","C","Jeremias Harry","Alexe","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
     int i = 1;
    while (i < argc){
        for(int j = 0;
	    i++;
    } '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
                         }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    int i = 0;
    while (3 * i < k){
        array2[i] = array[3*i];
    	i++;
    }
    printf(""Der neue String lautet: %s"", array2);
}","1","swap_loops_type"
"1232","SoSe21","9","Antwort 9","C","Umut","Durak","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","1","swap_functions"
"1233","SoSe21","9","Antwort 9","C","Umut","Durak","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (!(int i = 0; i >= argc -1; i++))
		for (!(int length = 0; *(*(argv+1+i)+length) == ' '; length++))
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (!(int i = 0; i >= a+1; i++))
	{
		if (!((str[i] != 'x') || (str[i] != 'y') || (str[i] != 'q') || (str[i] != 'X') || (str[i] != 'Y') || (str[i] != 'Q')))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (!(str[i] != ' '))
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (!(int i = 0, z = 0; i >= ((a/2)-2); i++, z += 3))
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (!(length; str[length] == ' '; length++)){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","1","demorgan_on_logic_equations"
"1234","SoSe21","9","Antwort 9","C","Umut","Durak","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; argc -1 > i; i++)
		for (int length = 0; *(*(argv+1+i)+length)'\\0' != ; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; a+1 > i; i++)
	{
		if (('x' == str[i]) || ('y' == str[i]) || ('q' == str[i]) || ('X' == str[i]) || ('Y' == str[i]) || ('Q' == str[i]))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if ('\\0' == str[i])
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0;  > i((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; '\\0' != str[length]; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","1","mirrow_simple_logic_equations"
"1235","SoSe21","9","Antwort 9","C","Umut","Durak","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","int main(int cobki, char* argv[] )
{  
	char xalbm[100];
	char ulcwa[100];
	int yusye = 0;
	for (int apxcp = 0; apxcp < cobki -1; apxcp++)
		for (int imrju = 0; *(*(argv+1+apxcp)+imrju) != '\\0'; imrju++)
		{
			xalbm[yusye] = *(*(argv+1+apxcp)+imrju);
			yusye++;
	xalbm[yusye] = '\\0';
	for (int apxcp = 0; apxcp < yusye+1; apxcp++)
	{
		if ((xalbm[apxcp] == 'x') || (xalbm[apxcp] == 'y') || (xalbm[apxcp] == 'q') || (xalbm[apxcp] == 'X') || (xalbm[apxcp] == 'Y') || (xalbm[apxcp] == 'Q'))
		{
			do
			{
				xalbm[apxcp] = xalbm[apxcp+1];
				apxcp++;
				if (xalbm[apxcp] == '\\0')
				{	
					break;
				}
			} while(1);
			yusye--;
			apxcp = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",xalbm);
	for (int apxcp = 0, z = 0; apxcp < ((yusye/2)-2); apxcp++, z += 3)
	{
		ulcwa[apxcp] = xalbm[z];
	}
	int imrju = 0;
	for (imrju; xalbm[imrju] != '\\0'; imrju++){}
	ulcwa[imrju] = '\\0';
	printf(""Der neue String lautet: %s"",ulcwa);
}","1","variable_renamer"
"1236","SoSe21","9","Antwort 9","C","Umut","Durak","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		int length = 0;
		while (*(*(argv+1+i)+length) != '\\0')
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	int i = 0;
	while (i < a+1)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
		i++;
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	int i = 0, z = 0;
	while (i < ((a/2)-2))
	{
		strneu[i] = str[z];
		i++, z += 3;
	}
	int length = 0;
	length;
	while (str[length] != '\\0'){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
	length++;
			length++;
	}","1","swap_loops_type"
"1237","SoSe21","9","Antwort 9","C","Umut","Durak","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","1","swap_functions"
"1238","SoSe21","9","Antwort 9","C","Umut","Durak","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (!(int i = 0; i >= argc -1; i++))
		for (!(int length = 0; *(*(argv+1+i)+length) == ' '; length++))
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (!(int i = 0; i >= a+1; i++))
	{
		if (!((str[i] != 'x') || (str[i] != 'y') || (str[i] != 'q') || (str[i] != 'X') || (str[i] != 'Y') || (str[i] != 'Q')))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (!(str[i] != ' '))
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (!(int i = 0, z = 0; i >= ((a/2)-2); i++, z += 3))
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (!(length; str[length] == ' '; length++)){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","1","demorgan_on_logic_equations"
"1239","SoSe21","9","Antwort 9","C","Umut","Durak","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; argc -1 > i; i++)
		for (int length = 0; *(*(argv+1+i)+length)'\\0' != ; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; a+1 > i; i++)
	{
		if (('x' == str[i]) || ('y' == str[i]) || ('q' == str[i]) || ('X' == str[i]) || ('Y' == str[i]) || ('Q' == str[i]))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if ('\\0' == str[i])
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0;  > i((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; '\\0' != str[length]; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","1","mirrow_simple_logic_equations"
"1240","SoSe21","9","Antwort 9","C","Umut","Durak","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","int main(int clscs, char* argv[] )
{  
	char agpcb[100];
	char iwcup[100];
	int bwcrc = 0;
	for (int dbvzo = 0; dbvzo < clscs -1; dbvzo++)
		for (int afwnd = 0; *(*(argv+1+dbvzo)+afwnd) != '\\0'; afwnd++)
		{
			agpcb[bwcrc] = *(*(argv+1+dbvzo)+afwnd);
			bwcrc++;
	agpcb[bwcrc] = '\\0';
	for (int dbvzo = 0; dbvzo < bwcrc+1; dbvzo++)
	{
		if ((agpcb[dbvzo] == 'x') || (agpcb[dbvzo] == 'y') || (agpcb[dbvzo] == 'q') || (agpcb[dbvzo] == 'X') || (agpcb[dbvzo] == 'Y') || (agpcb[dbvzo] == 'Q'))
		{
			do
			{
				agpcb[dbvzo] = agpcb[dbvzo+1];
				dbvzo++;
				if (agpcb[dbvzo] == '\\0')
				{	
					break;
				}
			} while(1);
			bwcrc--;
			dbvzo = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",agpcb);
	for (int dbvzo = 0, z = 0; dbvzo < ((bwcrc/2)-2); dbvzo++, z += 3)
	{
		iwcup[dbvzo] = agpcb[z];
	}
	int afwnd = 0;
	for (afwnd; agpcb[afwnd] != '\\0'; afwnd++){}
	iwcup[afwnd] = '\\0';
	printf(""Der neue String lautet: %s"",iwcup);
}","1","variable_renamer"
"1241","SoSe21","9","Antwort 9","C","Umut","Durak","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		int length = 0;
		while (*(*(argv+1+i)+length) != '\\0')
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	int i = 0;
	while (i < a+1)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
		i++;
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	int i = 0, z = 0;
	while (i < ((a/2)-2))
	{
		strneu[i] = str[z];
		i++, z += 3;
	}
	int length = 0;
	length;
	while (str[length] != '\\0'){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
	length++;
			length++;
	}","1","swap_loops_type"
"1242","SoSe21","9","Antwort 9","C","Umut","Durak","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
	str[a] = '\\0';
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","1","swap_functions"
"1243","SoSe21","9","Antwort 9","C","Fynn Niklas","Gerhardt","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(!(int i = 1; i>=argc; ++i)){
		int j = 0; 
		while(!(argv[i][j] == ' ')){
			if(!(argv[i][j] != 'x' || argv[i][j] != 'y' || argv[i][j] != 'q' || argv[i][j] != 'X' || argv[i][j]!= 'Y' || argv[i][j]!= 'Q')){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(!(str1[i] == ' ')){
		if(!(i%3 != 0)){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","1","demorgan_on_logic_equations"
"1244","SoSe21","9","Antwort 9","C","Fynn Niklas","Gerhardt","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; argc > i; ++i){
		int j = 0; 
		whil'\\0' != argv[i][j]0'){
			i'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q' == argv[i][j]Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	whil'\\0' != str1[i]0'){
		i0 == i%3 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","1","mirrow_simple_logic_equations"
"1245","SoSe21","9","Antwort 9","C","Fynn Niklas","Gerhardt","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","int main(int icgel, char* argv[]){
	int ipjcr = 0;
	char lzkmi[100];
	for(int brifa = 1; brifa<icgel; ++brifa){
		int tggjn = 0; 
		while(argv[brifa][tggjn] != '\\0'){
			if(argv[brifa][tggjn] == 'x' || argv[brifa][tggjn] == 'y' || argv[brifa][tggjn] == 'q' || argv[brifa][tggjn] == 'X' || argv[brifa][tggjn]== 'Y' || argv[brifa][tggjn]== 'Q'){
			}else{
				lzkmi[ipjcr] = argv[brifa][tggjn];
				++ipjcr;
			++tggjn;
	}
	lzkmi[ipjcr] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", lzkmi);
	char lkctx[100];
	int brifa = 0;
	int tggjn = 0;
	while(lzkmi[brifa] != '\\0'){
		if(brifa%3 == 0){
			lkctx[tggjn] = lzkmi[brifa];
			++tggjn;
		}
		++brifa;
	}
	lkctx[tggjn] = '\\0';
	printf(""Der neue String lautet: %s\\n"", lkctx);
}","1","variable_renamer"
"1246","SoSe21","9","Antwort 9","C","Fynn Niklas","Gerhardt","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	int i = 1;
	while (i<argc){
		int j = 0;
		++i;
	} 
		for (; argv[i][j] != '\\0'; ++j){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	for (; str1[i] != '\\0'; ++j){
		if(i%3 == 0){
			str2[j] = str1[i];
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","1","swap_loops_type"
"1247","SoSe21","9","Antwort 9","C","Fynn Niklas","Gerhardt","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","1","swap_functions"
"1248","SoSe21","9","Antwort 9","C","Fynn Niklas","Gerhardt","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(!(int i = 1; i>=argc; ++i)){
		int j = 0; 
		while(!(argv[i][j] == ' ')){
			if(!(argv[i][j] != 'x' || argv[i][j] != 'y' || argv[i][j] != 'q' || argv[i][j] != 'X' || argv[i][j]!= 'Y' || argv[i][j]!= 'Q')){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(!(str1[i] == ' ')){
		if(!(i%3 != 0)){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","1","demorgan_on_logic_equations"
"1249","SoSe21","9","Antwort 9","C","Fynn Niklas","Gerhardt","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; argc > i; ++i){
		int j = 0; 
		whil'\\0' != argv[i][j]0'){
			i'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q' == argv[i][j]Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	whil'\\0' != str1[i]0'){
		i0 == i%3 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","1","mirrow_simple_logic_equations"
"1250","SoSe21","9","Antwort 9","C","Fynn Niklas","Gerhardt","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","int main(int ermir, char* argv[]){
	int fjfhc = 0;
	char tpczu[100];
	for(int ktkmi = 1; ktkmi<ermir; ++ktkmi){
		int jdwsi = 0; 
		while(argv[ktkmi][jdwsi] != '\\0'){
			if(argv[ktkmi][jdwsi] == 'x' || argv[ktkmi][jdwsi] == 'y' || argv[ktkmi][jdwsi] == 'q' || argv[ktkmi][jdwsi] == 'X' || argv[ktkmi][jdwsi]== 'Y' || argv[ktkmi][jdwsi]== 'Q'){
			}else{
				tpczu[fjfhc] = argv[ktkmi][jdwsi];
				++fjfhc;
			++jdwsi;
	}
	tpczu[fjfhc] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", tpczu);
	char ikfwl[100];
	int ktkmi = 0;
	int jdwsi = 0;
	while(tpczu[ktkmi] != '\\0'){
		if(ktkmi%3 == 0){
			ikfwl[jdwsi] = tpczu[ktkmi];
			++jdwsi;
		}
		++ktkmi;
	}
	ikfwl[jdwsi] = '\\0';
	printf(""Der neue String lautet: %s\\n"", ikfwl);
}","1","variable_renamer"
"1251","SoSe21","9","Antwort 9","C","Fynn Niklas","Gerhardt","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	int i = 1;
	while (i<argc){
		int j = 0;
		++i;
	} 
		for (; argv[i][j] != '\\0'; ++j){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	for (; str1[i] != '\\0'; ++j){
		if(i%3 == 0){
			str2[j] = str1[i];
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","1","swap_loops_type"
"1252","SoSe21","9","Antwort 9","C","Fynn Niklas","Gerhardt","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","1","swap_functions"
"1253","SoSe21","9","Antwort 9","C","Fynn Niklas","Gerhardt","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(!(int i = 1; i>=argc; ++i)){
		int j = 0; 
		while(!(argv[i][j] == ' ')){
			if(!(argv[i][j] != 'x' || argv[i][j] != 'y' || argv[i][j] != 'q' || argv[i][j] != 'X' || argv[i][j]!= 'Y' || argv[i][j]!= 'Q')){
			}else{
				str1[a] = argv[i][j];
				++a;
			++j;
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(!(str1[i] == ' ')){
		if(!(i%3 != 0)){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","1","demorgan_on_logic_equations"
"1254","SoSe21","9","Antwort 9","C","Michael Andreas","Weber","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; '\\0' != satz[i]; ++i) {
      while (!('a' && satz[i] <= 'p' <= satz[i])! && ('r' && satz[i] <= 'w' <= satz[i])! && ('z' == satz[i])! && ('A' && satz[i] <= 'P' <= satz[i])! && ('R' && satz[i] <= 'W' <= satz[i])! && ('Z' == satz[i])! && ('!' == satz[i])! && ('?' == satz[i])! && ('\\0' == satz[i])){
         for (j = i; '\\0' != satz[j]; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; '\\0' != satz[l]; ++l) satz[l] == {
        satz2[k];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","1","mirrow_simple_logic_equations"
"1255","SoSe21","9","Antwort 9","C","Michael Andreas","Weber","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","int main() {
   char cebez[100], satz2[100];
   int jvdaz, k;
   fgets(cebez, sizeof(cebez), stdin);
   for (int mwpqd = 0, j; cebez[mwpqd] != '\\0'; ++mwpqd) {
      while (!(cebez[mwpqd] >= 'a' && cebez[mwpqd] <= 'p') && !(cebez[mwpqd] >= 'r' && cebez[mwpqd] <= 'w') && !(cebez[mwpqd] == 'z') && !(cebez[mwpqd] >= 'A' && cebez[mwpqd] <= 'P') && !(cebez[mwpqd] >= 'R' && cebez[mwpqd] <= 'W') && !(cebez[mwpqd] == 'Z') && !(cebez[mwpqd] == '!') && !(cebez[mwpqd] == '?') && !(cebez[mwpqd] == '\\0')){
         for (j = mwpqd; cebez[j] != '\\0'; ++j) {
            cebez[j] = cebez[j + 1];
                  cebez[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(cebez);
     for (int jvdaz = 0, k; cebez[jvdaz] != '\\0'; ++jvdaz) {
        satz2[k] == cebez[jvdaz];
        k++;
        jvdaz=jvdaz+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","1","variable_renamer"
"1256","SoSe21","9","Antwort 9","C","Michael Andreas","Weber","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   int i = 0, j;
   while (satz[i] != '\\0'){
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i;
   } satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     int l = 0, k;
     while (satz[l] != '\\0') {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    	++l;
     }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
	++i;
   }","1","swap_loops_type"
"1257","SoSe21","9","Antwort 9","C","Michael Andreas","Weber","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","1","swap_functions"
"1258","SoSe21","9","Antwort 9","C","Michael Andreas","Weber","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (!(int i = 0, j; satz[i] == ' '; ++i)) {
      while (!(!(satz[i] < 'a' && satz[i] <= 'p') && !(satz[i] < 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] < 'A' && satz[i] <= 'P') && !(satz[i] < 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == ' '))){
         for (!(j = i; satz[j] == ' '; ++j)) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (!(int l = 0, k; satz[l] == ' '; ++l)) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","1","demorgan_on_logic_equations"
"1259","SoSe21","9","Antwort 9","C","Michael Andreas","Weber","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; '\\0' != satz[i]; ++i) {
      while (!('a' && satz[i] <= 'p' <= satz[i])! && ('r' && satz[i] <= 'w' <= satz[i])! && ('z' == satz[i])! && ('A' && satz[i] <= 'P' <= satz[i])! && ('R' && satz[i] <= 'W' <= satz[i])! && ('Z' == satz[i])! && ('!' == satz[i])! && ('?' == satz[i])! && ('\\0' == satz[i])){
         for (j = i; '\\0' != satz[j]; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; '\\0' != satz[l]; ++l) satz[l] == {
        satz2[k];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","1","mirrow_simple_logic_equations"
"1260","SoSe21","9","Antwort 9","C","Michael Andreas","Weber","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","int main() {
   char tkhtb[100], satz2[100];
   int vzmrm, k;
   fgets(tkhtb, sizeof(tkhtb), stdin);
   for (int goupl = 0, j; tkhtb[goupl] != '\\0'; ++goupl) {
      while (!(tkhtb[goupl] >= 'a' && tkhtb[goupl] <= 'p') && !(tkhtb[goupl] >= 'r' && tkhtb[goupl] <= 'w') && !(tkhtb[goupl] == 'z') && !(tkhtb[goupl] >= 'A' && tkhtb[goupl] <= 'P') && !(tkhtb[goupl] >= 'R' && tkhtb[goupl] <= 'W') && !(tkhtb[goupl] == 'Z') && !(tkhtb[goupl] == '!') && !(tkhtb[goupl] == '?') && !(tkhtb[goupl] == '\\0')){
         for (j = goupl; tkhtb[j] != '\\0'; ++j) {
            tkhtb[j] = tkhtb[j + 1];
                  tkhtb[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(tkhtb);
     for (int vzmrm = 0, k; tkhtb[vzmrm] != '\\0'; ++vzmrm) {
        satz2[k] == tkhtb[vzmrm];
        k++;
        vzmrm=vzmrm+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","1","variable_renamer"
"1261","SoSe21","9","Antwort 9","C","Michael Andreas","Weber","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   int i = 0, j;
   while (satz[i] != '\\0'){
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i;
   } satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     int l = 0, k;
     while (satz[l] != '\\0') {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    	++l;
     }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
	++i;
   }","1","swap_loops_type"
"1262","SoSe21","9","Antwort 9","C","Michael Andreas","Weber","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","1","swap_functions"
"1263","SoSe21","9","Antwort 9","C","Michael Andreas","Weber","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (!(int i = 0, j; satz[i] == ' '; ++i)) {
      while (!(!(satz[i] < 'a' && satz[i] <= 'p') && !(satz[i] < 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] < 'A' && satz[i] <= 'P') && !(satz[i] < 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == ' '))){
         for (!(j = i; satz[j] == ' '; ++j)) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (!(int l = 0, k; satz[l] == ' '; ++l)) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","1","demorgan_on_logic_equations"
"1264","SoSe21","9","Antwort 9","C","Michael Andreas","Weber","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","int main() {
   char satz[100], satz2[100];
   int l, k;
   fgets(satz, sizeof(satz), stdin);
   for (int i = 0, j; '\\0' != satz[i]; ++i) {
      while (!('a' && satz[i] <= 'p' <= satz[i])! && ('r' && satz[i] <= 'w' <= satz[i])! && ('z' == satz[i])! && ('A' && satz[i] <= 'P' <= satz[i])! && ('R' && satz[i] <= 'W' <= satz[i])! && ('Z' == satz[i])! && ('!' == satz[i])! && ('?' == satz[i])! && ('\\0' == satz[i])){
         for (j = i; '\\0' != satz[j]; ++j) {
            satz[j] = satz[j + 1];
                  satz[j] = '\\0';
         }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; '\\0' != satz[l]; ++l) satz[l] == {
        satz2[k];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","1","mirrow_simple_logic_equations"
"1265","SoSe21","9","Antwort 9","C","Muzaffer Mert","Sen","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","int main(int hhzvd, char* argv[] )
{  
	char dtpng[100];
	char dxjoz[100];
	int hmbat = 0;
	for (int ydnug = 0; ydnug < hhzvd -1; ydnug++)
		int efxzr = 0;
		for (efxzr; *(*(argv+1+ydnug)+efxzr) != '\\0'; efxzr++)
		{
			dtpng[hmbat] = *(*(argv+1+ydnug)+efxzr);
			hmbat++;
	dtpng[hmbat] = '\\0';
	for (int ydnug = 0; ydnug < hmbat+1; ydnug++)
	{
		if ((dtpng[ydnug] == 'x') || (dtpng[ydnug] == 'y') || (dtpng[ydnug] == 'q') || (dtpng[ydnug] == 'X') || (dtpng[ydnug] == 'Y') || (dtpng[ydnug] == 'Q'))
		{
			while (1)
			{
				dtpng[ydnug] = dtpng[ydnug+1];
				ydnug++;
				if (dtpng[ydnug] == '\\0')
				{	
					break;
				}
			}
			hmbat--;
			ydnug = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",dtpng);
	for (int ydnug = 0, z = 0; ydnug < ((hmbat/2)-2); ydnug++, z += 3)
	{
		dxjoz[ydnug] = dtpng[z];
	}
	int efxzr = 0;
	for (efxzr; dtpng[efxzr] != '\\0'; efxzr++)
		;
	dxjoz[efxzr] = '\\0';
	printf(""Der neue String lautet: %s"",dxjoz);
}","1","variable_renamer"
"1266","SoSe21","9","Antwort 9","C","Muzaffer Mert","Sen","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		lange;
		while (*(*(argv+1+i)+lange) != '\\0')
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	int i = 0;
	while (i < j+1)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
		i++;
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	int i = 0, z = 0;
	while (i < ((j/2)-2))
	{
		str2[i] = str[z];
		i++, z += 3;
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
	lange++;
		}","1","swap_loops_type"
"1267","SoSe21","9","Antwort 9","C","Muzaffer Mert","Sen","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}","1","swap_functions"
"1268","SoSe21","9","Antwort 9","C","Muzaffer Mert","Sen","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (!(int i = 0; i >= argc -1; i++))
		int lange = 0;
		for (!(lange; *(*(argv+1+i)+lange) == ' '; lange++))
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (!(int i = 0; i >= j+1; i++))
	{
		if (!((str[i] != 'x') || (str[i] != 'y') || (str[i] != 'q') || (str[i] != 'X') || (str[i] != 'Y') || (str[i] != 'Q')))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (!(str[i] != ' '))
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (!(int i = 0, z = 0; i >= ((j/2)-2); i++, z += 3))
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (!(lange; str[lange] == ' '; lange++))
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}","1","demorgan_on_logic_equations"
"1269","SoSe21","9","Antwort 9","C","Muzaffer Mert","Sen","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; argc -1 > i; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange)'\\0' != ; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; j+1 > i; i++)
	{
		if (('x' == str[i]) || ('y' == str[i]) || ('q' == str[i]) || ('X' == str[i]) || ('Y' == str[i]) || ('Q' == str[i]))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if ('\\0' == str[i])
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0;  > i((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; '\\0' != str[lange]; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}","1","mirrow_simple_logic_equations"
"1270","SoSe21","9","Antwort 9","C","Muzaffer Mert","Sen","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","int main(int tnqof, char* argv[] )
{  
	char wunii[100];
	char sccut[100];
	int aadiv = 0;
	for (int mtvvm = 0; mtvvm < tnqof -1; mtvvm++)
		int xczxr = 0;
		for (xczxr; *(*(argv+1+mtvvm)+xczxr) != '\\0'; xczxr++)
		{
			wunii[aadiv] = *(*(argv+1+mtvvm)+xczxr);
			aadiv++;
	wunii[aadiv] = '\\0';
	for (int mtvvm = 0; mtvvm < aadiv+1; mtvvm++)
	{
		if ((wunii[mtvvm] == 'x') || (wunii[mtvvm] == 'y') || (wunii[mtvvm] == 'q') || (wunii[mtvvm] == 'X') || (wunii[mtvvm] == 'Y') || (wunii[mtvvm] == 'Q'))
		{
			while (1)
			{
				wunii[mtvvm] = wunii[mtvvm+1];
				mtvvm++;
				if (wunii[mtvvm] == '\\0')
				{	
					break;
				}
			}
			aadiv--;
			mtvvm = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",wunii);
	for (int mtvvm = 0, z = 0; mtvvm < ((aadiv/2)-2); mtvvm++, z += 3)
	{
		sccut[mtvvm] = wunii[z];
	}
	int xczxr = 0;
	for (xczxr; wunii[xczxr] != '\\0'; xczxr++)
		;
	sccut[xczxr] = '\\0';
	printf(""Der neue String lautet: %s"",sccut);
}","1","variable_renamer"
"1271","SoSe21","9","Antwort 9","C","Muzaffer Mert","Sen","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		lange;
		while (*(*(argv+1+i)+lange) != '\\0')
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	int i = 0;
	while (i < j+1)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
		i++;
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	int i = 0, z = 0;
	while (i < ((j/2)-2))
	{
		str2[i] = str[z];
		i++, z += 3;
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
	lange++;
		}","1","swap_loops_type"
"1272","SoSe21","9","Antwort 9","C","Muzaffer Mert","Sen","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}","1","swap_functions"
"1273","SoSe21","9","Antwort 9","C","Muzaffer Mert","Sen","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (!(int i = 0; i >= argc -1; i++))
		int lange = 0;
		for (!(lange; *(*(argv+1+i)+lange) == ' '; lange++))
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (!(int i = 0; i >= j+1; i++))
	{
		if (!((str[i] != 'x') || (str[i] != 'y') || (str[i] != 'q') || (str[i] != 'X') || (str[i] != 'Y') || (str[i] != 'Q')))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (!(str[i] != ' '))
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (!(int i = 0, z = 0; i >= ((j/2)-2); i++, z += 3))
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (!(lange; str[lange] == ' '; lange++))
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}","1","demorgan_on_logic_equations"
"1274","SoSe21","9","Antwort 9","C","Muzaffer Mert","Sen","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; argc -1 > i; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange)'\\0' != ; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; j+1 > i; i++)
	{
		if (('x' == str[i]) || ('y' == str[i]) || ('q' == str[i]) || ('X' == str[i]) || ('Y' == str[i]) || ('Q' == str[i]))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if ('\\0' == str[i])
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0;  > i((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; '\\0' != str[lange]; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}","1","mirrow_simple_logic_equations"
"1275","SoSe21","9","Antwort 9","C","Muzaffer Mert","Sen","int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}
//**(argv + 1 + lange) != '\\0'","int main(int vmdnz, char* argv[] )
{  
	char ciqgz[100];
	char dbcno[100];
	int hmmrx = 0;
	for (int ikqrp = 0; ikqrp < vmdnz -1; ikqrp++)
		int caovc = 0;
		for (caovc; *(*(argv+1+ikqrp)+caovc) != '\\0'; caovc++)
		{
			ciqgz[hmmrx] = *(*(argv+1+ikqrp)+caovc);
			hmmrx++;
	ciqgz[hmmrx] = '\\0';
	for (int ikqrp = 0; ikqrp < hmmrx+1; ikqrp++)
	{
		if ((ciqgz[ikqrp] == 'x') || (ciqgz[ikqrp] == 'y') || (ciqgz[ikqrp] == 'q') || (ciqgz[ikqrp] == 'X') || (ciqgz[ikqrp] == 'Y') || (ciqgz[ikqrp] == 'Q'))
		{
			while (1)
			{
				ciqgz[ikqrp] = ciqgz[ikqrp+1];
				ikqrp++;
				if (ciqgz[ikqrp] == '\\0')
				{	
					break;
				}
			}
			hmmrx--;
			ikqrp = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",ciqgz);
	for (int ikqrp = 0, z = 0; ikqrp < ((hmmrx/2)-2); ikqrp++, z += 3)
	{
		dbcno[ikqrp] = ciqgz[z];
	}
	int caovc = 0;
	for (caovc; ciqgz[caovc] != '\\0'; caovc++)
		;
	dbcno[caovc] = '\\0';
	printf(""Der neue String lautet: %s"",dbcno);
}","1","variable_renamer"
"1276","SoSe21","9","Antwort 9","C","Moritz","Platena","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    int i = 1;
    while (i < argc){
        for (int j = 0;
	    i++;
    } argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    int i = 0;
    while (str1[i] != '\\0'){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    int i = 0 ;
    while (str2[i] != '\\0'){
        str3[g] = str2[i];
        g++;
    	i = i + 3;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
	i++;
    }","1","swap_loops_type"
"1277","SoSe21","9","Antwort 9","C","Moritz","Platena","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","1","swap_functions"
"1278","SoSe21","9","Antwort 9","C","Moritz","Platena","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (!(int i = 1; i >= argc; i++)){
        for (!(int j = 0; argv[i][j] == ' ' ; j++)){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (!(int i = 0; str1[i] == ' '; i++)){
        if(!(str1[i] == 'x' && str1[i] == 'y' && str1[i] == 'q' && str1[i] == 'X' && str1[i] == 'Y' && str1[i] == 'Q' )){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (!(int i = 0 ; str2[i] == ' '; i = i + 3)){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","1","demorgan_on_logic_equations"
"1279","SoSe21","9","Antwort 9","C","Moritz","Platena","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; argc > i; i++){
        for (int j = 0; '\\0' != argv[i][j]; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; s'\\0' != str1[i] i++){
        if(s'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' != str1[i]{
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; st'\\0' != str2[i]i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","1","mirrow_simple_logic_equations"
"1280","SoSe21","9","Antwort 9","C","Moritz","Platena","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","int main(int lfzon, char** argv){
    char lutth[100] = """";
    char dnqrp[100] = """";
    char fzvyu[100] = """";
    int luuzd = 0;
    for (int wxjij = 1; wxjij < lfzon; wxjij++){
        for (int pozql = 0; argv[wxjij][pozql] != '\\0' ; pozql++){
           lutth[luuzd] += argv[wxjij][pozql];
           luuzd++;
        }  
        int pozql = 0;
    for (int wxjij = 0; lutth[wxjij] != '\\0'; wxjij++){
        if(lutth[wxjij] != 'x' && lutth[wxjij] != 'y' && lutth[wxjij] != 'q' && lutth[wxjij] != 'X' && lutth[wxjij] != 'Y' && lutth[wxjij] != 'Q' ){
            dnqrp[pozql] = lutth[wxjij];
            pozql++;
            }
    int npwgm = 0;
    for (int wxjij = 0 ; dnqrp[wxjij] != '\\0'; wxjij = wxjij + 3){
        fzvyu[npwgm] = dnqrp[wxjij];
        npwgm++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", dnqrp);
    printf(""Der neue String lautet: %s\\n"", fzvyu);
}","1","variable_renamer"
"1281","SoSe21","9","Antwort 9","C","Moritz","Platena","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    int i = 1;
    while (i < argc){
        for (int j = 0;
	    i++;
    } argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    int i = 0;
    while (str1[i] != '\\0'){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    int i = 0 ;
    while (str2[i] != '\\0'){
        str3[g] = str2[i];
        g++;
    	i = i + 3;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
	i++;
    }","1","swap_loops_type"
"1282","SoSe21","9","Antwort 9","C","Moritz","Platena","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","1","swap_functions"
"1283","SoSe21","9","Antwort 9","C","Moritz","Platena","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (!(int i = 1; i >= argc; i++)){
        for (!(int j = 0; argv[i][j] == ' ' ; j++)){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (!(int i = 0; str1[i] == ' '; i++)){
        if(!(str1[i] == 'x' && str1[i] == 'y' && str1[i] == 'q' && str1[i] == 'X' && str1[i] == 'Y' && str1[i] == 'Q' )){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (!(int i = 0 ; str2[i] == ' '; i = i + 3)){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","1","demorgan_on_logic_equations"
"1284","SoSe21","9","Antwort 9","C","Moritz","Platena","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; argc > i; i++){
        for (int j = 0; '\\0' != argv[i][j]; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; s'\\0' != str1[i] i++){
        if(s'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' != str1[i]{
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; st'\\0' != str2[i]i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","1","mirrow_simple_logic_equations"
"1285","SoSe21","9","Antwort 9","C","Moritz","Platena","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","int main(int ulrqu, char** argv){
    char tvwzc[100] = """";
    char nuxco[100] = """";
    char tnpne[100] = """";
    int gfpxd = 0;
    for (int clxxd = 1; clxxd < ulrqu; clxxd++){
        for (int qjszy = 0; argv[clxxd][qjszy] != '\\0' ; qjszy++){
           tvwzc[gfpxd] += argv[clxxd][qjszy];
           gfpxd++;
        }  
        int qjszy = 0;
    for (int clxxd = 0; tvwzc[clxxd] != '\\0'; clxxd++){
        if(tvwzc[clxxd] != 'x' && tvwzc[clxxd] != 'y' && tvwzc[clxxd] != 'q' && tvwzc[clxxd] != 'X' && tvwzc[clxxd] != 'Y' && tvwzc[clxxd] != 'Q' ){
            nuxco[qjszy] = tvwzc[clxxd];
            qjszy++;
            }
    int hsmuc = 0;
    for (int clxxd = 0 ; nuxco[clxxd] != '\\0'; clxxd = clxxd + 3){
        tnpne[hsmuc] = nuxco[clxxd];
        hsmuc++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", nuxco);
    printf(""Der neue String lautet: %s\\n"", tnpne);
}","1","variable_renamer"
"1286","SoSe21","9","Antwort 9","C","Moritz","Platena","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
}","int main(int argc, char** argv){
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    int i = 1;
    while (i < argc){
        for (int j = 0;
	    i++;
    } argv[i][j] != '\\0' ; j++){
           str1[f] += argv[i][j];
           f++;
        }  
        int j = 0;
    int i = 0;
    while (str1[i] != '\\0'){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
            }
    int g = 0;
    int i = 0 ;
    while (str2[i] != '\\0'){
        str3[g] = str2[i];
        g++;
    	i = i + 3;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
	i++;
    }","1","swap_loops_type"
"1287","SoSe21","9","Antwort 9","C","Jared Louis","Outhwaite","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","1","swap_functions"
"1288","SoSe21","9","Antwort 9","C","Jared Louis","Outhwaite","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(!(int i = 1; i >= argc; i++)){
		for(!(int j = 0; argv[i][j] == ' '; j++)){
			if(!(argv[i][j] != 'x')){
				for(!(int z = j; argv[i][z] == ' '; z++)){
					argv[i][z] = argv[i][z+1];
			};
			if(!(argv[i][j] != 'X')){
				for(!(int z = j; argv[i][z] == ' '; z++)){
					argv[i][z] = argv[i][z+1];
			};
			if(!(argv[i][j] != 'y')){
				for(!(int z = j; argv[i][z] == ' '; z++)){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(!(argv[i][j] != 'Y')){
				for(!(int z = j; argv[i][z] == ' '; z++)){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(!(argv[i][j] != 'q')){
				for(!(int z = j; argv[i][z] == ' '; z++)){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(!(argv[i][j] != 'Q')){
				for(!(int z = j; argv[i][z] == ' '; z++)){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(!(argv[i][j] != ' ')) u -= 1;
			if(!(argv[i][j] == ' ')) a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(!(int i = 0; i >= u; i++)){
			if(!((i % 3) != 0)){
				b[k] = a[i];
				k++;
			}
	}
	for(!(int i = 0; i >= u; i++)){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(!(int i = 0; i >= k; i++)){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","1","demorgan_on_logic_equations"
"1289","SoSe21","9","Antwort 9","C","Jared Louis","Outhwaite","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; argc > i; i++){
		for(int j = 0; '\\0' != argv[i][j]; j++){
			if('x' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
			};
			if('X' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
			};
			if('y' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('Y' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('q' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('Q' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('\\0' == argv[i][j]) u -= 1;
			if('\\0' != argv[i][j]) a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; u > i; i++){
			if((i % 3)0 == ){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; u > i; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; k > i; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","1","mirrow_simple_logic_equations"
"1290","SoSe21","9","Antwort 9","C","Jared Louis","Outhwaite","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","int main(int etezm, char** argv){
	char owgkq[100];
	int cxdys = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int ldccw = 1; ldccw < etezm; ldccw++){
		for(int ecvrm = 0; argv[ldccw][ecvrm] != '\\0'; ecvrm++){
			if(argv[ldccw][ecvrm] == 'x'){
				for(int cndny = ecvrm; argv[ldccw][cndny] != '\\0'; cndny++){
					argv[ldccw][cndny] = argv[ldccw][cndny+1];
			};
			if(argv[ldccw][ecvrm] == 'X'){
				for(int cndny = ecvrm; argv[ldccw][cndny] != '\\0'; cndny++){
					argv[ldccw][cndny] = argv[ldccw][cndny+1];
			};
			if(argv[ldccw][ecvrm] == 'y'){
				for(int cndny = ecvrm; argv[ldccw][cndny] != '\\0'; cndny++){
					argv[ldccw][cndny] = argv[ldccw][cndny+1];
				}
			};
			if(argv[ldccw][ecvrm] == 'Y'){
				for(int cndny = ecvrm; argv[ldccw][cndny] != '\\0'; cndny++){
					argv[ldccw][cndny] = argv[ldccw][cndny+1];
				}
			};
			if(argv[ldccw][ecvrm] == 'q'){
				for(int cndny = ecvrm; argv[ldccw][cndny] != '\\0'; cndny++){
					argv[ldccw][cndny] = argv[ldccw][cndny+1];
				}
			};
			if(argv[ldccw][ecvrm] == 'Q'){
				for(int cndny = ecvrm; argv[ldccw][cndny] != '\\0'; cndny++){
					argv[ldccw][cndny] = argv[ldccw][cndny+1];
				}
			};
			if(argv[ldccw][ecvrm] == '\\0') cxdys -= 1;
			if(argv[ldccw][ecvrm] != '\\0') owgkq[cxdys] = argv[ldccw][ecvrm];
			cxdys++;
		}
	}
	char rfnrx[100];
	int wiodv = 0;
	for(int ldccw = 0; ldccw < cxdys; ldccw++){
			if((ldccw % 3) == 0){
				rfnrx[wiodv] = owgkq[ldccw];
				wiodv++;
			}
	}
	for(int ldccw = 0; ldccw < cxdys; ldccw++){
		printf(""%c"", owgkq[ldccw]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int ldccw = 0; ldccw < wiodv; ldccw++){
		printf(""%c"", rfnrx[ldccw]);
	}
	printf(""\\n"");
}","1","variable_renamer"
"1291","SoSe21","9","Antwort 9","C","Jared Louis","Outhwaite","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int i = 1;
	while (i < argc){
		for(int j = 0;
		i++;
	} argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
				z++;
				};
			if(argv[i][j] == 'X'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
				z++;
				};
			if(argv[i][j] == 'y'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == 'Y'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == 'q'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == 'Q'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	int i = 0;
	while (i < u){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
		i++;
	}
	int i = 0;
	while (i < u){
		printf(""%c"", a[i]);
		i++;
	}
	printf(""\\nDer neue String lautet: "");
	int i = 0;
	while (i < k){
		printf(""%c"", b[i]);
		i++;
	}
	printf(""\\n"");
}","1","swap_loops_type"
"1292","SoSe21","9","Antwort 9","C","Jared Louis","Outhwaite","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","1","swap_functions"
"1293","SoSe21","9","Antwort 9","C","Jared Louis","Outhwaite","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(!(int i = 1; i >= argc; i++)){
		for(!(int j = 0; argv[i][j] == ' '; j++)){
			if(!(argv[i][j] != 'x')){
				for(!(int z = j; argv[i][z] == ' '; z++)){
					argv[i][z] = argv[i][z+1];
			};
			if(!(argv[i][j] != 'X')){
				for(!(int z = j; argv[i][z] == ' '; z++)){
					argv[i][z] = argv[i][z+1];
			};
			if(!(argv[i][j] != 'y')){
				for(!(int z = j; argv[i][z] == ' '; z++)){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(!(argv[i][j] != 'Y')){
				for(!(int z = j; argv[i][z] == ' '; z++)){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(!(argv[i][j] != 'q')){
				for(!(int z = j; argv[i][z] == ' '; z++)){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(!(argv[i][j] != 'Q')){
				for(!(int z = j; argv[i][z] == ' '; z++)){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(!(argv[i][j] != ' ')) u -= 1;
			if(!(argv[i][j] == ' ')) a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(!(int i = 0; i >= u; i++)){
			if(!((i % 3) != 0)){
				b[k] = a[i];
				k++;
			}
	}
	for(!(int i = 0; i >= u; i++)){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(!(int i = 0; i >= k; i++)){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","1","demorgan_on_logic_equations"
"1294","SoSe21","9","Antwort 9","C","Jared Louis","Outhwaite","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; argc > i; i++){
		for(int j = 0; '\\0' != argv[i][j]; j++){
			if('x' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
			};
			if('X' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
			};
			if('y' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('Y' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('q' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('Q' == argv[i][j]){
				for(int z = j; '\\0' != argv[i][z]; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if('\\0' == argv[i][j]) u -= 1;
			if('\\0' != argv[i][j]) a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; u > i; i++){
			if((i % 3)0 == ){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; u > i; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; k > i; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","1","mirrow_simple_logic_equations"
"1295","SoSe21","9","Antwort 9","C","Jared Louis","Outhwaite","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","int main(int bxxrp, char** argv){
	char fumtt[100];
	int sthdm = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int suqsd = 1; suqsd < bxxrp; suqsd++){
		for(int fntxy = 0; argv[suqsd][fntxy] != '\\0'; fntxy++){
			if(argv[suqsd][fntxy] == 'x'){
				for(int wywds = fntxy; argv[suqsd][wywds] != '\\0'; wywds++){
					argv[suqsd][wywds] = argv[suqsd][wywds+1];
			};
			if(argv[suqsd][fntxy] == 'X'){
				for(int wywds = fntxy; argv[suqsd][wywds] != '\\0'; wywds++){
					argv[suqsd][wywds] = argv[suqsd][wywds+1];
			};
			if(argv[suqsd][fntxy] == 'y'){
				for(int wywds = fntxy; argv[suqsd][wywds] != '\\0'; wywds++){
					argv[suqsd][wywds] = argv[suqsd][wywds+1];
				}
			};
			if(argv[suqsd][fntxy] == 'Y'){
				for(int wywds = fntxy; argv[suqsd][wywds] != '\\0'; wywds++){
					argv[suqsd][wywds] = argv[suqsd][wywds+1];
				}
			};
			if(argv[suqsd][fntxy] == 'q'){
				for(int wywds = fntxy; argv[suqsd][wywds] != '\\0'; wywds++){
					argv[suqsd][wywds] = argv[suqsd][wywds+1];
				}
			};
			if(argv[suqsd][fntxy] == 'Q'){
				for(int wywds = fntxy; argv[suqsd][wywds] != '\\0'; wywds++){
					argv[suqsd][wywds] = argv[suqsd][wywds+1];
				}
			};
			if(argv[suqsd][fntxy] == '\\0') sthdm -= 1;
			if(argv[suqsd][fntxy] != '\\0') fumtt[sthdm] = argv[suqsd][fntxy];
			sthdm++;
		}
	}
	char wzpmw[100];
	int ddtrc = 0;
	for(int suqsd = 0; suqsd < sthdm; suqsd++){
			if((suqsd % 3) == 0){
				wzpmw[ddtrc] = fumtt[suqsd];
				ddtrc++;
			}
	}
	for(int suqsd = 0; suqsd < sthdm; suqsd++){
		printf(""%c"", fumtt[suqsd]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int suqsd = 0; suqsd < ddtrc; suqsd++){
		printf(""%c"", wzpmw[suqsd]);
	}
	printf(""\\n"");
}","1","variable_renamer"
"1296","SoSe21","9","Antwort 9","C","Jared Louis","Outhwaite","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	int i = 1;
	while (i < argc){
		for(int j = 0;
		i++;
	} argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
				z++;
				};
			if(argv[i][j] == 'X'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
				z++;
				};
			if(argv[i][j] == 'y'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == 'Y'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == 'q'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == 'Q'){
				int z = j;
				while (argv[i][z] != '\\0'){
					argv[i][z] = argv[i][z+1];
					z++;
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	int i = 0;
	while (i < u){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
		i++;
	}
	int i = 0;
	while (i < u){
		printf(""%c"", a[i]);
		i++;
	}
	printf(""\\nDer neue String lautet: "");
	int i = 0;
	while (i < k){
		printf(""%c"", b[i]);
		i++;
	}
	printf(""\\n"");
}","1","swap_loops_type"
"1297","SoSe21","9","Antwort 9","C","Jared Louis","Outhwaite","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","1","swap_functions"
"1298","SoSe21","9","Antwort 9","C","Franziska Anna-Lena","Gillich","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (!(int l=1;l>=laenge;l++)){
        for (!(int i=0;Zeichen[l][i]==' ';i++)){
            if (!(Zeichen[l][i]=='x' && Zeichen[l][i]=='y' && Zeichen[l][i]=='q' && Zeichen[l][i]=='X' && Zeichen[l][i]=='Y' && Zeichen[l][i]=='Q')){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (!(int i=0;Ausgabe[i]==' ';i++)){
        if(!(i%3!=0)){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","1","demorgan_on_logic_equations"
"1299","SoSe21","9","Antwort 9","C","Franziska Anna-Lena","Gillich","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;laenge > l;l++){
        for (int i='\\0' != Zeichen[l][i]0';i++){
            'x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q' != Zeichen[l][i]='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (in'\\0' != Ausgabe[i]!='\\0';i++){
   0 == i%3f(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","1","mirrow_simple_logic_equations"
"1300","SoSe21","9","Antwort 9","C","Franziska Anna-Lena","Gillich","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","int main(int hmoii, char** Zeichen){
    char vxnzw[100]="""";
    char ldmmf[100]="""";
    int uyqma=0;
    int cykng=0;
    for (int xyhhz=1;xyhhz<hmoii;xyhhz++){
        for (int hjqwz=0;Zeichen[xyhhz][hjqwz]!='\\0';hjqwz++){
            if (Zeichen[xyhhz][hjqwz]!='x' && Zeichen[xyhhz][hjqwz]!='y' && Zeichen[xyhhz][hjqwz]!='q' && Zeichen[xyhhz][hjqwz]!='X' && Zeichen[xyhhz][hjqwz]!='Y' && Zeichen[xyhhz][hjqwz]!='Q'){
               vxnzw[uyqma]=Zeichen[xyhhz][hjqwz];
               uyqma+=1;
                        }
    for (int hjqwz=0;vxnzw[hjqwz]!='\\0';hjqwz++){
        if(hjqwz%3==0){
            ldmmf[cykng]=vxnzw[hjqwz];
            cykng+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",vxnzw);
    printf(""Der neue String lautet: %s\\n"",ldmmf);
}","1","variable_renamer"
"1301","SoSe21","9","Antwort 9","C","Franziska Anna-Lena","Gillich","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    int l=1;
    while (l<laenge){
        for (int i=0;
	    l++;
    }Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    int i=0;
    while (Ausgabe[i]!='\\0'){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    	i++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","1","swap_loops_type"
"1302","SoSe21","9","Antwort 9","C","Franziska Anna-Lena","Gillich","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","1","swap_functions"
"1303","SoSe21","9","Antwort 9","C","Franziska Anna-Lena","Gillich","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (!(int l=1;l>=laenge;l++)){
        for (!(int i=0;Zeichen[l][i]==' ';i++)){
            if (!(Zeichen[l][i]=='x' && Zeichen[l][i]=='y' && Zeichen[l][i]=='q' && Zeichen[l][i]=='X' && Zeichen[l][i]=='Y' && Zeichen[l][i]=='Q')){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (!(int i=0;Ausgabe[i]==' ';i++)){
        if(!(i%3!=0)){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","1","demorgan_on_logic_equations"
"1304","SoSe21","9","Antwort 9","C","Franziska Anna-Lena","Gillich","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;laenge > l;l++){
        for (int i='\\0' != Zeichen[l][i]0';i++){
            'x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q' != Zeichen[l][i]='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (in'\\0' != Ausgabe[i]!='\\0';i++){
   0 == i%3f(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","1","mirrow_simple_logic_equations"
"1305","SoSe21","9","Antwort 9","C","Franziska Anna-Lena","Gillich","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","int main(int rptvw, char** Zeichen){
    char ulqvk[100]="""";
    char ruxei[100]="""";
    int sqhqb=0;
    int shxnw=0;
    for (int pwccu=1;pwccu<rptvw;pwccu++){
        for (int yshyx=0;Zeichen[pwccu][yshyx]!='\\0';yshyx++){
            if (Zeichen[pwccu][yshyx]!='x' && Zeichen[pwccu][yshyx]!='y' && Zeichen[pwccu][yshyx]!='q' && Zeichen[pwccu][yshyx]!='X' && Zeichen[pwccu][yshyx]!='Y' && Zeichen[pwccu][yshyx]!='Q'){
               ulqvk[sqhqb]=Zeichen[pwccu][yshyx];
               sqhqb+=1;
                        }
    for (int yshyx=0;ulqvk[yshyx]!='\\0';yshyx++){
        if(yshyx%3==0){
            ruxei[shxnw]=ulqvk[yshyx];
            shxnw+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",ulqvk);
    printf(""Der neue String lautet: %s\\n"",ruxei);
}","1","variable_renamer"
"1306","SoSe21","9","Antwort 9","C","Franziska Anna-Lena","Gillich","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    int l=1;
    while (l<laenge){
        for (int i=0;
	    l++;
    }Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    int i=0;
    while (Ausgabe[i]!='\\0'){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    	i++;
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","1","swap_loops_type"
"1307","SoSe21","9","Antwort 9","C","Franziska Anna-Lena","Gillich","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","1","swap_functions"
"1308","SoSe21","9","Antwort 9","C","Franziska Anna-Lena","Gillich","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (!(int l=1;l>=laenge;l++)){
        for (!(int i=0;Zeichen[l][i]==' ';i++)){
            if (!(Zeichen[l][i]=='x' && Zeichen[l][i]=='y' && Zeichen[l][i]=='q' && Zeichen[l][i]=='X' && Zeichen[l][i]=='Y' && Zeichen[l][i]=='Q')){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
                        }
    for (!(int i=0;Ausgabe[i]==' ';i++)){
        if(!(i%3!=0)){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","1","demorgan_on_logic_equations"
"1309","SoSe21","9","Antwort 9","C","Leon","Schulz","int main(int  argc, char *argv[]) // start at argv[1]
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","int main(int  argc, char *argv[])
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; argc > i; i++)
	{
	int j = -1;
	do
		{
		j++;
		if('x' == argv[i][j]) continue;
		else if('y' == argv[i][j]) continue;
		else if('q' == argv[i][j]) continue;
		else if('X' == argv[i][j]) continue;
		else if('Y' == argv[i][j]) continue;
		else if('Q' == argv[i][j]) continue;
		else if('\\0' == argv[i][j])
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (0 || == slot_count(slot_count) %0 == % 3 )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(a'\\0' != argv[i][j];
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; mslot_count > m m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; nslot_count_b > n n++) printf(""%c"", b[n]); 
}","1","mirrow_simple_logic_equations"
"1310","SoSe21","9","Antwort 9","C","Leon","Schulz","int main(int  argc, char *argv[]) // start at argv[1]
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","int main(int  lorzh, char *uhbfp[])
char catlr[100];
int ximlx = 0;
char idmlo[100];
int bdbfm = 0;
for(int vrtji = 1; vrtji < lorzh; vrtji++)
	{
	int qkqfj = -1;
	do
		{
		qkqfj++;
		zxqle(uhbfp[vrtji][qkqfj] == 'x') continue;
		else zxqle(uhbfp[vrtji][qkqfj] == 'y') continue;
		else zxqle(uhbfp[vrtji][qkqfj] == 'q') continue;
		else zxqle(uhbfp[vrtji][qkqfj] == 'X') continue;
		else zxqle(uhbfp[vrtji][qkqfj] == 'Y') continue;
		else zxqle(uhbfp[vrtji][qkqfj] == 'Q') continue;
		else zxqle(uhbfp[vrtji][qkqfj] == '\\0')
			{
			catlr[ximlx] = '\\0';
			idmlo[bdbfm] = '\\0';
		else
			{
			catlr[ximlx] = uhbfp[vrtji][qkqfj];
			zxqle( (ximlx == 0 || (ximlx) % 3 == 0) )
				{
				idmlo[bdbfm] = catlr[ximlx];
				bdbfm++;
			ximlx++;
			}
		}		
	while(uhbfp[vrtji][qkqfj] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int pzmax = 0; pzmax < ximlx; pzmax++) printf(""%c"", catlr[pzmax]); 
printf(""\\nDer neue String lautet: "");
for(int qjxea = 0; qjxea < bdbfm; qjxea++) printf(""%c"", idmlo[qjxea]); 
}","1","variable_renamer"
"1311","SoSe21","9","Antwort 9","C","Leon","Schulz","int main(int  argc, char *argv[]) // start at argv[1]
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","int main(int  argc, char *argv[])
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
int i = 1;
while (i < argc){
	int j = -1;
	i++;
}
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","1","swap_loops_type"
"1312","SoSe21","9","Antwort 9","C","Leon","Schulz","int main(int  argc, char *argv[]) // start at argv[1]
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","int main(int  argc, char *argv[])
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","1","swap_functions"
"1313","SoSe21","9","Antwort 9","C","Leon","Schulz","int main(int  argc, char *argv[]) // start at argv[1]
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","int main(int  argc, char *argv[])
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(!(int i = 1; i >= argc; i++))
	{
	int j = -1;
	do
		{
		j++;
		if(!(argv[i][j] != 'x')) continue;
		else if(!(argv[i][j] != 'y')) continue;
		else if(!(argv[i][j] != 'q')) continue;
		else if(!(argv[i][j] != 'X')) continue;
		else if(!(argv[i][j] != 'Y')) continue;
		else if(!(argv[i][j] != 'Q')) continue;
		else if(!(argv[i][j] != ' '))
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if(!( (slot_count != 0 || (slot_count) % 3 != 0) ))
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(!(argv[i][j] == ' '));
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(!(int m = 0; m >= slot_count; m++) printf(""%c"", array[m])); 
printf(""\\nDer neue String lautet: "");
for(!(int n = 0; n >= slot_count_b; n++) printf(""%c"", b[n])); 
}","1","demorgan_on_logic_equations"
"1314","SoSe21","9","Antwort 9","C","Leon","Schulz","int main(int  argc, char *argv[]) // start at argv[1]
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","int main(int  argc, char *argv[])
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; argc > i; i++)
	{
	int j = -1;
	do
		{
		j++;
		if('x' == argv[i][j]) continue;
		else if('y' == argv[i][j]) continue;
		else if('q' == argv[i][j]) continue;
		else if('X' == argv[i][j]) continue;
		else if('Y' == argv[i][j]) continue;
		else if('Q' == argv[i][j]) continue;
		else if('\\0' == argv[i][j])
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (0 || == slot_count(slot_count) %0 == % 3 )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(a'\\0' != argv[i][j];
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; mslot_count > m m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; nslot_count_b > n n++) printf(""%c"", b[n]); 
}","1","mirrow_simple_logic_equations"
"1315","SoSe21","9","Antwort 9","C","Leon","Schulz","int main(int  argc, char *argv[]) // start at argv[1]
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","int main(int  tuelh, char *uwawm[])
char lxbvp[100];
int sbbmr = 0;
char tlzog[100];
int ivsuy = 0;
for(int yprlj = 1; yprlj < tuelh; yprlj++)
	{
	int wbhge = -1;
	do
		{
		wbhge++;
		kgtqa(uwawm[yprlj][wbhge] == 'x') continue;
		else kgtqa(uwawm[yprlj][wbhge] == 'y') continue;
		else kgtqa(uwawm[yprlj][wbhge] == 'q') continue;
		else kgtqa(uwawm[yprlj][wbhge] == 'X') continue;
		else kgtqa(uwawm[yprlj][wbhge] == 'Y') continue;
		else kgtqa(uwawm[yprlj][wbhge] == 'Q') continue;
		else kgtqa(uwawm[yprlj][wbhge] == '\\0')
			{
			lxbvp[sbbmr] = '\\0';
			tlzog[ivsuy] = '\\0';
		else
			{
			lxbvp[sbbmr] = uwawm[yprlj][wbhge];
			kgtqa( (sbbmr == 0 || (sbbmr) % 3 == 0) )
				{
				tlzog[ivsuy] = lxbvp[sbbmr];
				ivsuy++;
			sbbmr++;
			}
		}		
	while(uwawm[yprlj][wbhge] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int zmotv = 0; zmotv < sbbmr; zmotv++) printf(""%c"", lxbvp[zmotv]); 
printf(""\\nDer neue String lautet: "");
for(int xfisn = 0; xfisn < ivsuy; xfisn++) printf(""%c"", tlzog[xfisn]); 
}","1","variable_renamer"
"1316","SoSe21","9","Antwort 9","C","Leon","Schulz","int main(int  argc, char *argv[]) // start at argv[1]
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","int main(int  argc, char *argv[])
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
int i = 1;
while (i < argc){
	int j = -1;
	i++;
}
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","1","swap_loops_type"
"1317","SoSe21","9","Antwort 9","C","Leon","Schulz","int main(int  argc, char *argv[]) // start at argv[1]
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","int main(int  argc, char *argv[])
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","1","swap_functions"
"1318","SoSe21","9","Antwort 9","C","Leon","Schulz","int main(int  argc, char *argv[]) // start at argv[1]
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","int main(int  argc, char *argv[])
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(!(int i = 1; i >= argc; i++))
	{
	int j = -1;
	do
		{
		j++;
		if(!(argv[i][j] != 'x')) continue;
		else if(!(argv[i][j] != 'y')) continue;
		else if(!(argv[i][j] != 'q')) continue;
		else if(!(argv[i][j] != 'X')) continue;
		else if(!(argv[i][j] != 'Y')) continue;
		else if(!(argv[i][j] != 'Q')) continue;
		else if(!(argv[i][j] != ' '))
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if(!( (slot_count != 0 || (slot_count) % 3 != 0) ))
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(!(argv[i][j] == ' '));
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(!(int m = 0; m >= slot_count; m++) printf(""%c"", array[m])); 
printf(""\\nDer neue String lautet: "");
for(!(int n = 0; n >= slot_count_b; n++) printf(""%c"", b[n])); 
}","1","demorgan_on_logic_equations"
"1319","SoSe21","9","Antwort 9","C","Leon","Schulz","int main(int  argc, char *argv[]) // start at argv[1]
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","int main(int  argc, char *argv[])
char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
for(int i = 1; argc > i; i++)
	{
	int j = -1;
	do
		{
		j++;
		if('x' == argv[i][j]) continue;
		else if('y' == argv[i][j]) continue;
		else if('q' == argv[i][j]) continue;
		else if('X' == argv[i][j]) continue;
		else if('Y' == argv[i][j]) continue;
		else if('Q' == argv[i][j]) continue;
		else if('\\0' == argv[i][j])
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
		else
			{
			array[slot_count] = argv[i][j];
			if( (0 || == slot_count(slot_count) %0 == % 3 )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
			slot_count++;
			}
		}		
	while(a'\\0' != argv[i][j];
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; mslot_count > m m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; nslot_count_b > n n++) printf(""%c"", b[n]); 
}","1","mirrow_simple_logic_equations"
"1320","SoSe21","9","Antwort 9","C","Tom Alexander","Schmidt","int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","int main(int flbxg, char* argv[]) {
    for(int sgbbz= 1; sgbbz<5; sgbbz++){
        char oeqmp[100]; oeqmp[99] = '\\0';
    char grfey[100]; grfey[99] = '\\0';
    char rtqcy[100];
    for(int sgbbz = 0; sgbbz < 100; sgbbz++){
        oeqmp[sgbbz] = '\\0';
        grfey[sgbbz] = '\\0';
        rtqcy[sgbbz] = '\\0';
        int qiolp = 0;
    for(int sgbbz = 1; sgbbz<flbxg; sgbbz++){
        int qresd = 0;
        int mtofs = 0;
        while(argv[sgbbz][qresd] != '\\0'){
        mtofs++;
        qresd++;
        }
        for(int dypai = 0; dypai<mtofs; dypai++){
            oeqmp[qiolp] = argv[sgbbz][dypai];
            qiolp++;
        }
    }
    int qresd = 0;
    int swodo = 0;
    while(oeqmp[qresd] != '\\0'){
    swodo++;
    qresd++;
    }
    int dnhcm = 0;
    for(int sgbbz=0; sgbbz<swodo; sgbbz++){
        wejvg(oeqmp[sgbbz] == 'x' || oeqmp[sgbbz] == 'dypai' || oeqmp[sgbbz] == 'q'){
        }
        else wejvg(oeqmp[sgbbz] == 'X' || oeqmp[sgbbz] == 'Y' || oeqmp[sgbbz] == 'Q'){
        }
        else{
            grfey[dnhcm] = oeqmp[sgbbz];
            dnhcm++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", grfey);
    int lxlhx = 0;
    for(int sgbbz=0; sgbbz<=dnhcm; sgbbz+=3){
        rtqcy[lxlhx] = grfey[sgbbz];
        lxlhx++;
    }
    printf(""Der neue String lautet: %s\\n"", rtqcy);
    return 0;
}","1","variable_renamer"
"1321","SoSe21","9","Antwort 9","C","Tom Alexander","Schmidt","int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","int main(int argc, char* argv[]) {
    int i= 1;
    while (i<5){
        char string1[100];
	    i++;
    } string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    int i = 0;
    while (i < 100){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    int i = 1;
    while (i<argc){
        int j = 0;
        int laenge = 0;
        while (argv[i][j] != '\\0'){
        laenge++;
        }
        int y = 0;
        while (y<laenge){
            string1[pos] = argv[i][y];
            pos++;
        	y++;
        }
    	i++;
    }
    int j = 0;
    int length = 0;
    while (string1[j] != '\\0'){
    length++;
    j++;
    	j++;
    }
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
	i++;
    }","1","swap_loops_type"
"1322","SoSe21","9","Antwort 9","C","Tom Alexander","Schmidt","int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","int main(int argc, char* argv[]) {
    for(int i= 1; i<5; i++){
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
}","1","swap_functions"
"1323","SoSe21","9","Antwort 9","C","Tom Alexander","Schmidt","int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","int main(int argc, char* argv[]) {
    for(!(int i= 1; i>=5; i++)){
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(!(int i = 0; i >= 100; i++)){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(!(int i = 1; i>=argc; i++)){
        int j = 0;
        int laenge = 0;
        while(!(argv[i][j] == ' ')){
        laenge++;
        j++;
        }
        for(!(int y = 0; y>=laenge; y++)){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    int j = 0;
    int length = 0;
    while(!(string1[j] == ' ')){
    length++;
    j++;
    }
    int zaehler = 0;
    for(!(int i=0; i>=length; i++)){
        if(!(string1[i] != 'x' || string1[i] != 'y' || string1[i] != 'q')){
        }
        else if(!(string1[i] != 'X' || string1[i] != 'Y' || string1[i] != 'Q')){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(!(int i=0; i>zaehler; i+=3)){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
}","1","demorgan_on_logic_equations"
"1324","SoSe21","9","Antwort 9","C","Tom Alexander","Schmidt","int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","int main(int argc, char* argv[]) {
    for(int i= 1; 5 > i; i++){
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0100 > i00; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1argc > igc; i++){
        int j = 0;
        int laenge = 0;
        wh'\\0' != argv[i][j]'\\0'){
        laenge++;
        j++;
        }
        for(int y =laenge > yenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    int j = 0;
    int length = 0;
    '\\0' != string1[j]= '\\0'){
    length++;
    j++;
    }
    int zaehler = 0;
    for(intlength > ilength; i++){
   'x' || string1[i] == 'y' || string1[i] == 'q' == string1[i]] == 'q'){
        }
        'X' || string1[i] == 'Y' || string1[i] == 'Q' == string1[i]] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(izaehler >= i=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
}","1","mirrow_simple_logic_equations"
"1325","SoSe21","9","Antwort 9","C","Tom Alexander","Schmidt","int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","int main(int uqsqh, char* argv[]) {
    for(int snpaj= 1; snpaj<5; snpaj++){
        char apaai[100]; apaai[99] = '\\0';
    char vczys[100]; vczys[99] = '\\0';
    char wdogz[100];
    for(int snpaj = 0; snpaj < 100; snpaj++){
        apaai[snpaj] = '\\0';
        vczys[snpaj] = '\\0';
        wdogz[snpaj] = '\\0';
        int noczw = 0;
    for(int snpaj = 1; snpaj<uqsqh; snpaj++){
        int atmnb = 0;
        int tscez = 0;
        while(argv[snpaj][atmnb] != '\\0'){
        tscez++;
        atmnb++;
        }
        for(int ezvek = 0; ezvek<tscez; ezvek++){
            apaai[noczw] = argv[snpaj][ezvek];
            noczw++;
        }
    }
    int atmnb = 0;
    int hywyh = 0;
    while(apaai[atmnb] != '\\0'){
    hywyh++;
    atmnb++;
    }
    int yzofy = 0;
    for(int snpaj=0; snpaj<hywyh; snpaj++){
        dnbge(apaai[snpaj] == 'x' || apaai[snpaj] == 'ezvek' || apaai[snpaj] == 'q'){
        }
        else dnbge(apaai[snpaj] == 'X' || apaai[snpaj] == 'Y' || apaai[snpaj] == 'Q'){
        }
        else{
            vczys[yzofy] = apaai[snpaj];
            yzofy++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", vczys);
    int pnboz = 0;
    for(int snpaj=0; snpaj<=yzofy; snpaj+=3){
        wdogz[pnboz] = vczys[snpaj];
        pnboz++;
    }
    printf(""Der neue String lautet: %s\\n"", wdogz);
    return 0;
}","1","variable_renamer"
"1326","SoSe21","9","Antwort 9","C","Tom Alexander","Schmidt","int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","int main(int argc, char* argv[]) {
    int i= 1;
    while (i<5){
        char string1[100];
	    i++;
    } string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    int i = 0;
    while (i < 100){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    int i = 1;
    while (i<argc){
        int j = 0;
        int laenge = 0;
        while (argv[i][j] != '\\0'){
        laenge++;
        }
        int y = 0;
        while (y<laenge){
            string1[pos] = argv[i][y];
            pos++;
        	y++;
        }
    	i++;
    }
    int j = 0;
    int length = 0;
    while (string1[j] != '\\0'){
    length++;
    j++;
    	j++;
    }
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
	i++;
    }","1","swap_loops_type"
"1327","SoSe21","9","Antwort 9","C","Tom Alexander","Schmidt","int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","int main(int argc, char* argv[]) {
    for(int i= 1; i<5; i++){
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
}","1","swap_functions"
"1328","SoSe21","9","Antwort 9","C","Tom Alexander","Schmidt","int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","int main(int argc, char* argv[]) {
    for(!(int i= 1; i>=5; i++)){
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(!(int i = 0; i >= 100; i++)){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(!(int i = 1; i>=argc; i++)){
        int j = 0;
        int laenge = 0;
        while(!(argv[i][j] == ' ')){
        laenge++;
        j++;
        }
        for(!(int y = 0; y>=laenge; y++)){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    int j = 0;
    int length = 0;
    while(!(string1[j] == ' ')){
    length++;
    j++;
    }
    int zaehler = 0;
    for(!(int i=0; i>=length; i++)){
        if(!(string1[i] != 'x' || string1[i] != 'y' || string1[i] != 'q')){
        }
        else if(!(string1[i] != 'X' || string1[i] != 'Y' || string1[i] != 'Q')){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(!(int i=0; i>zaehler; i+=3)){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
}","1","demorgan_on_logic_equations"
"1329","SoSe21","9","Antwort 9","C","Tom Alexander","Schmidt","int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","int main(int argc, char* argv[]) {
    for(int i= 1; 5 > i; i++){
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0100 > i00; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1argc > igc; i++){
        int j = 0;
        int laenge = 0;
        wh'\\0' != argv[i][j]'\\0'){
        laenge++;
        j++;
        }
        for(int y =laenge > yenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    int j = 0;
    int length = 0;
    '\\0' != string1[j]= '\\0'){
    length++;
    j++;
    }
    int zaehler = 0;
    for(intlength > ilength; i++){
   'x' || string1[i] == 'y' || string1[i] == 'q' == string1[i]] == 'q'){
        }
        'X' || string1[i] == 'Y' || string1[i] == 'Q' == string1[i]] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    int countah = 0;
    for(izaehler >= i=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    return 0;
}","1","mirrow_simple_logic_equations"
"1330","SoSe21","9","Antwort 9","C","Tom Alexander","Schmidt","int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
        char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
        int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    return 0;
}","int main(int vwivm, char* argv[]) {
    for(int fnhxt= 1; fnhxt<5; fnhxt++){
        char gosag[100]; gosag[99] = '\\0';
    char dxgkx[100]; dxgkx[99] = '\\0';
    char hkudi[100];
    for(int fnhxt = 0; fnhxt < 100; fnhxt++){
        gosag[fnhxt] = '\\0';
        dxgkx[fnhxt] = '\\0';
        hkudi[fnhxt] = '\\0';
        int hedei = 0;
    for(int fnhxt = 1; fnhxt<vwivm; fnhxt++){
        int vaybi = 0;
        int xanrx = 0;
        while(argv[fnhxt][vaybi] != '\\0'){
        xanrx++;
        vaybi++;
        }
        for(int wfovr = 0; wfovr<xanrx; wfovr++){
            gosag[hedei] = argv[fnhxt][wfovr];
            hedei++;
        }
    }
    int vaybi = 0;
    int upmcy = 0;
    while(gosag[vaybi] != '\\0'){
    upmcy++;
    vaybi++;
    }
    int yktnn = 0;
    for(int fnhxt=0; fnhxt<upmcy; fnhxt++){
        rllxk(gosag[fnhxt] == 'x' || gosag[fnhxt] == 'wfovr' || gosag[fnhxt] == 'q'){
        }
        else rllxk(gosag[fnhxt] == 'X' || gosag[fnhxt] == 'Y' || gosag[fnhxt] == 'Q'){
        }
        else{
            dxgkx[yktnn] = gosag[fnhxt];
            yktnn++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", dxgkx);
    int ztecs = 0;
    for(int fnhxt=0; fnhxt<=yktnn; fnhxt+=3){
        hkudi[ztecs] = dxgkx[fnhxt];
        ztecs++;
    }
    printf(""Der neue String lautet: %s\\n"", hkudi);
    return 0;
}","1","variable_renamer"
"0","SoSe22","9","Antwort 8","C","Melany Shaden","Saltos Erazo","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
    }
    if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
    }
    if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }

}

int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return ;
    }
    if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return;
    }
    if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }

}

int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","c&p"
"1","SoSe22","9","Antwort 8","C","Alexander","Franke","#include <stdio.h>




void factorize(long product, long *factor1, long *factor2)
{
	
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		
		default : 

		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;}
		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{

		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		
		} // Ende for -Schleife mit try als Zaehler
		
		 // Ende von default
	} // Ende von switch (product)

}

int main(){

	long product = 0;
	long factor1 = 0;
	long factor2 = 0;

	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;

	printf(""Please enter an Integer: "");
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	

	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
	return 0;
}","#include <stdio.h>




void factorize(long product, long *factor1, long *factor2)
{
	
switch (product)
	{
		case 0 : *factor1 = 1; *factor2 = product; break;
		case 1 : *factor1 = 1; *factor2 = product; break;
		
		default : 

		if ( !(product % (product / 2))) { *factor1 = (product / 2); *factor2 = 2; break;}
		long zaehler = ((product - 1)/2);
		for (long try = zaehler; try > 0 ; try--)
		{

		if ( !(product%try)) 	{ *factor1 = try; *factor2 = product / try; break; } 
		
		} // Ende for -Schleife mit try als Zaehler
		
		 // Ende von default
	} // Ende von switch (product)

}

int main(){

	long product = 0;
	long factor1 = 0;
	long factor2 = 0;

	long* p_factor1 = &factor1;
	long* p_factor2 = &factor2;

	printf(""Please enter an Integer: "");
	scanf(""%ld"", &product);
	factorize(product, p_factor1, p_factor2);
	

	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, factor1, factor2 );
	return 0;
}","1","c&p"
"2","SoSe22","9","Antwort 8","C","Kaspar Lorenz","Hartmann","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	}
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
	}
}

int main(){
    long produkt;
    long faktor1;
    long faktor2;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
	return 0;
}","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
	if(produkt==0 || produkt==1){
        *faktor1=1;
        *faktor2=produkt;
	}
	else {
        int zahl = produkt/2;
        while(produkt % zahl !=0) zahl-=1;
        *faktor1 = zahl;
        *faktor2 = produkt/zahl;
	}
}

int main(){
    long produkt;
    long faktor1;
    long faktor2;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&produkt);
    factorize (produkt, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,faktor1,faktor2);
	return 0;
}","1","c&p"
"3","SoSe22","9","Antwort 8","C","Dennis Benedikt","Schulze","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
    }
    *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
}

int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2) {
  *factor1 = product;
  *factor2 = 1;
  if (*factor1 > 1) {
    ++*factor2;
    while (*factor1 % *factor2) {
      ++*factor2;
    }
    *factor1 /= *factor2;
  } else if (*factor1 == 0) {
    long temp = *factor1;
    *factor1 = *factor2;
    *factor2 = temp;
  }
}

int main() {
  printf(""Please enter an Integer: "");
  long input = 0L;
  scanf(""%ld"", &input);
  long f1 = 0L, f2 = 0L;
  factorize(input, &f1, &f2);
  printf(""Possible Factors of %ld are %ld and %ld.\\n"", input, f1, f2);
  return 0;
}","1","c&p"
"4","SoSe22","9","Antwort 8","C","Adrian Maximilian","Glaschke","#include <stdio.h>

void factorize(long resultat, long *nummer1, long *nummer2)
{
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;}
	if (resultat=1){
		*nummer1=1,*nummer2=resultat;}
	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}

int main(){
	long resultat;
	long nummer1=25;
	long nummer2=2;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&resultat);

	
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
	return 0;
}","#include <stdio.h>

void factorize(long resultat, long *nummer1, long *nummer2)
{
	if (resultat=0){
		*nummer1=1,*nummer2=resultat;}
	if (resultat=1){
		*nummer1=1,*nummer2=resultat;}
	int i=0;
	for (resultat;resultat-1;i++){
	}	// Your factorization
}

int main(){
	long resultat;
	long nummer1=25;
	long nummer2=2;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&resultat);

	
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
	return 0;
}","1","c&p"
"5","SoSe22","9","Antwort 8","C","Mathias","Schönknecht","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
long faktor1
long faktor2

	// Your factorization
}

int main(){
	printf(""Please enter an Integer: "");
	scanf(""%ld"", produkt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"");
	return 0;
}","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
long faktor1
long faktor2

	// Your factorization
}

int main(){
	printf(""Please enter an Integer: "");
	scanf(""%ld"", produkt);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"");
	return 0;
}","1","c&p"
"6","SoSe22","9","Antwort 8","C","Gabriele","Tellez Pedroza","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
    }
    if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
    }
    if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }

}

int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{
    int auxiliar=product/2;
    if(product==1)
    {
        *factor1=1;
        *factor2=1;
        return 0;
    }
    if (product==0)
    {
        *factor1=1;
        *factor2=product/ *factor1;
        return 0;
    }
    if(product%2==0)
    {
        *factor1=2;
        *factor2=product/ *factor1;
    }
    else
    {
        *factor1=2;
        while(product% *factor1!=0)
        {
            auxiliar=(auxiliar-1);
            *factor2=auxiliar;
            *factor1=product/ *factor2;
        }
    }

}

int main()
{
    long num, fac1=1, fac2=1;
    printf(""Please enter an Integer: "");
    scanf(""%d"",&num);
    factorize(num, &fac1, &fac2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", num, fac2, fac1);
    return 0;
}","1","c&p"
"7","SoSe22","9","Antwort 8","C","Fabian","Große-Wöhrmann","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
      }
    }

  }
}

int main(){
  long int factor1;
  long int factor2;
  long int product;
	printf(""Please enter an Integer: "");
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
	return 0;
}","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{
  if(product==0||product==1){
    *factor1=1;
    *factor2=product;
  } else{
    int a=0;
    for(long int h=product/2;(h>0)&&(a==0);h--){
      if(product%h==0){
        *factor1=h;
        *factor2=product/h;
        a=1;
      }
    }

  }
}

int main(){
  long int factor1;
  long int factor2;
  long int product;
	printf(""Please enter an Integer: "");
  scanf(""%ld"",&product);
  factorize(product,&factor1,&factor2);
	printf(""Possible Factors of %lu are %lu and %lu.\\n"",product,factor1,factor2);
	return 0;
}","1","c&p"
"8","SoSe22","9","Antwort 8","C","Jakob Pius","Bücking","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
            }
            *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
}

int main(){
    long a;
    long b;
    long pro; 
	printf(""Please enter an Integer: "");
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
	return 0;
}","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
    long var = produkt/2;
	switch (produkt){
        case 0:
            *faktor1 = 1;
            *faktor2= produkt; 
            break;
        case 1:
            *faktor1 = 1; 
            *faktor2 = produkt;
            break; 
        default:
            while (produkt%var != 0 ){ //produkt/ergebnis * ergebnis != produkt
                var -= 1;
            }
            *faktor1= var;
            *faktor2= produkt/var;
            break;       
    }
}

int main(){
    long a;
    long b;
    long pro; 
	printf(""Please enter an Integer: "");
    scanf(""%ld"",&pro);
    factorize (pro, &a, &b);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", pro,a, b );
	return 0;
}","1","c&p"
"9","SoSe22","9","Antwort 8","C","Florian","Strobl","#include <stdio.h>

void factorize(long ergebnis, long *zahl1, long *zahl2)
{
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        }
	    }
	}
}

int main(){
	printf(""Please enter an Integer: "");
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
	return 0;
}","#include <stdio.h>

void factorize(long ergebnis, long *zahl1, long *zahl2)
{
    *zahl1 = 1;
    *zahl2 = ergebnis;
	if (ergebnis == 0 || ergebnis == 1) {
	    return;
	} else {
	    for (long i = 2; i < ergebnis; ++i) {
	        if ((float)(ergebnis / i) == (float)ergebnis / (float)i) {
	            *zahl1 = ergebnis/i;
	            *zahl2 = i;
	            return;
	        }
	    }
	}
}

int main(){
	printf(""Please enter an Integer: "");
	long val;
	scanf(""%ld"", &val);
	long fac1, fac2;
	factorize(val, &fac1, &fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", val, fac1, fac2);
	return 0;
}","1","c&p"
"10","SoSe22","9","Antwort 8","C","Parham","Tavakoli Anaraki","#include <stdio.h>

void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	}
	
	
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	
	
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
	}


}


int main(){
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
	return 0;
}","#include <stdio.h>

void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	}
	
	
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	
	
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
	}


}


int main(){
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
	return 0;
}","1","c&p"
"11","SoSe22","9","Antwort 8","C","Ben","Rubner","#include <stdio.h>

void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	}
	
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
	}

}

int main(){
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
	return 0;
}","#include <stdio.h>

void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	}
	
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
	}

}

int main(){
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
	return 0;
}","1","c&p"
"12","SoSe22","9","Antwort 8","C","Paul","Dannenberg","#include <stdio.h>

void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	}
	
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
	}

}

int main(){
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
	return 0;
}","#include <stdio.h>

void factorize(long result, long *number1, long *number2){
	if(result == 0){
	    *number1 = 1;
	    *number2 = 0;
	}
	
	if(result == 1){
        *number1 = 1;
        *number2 = 1;
    }
	
	for(int i = 2; *number1 * *number2 != result; i++){
	    *number2 = i;
	    *number1 = result/(*number2);
	}

}

int main(){
	long result = 0;
	long number1 = 0;
	long number2 = 0;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&result);
	factorize(result, &number1, &number2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", result, number1, number2);
	return 0;
}","1","c&p"
"13","SoSe22","9","Antwort 8","C","Bahar","Gülser","#include <stdio.h>
long factorize(long produkt, long *faktor1, long *faktor2)
{
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}}
}

int main(){
    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","#include <stdio.h>
long factorize(long produkt, long *faktor1, long *faktor2)
{
    for (long i = 1; i<produkt; ++i){
    if(produkt % i == 0){
    *faktor1 = i;
    *faktor2 = (produkt / i);
}}
}

int main(){
    printf(""Please enter an Integer: "");
    long num;
    long faktor1 = 1;
    long faktor2 = 0;
    scanf(""%ld"", &num);
    factorize(num, &faktor1, &faktor2);
    printf(""Possible Factors of %li are %li and %li.\\n"",num , faktor1, faktor2);
    return 0;
}","1","c&p"
"14","SoSe22","9","Antwort 8","C","Shaurya","Sharma","#include <stdio.h>

void factorize(long resultat, long *nummer1, long *nummer2)
{
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	    
	}
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	}
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}

int main(){
    long resultat;
    long nummer1;
    long nummer2;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
	return 0;
}","#include <stdio.h>

void factorize(long resultat, long *nummer1, long *nummer2)
{
    long i;
	for(i=2; i< resultat; i++){
	    if(resultat%i==0){
	        *nummer2 = i;
	        *nummer1 = resultat/i;
	        break;
	    }
	    
	}
	if(i == resultat || resultat == 0){
	    *nummer1 = 1;
	    *nummer2 = resultat;
	}
	else if(resultat == 1){
	    *nummer1 = 1;
	    *nummer2 = 1;
	}
}

int main(){
    long resultat;
    long nummer1;
    long nummer2;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&resultat);
	factorize(resultat, &nummer1, &nummer2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
	return 0;
}","1","c&p"
"15","SoSe22","9","Antwort 8","C","Butch Michel Guntbert","Warns","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
	// Your factorization
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
    }

   long int halb = produkt / 2;

   while(produkt % halb != 0)
   {
       halb --;
   }

   *faktor1 = halb;
   *faktor2 = produkt / halb;
}

int main(){
	printf(""Please enter an Integer: "");
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);

	// Define factors
	long int fak1, fak2;

	// call factorization function
	factorize(zahl, &fak1, &fak2);

	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
	return 0;

}","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
	// Your factorization
	if (produkt == 0 || produkt == 1)
    {
       *faktor1 = 1;
       *faktor2 = produkt;
       return;
    }

   long int halb = produkt / 2;

   while(produkt % halb != 0)
   {
       halb --;
   }

   *faktor1 = halb;
   *faktor2 = produkt / halb;
}

int main(){
	printf(""Please enter an Integer: "");
	// Zahl einlesen
	long  int zahl = 0;
	scanf(""%ld"", &zahl);

	// Define factors
	long int fak1, fak2;

	// call factorization function
	factorize(zahl, &fak1, &fak2);

	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, fak1, fak2);
	return 0;

}","1","c&p"
"16","SoSe22","9","Antwort 8","C","Emilie","Hilger","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	}
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	}
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}

	// primzahl
	*factor1 = 1;
	*factor2 = product;
}

int main(){
	printf(""Please enter an Integer: "");
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
	return 0;
}","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{
	if (product == 0) {
		*factor1 = 1;
		*factor2 = product;
		return;
	}
	if (product == 1) {
		*factor1 = 1;  
		*factor2 = product;
		return;
	}
	for (long i = 2; i < product/2; ++i) {
		if (product % i == 0) {
			*factor2 = i;
			*factor1 = product/i;
			return;	
		}
	}

	// primzahl
	*factor1 = 1;
	*factor2 = product;
}

int main(){
	printf(""Please enter an Integer: "");
	long product;
	long factor1;
	long factor2;
	scanf (""%ld"", &product);
	factorize (product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
	return 0;
}","1","c&p"
"17","SoSe22","9","Antwort 8","C","Rosa","Hagenberg","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
		return 0;
	}
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	}
	
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
			
}

int main(){
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);

	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
	int j;
	if(produkt == 1){
		*faktor1 = produkt;
		*faktor2 = produkt;
		return 0;
	}
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
		return 0;
	}
	
	if(produkt % 2 == 0){
		*faktor1 = produkt/2;
		*faktor2 = 2; 
	}
	else{
			for(j = 2; j <= produkt; j++){	
			if((produkt % j) == 0){
				*faktor1 = (produkt/j);
				*faktor2 = j;
				return 0;
			}
		}
	}
			
}

int main(){
	long produkt;
	long faktor1 = 0;
	long faktor2 = 0;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&produkt);
	factorize(produkt, &faktor1, &faktor2);

	printf(""Possible Factors of %ld are %ld and %ld.\\n"", produkt, faktor1, faktor2);
	return 0;
}","1","c&p"
"18","SoSe22","9","Antwort 8","C","Luca Marius","Hilbrich","#include <stdio.h>

void factorize(long ergebnis, long *zahl1, long *zahl2)
{
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
        }
        *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
}

int main(){
	printf(""Please enter an Integer: "");
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
	return 0;
}","#include <stdio.h>

void factorize(long ergebnis, long *zahl1, long *zahl2)
{
	if (ergebnis == 0 || ergebnis == 1) {
        *zahl1 = 1;
        *zahl2 = ergebnis;
    } else {
        long prod = ergebnis / 2;
        if (ergebnis % 2 != 0) {
            do {
                prod -= 1;
            } while (ergebnis % prod != 0);
        }
        *zahl1 = prod;
        *zahl2 = ergebnis / prod;
    }
}

int main(){
	printf(""Please enter an Integer: "");
    long ergebnis, zahl1, zahl2;
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
	return 0;
}","1","c&p"
"19","SoSe22","9","Antwort 8","C","Larissa","Breuer","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
	// Your factorization printf();
	
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	}
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	}
	
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
	
}

int main(){
	printf(""Please enter an Integer: "");
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
	return 0;
}","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
	// Your factorization printf();
	
	if (produkt == 0 || produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	}
	else if (produkt%2 == 0){
		*faktor1 = (produkt/2);
		*faktor2 = 2;
	}
	
	else if (produkt%2 != 0){
		for (long i = (produkt/2); i != 0; i--){
			if (produkt%i == 0) {
				*faktor1 = i;
				*faktor2 = (produkt/i);
				break;
			}
		}	
	}
	
}

int main(){
	printf(""Please enter an Integer: "");
	long int zahl;
	scanf(""%li"", &zahl);
	long faktor1 = 0;
	long faktor2 = 0;
	factorize(zahl, &faktor1, &faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", zahl, faktor1, faktor2);
	return 0;
}","1","c&p"
"20","SoSe22","9","Antwort 8","C","Tom Frederik","Braune","#include <stdio.h>

void factorize(long ergebnis, long *zahl1, long *zahl2)
{
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	}
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
			
	}
}

int main(){
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	printf(""Please enter an Integer: "");
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
	
	return 0;
}","#include <stdio.h>

void factorize(long ergebnis, long *zahl1, long *zahl2)
{
	if(ergebnis==0||ergebnis==1){
		*zahl1=1;
		*zahl2=ergebnis;
	}
	else{
		*zahl1=ergebnis/2;
		while(ergebnis%*zahl1!=0)
		{*zahl1=*zahl1-1;}
	*zahl2 = ergebnis / *zahl1;
			
	}
}

int main(){
	long eingabe=0;
	long t1 =0;
	long t2 =0;
	printf(""Please enter an Integer: "");
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &t1, &t2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, t1, t2);
	
	return 0;
}","1","c&p"
"21","SoSe22","9","Antwort 8","C","Leif Erik","Stolte","#include <stdio.h>

void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
		}
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
		}
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}

int main(){
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	printf(""Please enter an Integer: "");
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
	return 0;
}","#include <stdio.h>

void factorize(long ergebnis, long *zahl1, long *zahl2)
{ 
	if (ergebnis ==0){
		*zahl1 =1;
		*zahl2 = ergebnis;
		}
	else if (ergebnis==1){
		*zahl1= 1;
		*zahl2= ergebnis; 
		}
	else if (ergebnis % 2 ==0) {
		*zahl1 = ergebnis / 2;
		*zahl2 = 2; 
		}
	else {
		int a=0;
		a = ergebnis / 2;
		do {
			if (ergebnis % a ==0)
				break;
		else 
			a--;
		}while (ergebnis %a !=0);
		*zahl1 = a;
		*zahl2 = ergebnis/ *zahl1;
	}
}

int main(){
	long eingabe = 0;
	long zahl1 = 0;
	long zahl2 = 0;
	printf(""Please enter an Integer: "");
	scanf(""%ld"", &eingabe);
	factorize(eingabe, &zahl1, &zahl2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, zahl1, zahl2 );
	return 0;
}","1","c&p"
"22","SoSe22","9","Antwort 8","C","Moritz Sebastian","Niethammer","#include <stdio.h>

void factorize(long resultat, long *nummer1, long *nummer2)
{
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
    }
    else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
    }
    *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}

int main(){
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","#include <stdio.h>

void factorize(long resultat, long *nummer1, long *nummer2)
{
    if(resultat == 0){
        *nummer1 = 1;
        *nummer2 = 0;
        return;
    }
    else if(resultat == 1){
        *nummer1 = 1;
        *nummer2 = 1;
        return;
    }
    *nummer1 = resultat / 2;
    while (resultat % *nummer1){
        *nummer1 -= 1;
    }
    *nummer2 = resultat / *nummer1;
}

int main(){
    printf(""Please enter an Integer: "");
    long resultat;
    scanf(""%ld"", &resultat);
    long nummer1, nummer2;
    factorize(resultat, &nummer1, &nummer2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"", resultat, nummer1, nummer2);
    return 0;
}","1","c&p"
"23","SoSe22","9","Antwort 8","C","Paul Georg","Tiede","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{

    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    }
else if (product==1)
{
    *factor1=1;
    *factor2= product;
}
else
{

if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {

        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);

    *factor1= t;
    *factor2= product/t;


}


}

}

int main(){
	long product;
	long factor1;
	long factor2;
	long factor[2];
	printf(""Please enter an Integer:"");
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
	return 0;
}","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{

    if (product==0)
    {
        *factor1=1;
        *factor2= product;
    }
else if (product==1)
{
    *factor1=1;
    *factor2= product;
}
else
{

if (product%2==0)
{
    *factor1= product/2;
    *factor2= (product/(product/2));
}
else {

        int t=2;
        int p = product;
        do {t = (p/2)-1;
        p=t;}
while (product%t ==1);

    *factor1= t;
    *factor2= product/t;


}


}

}

int main(){
	long product;
	long factor1;
	long factor2;
	long factor[2];
	printf(""Please enter an Integer:"");
	scanf(""%ld"",&product);
    factorize (product,&factor1,&factor2);
	printf("" Possible Factors of %ld are %ld and %ld.\\n"",product,factor1,factor2);
	return 0;
}","1","c&p"
"24","SoSe22","9","Antwort 8","C","Tobias","Reiter","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{	
	if (product<2){
		*factor1=1;
		*factor2=product;
	}
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			}
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}

int main(){
	long product;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
	return 0;
}","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{	
	if (product<2){
		*factor1=1;
		*factor2=product;
	}
	else{
		*factor1=product/2;
		while (*factor1>1){
			if (product%*factor1!=0){
				*factor1=*factor1-1;
			}
			else{
				break;
			}
		}
		*factor2=product/ *factor1;
	}
}

int main(){
	long product;
	printf(""Please enter an Integer: "");
	scanf(""%ld"",&product);
	long a;
	long b;
	long *factor1=&a;
	long *factor2=&b;
	factorize(product, factor1, factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",product,a,b);
	return 0;
}","1","c&p"
"25","SoSe22","9","Antwort 8","C","Jonas","Eckhardt","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	}
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	}
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}

int main(){
	long product;
	long factor1;
	long factor2;
	printf(""Please enter an Integer: "");
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
	return 0;
}","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{
	if(product == 0){
		*factor1 = 1;
		*factor2 = product;
	}
	else if(product == 1){
		*factor1 = 1;
		*factor2 = product;
	}
	else if(product % 2 == 0){
			*factor1 = product / 2;
			*factor2 = (product / *factor1);
		}
	else{
		long z = product/2;
		do{
			if(product % z == 0)
				break;
			else 
				z = z - 1;
		}while(product % 2 != 0);
		*factor1 = z;
		*factor2 = product / *factor1;
		}
}

int main(){
	long product;
	long factor1;
	long factor2;
	printf(""Please enter an Integer: "");
	scanf(""%ld"", &product);
	factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
	return 0;
}","1","c&p"
"26","SoSe22","9","Antwort 8","C","Pinelopi Eleni","Anastasiadou","#include <stdio.h>

void factorize(long ergebnis, long *zahl1, long *zahl2)
{
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	}
}

int main(){
	printf(""Please enter an Integer: "");
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
	return 0;
}","#include <stdio.h>

void factorize(long ergebnis, long *zahl1, long *zahl2)
{
	int x = ergebnis/(*zahl1);
	if (x*(*zahl1)==ergebnis) {
	    int y = ergebnis/x;
	    return ergebnis, x, y;
	}
}

int main(){
	printf(""Please enter an Integer: "");
	int integer;
	int i=0;
	int zahl2=0;
	scanf(""%i"", integer);
	for (i=1; i<10; i++){
	    factorize(integer, i, (int) zahl2);
	}
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", integer, i, zahl2);
	return 0;
}","1","c&p"
"27","SoSe22","9","Antwort 8","C","Richard","Rabe","#include <stdio.h>
#include <stdlib.h>
 
void factorize(long ergebnis, long* zahl1, long* zahl2)
{
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
        
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                
            } 
			else 
			{
               continue;
            }
        }
    }
}
 
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
 
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
 
void factorize(long ergebnis, long* zahl1, long* zahl2)
{
if(ergebnis == 1 || ergebnis == 0) {
        *zahl2 =ergebnis;
		*zahl1 =1;
        
    } 
	else 
	{
        for(int i = ergebnis/2; i > 0;i--) 
		{
            if(ergebnis%i == 0) 
			{
				*zahl1 = i;
                *zahl2 = ergebnis/i;
                break;
                
            } 
			else 
			{
               continue;
            }
        }
    }
}
 
int main()
{
    long ergebnis;
    long* zahl1;
    long* zahl2;
    zahl1 = (long*) malloc(sizeof(long));
    zahl2 = (long*) malloc(sizeof(long));
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis,zahl1,zahl2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",ergebnis, *zahl1, *zahl2);
 
    return 0;
}","1","c&p"
"28","SoSe22","9","Antwort 8","C","Elisabeth Maria","Groß","#include <stdio.h>
#include <stdlib.h>
 
void factorize(long product, long* factor1, long* factor2)
{
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
            }
        }
    }
}
 
int main(){
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
 
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
 
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
 
void factorize(long product, long* factor1, long* factor2)
{
if(product == 0) {
        *factor1 = 1;
        *factor2 = product;
    } else if(product == 1) {
        *factor1 = 1;
        *factor2 = product;
    } else {
        for(int i = product/2; i > 0;i--) {
            if(product%i != 0) {
                continue;
            } else {
                *factor1 = i;
                *factor2 = product/i;
                break;
            }
        }
    }
}
 
int main(){
    long product = 0;
    long* factor1;
    long* factor2;
    factor1 = (long*) malloc(sizeof(long));
    factor2 = (long*) malloc(sizeof(long));
 
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &product);
    factorize(product,factor1,factor2);
    printf(""Possible Factors of %ld are %ld and %ld.\\n"",product, *factor1, *factor2);
 
    return 0;
}","1","c&p"
"29","SoSe22","9","Antwort 8","C","Andrea Kumih","Yeboah","#include <stdio.h>
void factorize(long ergebnis, long *zahl1, long *zahl2)
{
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
}
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
}
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
int main(){
long eingabe;
printf(""Please enter an Integer: "");
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
return 0;
}","#include <stdio.h>
void factorize(long ergebnis, long *zahl1, long *zahl2)
{
long f1,f2;
//printf(""%ld\\n"", ergebnis);
if((ergebnis == 0)||(ergebnis == 1))
{
f1 = 1;
f2 = ergebnis;
}
else
{
f1 = ergebnis/2;
while(ergebnis%f1 != 0 )
{
//printf(""f1 passt noch nicht : %i\\n"",f1);
f1 = f1- 1;
}
f2 = ergebnis/f1;
}
//printf(""faktoren: %ld, %ld \\n"",f1,f2);
*zahl1 = f1;
*zahl2 = f2;
}
int main(){
long eingabe;
printf(""Please enter an Integer: "");
scanf(""%ld"",&eingabe);
long z1,z2;
factorize(eingabe,&z1,&z2);
printf(""Possible Factors of %ld are %ld and %ld.\\n"",eingabe,z1,z2);
return 0;
}","1","c&p"
"30","SoSe22","9","Antwort 8","C","Edgar Wolf","Großkopf","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	}
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	}
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}

int main(){
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	printf(""Please enter an Integer: "");
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
	return 0;
}","#include <stdio.h>

void factorize(long produkt, long *faktor1, long *faktor2)
{
	if(produkt == 0){
		*faktor1 = 1;
		*faktor2 = produkt;
	}
	else if(produkt == 1){
		*faktor1 = 1;
		*faktor2 = produkt;
	}
	else{
		long vielfache = produkt/2;
		while(produkt%vielfache != 0){
			vielfache -= 1;
		}
		*faktor1 = vielfache;
		*faktor2 = produkt/vielfache;
	}
}

int main(){
	long produkt, f1, f2;
	long *faktor1 = &f1,*faktor2 = &f2;
	printf(""Please enter an Integer: "");
	scanf(""%li"",&produkt);
	factorize(produkt,faktor1,faktor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"",produkt,*faktor1,*faktor2);
	return 0;
}","1","c&p"
"31","SoSe22","9","Antwort 8","C","Niklas","Schwolow","#include <stdio.h>

void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
    }
    else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
    }
    else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}

int main(){
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
	return 0;
}","#include <stdio.h>

void factorize(long ergebnis, long *zahl1, long *zahl2){
    long tmp= ergebnis;
    if(ergebnis == 0){
        *zahl1 = 1;
        *zahl2 = ergebnis;
    }
    else if(ergebnis == 1){
        *zahl1 = 1;
        *zahl2 = ergebnis;
    }
    else{
        tmp = ergebnis/2;
        while(ergebnis % tmp != 0){
            tmp = tmp - 1;
        }
        *zahl1 = tmp;
        *zahl2 = ergebnis/tmp;
    }
}

int main(){
	long ergebnis;
    long zahl1;
    long zahl2;
    long* p1 = &zahl1;
    long* p2 = &zahl2;
    printf(""Please enter an Integer: "");
    scanf(""%ld"", &ergebnis);
    factorize(ergebnis, p1, p2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", ergebnis, zahl1, zahl2);
	return 0;
}","1","c&p"
"32","SoSe22","9","Antwort 8","C","Lars Rudolf Heinrich","Michael","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2){
	// Your factorization
	
	long teiler;
	
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	}
	
	else {
		
		for(int i = 0; i < product; i++){
			
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			
			if(teiler * (product/teiler) == product){
				i = product;
			}
		}
		
		*factor1 = teiler;
		*factor2 = product/teiler;
		
	}
}

int main(){
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	printf(""Please enter an Integer: "");
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2){
	// Your factorization
	
	long teiler;
	
	if(product == 0 || product == 1){
		*factor1 = 1;
		*factor2 = product;
	}
	
	else {
		
		for(int i = 0; i < product; i++){
			
			 teiler = (product/2) - i;
			 //printf(""%li"",teiler);
			
			if(teiler * (product/teiler) == product){
				i = product;
			}
		}
		
		*factor1 = teiler;
		*factor2 = product/teiler;
		
	}
}

int main(){
	long factor1;
	long* fac1 = &factor1;
	long factor2;
	long* fac2 = &factor2;
	long eingabe = 0;
	printf(""Please enter an Integer: "");
	scanf(""%li"", &eingabe);
	factorize(eingabe, fac1, fac2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", eingabe, factor1, factor2);
}","1","c&p"
"33","SoSe22","9","Antwort 8","C","Athena Sabina","Zamudio Bargel","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{
	// Your factorization
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
             }
             i++;
         }
    }
}

int main(){
        long product, factor1, factor2;
	printf(""Please enter an Integer: "");
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
	return 0;
}","#include <stdio.h>

void factorize(long product, long *factor1, long *factor2)
{
	// Your factorization
        if (product == 0) {
          *factor1 = 1;
          *factor2 = 0;
        } else if (product == 1) {
          *factor1 = 1;
          *factor2 = 1;
        } else {
          long i = 2;
          while (1) {
             if (product %i == 0) {
                *factor1 = product / i;
                *factor2 = i;
                break;
             }
             i++;
         }
    }
}

int main(){
        long product, factor1, factor2;
	printf(""Please enter an Integer: "");
        scanf(""%ld"", &product);
        factorize(product, &factor1, &factor2);
	printf(""Possible Factors of %ld are %ld and %ld.\\n"", product, factor1, factor2);
	return 0;
}","1","c&p"
"34","SoSe22","10","Antwort 9","C","Tom Frederik","Braune","#include <stdio.h>
#include <stdlib.h>

typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
	
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
	
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}

int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
		
 	}","#include <stdio.h>
#include <stdlib.h>

typedef struct student{
	char vorname[21];
	char nachname[21];
	int punkte[5];
}Student;
	
void student_einlesen(Student* p_stud)
{
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
	scanf(""%i"", &p_stud->punkte[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->punkte[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->punkte[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->punkte[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->punkte[4]);
	printf(""\\n"");
	for(int i=0;i<5;i++){int a=0; a++;}
}
	
void student_ausgeben(Student* p_stud){
	int a = p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4];
	printf(""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"",p_stud->vorname,p_stud->nachname,a);
	for(int i=0;i<5;i++){int a=0; a++;}	
}

int main(void){
	int a=5;
	 	struct student studenten[a];
		for(int i=0;i<a;i++){
						student_einlesen(&studenten[i]);
		}
		
		for(int i=0;i<a;i++){
						student_ausgeben(&studenten[i]);
		}
		
 	}","1","c&p"
"35","SoSe22","10","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int* IntPointer;

typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;

void student_einlesen(Student* p_stud);


void student_ausgeben(Student* p_stud);

int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}

void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}

void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef int* IntPointer;

typedef struct Student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;

void student_einlesen(Student* p_stud);


void student_ausgeben(Student* p_stud);

int main()
{
    Student stud[5];
    for(int n=0; n<5;n++){
    	student_einlesen(&stud[n]);
	}
	for(int p=0; p<5;p++){
    	student_ausgeben(&stud[p]);
	}
    return 0;
}

void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    printf (""1: "");
    scanf(""%d"", &p_stud->points[0]);
    printf (""2: "");
    scanf(""%d"", &p_stud->points[1]);
    printf (""3: "");
    scanf(""%d"", &p_stud->points[2]);
    printf (""4: "");
    scanf(""%d"", &p_stud->points[3]);
    printf (""5: "");
    scanf(""%d"", &p_stud->points[4]);
}

void student_ausgeben(Student* p_stud)
{
	int sum=0;
	for(int n=0;n<5;n++){ sum += p_stud->points[n];}
	printf(""\\nStudent: %s %s"",p_stud->first_name,p_stud->last_name);
	printf(""\\nAnzahl Punkte: %i\\n"", sum);
}","1","c&p"
"36","SoSe22","10","Antwort 9","C","Timo","Kraska","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}

int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct student{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	printf(""1: "");
	scanf(""%i"", &p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"", &p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"", &p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"", &p_stud->points[3]);
	printf(""5: "");
	scanf(""%i"", &p_stud->points[4]);
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud){
	int punkte = 0;
	for(int i=0; i<5; i++){
		punkte += p_stud->points[i];
	} 
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}

int main(){
	static Student studenten[5];
	for(int i=0; i<5; i++){
		student_einlesen(&studenten[i]);
	}
	for(int i=0; i<5; i++){
		student_ausgeben(&studenten[i]);
	}
}","1","c&p"
"37","SoSe22","10","Antwort 9","C","Jonas","Eckhardt","#include <stdio.h>
#include <stdlib.h>

typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;

void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
	
		int summe = 0;
	for(int b = 0; b < 5; b++){
		
			summe += p_stud -> points[b];
		}

	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	
	}

int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>

typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;

void student_einlesen(Student* p_stud) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud->first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud->last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		for(int y = 0; y < 5; y++) {
			
			printf(""%i: "", y+1);
			scanf(""%i"", &(p_stud->points[y]));
		}
	printf(""\\n"");
	}
void student_ausgeben(Student* p_stud){
	
		int summe = 0;
	for(int b = 0; b < 5; b++){
		
			summe += p_stud -> points[b];
		}

	printf(""Student: %s %s \\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name, p_stud->last_name, summe);
	
	}

int main() {
	Student studenten[5];
	for(int i = 0; i < 5; i++){
	student_einlesen(&studenten[i]);
	}
	for(int i = 0; i < 5; i++)
	student_ausgeben(&studenten[i]);
	return 0;
}","1","c&p"
"38","SoSe22","10","Antwort 9","C","Butch Michel Guntbert","Warns","#include <stdio.h>
#include <stdlib.h>

const int ANZAHL = 5; // Should be 5

struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};

typedef struct student Student;

void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);

int main(void){

    Student students[ANZAHL];

    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }

    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}

void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}

void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }

    printf(""Anzahl Punkte: %d\\n"", sum);
}","#include <stdio.h>
#include <stdlib.h>

const int ANZAHL = 5; // Should be 5

struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
};

typedef struct student Student;

void student_einlesen(Student* p_stud);
void student_ausgeben(Student* p_stud);

int main(void){

    Student students[ANZAHL];

    // Einlesen
    for(int i = 0; i < ANZAHL; i++)
    {
        student_einlesen(students + i);
    }

    // Ausgeben
    for(int i = 0; i < ANZAHL; i++)
    {
        student_ausgeben(students + i);
    }
}

void student_einlesen(Student* p_stud)
{
    // Nutzer einlesen
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++)
    {
        printf(""%d: "", i + 1);
        scanf(""%d"", &(p_stud->points[i]));
    }
    printf(""\\n"");
}

void student_ausgeben(Student *p_stud)
{
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++)
    {
        sum += *(p_stud->points + i);
    }

    printf(""Anzahl Punkte: %d\\n"", sum);
}","1","c&p"
"39","SoSe22","10","Antwort 9","C","Tobias","Hengst","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>

typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;

void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
    
}

void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}

int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","//
//  main.c
//  HA
//
//  Created by Tobias Hengst on 27.06.22.
//
#include <stdio.h>
#include <stdlib.h>

typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;

void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    fgets(p_stud -> first_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> first_name[i] == '\\n') {
            p_stud -> first_name[i] = '\\0';
            p_stud -> first_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun den Nachnamen ein: "");
    fgets(p_stud -> last_name, 20, stdin);
    for (int i = 19; i >= 0; i--) {
        if (p_stud -> last_name[i] == '\\n') {
            p_stud -> last_name[i] = '\\0';
            p_stud -> last_name[i+1] = 0;
            break;
        }
    }
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud -> points[i]);
    }
    getchar();
    
}

void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud -> first_name, p_stud -> last_name);
    int summe = 0;
    for (int i = 0; i < 5; i++) {
        summe += p_stud -> points[i];
    }
    printf(""Anzahl Punkte: %i\\n\\n"", summe);
}

int main(){
    Student liste[5];
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_einlesen(&liste[i]);
        printf(""\\n"");
    }
    for (int i = 0; i < (sizeof(liste)/sizeof(Student)); i++) {
        student_ausgeben(&liste[i]);
    }
}","1","c&p"
"40","SoSe22","10","Antwort 9","C","Florian","Schacht","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic

#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>

typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;

void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}

void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}

int main(){

	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}","//gcc -x c HA10_T1.c -o HA10_T1 -Wall -Wextra -pedantic

#include<stdio.h>
#include<limits.h>
#include<string.h>
#include<stdlib.h>

typedef struct{
	char nachname[21];
	char vorname[21];
	int punkte[5];
}Student;

void readLine(char* strbuffer, unsigned int buffersize){//Quelle: PPR Vorlesungsfolien, ""folien_C_dynamischeSpeicherStructs.pdf"" Seite 5
	char format[30] = """";
	sprintf(format, ""%%%u[^\\n]%%*c"", buffersize-1);
	scanf(format, strbuffer);
}

void student_einlesen(Student *pStud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", pStud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", pStud->nachname);
	
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	
	for(int i=0;i<5;i++){
		printf(""%d: "", i+1);
		scanf(""%d"", &(pStud->punkte)[i]);
	}
	
	printf(""\\n"");
}
void student_ausgeben(Student *pStud){
	printf(""Student: "");
	printf(""%s "", pStud->vorname);
	printf(""%s\\n"", pStud->nachname);
	int intPointsSum = 0;
	
	for (int i=0;i<5;i++){
		intPointsSum += pStud->punkte[i];
	}
	printf(""Anzahl Punkte: "");
	printf(""%d\\n\\n"", intPointsSum);
}

int main(){

	int intAmountOfStudents = 5;
	if(1){
		Student rgStudis[intAmountOfStudents];
		Student *rgPStudis[intAmountOfStudents];
		
		for (int i=0;i<intAmountOfStudents;i++){
			rgPStudis[i] = &rgStudis[i];
		}
		
		for (int i=0;i<intAmountOfStudents;i++){
			student_einlesen(rgPStudis[i]);
		}
		for (int i=0; i<intAmountOfStudents; i++){
			student_ausgeben(rgPStudis[i]);
		}
	}
	return 0;
}","1","c&p"
"41","SoSe22","10","Antwort 9","C","Gregor","Lehmann","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;

void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}

void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}


int main()
{
    struct Student p_stud[5];
    
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }

}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
}Student;

void student_einlesen(Student* p_stud) {
    for(int i = 0; i < 5; i++){
        printf(""Gebe den Vornamen ein:\\n"");
        scanf(""%c"", &p_stud[i].first_name);
        printf(""Gebe nun den Nachnamen ein:\\n"");
        scanf(""%c"", &p_stud[i].last_name);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        scanf(""%d"", &p_stud[i].points[0]);
        scanf(""%d"", &p_stud[i].points[1]);
        scanf(""%d"", &p_stud[i].points[2]);
        scanf(""%d"", &p_stud[i].points[3]);
        scanf(""%d"", &p_stud[i].points[4]);
    }
}

void student_ausgeben(Student* p_stud){
    for(int i = 0; i < 5; i++) {
        printf(""Student: %c %c\\n"", p_stud[i].first_name, p_stud[i].last_name);
        int gesPunkte = p_stud[i].points[0] + p_stud[i].points[1] + p_stud[i].points[2] + p_stud[i].points[3] + p_stud[i].points[4];
        printf(""Anzahl Punkte: %d\\n"", gesPunkte);
    }
}


int main()
{
    struct Student p_stud[5];
    
    for(int i = 0; i < 5; i++) {
        student_einlesen(&p_stud[i]);
    }
    
    for(int i = 0; i < 5; i++) {
        student_ausgeben(&p_stud[i]);
    }

}","1","c&p"
"42","SoSe22","10","Antwort 9","C","Rosa","Hagenberg","#include <stdio.h>
#include <stdlib.h>

typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}

void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);

}","#include <stdio.h>
#include <stdlib.h>

typedef struct student {
	char first_name[21]; 
	char last_name[21];
	unsigned int points[5];
}Student;
void student_ausgeben(Student* p_stud){
	for(int j = 0; j<5; ++j){
	printf(""Student: %s%s\\n"", p_stud[j].first_name, p_stud[j].last_name);
	int sum = 0;
	for(int i = 0; i<5; i++){
		sum += p_stud[j].points[i];
	}
	printf(""Anzahl Punkte: %i\\n"", sum);
	}
}

void student_einlesen(Student* p_stud){
	for(int i = 0; i<4; ++i){
	printf(""Gebe den Vornamen ein:"");
	fgets(p_stud[i].first_name, 21, stdin);
	printf(""Gebe nun den Nachnamen ein:""); 
	fgets(p_stud[i].last_name, 21, stdin);
	printf(""Gebe nun nacheinander die 5 Punkte ein:"");
	printf(""1:"");
	scanf(""%u"", &p_stud[i].points[0]);
	printf(""2:"");
	scanf(""%u"", &p_stud[i].points[1]);
	printf(""3:"");
	scanf(""%u"", &p_stud[i].points[2]);
	printf(""4:"");
	scanf(""%u"", &p_stud[i].points[3]);
	printf(""5:"");
	scanf(""%u"", &p_stud[i].points[4]);
	}
}
int main(){
	Student* students[5];
	student_einlesen(students);
	student_ausgeben(students);

}","1","c&p"
"43","SoSe22","10","Antwort 9","C","Adrian Maximilian","Glaschke","#include <stdio.h>
#include <stdlib.h>

typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;


void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;

printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);

p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;

//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}

void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}

int main(){




char Studierenden[5];
	

Student erster_Student;
student_einlesen(&erster_Student);

Student zweiter_Student;
student_einlesen(&zweiter_Student);

Student dritter_Student;
student_einlesen(&dritter_Student);

Student vierter_Student;
student_einlesen(&vierter_Student);

Student fuenfter_Student;
student_einlesen(&fuenfter_Student);

student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);

}","#include <stdio.h>
#include <stdlib.h>

typedef struct student {
char first_name [20];
char last_name [20];
int points;
} Student;


void student_einlesen(Student* p_stud){
int Punkt1;
int Punkt2;
int Punkt3;
int Punkt4;
int Punkt5;

printf(""Gebe den Vornamen ein: "");
scanf(""%s"", p_stud->first_name);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->last_name);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: 2: 3: 4: 5: \\n"");
scanf(""%d"", &Punkt1);
scanf(""%d"", &Punkt2); 
scanf(""%d"", &Punkt3);
scanf(""%d"", &Punkt4);
scanf(""%d"", &Punkt5);

p_stud->points=Punkt1+Punkt2+Punkt3+Punkt4+Punkt5;

//Punkt1+Punkt2+Punkt3+Punkt4+Punkt5=p_stud->points;
}

void student_ausgeben(Student* p_stud){
printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n\\n"", p_stud->points);
}

int main(){




char Studierenden[5];
	

Student erster_Student;
student_einlesen(&erster_Student);

Student zweiter_Student;
student_einlesen(&zweiter_Student);

Student dritter_Student;
student_einlesen(&dritter_Student);

Student vierter_Student;
student_einlesen(&vierter_Student);

Student fuenfter_Student;
student_einlesen(&fuenfter_Student);

student_ausgeben(&erster_Student);
student_ausgeben(&zweiter_Student);
student_ausgeben(&dritter_Student);
student_ausgeben(&vierter_Student);
student_ausgeben(&fuenfter_Student);

}","1","c&p"
"44","SoSe22","10","Antwort 9","C","Leif Erik","Stolte","#include <stdio.h>
#include <stdlib.h>

typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;

void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>

typedef struct student {
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;

void student_einlesen(Student* p_stud) {
	for(int i=0; i<5; i++) {
		printf(""Gebe den Vornamen ein: "");
		scanf(""%s"", p_stud[i].first_name);
		getchar();
		printf(""Gebe nun den Nachnamen ein: "");
		scanf(""%s"", p_stud[i].last_name);
		getchar();
		printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
		for(int a = 1; a < 6; a++) {
			printf(""%i: "", a);
			scanf( ""%i"",&p_stud[i].points[a-1]);
		}
		printf(""\\n"");
	}
}
void student_ausgeben(Student* p_stud){
	for(int i = 0; i < 5; i++) {
		int summe[5]; 
		for(int b=0; b<5; b++) {
			summe[b]=0;
		}
		for(int a=0; a<5;a++){
			summe[i]= summe[i] + p_stud[i].points[a];
		}
	printf(""Student: %s %s \\n"", p_stud[i].first_name, p_stud[i].last_name );
	printf(""Anzahl Punkte: %i \\n \\n"", summe[i]);
	}
}
int main() {
	Student studenten[5];
	student_einlesen(studenten);
	student_ausgeben(studenten);
	return 0;
}","1","c&p"
"45","SoSe22","10","Antwort 9","C","Ibraim","Ibraimi","#include <stdio.h>
#include <stdlib.h>

typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;

void student_einlesen(Student* p_stud){

 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 
 }
 printf(""\\n"");

}

void student_ausgeben(Student* p_stud){
 
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);

}

int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","#include <stdio.h>
#include <stdlib.h>

typedef struct student { 
    char first_name[20];
    char last_name[20];
    int points[5];
} Student;

void student_einlesen(Student* p_stud){

 printf(""Gebe den Vornamen ein: "");
 scanf(""%s"", p_stud->first_name);
 printf(""Gebe nun den Nachnamen ein: "");
 scanf(""%s"", p_stud->last_name);
 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
 for (int i = 0; i<5; ++i){
  printf(""%d: "", i+1);
  scanf(""%d"", p_stud->points + i);
 
 }
 printf(""\\n"");

}

void student_ausgeben(Student* p_stud){
 
 printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
 
 int summe = 0;
 for(int i = 0; i != 5; ++i) {
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n"", summe);

}

int main(){
 Student students[5];
  for(int i = 0; i != 5; ++i) {
	student_einlesen(students + i);
	}
  for(int i = 0; i != 5; ++i) {
	printf(""\\n"");
	student_ausgeben(students + i);
	}
}","1","c&p"
"46","SoSe22","10","Antwort 9","C","Fabian","Große-Wöhrmann","#include <stdio.h>
#include <string.h>

typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;

void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}

void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   

int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }

    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","#include <stdio.h>
#include <string.h>

typedef struct
{
    char vorname[20];
    char nachname[20];
    int punkte[5];
}Student;

void student_einlesen( Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n1: "");
    scanf(""%i"",&p_stud->punkte[0]);
    printf(""2: "");
    scanf(""%i"",&p_stud->punkte[1]);
    printf(""3: "");
    scanf(""%i"",&p_stud->punkte[2]);
    printf(""4: "");
    scanf(""%i"",&p_stud->punkte[3]);
    printf(""5: "");
    scanf(""%i"",&p_stud->punkte[4]);
    printf(""\\n"");
}

void student_ausgeben( Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    printf(""Anzahl Punkte: %i\\n\\n"", (p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]));
}   

int main(){
     Student s[5];
    for(int i=0; i<5; i++){
        student_einlesen(&s[i]);
    }

    for(int i=0; i<5; i++){
        student_ausgeben(&s[i]);
    }
}","1","c&p"
"47","SoSe22","10","Antwort 9","C","Niklas","Schwolow","#include <stdio.h>
#include <stdlib.h>

typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;

void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}

void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}

int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","#include <stdio.h>
#include <stdlib.h>

typedef struct student{
    char* vorname[20];
    char* nachname[20];
    int punkte[5];
} Student;

void student_einlesen(Student * p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        scanf("""", &p_stud->punkte[i]);
    }
}

void student_ausgeben(Student* p_stud){
    int sum;
    for (int i = 0; i<5; i++){
        sum += p_stud->punkte[i];
    }
    printf(""Student: %s %s\\nAnzahl Punkte: %d\\n"", p_stud->vorname, p_stud->nachname, sum);
}

int main(){
    int AnzahlStudenten = 5;
    Student* studenten = malloc(AnzahlStudenten*sizeof*studenten);
    for(int i = 0; i<5; i++){
        studenten[i].vorname=(char*)malloc(sizeof(char*));
        studenten[i].nachname=(char*)malloc(sizeof(char*));
        student_einlesen(&studenten[i]);
    }
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}","1","c&p"
"48","SoSe22","10","Antwort 9","C","Edgar Wolf","Großkopf","#include<stdio.h>

typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}

void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}

int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","#include<stdio.h>

typedef struct student{
char first_name[20];
char last_name[20];
int points[5];
} Student;

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"",p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"",p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	printf(""1: "");
	scanf(""%i"",&p_stud->points[0]);
	printf(""2: "");
	scanf(""%i"",&p_stud->points[1]);
	printf(""3: "");
	scanf(""%i"",&p_stud->points[2]);
	printf(""4: "");
	scanf(""%i"",&p_stud->points[3]);
	printf(""5: \\n"");
	scanf(""%i"",&p_stud->points[4]);
}

void student_ausgeben(Student *p_stud){
	printf(""Student: %s %s\\n"",p_stud->first_name,p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"",p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4]);
}

int main(){
	Student studi[5];
	for(int i = 0; i < 5; i++){
		student_einlesen(&studi[i]);
	}
	for(int i = 0; i < 5; i++){
		student_ausgeben(&studi[i]);
	}
}","1","c&p"
"49","SoSe22","10","Antwort 9","C","Lars Rudolf Heinrich","Michael","#include <stdio.h>
#include <stdlib.h>

typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;



void student_einlesen(Student* p_stud){
	
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);

	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);

	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		
		}	
	printf(""\\n"");	
}




void student_ausgeben(Student* p_stud){
	
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
		
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}



int main(){
	
	Student array[5];
	
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}

}","#include <stdio.h>
#include <stdlib.h>

typedef struct student {
	char first_name[20];
	char last_name[20];
	int points[5];
}Student;



void student_einlesen(Student* p_stud){
	
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud -> first_name);

	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud -> last_name);

	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; i++){
		printf(""%i: "",i+1);
		scanf(""%i"", &p_stud->points[i]);
		
		}	
	printf(""\\n"");	
}




void student_ausgeben(Student* p_stud){
	
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud -> last_name);
	
	int temp = 0;
	for(int i = 0 ; i <5; i++){
		temp += p_stud->points[i];
		
	}
printf(""Anzahl Punkte: %i\\n"", temp);
	printf(""\\n"");
}



int main(){
	
	Student array[5];
	
	for(int i = 0; i<5; i++){
	student_einlesen(&array[i]);
	}
	for(int i = 0; i<5; i++){
	student_ausgeben(&array[i]);
	}

}","1","c&p"
"50","SoSe22","10","Antwort 9","C","Dennis Benedikt","Schulze","#include <stdio.h>
#include <stdlib.h>

typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;

static Student students[5];

void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}

int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];

  return sum;
}

void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}

int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }

  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","#include <stdio.h>
#include <stdlib.h>

typedef struct student {
  char vorname[21]; // one more char for the NULL byte '\\0'
  char nachname[21];
  int punkte[5];
} Student;

static Student students[5];

void student_einlesen(Student *p_stud) {
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->vorname);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->nachname);
  printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
  for (int i = 0; i < 5; ++i) {
    printf(""%i:"", i + 1);
    scanf(""%i"", p_stud->punkte + i);
    
    if ( i == 4 ) {
        printf(""\\n"");
    } else {
        printf("" "");
    }
  }
}

int sum_points(int *arr, int size) {
  int sum = 0;
  for (int i = 0; i < size; ++i)
    sum += arr[i];

  return sum;
}

void student_ausgeben(Student *p_stud) {
  int sum = sum_points(p_stud->punkte, 5);
  printf(""Student: %s "", p_stud->vorname);
  printf(""%s\\n"", p_stud->nachname);
  printf(""Anzahl Punkte: %i\\n"", sum);
}

int main() {
  for (int i = 0; i < 5; ++i) {
    student_einlesen(students + i);
  }

  for (int i = 0; i < 5; ++i) {
    student_ausgeben(students + i);
    if ( i < 4 )
        printf(""\\n"");
  }
}","1","c&p"
"51","SoSe22","10","Antwort 9","C","Pinelopi Eleni","Anastasiadou","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;

void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}

void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}

int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

typedef struct student{
    char first_name[20];
    char last_name[20];
    int points;
} Student;

void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein:"");
scanf(""%s"", &p_stud->first_name);
getchar();
printf("" Gebe nun den Nachnamen ein:"");
scanf(""%s"", &p_stud->last_name);
getchar();
printf("" Gebe nun nacheinander die 5 Punkte ein:\\n"");
int points[5];
int summe=0;
for (int i = 0; i<5; i++){
    printf("" %i:"", (i+1));
    scanf(""%i"", &points[i]);
    summe+=points[i];
    p_stud->points=summe;
}
}

void student_ausgeben(Student* p_stud){
        printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);
printf(""Anzahl Punkte: %d\\n"", p_stud->points);
}

int main() {
    Student dar;
    for (int k = 0; k<5; k++){
   student_einlesen( &dar );
   student_ausgeben( &dar );
    }
}","1","c&p"
"52","SoSe22","10","Antwort 9","C","Kaspar Lorenz","Hartmann","#include <stdio.h>
#include <stdlib.h>

typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;

void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}

void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}

int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","#include <stdio.h>
#include <stdlib.h>

typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
}Student;

void student_einlesen(Student* p_stud){
printf(""Gebe den Vornamen ein: "");
scanf(""%c"",p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%c"",p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:"");
for (int i =0;i<5;i++){
    printf(""%i:"",i+1);
    scanf(""%i"",p_stud->punkte[i]);
    }
}

void student_ausgeben(Student* p_stud){
printf(""Student: %c %c\\nAnzahl Punkte: %i"",p_stud->vorname,p_stud->nachname,p_stud->punkte[0]+p_stud->punkte[1]+p_stud->punkte[2]+p_stud->punkte[3]+p_stud->punkte[4]);
}

int main(){
Student studenten[5];
printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:
1: 2: 3: 4: 5:
erster_Student: Marco Wagner
Punkte -> 14; 18; 13; 9; 16"");
for(int k=0;k<5;k+1 ){
    student_einlesen(studenten+k);
    student_ausgeben(studenten+k);
}
}","1","c&p"
"53","SoSe22","10","Antwort 9","C","Luca Marius","Hilbrich","#include <stdio.h>
#include <string.h>

typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;

void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}

void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}

void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}

int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","#include <stdio.h>
#include <string.h>

typedef char Str20[21];
typedef int Int5[5];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    Int5 points;
} Student;

void readline(char* strbuffer, unsigned int buffersize)
{
    fgets(strbuffer, buffersize, stdin);
    int p = strlen(strbuffer);
    strbuffer[p-1] = '\\0';
}

void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    readline(p_stud->first_name, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readline(p_stud->last_name, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for ( int i = 0; i < 5; i++ ) {
        printf(""%i: "", i + 1);
        scanf(""%i"", &p_stud->points[i]);
    }
    getchar();
}

void student_ausgeben(Student* p_stud)
{
    printf(""\\nStudent: "");
    printf(""%.*s "", strlen(p_stud->first_name), p_stud->first_name);
    printf(""%.*s\\n"", strlen(p_stud->last_name), p_stud->last_name);
    int sum = 0;
    for ( int i = 0; i < 5; i++ ) {
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}

int main()
{
    Student students[5];
    for ( int i = 0; i < 5; i++ ) {
        student_einlesen(&students[i]);
    }
    for ( int i = 0; i < 5; i++ ) {
        student_ausgeben(&students[i]);
    }
}","1","c&p"
"54","SoSe22","10","Antwort 9","C","Jakob Pius","Bücking","#include <stdio.h>
#include <stdlib.h>

typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;



void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);

    }
    printf(""\\n"");


}

 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];

    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }

void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);

    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);

    }


}","#include <stdio.h>
#include <stdlib.h>

typedef struct student{
    char vorname[21];
    char nachname[21];
    int punkte[5];
} Student;



void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &p_stud->vorname);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &p_stud->nachname);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i<5;i++){
        printf(""%i: "",i+1 );
        scanf(""%d"", &p_stud->punkte[i]);

    }
    printf(""\\n"");


}

 void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"",p_stud->vorname, p_stud->nachname);
    int sum =0;
    for (int i = 0; i<5;i++){
        sum += p_stud->punkte[i];

    }
    printf(""Anzahl Punkte: %i\\n\\n"", sum);
 }

void main(){
    Student list[5];
    for (int i = 0; i<5;i++){
        student_einlesen(&list[i]);

    }
    for (int i = 0; i<5;i++){
        student_ausgeben(&list[i]);

    }


}","1","c&p"
"55","SoSe22","10","Antwort 9","C","Moritz Sebastian","Niethammer","#include <stdio.h>

typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;

void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}

void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","#include <stdio.h>

typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;

void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; i++){
        printf(""%d: "", i + 1);
        scanf(""%d"", &p_stud->points[i]);
    }
    printf(""\\n"");
}

void student_ausgeben(Student* p_stud){
    printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
    int sum = 0;
    for(int i = 0; i < 5; i++){
        sum += p_stud->points[i];
    }
    printf(""Anzahl Punkte: %d\\n"", sum);
}
int main(){
    static struct student students[5];
    for (int i = 0; i < 5; i++){
        Student newStudent;
        student_einlesen(&newStudent);
        students[i] = newStudent;
    }
    for (Student* student = students; student < students + 5; student++){
        student_ausgeben(student);
        printf(""\\n"");
    }
    return 0;
}","1","c&p"
"56","SoSe22","10","Antwort 9","C","Bahar","Gülser","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;

void student_einlesen(Student* p_stud)
{

printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");

for(int i=0; i<5; i++)
{

printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));

}
}

void student_ausgeben(Student* p_stud)

{

int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","#include <stdio.h>
typedef struct student{
char vorname[21];
char nachname[21];
int punkte[5];
} 
Student;

void student_einlesen(Student* p_stud)
{

printf(""\\nGebe den Vornamen ein: "");
scanf(""%s"", p_stud->vorname);
printf(""Gebe nun den Nachnamen ein: "");
scanf(""%s"", p_stud->nachname);
printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");

for(int i=0; i<5; i++)
{

printf(""%i: "", i+1);
scanf(""%i"", &(p_stud->punkte[i]));

}
}

void student_ausgeben(Student* p_stud)

{

int sum = 0;
for(int i=0; i<5; i++)
sum += p_stud->punkte[i];
printf(""\\nStudent: %s %s\\n"", p_stud->vorname, p_stud->nachname );
printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
Student st[5];
for (int i=0; i<5; i++)
student_einlesen(&st[i]);
for (int i=0; i<5; i++)
student_ausgeben(&st[i]);
return 0;
}","1","c&p"
"57","SoSe22","10","Antwort 9","C","Shaurya","Sharma","#include <stdio.h>



typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
    
}Student;

void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
        
    }
}

void student_ausgeben(Student* p_stud){
    
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
   
}

int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);

    return 0;
}","#include <stdio.h>



typedef struct student {
    char vorname[21];
    char nachname[21];
    int punkte[5];
    
}Student;

void student_einlesen(Student* p_stud){
    for(int i=0; i<5; i++){
        printf(""Gebe den Vornamen ein:"");
        scanf(""%s"", p_stud[i].vorname);
        printf(""Gebe den Nachnamen ein:"");
        scanf(""%s"", p_stud[i].nachname);
        printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
        for(int j =0; j<5;j++){
            printf(""%i: \\n"",j+1);
            scanf(""%i"", &p_stud[i].punkte[j]);
        }
        
    }
}

void student_ausgeben(Student* p_stud){
    
    for(int i=0; i<5; i++){
        int sum = 0;
        for(int j =0; j<5;j++){
            sum+= p_stud[i].punkte[j];
        }
        printf(""Student: %s %s\\n"",p_stud[i].vorname,p_stud[i].nachname);
        printf(""Anzahl Punkte: %i\\n\\n"", sum);
    }
   
}

int main()
{
    Student studArray[5];
    student_einlesen(studArray);
    student_ausgeben(studArray);

    return 0;
}","1","c&p"
"58","SoSe22","10","Antwort 9","C","Elisabeth Maria","Groß","#include <stdio.h>
 
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
 
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
 
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
 
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","#include <stdio.h>
 
typedef struct{
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;
 
void student_einlesen(Student* p_stud) {
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"",&p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"",&p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for (int i = 0; i < 5; ++i) {
        printf(""%i: "", i+1);
        scanf(""%i"", &p_stud->points[i]);
    }
    printf(""\\n"");
}
 
void student_ausgeben(Student* p_stud) {
    printf(""Student: %s %s"", p_stud->first_name, p_stud->last_name);
    int x = 0;
    for (int i = 0; i < 5; ++i) {
        x += p_stud->points[i];
    }
    printf(""\\nAnzahl Punkte: %i\\n"", x);
}
 
int main(void){
    Student erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student;
    Student studis[5] = {erster_student, zweiter_student, dritter_student, vierter_student, fuenfter_student};
    for (int i = 0; i < 5; ++i) {
        student_einlesen(&studis[i]);
    }
    for (int i = 0; i < 5; ++i) {
        student_ausgeben(&studis[i]);
        printf(""\\n"");
    }
}","1","c&p"
"59","SoSe22","10","Antwort 9","C","Paul Georg","Tiede","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;

void student_einlesen(Student* p_stud)
{

 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }


void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}

int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);

}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct student{
char vorname [21];
char nachname[21];
unsigned int punkte[4];
} Student;

void student_einlesen(Student* p_stud)
{

 for(int i=0;i<5;i++)
 {
     printf(""Gebe den Vornamen ein:"");
     scanf(""%s"",&p_stud[i].vorname);
     printf(""Gebe nun den Nachnamen ein:"");
      scanf(""%s"",&p_stud[i].nachname);
      printf(""Gebe nun nacheinander die 5 Punkte ein:"");
      for (int z=0;z<5;z++){
      printf(""%u:"",z+1);
      scanf(""%u"",&p_stud[i].punkte[z]);
      }
}
 }


void student_ausgeben(Student* p_stud)
{
for (int i=0;i<5;i++)
{
    printf(""Student:"");
    printf(""%s,%s"",p_stud[i].vorname,p_stud[i].nachname);
    printf(""Anzahl Punkte: %u"",((p_stud[i].punkte[0])+(p_stud[i].punkte[1])+(p_stud[i].punkte[2])+(p_stud[i].punkte[3])+(p_stud[i].punkte[4])));
}
}

int main ()
{
char* p_stud[] ={""erster_student"", ""zweiter_student"", ""dritter_student"", ""vierter_student"", ""fuenfter_student""};
student_einlesen(p_stud);
student_ausgeben(p_stud);

}","1","c&p"
"60","SoSe22","10","Antwort 9","C","Emilie","Hilger","#include <stdio.h>
#include <stdlib.h>


char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}

int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","#include <stdio.h>
#include <stdlib.h>


char*  struct student() {
	char *Student  = (char*) malloc(20*sizeof(char)); 
	return Student ;
}

int main(void){
	char* p;
	char vorname = 0;
	char nachname = 0;
	p = struct student();
	for(char i = 0; i != 20; ++i) {
		p[i] = i;
	}
	for(char i = 0; i != 20; ++i) {
		summe += p[i];
	}
	printf(""\\nerster_Student: %s %s\\n"", erster_Student.vorname, erster_Student.nachname);
    printf(""Punkte -> %i; %i; %i; %i; %i\\n"", erster_Student.punkte[0], erster_Student.punkte[1], erster_Student.punkte[2], erster_Student.punkte[3], erster_Student.punkte[4]);
}","1","c&p"
"61","SoSe22","10","Antwort 9","C","Heiner Hans","Krause","#include <stdio.h>
#include <malloc.h>

typedef struct student{","#include <stdio.h>
#include <malloc.h>

typedef struct student{","1","c&p"
"62","SoSe22","10","Antwort 9","C","Larissa","Breuer","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;

void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}

void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}

int main(){
	
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}

	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

typedef struct student {
   char first_name[21];
   char last_name[21];
   int points[5];
} Student;

void readLine( char* strbuffer, unsigned int buffersize )
{
  char format[30] = """";
  sprintf( format, ""%%%u[^\\n]%%*c"", buffersize-1 );
  scanf( format, strbuffer );
}

void student_einlesen(Student* p_stud){
	// Vorname, Nachname:
	printf(""Gebe den Vornamen ein: "");
	readLine(p_stud->first_name, 20);
	printf(""Gebe nun den Nachnamen ein: "");
	readLine(p_stud->last_name, 20);
	
	// Punkte:
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++){
		printf(""%i: "", i);
		scanf(""%i"", &p_stud->points[i-1]);
	}
	getchar();
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud){
	int summe=0;
	for (int i=0; i<5;i++){
		summe += p_stud->points[i];
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}

int main(){
	
	Student erster_Student, zweiter_Student, dritter_Student, vierter_Student, fuenfter_Student;
	Student* Studierende[5] = {&erster_Student, &zweiter_Student, &dritter_Student,	&vierter_Student, &fuenfter_Student};
	
	for (int i=0; i<5; i++){
		student_einlesen(Studierende[i]);
	}

	for (int i=0; i<5; i++){
		student_ausgeben(Studierende[i]);
	}
}","1","c&p"
"63","SoSe21","10","Antwort 9","C","Muzaffer Mert","Sen","#include<stdio.h>
#include<stdlib.h>
#include<string.h>


typedef struct Student {

  char vorname[20];
  char nachname[20];
  int  punkte[5];
  
}  Student  ;

             
             
void student_einlesen(Student*p_stud){
		

		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
							
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}


void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
		

int main (){
             	
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
		
			student_einlesen((&pointer[i]));
		}
		
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}

free(pointer);
}","#include<stdio.h>
#include<stdlib.h>
#include<string.h>


typedef struct Student {

  char vorname[20];
  char nachname[20];
  int  punkte[5];
  
}  Student  ;

             
             
void student_einlesen(Student*p_stud){
		

		printf(""Gebe den Vornamen ein: "");
		scanf (""%s"" ,p_stud->vorname);
		printf(""Gebe nun den Nachnamen ein: "");
		scanf (""%s"" ,p_stud->nachname);
		 printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
		 for (int a=0 ; a<4;a++){	
		 printf(""%d: "",a+1);
			scanf(""%d"", &(p_stud-> punkte[a]));
							
			}
			int x= 5;
		printf(""%d: \\n"",x);
			scanf(""%d"", &(p_stud-> punkte[4]));
}


void student_ausgeben(Student*p_stud){
		  int  summe=0 ;
		for (int a=0 ; a<5;a++){
		summe += (p_stud-> punkte[a]);
		}
		printf (""Student: %s %s \\n"",p_stud->vorname , p_stud->nachname);
		printf(""Anzahl Punkte: %d\\n\\n"" , summe );
		}
		

int main (){
             	
             struct Student *pointer=malloc(sizeof (Student)*5);
		int i;
		for(i=0 ; i<5;i++){
		
			student_einlesen((&pointer[i]));
		}
		
		int u;
		for (u=0 ; u<5; u++){
			student_ausgeben((&pointer[u]));
		}

free(pointer);
}","1","c&p"
"64","SoSe21","10","Antwort 9","C","Karsten Siegfried","Hansel","#include <stdio.h>

typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;

void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}

void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}

int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","#include <stdio.h>

typedef struct student{
    char first_name[21];
    char last_name[21];
    int points[5];
} Student;

void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i=0; i<5; i++)
    {
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}

void student_ausgeben(Student* p_stud)
{
    int sum = 0;
    for(int i=0; i<5; i++)
        sum += p_stud->points[i];
    printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name );
    printf(""Anzahl Punkte: %i\\n"", sum);
}

int main()
{
    Student st[5];
    for (int i=0; i<5; i++)
        student_einlesen(&st[i]);
    for (int i=0; i<5; i++)
        student_ausgeben(&st[i]);
    return 0;
}","1","c&p"
"65","SoSe21","10","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdlib.h>
#include <stdio.h>
#include <string.h>

typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];

	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';

	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");

	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';

	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){

		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}

}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}

int main(){

	Student studenten[5];
	for(int i=0;i<5;i++){

		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){

			student_ausgeben(&studenten[i]);
		}
	
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>

typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	char buf[20];

	fgets(buf, 20, stdin);
	buf[strlen(buf)-1] = '\\0';

	strcpy(p_stud->vorname,buf);
	printf(""Gebe nun den Nachnamen ein: "");

	char buf2[20];
	fgets(buf2, 20, stdin);
	buf2[strlen(buf2)-1] = '\\0';

	strcpy(p_stud->nachname,buf2);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	int pkt;
	for(int i=0;i<5;i++){

		if(i==4){
			printf(""%d:\\n"",i+1);
			scanf(""%d"",&pkt);
			getchar();
		}
		else{
			printf(""%d: "",i+1);
			scanf(""%d"",&pkt);
		}
		p_stud->punkte[i]=pkt;
		}

}
void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"",p_stud->vorname,p_stud->nachname);
	int sum=0;
	for(int i=0;i<5;i++){
		sum+=p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"",sum);
}

int main(){

	Student studenten[5];
	for(int i=0;i<5;i++){

		student_einlesen(&studenten[i]);
	}
	for(int i=0;i<5;i++){

			student_ausgeben(&studenten[i]);
		}
	
}","1","c&p"
"66","SoSe21","10","Antwort 9","C","Mohamad","Alfakir","#include <stdio.h>
#include <stdlib.h>



typedef struct student
{

    char vorname[20];
    char nachname[20];
    int punkte [5];

} Student ;

void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {

        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {

        sum+=p_stud->punkte[i];

    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];

    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);


    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);


}","#include <stdio.h>
#include <stdlib.h>



typedef struct student
{

    char vorname[20];
    char nachname[20];
    int punkte [5];

} Student ;

void student_einlesen(Student* p_stud)
{
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", p_stud->vorname);
    getchar();
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->nachname);
    getchar();
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    printf(""1: 2: 3: 4: 5:\\n"");
    for (int i=0; i <5; i++)
    {

        scanf(""%i"",&p_stud->punkte[i]);
    }
}
void student_ausgeben(Student* p_stud)
{
    int sum =0;
    int i=0;
    printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
    for (i=0; i<5; i++)
    {

        sum+=p_stud->punkte[i];

    }
    printf(""Anzahl Punkte: %i\\n"", sum);
}
int main()
{
    Student studenten[5];

    for (int j=0; j<5; j++) student_einlesen (&studenten[j]);


    for (int j=0; j<5; j++) student_ausgeben(&studenten[j]);


}","1","c&p"
"67","SoSe21","10","Antwort 9","C","Jeremias Harry","Alexe","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>

typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
    
}Student;

void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}

void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}

int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","#include <stdio.h>
#include <stdlib.h>  
#include <string.h>

typedef struct student{
    char first_name[20]; 
    char last_name[20];
    int points[5];
    
}Student;

void student_einlesen(Student* p_stud)
{
    printf(""\\nGebe den Vornamen ein: "");    
    scanf(""%s"", p_stud->first_name);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", p_stud->last_name);
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 0; i < 5; i++){
        printf(""%i: "", i+1);
        scanf(""%i"", &(p_stud->points[i]));
    }
}

void student_ausgeben(Student* p_stud)
{
  printf(""\\nStudent: %s %s\\n"", p_stud->first_name, p_stud->last_name);  
  int summe = 0;
  for(int i = 0; i < 5; i++){
    summe+= p_stud->points[i];  
  }
  printf(""Anzahl Punkte: %i\\n"", summe);
}

int main(){
    Student array[5];
    for(int i = 0; i < 5; i++){
        student_einlesen(&array[i]);
     }
    for(int i = 0; i < 5; i++){
        student_ausgeben(&array[i]);
     }
}","1","c&p"
"68","SoSe21","10","Antwort 9","C","Max Richard","Horneburg","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;

void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}


int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct _Student {
	char vorname[21];
	char nachname[21];
	unsigned int punkte[5];
} Student;

void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", p_stud->vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i=1; i<=5; i++) {
		printf(""%d: "", i);
		scanf(""%d"", &(p_stud->punkte[i-1]));
	}
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", p_stud->vorname, p_stud->nachname);
	unsigned int summe = 0;
	for (int i=0; i<5; i++) {
		summe += p_stud->punkte[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}


int main() {
	Student studenten[5];
	for (int i=0; i<5; i++) {
		student_einlesen(&studenten[i]);
	}
	for (int i=0; i<5; i++) {
		student_ausgeben(&studenten[i]);
	}
	return 0;
}","1","c&p"
"69","SoSe21","10","Antwort 9","C","Fynn Niklas","Gerhardt","#include <stdio.h>

typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}

int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>

typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;

void student_einlesen(Student* p_stud){
	printf(""Gebe den Vornamen ein: "");
	//char* buf;
	scanf(""%s"", p_stud->first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", p_stud->last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i<5; ++i){
		printf(""%d: "", i+1);
		scanf(""%d"", &p_stud->points[i]);
	}
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud){
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	int summe = 0;
	for(int i = 0; i<5; ++i){
		summe += p_stud->points[i];
	}
	printf(""Anzahl Punkte: %d\\n\\n"", summe);
}

int main(){
	Student studenten[5];
	for(int i = 0; i<5; ++i){
		student_einlesen(&studenten[i]);
	}
	for(int i = 0; i<5; ++i){
		student_ausgeben(&studenten[i]);
	}
}","1","c&p"
"70","SoSe21","10","Antwort 9","C","Franziska Anna-Lena","Gillich","#include <stdio.h>		// printf()
#include <string.h>

typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;

void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}

void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}

void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","#include <stdio.h>		// printf()
#include <string.h>

typedef struct student
{
  char first_name[20];
  char last_name[20];
  int points[5];
} Student;

void
student_einlesen (Student * p_stud)
{
  printf (""Gebe den Vornamen ein: "");
  scanf (""%s"", p_stud->first_name);
  printf (""Gebe nun den Nachnamen ein: "");
  scanf (""%s"", p_stud->last_name);
  printf (""Gebe nun nacheinander die 5 Punkte ein: \\n"");
  for (int i = 0; i < 4; i++)
    {
      printf (""%i: "", i + 1);
      scanf (""%i"", &p_stud->points[i]);
    }
    printf (""%i: \\n"", 5);
    scanf (""%i"", &p_stud->points[4]);
}

void
student_ausgeben (Student * p_stud)
{
  int Punkte = 0;
  //printf(""Anzahl %i\\n"",p_stud->points[1]);
  for (int i = 0; i < 5; i++)
    {
      Punkte += p_stud->points[i];
    }
  printf (""Student: %s %s\\nAnzahl Punkte: %i\\n\\n"", p_stud->first_name,
	  p_stud->last_name, Punkte);
}

void main ()
{
  Student* Eingabe[5];
    Student Mensch0;
    Student Mensch1;
    Student Mensch2;
    Student Mensch3;
    Student Mensch4;
    Eingabe[0]=&Mensch0;
    Eingabe[1]=&Mensch1;
    Eingabe[2]=&Mensch2;
    Eingabe[3]=&Mensch3;
    Eingabe[4]=&Mensch4;
    for(int i=0;i<5;i++){
        student_einlesen(Eingabe[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(Eingabe[i]);
    }
}","1","c&p"
"71","SoSe21","10","Antwort 9","C","Maximilian Erich","Jacoby","#include <stdio.h>
#include <string.h>

typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;

void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
	
}
	
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}

int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","#include <stdio.h>
#include <string.h>

typedef struct student{
	char first_name[20];
	char last_name[20];
	int points[5];
} Student;

void student_einlesen(Student* p_stud){
	char Vorname[20];
	char Nachname[20];
	int Punkte[5];
	printf(""Gebe den Vornamen ein: "");
	scanf("" %s"", Vorname);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf("" %s"", Nachname);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for ( int j = 0 ; j < 4 ; j++ ){
		printf(""%i: "", j + 1);
		Punkte[j] = 1;
		scanf(""%i"", &Punkte[j]);
	}
	printf(""5: \\n"");
	scanf(""%i"", &Punkte[4]);
	strcpy(p_stud->first_name, Vorname);
	strcpy(p_stud->last_name, Nachname);
	for ( int k = 0 ; k < 5 ; k++ ){
		p_stud->points[k] = Punkte[k];
	}
	
}
	
void student_ausgeben(Student* p_stud){
	int Punktanzahl = 0; 
	for( int l = 0 ; l < 5 ; l++ ){
		Punktanzahl += p_stud->points[l];	
	}
	printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n"", Punktanzahl); 
}

int main(){
	Student stud[5];
	for( int n = 0 ; n < 5 ; n++ ){
		student_einlesen(&stud[n]);
	}
	for( int o = 0 ; o < 5 ; o++ ){
		student_ausgeben(&stud[o]);
	}
}","1","c&p"
"72","SoSe21","10","Antwort 9","C","Mattis Musashi Martin","Roßmöller-Felz","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;

void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }

}

int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
    
    

}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

 typedef struct student{
     char vornamen[20];
     char nachnamen[20];
     unsigned int points[5];
} Student;

void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    readLine(p_stud -> vornamen, 20);
    printf(""Gebe nun den Nachnamen ein: "");
    readLine(p_stud -> nachnamen, 20);
    printf(""Gebe nun nacheinander die 5 Punkte ein:"");
    for(int i=0; i<5; ++i){
        printf(""%u. "", i);
        scanf(""%u"", p_stud->points[i]);
    }

}

int main(){
    static Student p_stud[5];
    for(int i=0; i<5; ++i){
        p_stud[i]=student_einlesen(*p_stud);
    }
    
    

}","1","c&p"
"73","SoSe21","10","Antwort 9","C","Vedia","Aksoy","#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;



void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}

void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
    
    
}

int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
    
    
    
    
}","#include <stdio.h>
#include <string.h>
typedef struct student {
    char first_name[20];
    char last_name[20];
    int points[5];
}Student;



void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: Gebe nun den Nachnamen ein: Gebe nun nacheinander die 5 Punkte ein:\\n"");
    scanf(""%s"",p_stud->first_name);
    scanf(""%s"",p_stud->last_name);
    printf(""1: 2: 3: 4: 5: \\n"");
    for (int j=0;j<5;j++){
    scanf(""%i"",&p_stud->points[j]);}
}

void student_ausgeben(Student* p_stud){
    int a=0;
    for (int i=0;i<5;i++){
        a+=p_stud->points[i];}
    printf(""\\nStudent: "");
    printf(""%s %s\\n"",p_stud->first_name,p_stud->last_name);
    printf(""Anzahl Punkte: %i\\n"",a);
    
    
}

int main(){
    static Student ogrenci[5];
    for(int i=0;i<5;i++){
        student_einlesen(&ogrenci[i]);
    }
    for(int i=0;i<5;i++){
        student_ausgeben(&ogrenci[i]);
    }
    
    
    
    
}","1","c&p"
"74","SoSe21","10","Antwort 9","C","Matea","Miskovic","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];

}Student;


void student_einlesen(Student* p_stud){

    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';

    strcpy(p_stud->first_name, Vorname);

    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';

    strcpy(p_stud->last_name, Nachname);


    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");

    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    
    printf(""\\n"");
}

void student_ausgeben(Student* p_stud) {

    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    


    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}


int main(){
    Student Studierende[5];



    

    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }

    //student_einlesen(&Studierende);


    //printf(""%s"", Studierende.first_name);
    
    
    
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

typedef struct student{
    char first_name[20];
    char last_name[20];
    int points[5];

}Student;


void student_einlesen(Student* p_stud){

    char Vorname[20];
    printf(""Gebe den Vornamen ein: "");
    scanf( ""%s"", &Vorname[0]);
    //Vorname[20-1] = '\\0';

    strcpy(p_stud->first_name, Vorname);

    char Nachname[20];
    printf(""Gebe nun den Nachnamen ein: "");
    scanf( ""%s"", &Nachname[0]);
    //Nachname[20-1] = '\\0';

    strcpy(p_stud->last_name, Nachname);


    int Punkte[5];
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");

    for (int i = 0; i < 5; i++)
    {
        printf(""%i: "",i+1);
        scanf( ""%i"", &Punkte[i]);
       getchar();
        p_stud->points[i] = Punkte[i];
    }
    
    printf(""\\n"");
}

void student_ausgeben(Student* p_stud) {

    char Vorname[110];
    char Nachname[20];
    //char Name[100];
    strcpy(Vorname,p_stud->first_name);
    strcpy(Nachname,p_stud->last_name);
    //strcat(Vorname, Nachname);
    //puts(Name);
    printf(""Student: %s %s\\n"", Vorname , Nachname);
    //printf(""%s \\n"", Nachname);
    int summe = 0; 
    for (int i = 0; i < 5; i++)
    {
        summe = summe + p_stud->points[i];
    }
    


    printf(""Anzahl Punkte: %i \\n"", summe);
    printf(""\\n"");
}


int main(){
    Student Studierende[5];



    

    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }
    
        for (int i = 0; i < 5; i++)
    {
        student_ausgeben(&Studierende[i]);
        //printf(""%s"", Studierende[i].first_name);
    }

    //student_einlesen(&Studierende);


    //printf(""%s"", Studierende.first_name);
    
    
    
}","1","c&p"
"75","SoSe21","10","Antwort 9","C","Jonas","Fischer","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;

int main(){
    
    struct student studenten[5];
    
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}

void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}

void student_ausgeben(Student* p_stud){
    int n = 0;
    
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
    
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef char Str20[21];
typedef struct student {
    Str20 first_name;
    Str20 last_name;
    int points[5];
} Student;

int main(){
    
    struct student studenten[5];
    
    for(int i = 0; i<5; i++){
        student_einlesen(&studenten[i]);
    }
    
    for(int i = 0; i<5; i++){
        student_ausgeben(&studenten[i]);
    }
}

void student_einlesen(Student* p_stud){
    printf(""Gebe den Vornamen ein: "");
    scanf(""%20s"", p_stud->first_name);
    getchar();
    
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%20s"", p_stud->last_name);
    getchar();
    
    printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
    
    for(int i = 0; i<5; i++){
        printf(""%d: "", i+1);
        int p = 0;
        scanf(""%d"", &p);
        p_stud->points[i] = p;
        getchar();
    }
    printf(""\\n"");
}

void student_ausgeben(Student* p_stud){
    int n = 0;
    
    for(int i = 0; i<5; i++){
        n += p_stud->points[i];
    }
    
    printf(""Student: %s %s \\n"", p_stud->first_name, p_stud->last_name);
    printf(""Anzahl Punkte: %d \\n\\n"", n);
    
}","1","c&p"
"76","SoSe21","10","Antwort 9","C","Yang Felix","Wang","#include <stdio.h>

typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;

void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}


int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);

	return 0;
}","#include <stdio.h>

typedef struct student {
	char first_name[20];	
	char last_name[20];
	int points[5];
}Student;

void student_einlesen(Student* p_stud) {
	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"", (*p_stud).first_name);
	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"", (*p_stud).last_name);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for (int i = 0; i < 5; i++) {
		printf(""%i: "", i+1);
		scanf(""%i"", &(*p_stud).points[i]);
	}
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud) {
	printf(""Student: %s %s\\n"", (*p_stud).first_name, (*p_stud).last_name);
	int punkte = 0;
	for (int i = 0; i < 5; i++) {
		punkte += (*p_stud).points[i];
	}
	printf(""Anzahl Punkte: %i\\n\\n"", punkte);
}


int main() {
	int anzahl = 5;
	Student students[anzahl];
	for (int i = 0; i < anzahl; i++) {
		student_einlesen( &students[i] );
	}
	for (int i = 0; i < anzahl; i++) {
		student_ausgeben( &students[i] );
	}
	// Student test;
	// student_einlesen(&test);
	// printf(""%s\\n"", test.first_name);

	return 0;
}","1","c&p"
"77","SoSe21","10","Antwort 9","C","Niklas","Schwolow","#include <stdio.h>

typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;

void student_einlesen(Student* p_stud){

}

void student_ausgeben(Student* p_stud){
  
}

int main(){

}","#include <stdio.h>

typedef struct student
{
  char vorname;
  char nachname;
  int punkte[5];
}Student;

void student_einlesen(Student* p_stud){

}

void student_ausgeben(Student* p_stud){
  
}

int main(){

}","1","c&p"
"78","SoSe21","10","Antwort 9","C","Ella Friederike","Bredow","#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define BUF_SIZE 21

typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;

void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}

int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#define BUF_SIZE 21

typedef char str20[21];
typedef struct student{
	str20 first_name;
	str20 last_name;
	int points[5];
}Student;

void student_einlesen(Student* p_stud){
	char buf[BUF_SIZE];
	int buflength = 0;
	printf(""Gebe den Vornamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-2] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
	strcpy(p_stud->first_name, buf);
	printf(""Gebe nun den Nachnamen ein: "");
	fgets(buf, BUF_SIZE, stdin);
    buf[BUF_SIZE-1] = '\\0';
    buflength = strlen(buf);
    buf[buflength-1] = '\\0';
    strcpy(p_stud->last_name, buf);
	printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
	for(int i = 0; i < 5; i++){
		printf(""%i: "", (i+1));
		scanf(""%i"", &p_stud->points[i]);
	}
	getchar();
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud){
	int summe = 0;
	for(int i = 0; i < 5; i++)
		summe += (p_stud->points[i]);
	printf(""Student: %s "", p_stud->first_name);
	printf(""%s\\n"", p_stud->last_name);
	printf(""Anzahl Punkte: %i\\n\\n"", summe);
}

int main(){
	Student p_stud[5];
	int numb_stud = 5;
	for(int i = 0; i < numb_stud; i++){	
		student_einlesen(&p_stud[i]);
		}
	printf(""\\n"");
	for(int i = 0; i < numb_stud; i++){	
		student_ausgeben(&p_stud[i]);
		}
}","1","c&p"
"79","SoSe21","10","Antwort 9","C","Umut","Durak","#include <stdio.h>


typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){

	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);

	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);

	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {

	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","#include <stdio.h>


typedef struct student{
	char vorname[20];
	char nachname[20];
	int punkte[5];
}Student;
void student_einlesen(Student* p_stud){

	printf(""Gebe den Vornamen ein: "");
	scanf(""%s"" , p_stud -> vorname);

	printf(""Gebe nun den Nachnamen ein: "");
	scanf(""%s"" , p_stud -> nachname);

	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 1; i < 6 ; i++){
		printf(""%d: "" , i);
		scanf(""%i"" , &p_stud-> punkte[i-1]);
		if(i == 5) printf(""\\n"");
	}	
}
void student_ausgeben(Student* p_stud){
	
	int summe = 0;
		for(int i = 0; i < 5 ; i++){
			summe += p_stud->punkte[i];
		}
		printf(""\\nStudent: %s %s\\nAnzahl Punkte: %i\\n"",p_stud->vorname,p_stud->nachname,summe);
}
int main() {

	Student arr[5];
		for(int i = 0; i < 5 ; i++){
			student_einlesen(&arr[i]);
		}
		for(int j = 0; j < 5 ; j++){
			student_ausgeben(&arr[j]);
		}
}","1","c&p"
"80","SoSe21","10","Antwort 9","C","Jasko Tobias","Schwarz","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;

void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}


void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}


void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h> // strlen() strcpy()

typedef struct student {
  char first_name[21];
  char last_name[21];
  int points[5];
} Student;

void student_ausgeben(Student* p_stud){
  printf(""Student: %s %s\\n"", p_stud->first_name, p_stud->last_name);
  int tmp = 0;
  for (int i = 0; i < 5; i++) {
    tmp += p_stud->points[i];
  }
  printf(""Anzahl Punkte: %i\\n\\n"", tmp);
}


void student_einlesen(Student* p_stud){
  char tmp[21];
  printf(""Gebe den Vornamen ein: "");
  scanf(""%s"", p_stud->first_name);
  printf(""Gebe nun den Nachnamen ein: "");
  scanf(""%s"", p_stud->last_name);
  printf(""Gebe nun nacheinander die 5 Punkte ein:"");
  for (int j=0; j < 5; j++) {
    printf(""%d: "", j + 1);
    scanf(""%d"", &p_stud->points[j]);
  }
  printf(""\\n"");
}


void main() {
  Student* studenten[5];
  for (int i = 0; i < 3; i++) {
    student_einlesen(studenten[i]);
 }
  for (int i = 0; i < 3; i++) {
    student_ausgeben(studenten[i]);
  }
}","1","c&p"
"81","SoSe21","10","Antwort 9","C","Jared Louis","Outhwaite","#include <stdio.h>
#include <stdlib.h>

typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;

void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
		
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","#include <stdio.h>
#include <stdlib.h>

typedef struct student
{
	char first_name[21];
	char last_name[21];
	int points[5];
}Student;

void student_einlesen(Student* p_stud)
{
	for(int i = 0; i < 2; i++)
	{
		if(i == 0)
		{
			printf(""Gebe den Vornamen ein: "");
			scanf(""%s"", p_stud->first_name);
		}
		if(i == 1)
		{
			printf(""Gebe nun den Nachnamen ein: "");
			scanf(""%s"", p_stud->last_name);
		}
	}
	printf(""Gebe nun nacheinander die 5 Punkte ein: \\n"");
	for(int i = 0; i < 5; i++)
	{
		printf(""%i: "", i + 1);
		scanf(""%i"", &p_stud->points[i]);
	}
	printf(""\\n"");
}

void student_ausgeben(Student* p_stud)
{
	int summe = 0;
	for(int i = 0; i < 2; i++) i = 5;
	printf(""\\nStudent: %s %s"", p_stud->first_name, p_stud->last_name);
	summe = 0;
	summe = p_stud->points[0] + p_stud->points[1] + p_stud->points[2] + p_stud->points[3] + p_stud->points[4];
	printf(""\\nAnzahl Punkte: %i\\n"", summe);
}
		
int main()
{
	Student studenten[5];
	for(int i = 0; i < 5; i++)
	{
		student_einlesen(&studenten[i]);
	}	
	for(int i = 0; i < 5; i++)
	{
		student_ausgeben(&studenten[i]);
	}
}","1","c&p"
"82","SoSe21","10","Antwort 9","C","Florian Alexander","Bauszus","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>

typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;

void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}

void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
   

    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);

    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);

    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   

int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","#include <stdlib.h> // malloc-Familie
#include <stdio.h>  // printf()
#include <string.h>

typedef struct student
{
    char **first_name;
    char **last_name;
    int *points;
    size_t size;
    size_t spoint;
}Student;

void student_init(Student *p_stud)
{
    p_stud->first_name = NULL;
    p_stud->last_name = NULL;
    p_stud->points = 0;
    p_stud->size = 0;
    p_stud->spoint = 0;
}

void student_einlesen(Student* p_stud)
{
    char name_temp[21],name1_temp[21];
    printf(""Gebe den Vornamen ein: "");
    scanf(""%s"", &name_temp);
    printf(""Gebe nun den Nachnamen ein: "");
    scanf(""%s"", &name1_temp);
   

    p_stud->size++;
    p_stud->first_name = (char**)realloc(p_stud->first_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->first_name[p_stud->size-1] = (char*)malloc(strlen(name_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->first_name[p_stud->size - 1], name_temp);

    p_stud->last_name = (char**)realloc(p_stud->last_name, p_stud->size * sizeof(char*));
    if(!p_stud->first_name) exit (-1);
    p_stud->last_name[p_stud->size-1] = (char*)malloc(strlen(name1_temp) + 1);
    if(!p_stud->first_name) exit (-1);
    strcpy(p_stud->last_name[p_stud->size - 1], name1_temp);

    int temp_zahl;
    printf(""Gebe nun nacheinander die 5 Punkte ein:\\n"");
    for(int i = 1; i <= 5; i++)
    {
        printf(""%i: "",i);
        scanf(""%d"", &temp_zahl);
        p_stud->spoint++;
        int* tmp = (int*)realloc(p_stud->points, (p_stud->spoint) * sizeof(int*));
        if(!tmp) exit (-1);
        p_stud->points = tmp;
        p_stud->points[p_stud->spoint-1] = temp_zahl;
    }
    printf(""\\n"");   
}
void student_ausgeben(Student* p_stud)
{
    int punkte[5];
    int j = 0;
    for(int i = 0; i < p_stud->size; i++){
        punkte[i]=p_stud->points[j]+p_stud->points[j+1]+p_stud->points[j+2]+p_stud->points[j+3]+p_stud->points[j+4];
        j+=5;
    }
    for(int i = 0; i < p_stud->size; i++)
    {
        printf(""Student: %s %s\\nAnzahl Punkte: %d\\n\\n"", p_stud->first_name[i], p_stud->last_name[i], punkte[i]);
    }
    free(p_stud->first_name);
    free(p_stud->last_name);
    free(p_stud->points);
}   

int main()
{
    Student erster_Student;
    student_init(&erster_Student);
    for (int i = 0; i < 5; i++)
    {
        student_einlesen(&erster_Student);
    }
    student_ausgeben(&erster_Student);
    return 0;
}","1","c&p"
"83","SoSe22","8","Antwort 9","C","Elisabeth Maria","Groß","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char *p_char, int shift)
{
	if(*p_char >= 'A' && *p_char <= 'Z') {
        if (*p_char + shift > 'Z'){
            *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'A') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (*p_char + shift > 'z'){
                *p_char = *p_char + shift - 26;
        } else if (*p_char + shift < 'a') {
            *p_char = *p_char + shift + 26;
        } else {
            *p_char += shift;
        }
    }

}


void cipher(char str[], int shift, int maxlength)
{
	for(int i=0; i<=maxlength; i++){
		shiftChar(&str[i], shift);
	}
}


int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","c&p"
"84","SoSe22","8","Antwort 9","C","Niklas","Schwolow","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

void shiftChar(char* p_char, int shift){
    if ('a'<= *p_char && *p_char <= 'z'){
        if('a'> *p_char + shift){
            int tmp1 = 'a' - *p_char - shift;
            *p_char = 'z' - tmp1 +1;
        }        
        else if('a'<= *p_char + shift && *p_char + shift <= 'z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'z'){
            int tmp2 = 'z' - *p_char - shift;
            *p_char = 'a' - tmp2 - 1;
        }
    }
    else if('A'<= *p_char && *p_char <= 'Z'){
        if('A'> *p_char + shift){
            int tmp3 = 'A' - *p_char - shift;
            *p_char = 'Z' - tmp3 +1;
        }        
        else if('A'<= *p_char + shift && *p_char + shift <= 'Z'){
            *p_char = *p_char + shift;
        }
        else if(*p_char + shift > 'Z'){
            int tmp4 = 'Z' - *p_char - shift;
            *p_char = 'A' - tmp4 -1;
        }
    }
}

void cipher(char str[], int shift, int maxlength){
    for(int i = 0; i<maxlength;i++){
        char* p_char = &str[i];
        shiftChar(p_char, shift);
    }
}

int main(){
	char str[50] = ""Froh zu sein bedarf es wenig"";
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","c&p"
"85","SoSe22","8","Antwort 9","C","Tobias","Hengst","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
    int value = *p_char;
    if ('A' <= value && value <= 'Z') {
        value += shift;
        if (!(value <= 'Z')) value -= ('Z' - 'A'+1) ;
        if (!('A' <= value)) value += ('Z' - 'A'+1) ;
    }
    else if ('a' <= value && value <= 'z') {
        value += shift;
        if (!(value <= 'z')) value -= ('z' - 'a'+1) ;
        if (!('a' <= value)) value += ('z' - 'a'+1) ;
    }
    *p_char = value;
}
/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
    for (int i = 0; i < maxlength; i++) {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig"";     // Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);
    
    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);
    
    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","c&p"
"86","SoSe22","8","Antwort 9","C","Edgar Wolf","Großkopf","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
// uppercase ASCII-Zahlen: A = 65 - Z = 90
// lowercase ASCII-Zahlen: a = 97 - z = 122
/*
Mögliche Fälle:
1. Wird *p_char mit shift addiert, bleibt die ASCII-Zahl im vorgegebenen Wertebereich.
	Folge: Erhöhe den ASCII-Wert um shift.
2. Wird *p_char mit shift addiert, wird die ASCII-Zahl größer als der vorgegebene Maximalwert.
	Folge: Erhöhe den ASCII-Wert um shift und subtrahiere den Wert um 26.
3. Wird *p_char mit shift addiert, wird die ASCII-Zahl kleiner als der vorgegebene Minimalwert.
	Folge: Erhöhe den ASCII-Wert um shift und addiere den Wert um 26.
*/
	if((*p_char+shift >= 65 && *p_char+shift <= 90) ^ (*p_char+shift >= 97 && *p_char+shift <= 122)){
		*p_char += shift;
		}
	else if(*p_char+shift > 90 && *p_char < 97){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 122){
		*p_char+=(shift-26);
	}
	else if(*p_char+shift > 65){
		*p_char+=(shift+26);
	}
	}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i = 0; i < maxlength; i++){
		char* p_char;
		p_char = &str[i];
		shiftChar(p_char, shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);

	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);

	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","c&p"
"87","SoSe22","8","Antwort 9","C","Shaurya","Sharma","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    shift = shift % 26;
	if(shift>=0){
	if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char>'Z'){
	        *p_char-=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char>'z' || *p_char<'a'){
	        *p_char-=26;
	    }
	}
    }
    else if(shift<0){
        if(*p_char >= 'A' && *p_char <= 'Z'){
	    *p_char+=shift;
	    if(*p_char<'A'){
	        *p_char+=26;
	    }
	}
	else if(*p_char >= 'a' && *p_char <= 'z'){
	    *p_char+=shift;
	    if(*p_char<'a'){
	        *p_char+=26;
	    }
	}
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	for(int i=0;i<maxlength;i++){
	    shiftChar(&str[i], shift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","c&p"
"88","SoSe22","8","Antwort 9","C","Bahar","Gülser","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift) {
      if ('A' <= *p_char && *p_char <= 'Z')  {
    *p_char += shift;
    if (*p_char > 'Z') *p_char -= 26;
    if (*p_char < 'A') *p_char += 26;
    }
    else if ('a' <= *p_char && *p_char <= 'z')  {
    if(*p_char+shift < 'a') shift += 26;
    if(*p_char+shift > 'z') shift -= 26;
    *p_char += shift;
}
    }

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength) {
        	for (int i =0; i<maxlength; ++i) shiftChar(&str[i],shift);
    }
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main() {
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","c&p"
"89","SoSe22","8","Antwort 9","C","Jonas","Eckhardt","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
	
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
	
		} else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} else {
			*p_char += shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	
	for(int i=0; i < maxlength; i++)
		shiftChar(&str[i], shift);
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","c&p"
"90","SoSe22","8","Antwort 9","C","Gabriele","Tellez Pedroza","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char>=65 && *p_char<=90)
    {
        while((*p_char+shift)>90)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<65)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
    if(*p_char>=97 && *p_char<=122)
    {
        while((*p_char+shift)>122)
		{
        	*p_char = *p_char-26;
		}
		while((*p_char+shift)<97)
		{
        	*p_char = *p_char+26;
		}
		*p_char += shift;
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i=0;i<maxlength;i++)
    {
        shiftChar(&str[i], shift);
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","c&p"
"91","SoSe22","8","Antwort 9","C","Tom Frederik","Braune","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{	
	char shi = (char)shift; 
	
	if(*p_char>64 && *p_char<91){
		if(*p_char+shi>90){shi=shi-26;}
		else if(*p_char+shi<65){shi=26+shi;}
	
	*p_char +=shi;
	}
	if(*p_char>96 && *p_char<123){
		if(*p_char+shi>122){shi=shi-26;}
		else if(*p_char+shi<97){shi=26+shi;} 
	
	*p_char +=shi;
	}
	
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char* str, int shift, int maxlength)
{	
	for(int i=0; i<maxlength; i++)
	{
		char letter = *(str+i);
		shiftChar(&letter, shift);
		
		*(str+i)=letter;
	} 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","c&p"
"92","SoSe22","8","Antwort 9","C","Leif Erik","Stolte","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift){
	if(*p_char >='a' && *p_char <='z'){
		if(*p_char + shift >'z'){
			*p_char = 'a' + shift - ('z' - *p_char + 1);
		} 
		else if(*p_char + shift < 'a') {
			*p_char = 'z' + shift -('a' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
	else if(*p_char >= 'A' && *p_char <= 'Z'){
		if(*p_char + shift >'Z'){
			*p_char = 'A' + shift - ('Z' - *p_char +1);
		} 
		else if(*p_char + shift < 'A') {
			*p_char = 'Z' + shift -('A' - *p_char -1);
		} 
		else {
			*p_char = *p_char + shift;
		}
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength){
	int i = 0;
	while ( i< maxlength) {
		shiftChar(&str[i],shift);
		i ++;
	}
}
/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","c&p"
"93","SoSe22","8","Antwort 9","C","Gregor","Lehmann","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    
	// ... hier Code einfuegen ...
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	// ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","c&p"
"94","SoSe22","8","Antwort 9","C","Jakob Pius","Bücking","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);


}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
	if ( *p_char>= 'A' && *p_char<= 'Z'){
        *p_char += shift; 
        if (*p_char< 'A'){
            char a;
            a= ( 'A' -*p_char)-1;
            *p_char = 'Z' - a;
        }
        if (*p_char> 'Z' ){
            char a;
            a= (*p_char - 'Z')-1;
            *p_char = 'A'+ a;
        }
    }
    if (*p_char >= 'a' && *p_char <= 'z'){
        int b = *p_char; 
        if ((b + shift) > 64){
            b += shift;
            if (b< 'a'){
            char a;
            a= ( 'a'- b )-1;
            *p_char = 'z' - a; 
        }
        if (b> 'z'){
            char a;
            a= (b - 'z')-1;
            *p_char = 'a' + a; 
        }
        } else {
            *p_char += shift;
        }


    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    for(int i =0; i<maxlength; i++){ 
        shiftChar(&str[i], shift );
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 6;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);


}","1","c&p"
"95","SoSe22","8","Antwort 9","C","Luca Marius","Hilbrich","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if (*p_char >= 'A' && *p_char <= 'Z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'Z') {
                    *p_char = 'A';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'A') {
                    *p_char = 'Z';
                }
            }
        }
    } else if (*p_char >= 'a' && *p_char <= 'z') {
        if (shift >= 0) {
            for (int i = 0; i < abs(shift); i++) {
                *p_char += 1;
                if (*p_char > 'z') {
                    *p_char = 'a';
                }
            }
        } else {
            for (int i = 0; i < abs(shift); i++) {
                *p_char -= 1;
                if (*p_char < 'a') {
                    *p_char = 'z';
                }
            }
        }
    }
}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
	char* p_str = str;
    for (int i = 0; i < maxlength; i++) {
        shiftChar(p_str, shift);
        p_str++;
    }
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","c&p"
"96","SoSe22","8","Antwort 9","C","Rosa","Hagenberg","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{

	if(*p_char >= 'a' && *p_char <= 'z'){
		/*
		char c = *p_char - 'a';
		c += shift;
		c = c % 26;
		*p_char = c + 'a';
		*/
		*p_char += shift;
		if ( *p_char < 'a') *p_char = *p_char + 'z' - 'a' + 1;;
		if ( *p_char > 'z') *p_char = *p_char - 'z' + 'a' - 1;
	}
	if(*p_char >= 'A' && *p_char <= 'Z'){
		/*
		char c = *p_char - 'A';
		c += shift;
		c = c % 26;
		*p_char = c + 'A';
		*/


		*p_char += shift;
		if ( *p_char < 'A') *p_char = *p_char + 'Z' - 'A' + 1;
		if ( *p_char > 'Z') *p_char = *p_char - 'Z' + 'A' - 1;
		 
	}

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
 for (int i = 0; i < maxlength; i++){
	 shiftChar( &str[i], shift);
 }
 
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
	char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	int shift = 5;
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, shift, 50);
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -shift, 50);
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
}","1","c&p"
"97","SoSe22","8","Antwort 9","C","Moritz Sebastian","Niethammer","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","#include <stdio.h>
#include <stdlib.h>

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert shift uebergeben.
 * Shiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert shift.
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int shift)
{
    if(*p_char >= 'a' && *p_char <= 'z'){
        if(*p_char + shift < 'a'){
            *p_char += shift;
            *p_char += 26;
        } else if(*p_char + shift > 'z'){
            *p_char += shift;
            *p_char -= 26;
        } else if (*p_char + shift < 0){
            *p_char -= 26;
            *p_char += shift;
        }else{
            *p_char += shift;
        }
    }else{
        *p_char += shift;
        if(*p_char < 'A'){
            *p_char += 26;
        } else if(*p_char > 'Z'){
            *p_char -= 26;
        }
    }

}

/*
 * Bekommt einen beliebigen char-Array der Laenge maxlength uebergeben.
 * Fuehrt auf jedem Zeichen des Arrays die shiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int shift, int maxlength)
{
    int i = 0;
    while(i < maxlength && str[i] != '\\0'){
        if ((str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z')){
            shiftChar(&str[i], shift);
        }
        i += 1;
    }
    // ... hier Code einfuegen ...
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann.
 * Es benutzt dazu die cipher-Funktion.
 */
int main()
{
    char str[50] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
    int shift = 5;
    printf(""Original: "");
    printf(""%s\\n"", str);

    // Verschluesseln
    cipher(str, shift, 50);
    printf(""Verschluesselt: "");
    printf(""%s\\n"", str);

    // Entschluesseln
    cipher(str, -shift, 50);
    printf(""Entschluesselt: "");
    printf(""%s\\n"", str);
}","1","c&p"
"98","SoSe22","8","Antwort 9","C","Florian","Schacht","#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","#include <stdio.h>
#include <stdlib.h>
// #include <./tools.h>

// #include <>//Regular Expressions for shorter (aka harder to do maintenance on) code?


/*
	maxLength ren intMaxLength
	intShift	ren shift
*/

/*
 * Bekommt einen Pointer auf ein beliebiges Zeichen und einen Wert intShift uebergeben.
 * intShiftet alle Zeichen aus dem Bereich a-z und A-Z um den Wert intShift. 
 * An den Wertebereichsgrenzen findet ein Umlauf statt (Beispielsweise:
 * nach Z folgt A, vor A liegt Z, nach z folgt a und vor a liegt z).
 * Zahlen ausserhalb des Bereichs werden unveraendert zurueckgegeben.
 * Veraendert das referenzierte Zeichen direkt.
 */
void shiftChar(char* p_char, int intShift){
	//A-Z:65-90;a-Z:97-122
	
	if((*p_char >= 65) && (*p_char <= 90)){//A-Z
		if(*p_char+intShift < 65){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 90){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else if((*p_char >= 97) && (*p_char <= 122)){//a-z
		if(*p_char+intShift < 97){
			*p_char = *p_char + intShift + 26;
		}else if(*p_char+intShift > 122){
			*p_char = *p_char + intShift - 26;
		}else{
			*p_char = *p_char + intShift;
		}
	}else{
		// % - characters outside of [A-Za-Z] are not to be changed
	}
}

/*
 * Bekommt einen beliebigen char-Array der Laenge intMaxLength uebergeben. 
 * Fuehrt auf jedem Zeichen des Arrays die intShiftChar-Funktion aus.
 * Das uebergebene originale Array wird dabei veraendert.
 */
void cipher(char str[], int intShift, int intMaxLength){
	for (int i=0;i<intMaxLength;i++){
		shiftChar(&str[i], intShift);
	}
}

/*
 * Testprogramm, das Strings mit dem Caesar-Chiffre chiffrieren kann. 
 * Es benutzt dazu die cipher-Funktion.
 */
int main(){
	char str[] = ""Froh zu sein bedarf es wenig""; 	// Originaltext
	// char str[] = ""AZ   az""; 	// Originaltext
	// char str[] = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ   abcdefghijklmnopqrstuvwxyz""; 	// Originaltext
	int intArrMoepSize = (sizeof str / sizeof *str);
	int intShift = 5;
	// printf(""O: "");
	printf(""Original: "");
	printf(""%s\\n"", str);
	
	// Verschluesseln
	cipher(str, intShift, intArrMoepSize);
	// printf(""V: "");
	printf(""Verschluesselt: "");
	printf(""%s\\n"", str);
	
	// Entschluesseln
	cipher(str, -intShift, intArrMoepSize);
	// printf(""E: "");
	printf(""Entschluesselt: "");
	printf(""%s\\n"", str);
	
	
	// char string[] = ""Dieser_Text_ist_geheim"";
	// cipher(string, -4, 22);
	// printf(""%s\\n"", string);
	
	// char letter[] = ""b"";
	// shiftChar(letter, 2);
	// printf(""%c\\n"", *letter);
}","1","c&p"
"99","SoSe22","8","Antwort 9","C","Hannes","Voß","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}

}","#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

int main (void)
{

    int key = 3;
    int letter = 0;
    int letter2 = 0;

    key = key % 26; // Wir haben nur 26 verschiedene keys

    char c;
    while( (c = getchar()) != '\\n')
    {
        c = tolower(c);
        letter = (int)c;
     
        if (letter == ' ')
        {
            letter2 = letter;
        }
        else if((letter + key) > 'z')
        {
            letter2 = letter + key - ('z' - 'a' + 1); //'z'-'a'+1 == 26 => kein Overflow mehr möglich, da key < 26
        }
        else
        {
             letter2 = letter + key;
        }
        c = (char)letter2;
        putchar (c);
    }
    putchar ('\\n');
    return EXIT_SUCCESS;
}

}","1","c&p"
"100","SoSe22","9","Antwort 9","C","Fabian","Große-Wöhrmann","#include <stdio.h>
#include <stdlib.h>
 
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
  {
    dest[i]=src[i];
  }
  
}

void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
  
}

int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdio.h>
#include <stdlib.h>
 
void ersetzen(char* dest, int zahl, char* src)
{  
  for (int i = 0; (i<zahl)&&(dest[i]!=0)&&(src[i]!=0); i++)
  {
    dest[i]=src[i];
  }
  
}

void umdrehen( char* str )
{
  int l;
  char puffer;
  for (l = 0; str[l]!=0; l++){}
  for (int i=0; i<l/2; i++){
    puffer=str[i];
    str[i]=str[l-i-1];
    str[l-i-1]=puffer;
  }
  
}

int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","c&p"
"101","SoSe22","9","Antwort 9","C","Paul","Dannenberg","#include <stdio.h>
#include <stdlib.h>
 
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    }
}

void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}

int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdio.h>
#include <stdlib.h>
 
void ersetzen(char* dest, int zahl, char* src){  
    for (int i = 0; i <=zahl && dest[i] != '\\0'; i++){
        dest[i] = src[i];
    }
}

void umdrehen( char* str ){
    int z = 0;
    for(int i = 1; str[i] != '\\0'; i++){
        z = i;
    }
    char tmp[z];
    for(int i = 0; str[i] != '\\0'; i++){
        tmp[i] = str[z-i];
    }
    for(int i = 0; str[i] != '\\0'; i++){
        str[i]=tmp[i];
    }
}

int main( int argc, char* argv[] ){  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","c&p"
"102","SoSe22","9","Antwort 9","C","Shaurya","Sharma","#include <stdio.h>
#include <stdlib.h>
 
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; dest[i] != 0; i++){
        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
        }
    }
}

void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
  
}

int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdio.h>
#include <stdlib.h>
 
void ersetzen(char* dest, int zahl, char* src)
{  
    for(int i= 0; dest[i] != 0; i++){
        if(i < zahl && src[i] != 0){
            dest[i] = src[i];
        }
    }
}

void umdrehen( char* str )
{
    char temp[100] = """";
    int count = 0;
    
    for(int i= 0; str[i] != 0; i++){
       temp[i] = str[i];
       count++;
    }
    for(int i= 0; temp[i] != 0; i++){
       str[i] = temp[count-i-1];
    }
  
}

int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","c&p"
"103","SoSe22","9","Antwort 9","C","Tom Frederik","Braune","#include <stdio.h>
#include <stdlib.h>

void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++){
  *(dest+i) = *(src +i);
  }
}

void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
  
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","#include <stdio.h>
#include <stdlib.h>

void ersetzen(char* dest, int zahl, char* src)
{  
  for(int i=0; i<zahl && *(dest+i) != '\\0'  ; i++){
  *(dest+i) = *(src +i);
  }
}

void umdrehen( char* str )
{
  int n=0;
  for(int i =0; *(str+i) != '\\0' ;i++){
  n++;}
  n--;
  
  for(int i=0; i<=n; i++){
  char tmp = *(str +i); 
  *(str + i) = *(str + n );
  *(str + n) = tmp;
    n--;
  }
  
}
int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""Das Original ist: %s \\n"", test );
  ersetzen( test , atoi(argv[1]), argv[2] );
  printf( ""Ersetzt : %s \\n"", test );
  umdrehen( test );
  printf( ""Rückwärts : %s \\n"", test );
}","1","c&p"
"104","SoSe21","9","Antwort 9","C","Yang Felix","Wang","#include <stdio.h>

int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    
    int letterCounter = 3;
    int str2Index = 0;
    
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>

int main( int argc, char* argv[] ) 
{
    char str1[100];
    char str2[100];
    
    int wordCounter = 0;
    int str1Index = 0;
    char* currPointer = argv[1];
    
    int letterCounter = 3;
    int str2Index = 0;
    
    while (wordCounter < (argc - 1)) {
        if (*currPointer == 0) {
            wordCounter++;
        } else {
            char cP = *currPointer;
            if (cP == 'x' || cP == 'y' || cP == 'q' || cP == 'X' || cP == 'Y' || cP == 'Q') {
            } else {
                str1[str1Index] = *currPointer;
                str1Index++;
                
                if (letterCounter == 3) {
                    str2[str2Index] = *currPointer;
                    str2Index++;
                    letterCounter = 0;
                }
                    letterCounter++;
            }
        }
        currPointer++;
    }
    str1[str1Index] = 0;
    str2[str2Index] = 0;
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str1);
    printf(""Der neue String lautet: %s\\n"", str2);
}","1","c&p"
"105","SoSe21","9","Antwort 9","C","Vedia","Aksoy","#include stdio.h

def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
    
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}



char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}



return(yeniarray,yeniarray);

}










int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","#include stdio.h

def char* kedi(int sayi, char* isim[]){
    char array[100];
   int count=0;
    for (int i=0;i<sayi;i++){
    
    int uzunluk = strlen(isim[i]);
    for (int j=0;j<uzunluk;j++){
        if (isim[i][j]==""x""||isim[i][j]||==""y""||isim[i][j]==""q""||isim[i][j]==""X""||isim[i][j]==""Y""||isim[i][j]==""Q""){
            }
            else {array[count]=isim[i][j];count++;}
    }
    
}    
char yeniarray[count];
for (int i=0;i<=count;i++){
    yeniarray[i]=array[i];
}



char enyeni[count];
for (int i=0;i<count;i++){
    enyeni[i]=yeniarray[i];
}



return(yeniarray,yeniarray);

}










int main( int argc, char* argv[] )
{  
  char test[11]= ""0123456789"";
  printf( ""x,y,q und X,Y,Q aussortiert: "" );
  
  printf( ""%s \\n"", kedi(argc,argv)[0] );
  printf( ""Der neue String lautet:"" );
  printf( ""%s \\n"", kedi(argc,argv)[1] );
}","1","c&p"
"106","SoSe21","9","Antwort 9","C","Luis Valentin","Salas Lara","#include <stdio.h>
#include <stdlib.h>



int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;

	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];

		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;

	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);

 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){

 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","#include <stdio.h>
#include <stdlib.h>



int main( int argc, char* argv[] )
{
 char erg[100];
 int len=0;
 for(int i=0;i<argc-1;i++){
	 int j=0;

	 while(argv[i+1][j] != '\\0'){
		 char temp=argv[i+1][j];

		 if(temp != 'x' && temp != 'y' && temp != 'q'){
			 if(temp != 'X' && temp != 'Y' && temp != 'Q'){
			 erg[len]=argv[i+1][j];
			 len++;
			 }
		 }
		 j++;

	 }
erg[len]='\\0';
 }
 printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",erg);

 char erg2[100];
 int k=0;
 int j=0;
 	 while(erg[k] != '\\0'){

 		 if(k % 3==0){
 			 erg2[j]=erg[k];
 			 j++;
 		 }
 		 k++;
 	 }
 erg2[len]='\\0';
printf(""Der neue String lautet: %s\\n"",erg2);
}","1","c&p"
"107","SoSe21","9","Antwort 9","C","Matea","Miskovic","#include <stdio.h>



int main(int argc, char** argv){

    
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;


    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","#include <stdio.h>



int main(int argc, char** argv){

    
    char string1[100]= """";
    char string2[100]= """";
    int counter =0;
    int counter2 =0;


    for (int i = 1; i < argc ; i++)
    {   
        for (int j = 0; argv[i][j] != '\\0'; j++)
        {   
            if (argv[i][j] != 'x' && argv[i][j] != 'y' && argv[i][j] != 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q')
            {
                string1[counter] = argv[i][j];
                if (counter % 3 == 0)
                {
                    string2[counter2] = argv[i][j];
                    counter2++;
                }
                counter++; 
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string1);
    printf(""Der neue String lautet: %s\\n"",string2);
}","1","c&p"
"108","SoSe21","9","Antwort 9","C","Maximilian Erich","Jacoby","#include <stdio.h>

void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}

void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	

void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}


int main(int argc, char *argv[]){
	
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","#include <stdio.h>

void strat( char *str1, char *str2 ){
	int y = 0;
	int z = 0;
	for( int i = 0 ; str1[i] != 0 ; i++ ){
		y = i+1;	
	}
	for( int i = 0 ; str2[i] != 0 ; i++ ){
		str1[y+i] = str2[i];
		z = i+1;
	}
	str1[y+z] = str2[z];
}

void aussortieren( char *str1, char *str2 ){
	int j = 0;
	int i; 
	for( i = 0 ; str1[i] != 0 ; i++){
		if((str1[i] != 'x') && (str1[i] != 'X') && (str1[i] != 'y') &&
		(str1[i] != 'Y') && (str1[i] != 'q') && (str1[i] != 'Q')){
			str2[j] = str1[i];
			j++;
		}
	}
	str2[j] = 0;
}	

void rechnung( char *str1, char *str2 ){
	int i;
	int j = 0;
	for( i = 0 ; str1[i] != 0 ; i++ ){
		if ((i % 3) == 0){
			str2[j] = str1[i];
			j++;
		}	
	}
	str2[j] = 0;
}


int main(int argc, char *argv[]){
	
	char string[100];
	char string2[100];
	for(int i = 0; i < 100; i++)
	{string[i] = 0x00; string2[i] = 0x00;}
	//char x;
	for( int i = 1 ; i < argc ; i++ ){
		strat( string, argv[i] );
	}
	aussortieren( string, string2 );
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
	rechnung( string2, string );
	printf(""Der neue String lautet: %s\\n"", string);
}","1","c&p"
"109","SoSe21","9","Antwort 9","C","Max Richard","Horneburg","#include <stdio.h>
#include <stdlib.h>


typedef struct _String {
	char *str;
	unsigned int str_len;
} String;

String* arguments (int arg_count, char** args);

String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
			

int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","#include <stdio.h>
#include <stdlib.h>


typedef struct _String {
	char *str;
	unsigned int str_len;
} String;

String* arguments (int arg_count, char** args);

String* arguments (int arg_count, char** args) {
	String* arguments = malloc(sizeof(String) * 2);
	int count = 0;
	arguments[0].str_len = 0;
	arguments[0].str = malloc(256*sizeof(char));
	for (int i=1; i<arg_count; i++) {
		char* arg = args[i];
		int j = 0;
		char c = arg[j];
		while (c) {
			if (c == 'x'| c == 'X' | c == 'y' | c == 'Y' | c == 'q' | c == 'Q') {
				j++;
                        	c = arg[j];
				continue;
			}
			arguments[0].str[count] = c;
			count++;
			j++;
			c = arg[j];
		}
	}
	arguments[0].str_len = count;
	arguments[1].str_len = 0;
	arguments[1].str = malloc(256 * sizeof(char));
	for (int i=0; i<arguments[0].str_len; i++) {
		if (i%3 == 0) {
			arguments[1].str[arguments[1].str_len] = arguments[0].str[i];
			arguments[1].str_len++;
			}
		}
	return arguments;
}
			

int main (int argc, char** argv) {
	String* str = arguments(argc, argv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\\nDer neue String lautet: %s"", str[0].str, str[1].str);
	return 0;
}","1","c&p"
"110","SoSe21","9","Antwort 9","C","Florian Alexander","Bauszus","#include <stdio.h>
#include <stdlib.h>

void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}

void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","#include <stdio.h>
#include <stdlib.h>

void xyzz(char* string)
{
  int t = 0;
  for(char *temp = string; *temp!=0; temp++, t++);
  for(int i = 0,j = 0; i<=t; i++){
    if(i%3==0){
      string[j]=string[i];
      j++;
    }
    if(i==t){
      string[j]=0;
    }
  }
}

void xyz(char* out,int *temp,char* in)
{ 
  char *pout=out;
  for(int i = 0; i<*temp; i++)
  {
    *pout++;
  } 
  for(char *pin=in;*pin!=0;pin++)
  {
    switch (*pin)
    {
      case ' ':
      case 'x':
      case 'X':
      case 'y':
      case 'Y':
      case 'q':
      case 'Q':
        break;
      default:
      *pout++ = *pin;
      *temp+=1;
        break;  
    }    
  }
  *pout=0;
}
int main(int argc, char* argv[])
{
  char str[100];
  int times=0;
  
  for(int i=1; i<argc;i++)
  {
    xyz(str, &times, argv[i]);
  }
  printf( ""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
  xyzz(str);
  printf( ""Der neue String lautet: %s\\n"",str);
}","1","c&p"
"111","SoSe21","9","Antwort 9","C","Jeremias Harry","Alexe","#include <stdio.h>

int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","#include <stdio.h>

int main(int argc, char** argv){
    char array [100];
    char array2 [100];
    int k = 0;
    for( int i = 1; i < argc; i++){
        for(int j = 0; '\\0' != argv[i][j]; j++){
             if(argv[i][j] != 'x' && argv[i][j] && argv[i][j] != 'y' && argv[i][j]!= 'q' && argv[i][j] != 'X' && argv[i][j] != 'Y' && argv[i][j] != 'Q'){ 
             array[k] = argv[i][j];
             k++;
             }
        }
    }
    array[k] = '\\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", array);
    for(int i = 0; 3 * i < k ; i++){
        array2[i] = array[3*i];
    }
    printf(""Der neue String lautet: %s"", array2);
}","1","c&p"
"112","SoSe21","9","Antwort 9","C","Umut","Durak","#include <stdio.h>

int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	
	
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			
			
			
			
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","#include <stdio.h>

int main(int argc, char* argv[] )
{  
	char str[100];
	char strneu[100];
	int a = 0;
	for (int i = 0; i < argc -1; i++)
	{
		for (int length = 0; *(*(argv+1+i)+length) != '\\0'; length++)
		{
			str[a] = *(*(argv+1+i)+length);
			a++;
		}
	}
	str[a] = '\\0';
	
	
	for (int i = 0; i < a+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			
			
			
			
			do
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			} while(1);
			a--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((a/2)-2); i++, z += 3)
	{
		strneu[i] = str[z];
	}
	int length = 0;
	for (length; str[length] != '\\0'; length++){}
	strneu[length] = '\\0';
	printf(""Der neue String lautet: %s"",strneu);
}","1","c&p"
"113","SoSe21","9","Antwort 9","C","Fynn Niklas","Gerhardt","#include <stdio.h>

int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
				
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","#include <stdio.h>

int main(int argc, char* argv[]){
	int a = 0;
	char str1[100];
	for(int i = 1; i<argc; ++i){
		int j = 0; 
		while(argv[i][j] != '\\0'){
			if(argv[i][j] == 'x' || argv[i][j] == 'y' || argv[i][j] == 'q' || argv[i][j] == 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q'){
				
			}else{
				str1[a] = argv[i][j];
				++a;
			}
			++j;
		}
	}
	str1[a] = '\\0';
	printf(""x,y,q und X,Y,Q aussortiert: %s \\n"", str1);
	char str2[100];
	int i = 0;
	int j = 0;
	while(str1[i] != '\\0'){
		if(i%3 == 0){
			str2[j] = str1[i];
			++j;
		}
		++i;
	}
	str2[j] = '\\0';
	printf(""Der neue String lautet: %s\\n"", str2);
}","1","c&p"
"114","SoSe21","9","Antwort 9","C","Michael Andreas","Weber","#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   
   fgets(satz, sizeof(satz), stdin);


   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","#include <stdio.h>
int main() {
   char satz[100], satz2[100];
   int l, k;
   
   fgets(satz, sizeof(satz), stdin);


   for (int i = 0, j; satz[i] != '\\0'; ++i) {
      while (!(satz[i] >= 'a' && satz[i] <= 'p') && !(satz[i] >= 'r' && satz[i] <= 'w') && !(satz[i] == 'z') && !(satz[i] >= 'A' && satz[i] <= 'P') && !(satz[i] >= 'R' && satz[i] <= 'W') && !(satz[i] == 'Z') && !(satz[i] == '!') && !(satz[i] == '?') && !(satz[i] == '\\0')){
         for (j = i; satz[j] != '\\0'; ++j) {
            satz[j] = satz[j + 1];
         }
         satz[j] = '\\0';
      }
   }
   printf(""x,y,q und X,Y,Q aussortiert: "");
   puts(satz);
     for (int l = 0, k; satz[l] != '\\0'; ++l) {
        satz2[k] == satz[l];
        k++;
        l=l+3;
    }
    printf(""Der neue String lautet: %s"", satz2);
    return 0;
}","1","c&p"
"115","SoSe21","9","Antwort 9","C","Muzaffer Mert","Sen","#include <stdio.h>

int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}


//**(argv + 1 + lange) != '\\0'","#include <stdio.h>

int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\\0'; lange++)
		;
	str2[lange] = '\\0';
	printf(""Der neue String lautet: %s"",str2);
}


//**(argv + 1 + lange) != '\\0'","1","c&p"
"116","SoSe21","9","Antwort 9","C","Moritz","Platena","#include <stdio.h>



int main(int argc, char** argv){
    
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
        
           str1[f] += argv[i][j];
           f++;

        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
  

    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
    
}","#include <stdio.h>



int main(int argc, char** argv){
    
    char str1[100] = """";
    char str2[100] = """";
    char str3[100] = """";
    int f = 0;
    for (int i = 1; i < argc; i++){
        for (int j = 0; argv[i][j] != '\\0' ; j++){
        
           str1[f] += argv[i][j];
           f++;

        }  
    }
    int j = 0;
    for (int i = 0; str1[i] != '\\0'; i++){
        if(str1[i] != 'x' && str1[i] != 'y' && str1[i] != 'q' && str1[i] != 'X' && str1[i] != 'Y' && str1[i] != 'Q' ){
            str2[j] = str1[i];
            j++;
        }
    }
    
    int g = 0;
    for (int i = 0 ; str2[i] != '\\0'; i = i + 3){
        str3[g] = str2[i];
        g++;
    }
  

    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", str2);
    printf(""Der neue String lautet: %s\\n"", str3);
    
}","1","c&p"
"117","SoSe21","9","Antwort 9","C","Jared Louis","Outhwaite","#include <stdio.h>

int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","#include <stdio.h>

int main(int argc, char** argv){
	char a[100];
	int u = 0;
	printf(""x,y,q und X,Y,Q aussortiert: "");
	for(int i = 1; i < argc; i++){
		for(int j = 0; argv[i][j] != '\\0'; j++){
			if(argv[i][j] == 'x'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'X'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Y'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == 'Q'){
				for(int z = j; argv[i][z] != '\\0'; z++){
					argv[i][z] = argv[i][z+1];
				}
			};
			if(argv[i][j] == '\\0') u -= 1;
			if(argv[i][j] != '\\0') a[u] = argv[i][j];
			u++;
		}
	}
	char b[100];
	int k = 0;
	for(int i = 0; i < u; i++){
			if((i % 3) == 0){
				b[k] = a[i];
				k++;
			}
	}
	for(int i = 0; i < u; i++){
		printf(""%c"", a[i]);
	}
	printf(""\\nDer neue String lautet: "");
	for(int i = 0; i < k; i++){
		printf(""%c"", b[i]);
	}
	printf(""\\n"");
}","1","c&p"
"118","SoSe21","9","Antwort 9","C","Franziska Anna-Lena","Gillich","#include <stdio.h>

int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","#include <stdio.h>

int main(int laenge, char** Zeichen){
    char Ausgabe[100]="""";
    char Ausgabe2[100]="""";
    int j=0;
    int k=0;
    for (int l=1;l<laenge;l++){
        for (int i=0;Zeichen[l][i]!='\\0';i++){
            if (Zeichen[l][i]!='x' && Zeichen[l][i]!='y' && Zeichen[l][i]!='q' && Zeichen[l][i]!='X' && Zeichen[l][i]!='Y' && Zeichen[l][i]!='Q'){
               Ausgabe[j]=Zeichen[l][i];
               j+=1;
            }
        }
    }
    for (int i=0;Ausgabe[i]!='\\0';i++){
        if(i%3==0){
            Ausgabe2[k]=Ausgabe[i];
            k+=1;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"",Ausgabe);
    printf(""Der neue String lautet: %s\\n"",Ausgabe2);
}","1","c&p"
"119","SoSe21","9","Antwort 9","C","Leon","Schulz","#include <stdio.h>

int main(int  argc, char *argv[]) // start at argv[1]
{


char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
			
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		
		
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","#include <stdio.h>

int main(int  argc, char *argv[]) // start at argv[1]
{


char array[100];
int slot_count = 0;
char b[100];
int slot_count_b = 0;
			
for(int i = 1; i < argc; i++)
	{
	int j = -1;
	do
		{
		j++;
		if(argv[i][j] == 'x') continue;
		else if(argv[i][j] == 'y') continue;
		else if(argv[i][j] == 'q') continue;
		else if(argv[i][j] == 'X') continue;
		else if(argv[i][j] == 'Y') continue;
		else if(argv[i][j] == 'Q') continue;
		else if(argv[i][j] == '\\0')
			{
			array[slot_count] = '\\0';
			b[slot_count_b] = '\\0';
			}
		else
			{
			array[slot_count] = argv[i][j];
			
			if( (slot_count == 0 || (slot_count) % 3 == 0) )
				{
				b[slot_count_b] = array[slot_count];
				slot_count_b++;
				}		
			slot_count++;
			}
		
		
		}		
	while(argv[i][j] != '\\0');
	}
printf(""x,y,q und X,Y,Q aussortiert: "");
for(int m = 0; m < slot_count; m++) printf(""%c"", array[m]); 
printf(""\\nDer neue String lautet: "");
for(int n = 0; n < slot_count_b; n++) printf(""%c"", b[n]); 
}","1","c&p"
"120","SoSe21","9","Antwort 9","C","Tom Alexander","Schmidt","#include <stdio.h>

int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
            
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
            
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    
    return 0;
}","#include <stdio.h>

int main(int argc, char* argv[]) {
    //char* str[] = {""./[programm]"", ""PPR"", ""macht"", ""Spass!""}; //zum testen
    //int agc = 4;                                              //zum testen
    for(int i= 1; i<5; i++){
    //printf(""%s\\n"", str[i]);                                 //test
    }
    
    char string1[100]; string1[99] = '\\0';
    char string2[100]; string2[99] = '\\0';
    char string3[100];
    for(int i = 0; i < 100; i++){
        string1[i] = '\\0';
        string2[i] = '\\0';
        string3[i] = '\\0';
    }
    
    int pos = 0;
    for(int i = 1; i<argc; i++){
        int j = 0;
        int laenge = 0;
        while(argv[i][j] != '\\0'){
        laenge++;
        j++;
        }
        //printf(""i=%i - laenge=%i\\n"", i, laenge);                //test
        for(int y = 0; y<laenge; y++){
            string1[pos] = argv[i][y];
            pos++;
        }
    }
    
    //buchstabenloeschen
    int j = 0;
    int length = 0;
    while(string1[j] != '\\0'){
    length++;
    j++;
    }
    //printf(""length: %i\\n"", length);                       //test
    int zaehler = 0;
    for(int i=0; i<length; i++){
        if(string1[i] == 'x' || string1[i] == 'y' || string1[i] == 'q'){
            
        }
        else if(string1[i] == 'X' || string1[i] == 'Y' || string1[i] == 'Q'){
            
        }
        else{
            string2[zaehler] = string1[i];
            zaehler++;
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: %s\\n"", string2);
    
    //nur noch jeden 3ten Buchstaben verwenden
    int countah = 0;
    for(int i=0; i<=zaehler; i+=3){
        string3[countah] = string2[i];
        countah++;
    }
    printf(""Der neue String lautet: %s\\n"", string3);
    
    //string1[0] = str[1][0];                                   //test
    //printf(""%s\\n"", string1);                                  //test
    //printf(""%s\\n"", string2);                                  //test
    //printf(""%s\\n"", string3);                                  //test
    
    return 0;
}","1","c&p"
