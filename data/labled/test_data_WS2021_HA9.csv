code1,code2,label
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int tbvrt, char* argv[]){
	char ozlfw[100]= """";
	char xmbqn[100]="""";
	int gdeog=0;
	for(int eipjt=1 ;eipjt<tbvrt ;eipjt++){
		for (int liotv=0; argv[eipjt][liotv] != '\0'; liotv++){
			if(argv[eipjt][liotv]== 'gdeog' || argv[eipjt][liotv]== 'msegy' || argv[eipjt][liotv]== 'q' || argv[eipjt][liotv]== 'X' || argv[eipjt][liotv]== 'Y' || argv[eipjt][liotv]== 'Q') continue;
			else {
				ozlfw[gdeog]=argv[eipjt][liotv];
				gdeog+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", ozlfw);
	int msegy=0;
	for(int eipjt=0; eipjt<100; eipjt+=3){
		xmbqn[msegy]=ozlfw[eipjt];
		msegy++;
	}
	printf(""Der neue String lautet: %s\n"", xmbqn);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int eaeob, char** argv)
{
    char gfpmr[100] = ""lasse roland max ivo"";
    char oezrn[100];
    char cqcgn[100];
    int afphx = 0;
    int sshsz = 0;
    int guzjt = 1;
    int jmmho;
    for ( jmmho = 0; *(argv+jmmho) != '\0'; jmmho++)
    {
        if (*(argv+jmmho) == ' ' || *(argv+jmmho) == 'x' || *(argv+jmmho) == 'y' || *(argv+jmmho) == 'q'|| *(argv+jmmho) == 'X'|| *(argv+jmmho) == 'Y'|| *(argv+jmmho) == 'Q')
            guzjt++;
            continue;
        oezrn[afphx++] = *(argv+jmmho);
    }
    oezrn[afphx] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", oezrn );
    for ( jmmho = 0; oezrn[jmmho] != '\0'; jmmho++)
    {
        if (jmmho == 0 || jmmho % 3 == 0)
        cqcgn[sshsz++] = oezrn[jmmho];
        continue;
    }
    cqcgn[sshsz] = 0;
    printf( ""Der neue String lautet: %s \n"", cqcgn);
}",1.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int dhvfu;
    for(dhvfu = 0; dhvfu < zahl && *dest != '\0' && *src != '\0'; dhvfu++)
           *dest = *src;
       src++;
       dest++;
    {
    int ccgsf = 0;
    int iifqp = 0;
    int nrsuo = 0;
    for(iifqp=0; str[iifqp] != 0; iifqp++);
    for(ccgsf = 0; ccgsf <iifqp/2; ccgsf++)
    {
        nrsuo = str[ccgsf];
        str[ccgsf]=str[iifqp - 1 - ccgsf];
        str[iifqp - 1 - ccgsf] = nrsuo;
        for(ccgsf = 0; ccgsf < iifqp; ccgsf++);
}
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int obkfo, char** argv)
{
    char ptskz[100] = ""lasse roland max ivo"";
    char dqlxy[100];
    char owqyk[100];
    int pizze = 0;
    int vgakz = 0;
    int lkjuj = 1;
    int mzkmr;
    for ( mzkmr = 0; *(argv+mzkmr) != '\0'; mzkmr++)
    {
        if (*(argv+mzkmr) == ' ' || *(argv+mzkmr) == 'x' || *(argv+mzkmr) == 'y' || *(argv+mzkmr) == 'q'|| *(argv+mzkmr) == 'X'|| *(argv+mzkmr) == 'Y'|| *(argv+mzkmr) == 'Q')
            lkjuj++;
            continue;
        dqlxy[pizze++] = *(argv+mzkmr);
    }
    dqlxy[pizze] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", dqlxy );
    for ( mzkmr = 0; dqlxy[mzkmr] != '\0'; mzkmr++)
    {
        if (mzkmr == 0 || mzkmr % 3 == 0)
        owqyk[vgakz++] = dqlxy[mzkmr];
        continue;
    }
    owqyk[vgakz] = 0;
    printf( ""Der neue String lautet: %s \n"", owqyk);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}","{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int cpixz, char** argv)
{
    char zhjlq[100] = ""lasse roland max ivo"";
    char jmbcr[100];
    char nrjhd[100];
    int ryhpt = 0;
    int qzqpc = 0;
    int kjpse = 1;
    int rtcux;
    for ( rtcux = 0; *(argv+rtcux) != '\0'; rtcux++)
    {
        if (*(argv+rtcux) == ' ' || *(argv+rtcux) == 'x' || *(argv+rtcux) == 'y' || *(argv+rtcux) == 'q'|| *(argv+rtcux) == 'X'|| *(argv+rtcux) == 'Y'|| *(argv+rtcux) == 'Q')
            kjpse++;
            continue;
        jmbcr[ryhpt++] = *(argv+rtcux);
    }
    jmbcr[ryhpt] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", jmbcr );
    for ( rtcux = 0; jmbcr[rtcux] != '\0'; rtcux++)
    {
        if (rtcux == 0 || rtcux % 3 == 0)
        nrjhd[qzqpc++] = jmbcr[rtcux];
        continue;
    }
    nrjhd[qzqpc] = 0;
    printf( ""Der neue String lautet: %s \n"", nrjhd);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int lddrj, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int trmrg = 0;
for(int osihy=1; osihy < lddrj; osihy++){
	int bgxgr = 0;
while(*(argv[osihy]+bgxgr) != '\0'){
if((*(argv[osihy]+bgxgr) != 'trmrg') && (*(argv[osihy]+bgxgr)!= 'jrgag') && (*(argv[osihy]+bgxgr) != 'q')&& (*(argv[osihy]+bgxgr) != 'X')&& (*(argv[osihy]+bgxgr) != 'Y')&& (*(argv[osihy]+bgxgr) != 'Q')){
			*(compactstring+trmrg) = *(argv[osihy]+bgxgr);
			trmrg++;
	}
	bgxgr++;
}
}
compactstring = (char*) realloc(compactstring,trmrg+sizeof(char));
int rmawo=(trmrg+1)/3;
char* shortend = (char*) malloc(rmawo * sizeof(char));
int jrgag = 0;
for (int osihy=0;osihy<trmrg+1;osihy++){
if((osihy%3)==0){
	*(shortend+jrgag) = *(compactstring+osihy);
	jrgag++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int wnsay, char *wzbtx[])
{
    int vlxme;
    int iausb = 0;
    char wjvpw[20];
    char sqmvu[15];
    int rnskb = 0;
    for (int axorl = 1; axorl < wnsay; axorl++)
    {
        vlxme = 0;
        while ((wzbtx[axorl][vlxme]) != '\0')
        {
            if (wzbtx[axorl][vlxme] != 'rnskb' && wzbtx[axorl][vlxme] != 'y' && wzbtx[axorl][vlxme] != 'q' && wzbtx[axorl][vlxme] != 'X' && wzbtx[axorl][vlxme] != 'Y' && wzbtx[axorl][vlxme] != 'Q')
            {
                wjvpw[iausb] = wzbtx[axorl][vlxme];
                iausb++;
            }
            vlxme++;
        }
    }
    for (int axorl = 0; axorl <= iausb; axorl++)
    {
        if (rnskb > (axorl / 3) || axorl == 0)
        {
            if (axorl == 0)
            {
                sqmvu[rnskb] = wjvpw[axorl];
                rnskb++;
            }
            if (((axorl) % 3) == 0)
            {
                sqmvu[rnskb] = wjvpw[axorl];
                rnskb++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int axorl = 0; axorl < iausb; axorl++)
        if (wjvpw[axorl] != '\0')
        {
            printf(""%c"", wjvpw[axorl]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int axorl = 1; axorl < (iausb / 2)-1; axorl++)
            printf(""%c"", sqmvu[axorl]);
    if (wjvpw[0] == 'z')
        printf(""z"");
}",1.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }",0.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","#include <stdio.h>
int main(int ilvyq, char* argv[] )
{  
	char kfvyb[100];
	char cpzmf[100];
	int rehty = 0;
	for (int zcfoh = 0; zcfoh < ilvyq -1; zcfoh++)
	{
		int kskxl = 0;
		for (kskxl; *(*(argv+1+zcfoh)+kskxl) != '\0'; kskxl++)
		{
			kfvyb[rehty] = *(*(argv+1+zcfoh)+kskxl);
			rehty++;
		}
	}
	kfvyb[rehty] = '\0';
	for (int zcfoh = 0; zcfoh < rehty+1; zcfoh++)
	{
		if ((kfvyb[zcfoh] == 'x') || (kfvyb[zcfoh] == 'y') || (kfvyb[zcfoh] == 'q') || (kfvyb[zcfoh] == 'X') || (kfvyb[zcfoh] == 'Y') || (kfvyb[zcfoh] == 'Q'))
		{
			while (1)
			{
				kfvyb[zcfoh] = kfvyb[zcfoh+1];
				zcfoh++;
				if (kfvyb[zcfoh] == '\0')
				{	
					break;
				}
			}
			rehty--;
			zcfoh = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",kfvyb);
	for (int zcfoh = 0, z = 0; zcfoh < ((rehty/2)-2); zcfoh++, z += 3)
	{
		cpzmf[zcfoh] = kfvyb[z];
	}
	int kskxl = 0;
	for (kskxl; kfvyb[kskxl] != '\0'; kskxl++)
		;
	cpzmf[kskxl] = '\0';
	printf(""Der neue String lautet: %s"",cpzmf);
}",1.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}",0.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
	char* text_str = malloc(400* sizeof(char));
	int idx = 0;
	for(int i = 1; i < argc; i++){
		int j = 0;
		while(*(argv[i]+j) != '\0'){
			if((*(argv[i]+j) != 'x') && (*(argv[i]+j) != 'y') && (*(argv[i]+j) != 'q') && (*(argv[i]+j) != 'X') && (*(argv[i]+j) != 'Y') && (*(argv[i]+j) != 'Q')){
			*(text_str+idx) = *(argv[i]+j);
			idx++;
			}
			j++;
		}
	}
	text_str = realloc(text_str,idx+1 * sizeof(char));
	int solution_length = (idx+1) / 3;
	char* solution = malloc(solution_length * sizeof(char));
	int count = 0;
	for(int i = 0; i < idx+1; i++){
		if((i % 3) == 0){
			*(solution+count) = *(text_str+i);
			count++;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", text_str, solution);
}",0.0
"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int yowjk, char* argv[]){
	char aeiae[100]= """";
	char axvbg[100]="""";
	int uzjrx=0;
	for(int nnthm=1 ;nnthm<yowjk ;nnthm++){
		for (int iiokj=0; argv[nnthm][iiokj] != '\0'; iiokj++){
			if(argv[nnthm][iiokj]== 'uzjrx' || argv[nnthm][iiokj]== 'bstwa' || argv[nnthm][iiokj]== 'q' || argv[nnthm][iiokj]== 'X' || argv[nnthm][iiokj]== 'Y' || argv[nnthm][iiokj]== 'Q') continue;
			else {
				aeiae[uzjrx]=argv[nnthm][iiokj];
				uzjrx+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", aeiae);
	int bstwa=0;
	for(int nnthm=0; nnthm<100; nnthm+=3){
		axvbg[bstwa]=aeiae[nnthm];
		bstwa++;
	}
	printf(""Der neue String lautet: %s\n"", axvbg);
}",1.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char lrdfu (char kqhev)
{if (kqhev=='x'||kqhev=='y'||kqhev=='q'||
     kqhev=='X'||kqhev=='Y'||kqhev=='Q')
    doeir 1;
else doeir 0;
}
void jfvtt (char*src)
{char mcqwr[100]="""";
 int uptaa=0;
 while (src[uptaa]!='\0')
    {mcqwr[uptaa]=src[uptaa];uptaa++;}
    mcqwr[uptaa]='\0';
    uptaa=0;
int axlqf=0;
while (mcqwr[uptaa]!='\0')
    {if (uptaa%3!=0)
        {uptaa++;}
    else 
        {src[axlqf]=mcqwr[uptaa];
         uptaa++;
         axlqf++;}
    }
src[axlqf]='\0';
}
int main (int wcnjz,char*argv[])
{char dedpv[100]="""";
int rcylo=1;
int gfpth=0;
int uawdk=0;
while (rcylo!=wcnjz)
    {while (argv[rcylo][uawdk]!='\0')
        {if (lrdfu(argv[rcylo][uawdk])) 
         uawdk++;
         else
         {dedpv[gfpth]=argv[rcylo][uawdk];
          gfpth++;
          uawdk++;}}
    rcylo++;uawdk=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",dedpv);
jfvtt(dedpv);
printf (""Der neue String lautet: %s\n"",dedpv);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int ovnrg(char *vwspm)
{
    int pdnfg = 0;
    for (int znkhf = 0; vwspm[znkhf] != '\0'; znkhf++)
    {
        pdnfg += 1;
    }
    return pdnfg;
}
int enydz(char *pkvid, char *lgnbg)
{
    int oohia = 0;
    int znkhf = 0;
    while (lgnbg[oohia] != '\0')
    {
        if (lgnbg[oohia] != 'q' && lgnbg[oohia] != 'x' && lgnbg[oohia] != 'y' && lgnbg[oohia] != 'Q' && lgnbg[oohia] != 'X' && lgnbg[oohia] != 'Y')
        {
            pkvid[znkhf++] = lgnbg[oohia++];
        }
        else
        {
            oohia++;
        }
    }
    return znkhf;
}
int okdzh(char *elqhc)
{
    int oohia = 0;
    int znkhf = 0;
    while (elqhc[oohia] != '\0')
    {
        if (oohia % 3 == 0)
        {
            elqhc[znkhf++] = elqhc[oohia++];
        }
        else
        {
            oohia++;
        }
    }
    return znkhf;
}
int main(int djugw, char *hfjar[])
{
    int hbnim = 0;
    for (int oohia = 1; oohia < djugw; oohia++)
    {
        hbnim += ovnrg(hfjar[oohia]);
    }
    char amqam[hbnim + 1];
    char *muahr = amqam;
    for (int oohia = 1; oohia < djugw; oohia++)
    {
        muahr += enydz(muahr, hfjar[oohia]);
    }
    *muahr = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", amqam);
    amqam[okdzh(amqam)] = '\0';
    printf(""Der neue String lautet: %s\n"", amqam);
}",1.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}","#include <stdio.h>
#include <stdlib.h>
int main(int rchbt, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int nqpgx = 0;
for(int lkebm=1; lkebm < rchbt; lkebm++){
	int irpyq = 0;
while(*(argv[lkebm]+irpyq) != '\0'){
if((*(argv[lkebm]+irpyq) != 'nqpgx') && (*(argv[lkebm]+irpyq)!= 'xkoji') && (*(argv[lkebm]+irpyq) != 'q')&& (*(argv[lkebm]+irpyq) != 'X')&& (*(argv[lkebm]+irpyq) != 'Y')&& (*(argv[lkebm]+irpyq) != 'Q')){
			*(compactstring+nqpgx) = *(argv[lkebm]+irpyq);
			nqpgx++;
	}
	irpyq++;
}
}
compactstring = (char*) realloc(compactstring,nqpgx+sizeof(char));
int nrkvw=(nqpgx+1)/3;
char* shortend = (char*) malloc(nrkvw * sizeof(char));
int xkoji = 0;
for (int lkebm=0;lkebm<nqpgx+1;lkebm++){
if((lkebm%3)==0){
	*(shortend+xkoji) = *(compactstring+lkebm);
	xkoji++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",1.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void bnvfc(char* str)
{
    int eepmb = 0;
    char wyrtx[50];
    for(int yubcs = 0; str[yubcs] != '\0'; yubcs++)
    {
        int eepmb = 0;
        char wyrtx[50];
        trcsn(str[yubcs] == 'x'|| str[yubcs] == 'y'|| str[yubcs] == 'q');
        else trcsn(str[yubcs] == 'X'|| str[yubcs] == 'Y'|| str[yubcs] == 'Q');
        else 
        {
            wyrtx[eepmb] = str[yubcs];
            eepmb++;
        }
    }
    str = &wyrtx;
}
char* sortieren(int länge, char* str[])
{
    int eepmb = 0;
    char wyrtx[200];
    for(int yubcs = 0; yubcs < länge; yubcs++)
    {
        for(int eednr = 0; eednr != '\0'; eednr++)
        {
            wyrtx[eepmb] = str[yubcs+1][eednr];
            eepmb++;
        }
    }
}   
int main( int dfsrb, char* argv[] )
{  
    int rgyxt = sizeof(argv) - 1;
    for(int yubcs = 1; yubcs <= rgyxt; yubcs++)
    {
        bnvfc(argv[yubcs]);
    }
    char lvdjs = sortieren(rgyxt, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", lvdjs); 
}",1.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
void lsphm (char* ybbdf)
{
	for(int pwywx = 0; ybbdf[pwywx] != '\0'; pwywx++)
	{
		if(ybbdf[pwywx] == 'x' || ybbdf[pwywx] == 'y' || ybbdf[pwywx] == 'q' || ybbdf[pwywx] == 'X' || ybbdf[pwywx] == 'Y' || ybbdf[pwywx] == 'Q' )
		{
			for(int nuomq = pwywx; ybbdf[nuomq] != '\0'; nuomq++)
			{
				ybbdf[nuomq] = ybbdf[nuomq+1];
			}
			pwywx = pwywx -1;
		}
	}
}
void lugbx (char* ybbdf)
{
	int vpbmd = 0;
	while(ybbdf[vpbmd] != '\0')
	{
	vpbmd++;
	}
	char qjgbs[vpbmd]; 
	for(int mafsu = 0; mafsu < vpbmd; mafsu++)
	{
		if(mafsu % 3 == 0)
		{
			qjgbs[mafsu] = ybbdf[mafsu];
		}
		else qjgbs[mafsu] = 0;
	}
	int yeuvz =0;
	for(int pwywx = 0; pwywx < vpbmd; pwywx++)
	{
		if(qjgbs[pwywx] != 0)
		{
			ybbdf[yeuvz] = qjgbs[pwywx];
			yeuvz++;
		}
	}
	ybbdf[yeuvz] = '\0';
}
int main(int ajqzl, char* argv[])
{
	int vpbmd = 0;
	for(int nuomq=1; nuomq < ajqzl; nuomq++)
	{
		for(int pwywx = 0; argv[nuomq][pwywx] != '\0'; pwywx++)
		{
			vpbmd++;		
		}				
	}
	char ybbdf[vpbmd+1];
	ybbdf[vpbmd] = '\0';
	int yeuvz = 0;
	for(int nuomq=1; nuomq < ajqzl; nuomq++)
	{
		for(int pwywx = 0; argv[nuomq][pwywx] != '\0'; pwywx++)
		{
			ybbdf[yeuvz] = argv[nuomq][pwywx];
			yeuvz++;
		}
	}
	lsphm(ybbdf);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&ybbdf[0]);
	lugbx(ybbdf);
	printf(""Der neue String lautet: %s \n"",&ybbdf[0]);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int iexnn, char** argv)
{
    char yumbb[100] = ""lasse roland max ivo"";
    char xqhph[100];
    char nkacm[100];
    int qsdhq = 0;
    int btphs = 0;
    int dbklh = 1;
    int zakae;
    for ( zakae = 0; *(argv+zakae) != '\0'; zakae++)
    {
        if (*(argv+zakae) == ' ' || *(argv+zakae) == 'x' || *(argv+zakae) == 'y' || *(argv+zakae) == 'q'|| *(argv+zakae) == 'X'|| *(argv+zakae) == 'Y'|| *(argv+zakae) == 'Q')
            dbklh++;
            continue;
        xqhph[qsdhq++] = *(argv+zakae);
    }
    xqhph[qsdhq] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", xqhph );
    for ( zakae = 0; xqhph[zakae] != '\0'; zakae++)
    {
        if (zakae == 0 || zakae % 3 == 0)
        nkacm[btphs++] = xqhph[zakae];
        continue;
    }
    nkacm[btphs] = 0;
    printf( ""Der neue String lautet: %s \n"", nkacm);
}",1.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }",0.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","int jainh(char *mgfes)
 int nlohy = 0; 
    while (mgfes[nlohy] != '\0')
      nlohy++;
  return nlohy; 
{  
  int wxqru = jainh(src);
  int vmbyl = jainh(dest);
 /*     char vgzkn[wxqru]; 
    for (int nlohy = 0; nlohy <= wxqru-1; nlohy++) 
        vgzkn [nlohy] = src[nlohy];
  for (int nlohy = 0; nlohy <= zahl-1; nlohy++)     if (nlohy <= vmbyl && nlohy <= wxqru) {
        
        *dest = vgzkn[nlohy]; 
      }*/
  int nlohy = 1;
   while(*src && nlohy <= wxqru && nlohy <= vmbyl && nlohy <= zahl) {
    *dest++ = *src++;
    nlohy++;
 }
void ysfmm(char* a, char* b){
    char qhdpw = *a;
    *a = *b;
    *b = qhdpw;
}
{
    if (!*str) 
        return;
    char* nlohy = str;
    char* j = nlohy + jainh(str) - 1;
    while (nlohy < j) {
        ysfmm(nlohy, j);
        nlohy++;
        j--;
    }
}
{  
      }",1.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}",0.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int tgrvn, char *threy[])
{
    int irlos;
    int tgrrv = 0;
    char mbfug[20];
    char bucrl[15];
    int uuzew = 0;
    for (int udbmq = 1; udbmq < tgrvn; udbmq++)
    {
        irlos = 0;
        while ((threy[udbmq][irlos]) != '\0')
        {
            if (threy[udbmq][irlos] != 'uuzew' && threy[udbmq][irlos] != 'y' && threy[udbmq][irlos] != 'q' && threy[udbmq][irlos] != 'X' && threy[udbmq][irlos] != 'Y' && threy[udbmq][irlos] != 'Q')
            {
                mbfug[tgrrv] = threy[udbmq][irlos];
                tgrrv++;
            }
            irlos++;
        }
    }
    for (int udbmq = 0; udbmq <= tgrrv; udbmq++)
    {
        if (uuzew > (udbmq / 3) || udbmq == 0)
        {
            if (udbmq == 0)
            {
                bucrl[uuzew] = mbfug[udbmq];
                uuzew++;
            }
            if (((udbmq) % 3) == 0)
            {
                bucrl[uuzew] = mbfug[udbmq];
                uuzew++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int udbmq = 0; udbmq < tgrrv; udbmq++)
        if (mbfug[udbmq] != '\0')
        {
            printf(""%c"", mbfug[udbmq]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int udbmq = 1; udbmq < (tgrrv / 2)-1; udbmq++)
            printf(""%c"", bucrl[udbmq]);
    if (mbfug[0] == 'z')
        printf(""z"");
}",1.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
   for(int pfidl=0; pfidl<zahl && *src!='\0' && *dest!='\0'; pfidl++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char zlpwd[100] = """";
    char* ptemp = zlpwd;
    for(int pfidl=0; str[pfidl]!=0; pfidl++)
        zlpwd[pfidl] = str[pfidl]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }",1.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}",0.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","{  
    int ovzvi;
    for(ovzvi = 0; ovzvi < zahl && *dest != '\0' && *src != '\0'; ovzvi++)
           *dest = *src;
       src++;
       dest++;
    {
    int ubvbd = 0;
    int cmzxf = 0;
    int ucudx = 0;
    for(cmzxf=0; str[cmzxf] != 0; cmzxf++);
    for(ubvbd = 0; ubvbd <cmzxf/2; ubvbd++)
    {
        ucudx = str[ubvbd];
        str[ubvbd]=str[cmzxf - 1 - ubvbd];
        str[cmzxf - 1 - ubvbd] = ucudx;
        for(ubvbd = 0; ubvbd < cmzxf; ubvbd++);
}
{  
      }",1.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main( int rvtgp, char** argv)
{
    char hgmvg[100] = ""lasse roland max ivo"";
    char raatt[100];
    char ruyfv[100];
    int etece = 0;
    int chyzn = 0;
    int qdylz = 1;
    int zerhw;
    for ( zerhw = 0; *(argv+zerhw) != '\0'; zerhw++)
    {
        if (*(argv+zerhw) == ' ' || *(argv+zerhw) == 'x' || *(argv+zerhw) == 'y' || *(argv+zerhw) == 'q'|| *(argv+zerhw) == 'X'|| *(argv+zerhw) == 'Y'|| *(argv+zerhw) == 'Q')
            qdylz++;
            continue;
        raatt[etece++] = *(argv+zerhw);
    }
    raatt[etece] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", raatt );
    for ( zerhw = 0; raatt[zerhw] != '\0'; zerhw++)
    {
        if (zerhw == 0 || zerhw % 3 == 0)
        ruyfv[chyzn++] = raatt[zerhw];
        continue;
    }
    ruyfv[chyzn] = 0;
    printf( ""Der neue String lautet: %s \n"", ruyfv);
}",1.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void etscd(char* str1){
	int gleqi;
	int uxbbi;
	for ( gleqi = 0,  uxbbi = 0;uxbbi<100; ++uxbbi){
	if ((str1[uxbbi] != 'x')&&(str1[uxbbi] != 'X')&&(str1[uxbbi] != 'y')&&(str1[uxbbi] != 'Y')&&(str1[uxbbi] != 'q')&&(str1[uxbbi] != 'Q'))
	str1[gleqi++] = str1[uxbbi];
	}
}
void prxez(char* str1, char* str2){
	int uxbbi=0;
	for(;(str2[uxbbi])!=('\0');uxbbi++){}
	for (int gleqi=0;str1[gleqi]!='\0';gleqi++){
		str2[uxbbi+gleqi]=str1[gleqi];
	}	
;}
void qemew(char* str1,char* str2){
	for (int gleqi=0;str1[gleqi]!='\0';gleqi++){
		if((gleqi+3)%3==0)str2[((gleqi+3)/3)-1]=str1[gleqi];
	}
}
int main(int okduj,char** argv){
	if (okduj<2) return 0;
	char qdqyw[100]="""";
	char tzocq[100]="""";
	for(int gleqi=1;gleqi<okduj;gleqi++) {
		prxez(argv[gleqi],qdqyw);}
		etscd(qdqyw);
	qemew(qdqyw,tzocq);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",qdqyw);
	printf(""Der neue String lautet: %s"",tzocq);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void sxtgm(char* str)
{
    int lrmiu = 0;
    char stmma[50];
    for(int yzipr = 0; str[yzipr] != '\0'; yzipr++)
    {
        int lrmiu = 0;
        char stmma[50];
        thukr(str[yzipr] == 'x'|| str[yzipr] == 'y'|| str[yzipr] == 'q');
        else thukr(str[yzipr] == 'X'|| str[yzipr] == 'Y'|| str[yzipr] == 'Q');
        else 
        {
            stmma[lrmiu] = str[yzipr];
            lrmiu++;
        }
    }
    str = &stmma;
}
char* sortieren(int länge, char* str[])
{
    int lrmiu = 0;
    char stmma[200];
    for(int yzipr = 0; yzipr < länge; yzipr++)
    {
        for(int kefps = 0; kefps != '\0'; kefps++)
        {
            stmma[lrmiu] = str[yzipr+1][kefps];
            lrmiu++;
        }
    }
}   
int main( int zlixp, char* argv[] )
{  
    int ehscu = sizeof(argv) - 1;
    for(int yzipr = 1; yzipr <= ehscu; yzipr++)
    {
        sxtgm(argv[yzipr]);
    }
    char ivvvl = sortieren(ehscu, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", ivvvl); 
}",1.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}",0.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int ymhdl, char *mcujb[])
{
    int xuslk;
    int ckain = 0;
    char yopev[20];
    char ouyph[15];
    int gctzk = 0;
    for (int hsmdc = 1; hsmdc < ymhdl; hsmdc++)
    {
        xuslk = 0;
        while ((mcujb[hsmdc][xuslk]) != '\0')
        {
            if (mcujb[hsmdc][xuslk] != 'gctzk' && mcujb[hsmdc][xuslk] != 'y' && mcujb[hsmdc][xuslk] != 'q' && mcujb[hsmdc][xuslk] != 'X' && mcujb[hsmdc][xuslk] != 'Y' && mcujb[hsmdc][xuslk] != 'Q')
            {
                yopev[ckain] = mcujb[hsmdc][xuslk];
                ckain++;
            }
            xuslk++;
        }
    }
    for (int hsmdc = 0; hsmdc <= ckain; hsmdc++)
    {
        if (gctzk > (hsmdc / 3) || hsmdc == 0)
        {
            if (hsmdc == 0)
            {
                ouyph[gctzk] = yopev[hsmdc];
                gctzk++;
            }
            if (((hsmdc) % 3) == 0)
            {
                ouyph[gctzk] = yopev[hsmdc];
                gctzk++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int hsmdc = 0; hsmdc < ckain; hsmdc++)
        if (yopev[hsmdc] != '\0')
        {
            printf(""%c"", yopev[hsmdc]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int hsmdc = 1; hsmdc < (ckain / 2)-1; hsmdc++)
            printf(""%c"", ouyph[hsmdc]);
    if (yopev[0] == 'z')
        printf(""z"");
}",1.0
"#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}","#include <stdio.h>
int main(int bzgeq, char *xbtjx[])
{
    int wpgxl;
    int tikfk = 0;
    char chstw[20];
    char pvvxu[15];
    int hecyn = 0;
    for (int lzgip = 1; lzgip < bzgeq; lzgip++)
    {
        wpgxl = 0;
        while ((xbtjx[lzgip][wpgxl]) != '\0')
        {
            if (xbtjx[lzgip][wpgxl] != 'hecyn' && xbtjx[lzgip][wpgxl] != 'y' && xbtjx[lzgip][wpgxl] != 'q' && xbtjx[lzgip][wpgxl] != 'X' && xbtjx[lzgip][wpgxl] != 'Y' && xbtjx[lzgip][wpgxl] != 'Q')
            {
                chstw[tikfk] = xbtjx[lzgip][wpgxl];
                tikfk++;
            }
            wpgxl++;
        }
    }
    for (int lzgip = 0; lzgip <= tikfk; lzgip++)
    {
        if (hecyn > (lzgip / 3) || lzgip == 0)
        {
            if (lzgip == 0)
            {
                pvvxu[hecyn] = chstw[lzgip];
                hecyn++;
            }
            if (((lzgip) % 3) == 0)
            {
                pvvxu[hecyn] = chstw[lzgip];
                hecyn++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int lzgip = 0; lzgip < tikfk; lzgip++)
        if (chstw[lzgip] != '\0')
        {
            printf(""%c"", chstw[lzgip]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int lzgip = 1; lzgip < (tikfk / 2)-1; lzgip++)
            printf(""%c"", pvvxu[lzgip]);
    if (chstw[0] == 'z')
        printf(""z"");
}",1.0
"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void vvhhx(char* str)
{
    int zfaxa = 0;
    char kxllq[50];
    for(int fzmcy = 0; str[fzmcy] != '\0'; fzmcy++)
    {
        int zfaxa = 0;
        char kxllq[50];
        kqzej(str[fzmcy] == 'x'|| str[fzmcy] == 'y'|| str[fzmcy] == 'q');
        else kqzej(str[fzmcy] == 'X'|| str[fzmcy] == 'Y'|| str[fzmcy] == 'Q');
        else 
        {
            kxllq[zfaxa] = str[fzmcy];
            zfaxa++;
        }
    }
    str = &kxllq;
}
char* sortieren(int länge, char* str[])
{
    int zfaxa = 0;
    char kxllq[200];
    for(int fzmcy = 0; fzmcy < länge; fzmcy++)
    {
        for(int nxtoo = 0; nxtoo != '\0'; nxtoo++)
        {
            kxllq[zfaxa] = str[fzmcy+1][nxtoo];
            zfaxa++;
        }
    }
}   
int main( int ovkgd, char* argv[] )
{  
    int gjvhy = sizeof(argv) - 1;
    for(int fzmcy = 1; fzmcy <= gjvhy; fzmcy++)
    {
        vvhhx(argv[fzmcy]);
    }
    char npgeo = sortieren(gjvhy, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", npgeo); 
}",1.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }",0.0
"{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }","{  
	int eadav = 0;
	while(eadav < zahl && dest[eadav] != '\0' && src[eadav] != '\0')		dest[eadav] = src[eadav];
		eadav ++;
{
	int dxqgq = 0;
	while(str[dxqgq] != '\0') dxqgq++;
	char pprqj[dxqgq];
	for(int nlamy = 0; nlamy < dxqgq; nlamy++) pprqj[nlamy] = str[nlamy];
	for(int nlamy = 0; nlamy < dxqgq; nlamy++){
		str[nlamy] = pprqj[dxqgq - 1 - nlamy];
}
{  
      }",1.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }",0.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",0.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*
int zaehlen(char* str){
	int counter = 0;
	while(str[counter] != '\0'){
		counter++;
	}
	return counter;
}*/
int main( int argc, char* argv[]){
	char str[100] = """";
	for(int i = 1; i<argc; i++){
		strcat(str, argv[i]);
	}
	printf(""%s\n"", str);
}",0.0
"#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}","{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }",0.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","#include <stdio.h>
int main(int argc, char *argv[])
{
    int u;
    int f = 0;
    char neu[20];
    char nueva[15];
    int x = 0;
    for (int i = 1; i < argc; i++)
    {
        u = 0;
        while ((argv[i][u]) != '\0')
        {
            if (argv[i][u] != 'x' && argv[i][u] != 'y' && argv[i][u] != 'q' && argv[i][u] != 'X' && argv[i][u] != 'Y' && argv[i][u] != 'Q')
            {
                neu[f] = argv[i][u];
                f++;
            }
            u++;
        }
    }
    for (int i = 0; i <= f; i++)
    {
        if (x > (i / 3) || i == 0)
        {
            if (i == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
            if (((i) % 3) == 0)
            {
                nueva[x] = neu[i];
                x++;
            }
        }
    }
    printf(""x,y,q und X,Y,Q aussortiert: "");
    for (int i = 0; i < f; i++)
        if (neu[i] != '\0')
        {
            printf(""%c"", neu[i]);
        }
    printf(""\n"");
     printf(""Der neue String lautet: "");
    for (int i = 1; i < (f / 2)-1; i++)
            printf(""%c"", nueva[i]);
    if (neu[0] == 'z')
        printf(""z"");
}",0.0
"#include <stdlib.h>
#include <stdio.h>
int Laenge(char *str)
{
    int size = 0;
    for (int j = 0; str[j] != '\0'; j++)
    {
        size += 1;
    }
    return size;
}
int Kopieren(char *dest, char *src)
{
    int i = 0;
    int j = 0;
    while (src[i] != '\0')
    {
        if (src[i] != 'q' && src[i] != 'x' && src[i] != 'y' && src[i] != 'Q' && src[i] != 'X' && src[i] != 'Y')
        {
            dest[j++] = src[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int Entfernen(char *Eingabe)
{
    int i = 0;
    int j = 0;
    while (Eingabe[i] != '\0')
    {
        if (i % 3 == 0)
        {
            Eingabe[j++] = Eingabe[i++];
        }
        else
        {
            i++;
        }
    }
    return j;
}
int main(int argc, char *argv[])
{
    int Gesamtlaenge = 0;
    for (int i = 1; i < argc; i++)
    {
        Gesamtlaenge += Laenge(argv[i]);
    }
    char Ausgabe[Gesamtlaenge + 1];
    char *Ziel = Ausgabe;
    for (int i = 1; i < argc; i++)
    {
        Ziel += Kopieren(Ziel, argv[i]);
    }
    *Ziel = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", Ausgabe);
    Ausgabe[Entfernen(Ausgabe)] = '\0';
    printf(""Der neue String lautet: %s\n"", Ausgabe);
}","#include <stdlib.h>
#include <stdio.h>
int odrjt(char *lgaqf)
{
    int pdcmt = 0;
    for (int rbqtf = 0; lgaqf[rbqtf] != '\0'; rbqtf++)
    {
        pdcmt += 1;
    }
    return pdcmt;
}
int kvzxf(char *oqxuc, char *xtsfo)
{
    int onkok = 0;
    int rbqtf = 0;
    while (xtsfo[onkok] != '\0')
    {
        if (xtsfo[onkok] != 'q' && xtsfo[onkok] != 'x' && xtsfo[onkok] != 'y' && xtsfo[onkok] != 'Q' && xtsfo[onkok] != 'X' && xtsfo[onkok] != 'Y')
        {
            oqxuc[rbqtf++] = xtsfo[onkok++];
        }
        else
        {
            onkok++;
        }
    }
    return rbqtf;
}
int jbnkn(char *dzuez)
{
    int onkok = 0;
    int rbqtf = 0;
    while (dzuez[onkok] != '\0')
    {
        if (onkok % 3 == 0)
        {
            dzuez[rbqtf++] = dzuez[onkok++];
        }
        else
        {
            onkok++;
        }
    }
    return rbqtf;
}
int main(int zxcat, char *qgucf[])
{
    int dfxyy = 0;
    for (int onkok = 1; onkok < zxcat; onkok++)
    {
        dfxyy += odrjt(qgucf[onkok]);
    }
    char izujg[dfxyy + 1];
    char *flwqv = izujg;
    for (int onkok = 1; onkok < zxcat; onkok++)
    {
        flwqv += kvzxf(flwqv, qgucf[onkok]);
    }
    *flwqv = '\0';
    printf(""x,y,q und X,Y,Q aussortiert: %s\n"", izujg);
    izujg[jbnkn(izujg)] = '\0';
    printf(""Der neue String lautet: %s\n"", izujg);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}",0.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
char bshqo (char qreqg)
{if (qreqg=='x'||qreqg=='y'||qreqg=='q'||
     qreqg=='X'||qreqg=='Y'||qreqg=='Q')
    gjahb 1;
else gjahb 0;
}
void qywem (char*src)
{char ddknh[100]="""";
 int ongct=0;
 while (src[ongct]!='\0')
    {ddknh[ongct]=src[ongct];ongct++;}
    ddknh[ongct]='\0';
    ongct=0;
int hckkw=0;
while (ddknh[ongct]!='\0')
    {if (ongct%3!=0)
        {ongct++;}
    else 
        {src[hckkw]=ddknh[ongct];
         ongct++;
         hckkw++;}
    }
src[hckkw]='\0';
}
int main (int pqvlq,char*argv[])
{char ndfit[100]="""";
int ndshi=1;
int zcvpg=0;
int erdzh=0;
while (ndshi!=pqvlq)
    {while (argv[ndshi][erdzh]!='\0')
        {if (bshqo(argv[ndshi][erdzh])) 
         erdzh++;
         else
         {ndfit[zcvpg]=argv[ndshi][erdzh];
          zcvpg++;
          erdzh++;}}
    ndshi++;erdzh=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",ndfit);
qywem(ndfit);
printf (""Der neue String lautet: %s\n"",ndfit);
}",1.0
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","#include <stdio.h>
int main(int argc, char* argv[] )
{  
	char str[100];
	char str2[100];
	int j = 0;
	for (int i = 0; i < argc -1; i++)
	{
		int lange = 0;
		for (lange; *(*(argv+1+i)+lange) != '\0'; lange++)
		{
			str[j] = *(*(argv+1+i)+lange);
			j++;
		}
	}
	str[j] = '\0';
	for (int i = 0; i < j+1; i++)
	{
		if ((str[i] == 'x') || (str[i] == 'y') || (str[i] == 'q') || (str[i] == 'X') || (str[i] == 'Y') || (str[i] == 'Q'))
		{
			while (1)
			{
				str[i] = str[i+1];
				i++;
				if (str[i] == '\0')
				{	
					break;
				}
			}
			j--;
			i = 0;
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",str);
	for (int i = 0, z = 0; i < ((j/2)-2); i++, z += 3)
	{
		str2[i] = str[z];
	}
	int lange = 0;
	for (lange; str[lange] != '\0'; lange++)
		;
	str2[lange] = '\0';
	printf(""Der neue String lautet: %s"",str2);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[52])
{
   //aneinanderhängen
   int zahl = 0;
   int* p_zahl = &zahl;
   int counter = 1;
   int* p_counter = &counter;
   char str[30];
   for(int i = 0; i < argc-1 ; i++)
   {
      for(int j = 0; argv[counter][j] != '\0'; j++)
      {
         str[zahl] = argv[counter][j];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   str[zahl+1] = '\0';
   int nummer = 0;
   int* p_nummer = &nummer;
   char str2[25];
   for(int i = 0; ; i++)
   {
      if((str[i] != 'x') && (str[i] != 'y') && (str[i] != 'q') && (str[i] != 'X') && (str[i] != 'Y') && (str[i] != 'Q'))
      {
         str2[nummer] = str[i];
         if(str[i] == '\0') break;
         *p_nummer += 1;
      }
   }
   //jedes dritte in str3
   char str3[35];
   for(int i = 0; i < 57; i +=3)
   {
      //if((str2[i] == '\0')) break;
      str3[i/3] = str2[i];  
      str3[i/3+1] = '\0'  ;
   }
   //drucken:
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", str2, str3);
}","#include <stdio.h>
#include <stdlib.h>
int main(int eumda, char* argv[52])
{
   
   int iflze = 0;
   int* p_zahl = &iflze;
   int epibo = 1;
   int* p_counter = &epibo;
   char voita[30];
   for(int tkhlq = 0; tkhlq < eumda-1 ; tkhlq++)
   {
      for(int wqfcr = 0; argv[epibo][wqfcr] != '\0'; wqfcr++)
      {
         voita[iflze] = argv[epibo][wqfcr];
         *p_zahl += 1;
      }
      *p_counter += 1;
   }
   voita[iflze+1] = '\0';
   int vizqm = 0;
   int* p_nummer = &vizqm;
   char ozhau[25];
   for(int tkhlq = 0; ; tkhlq++)
   {
      if((voita[tkhlq] != 'x') && (voita[tkhlq] != 'y') && (voita[tkhlq] != 'q') && (voita[tkhlq] != 'X') && (voita[tkhlq] != 'Y') && (voita[tkhlq] != 'Q'))
      {
         ozhau[vizqm] = voita[tkhlq];
         if(voita[tkhlq] == '\0') break;
         *p_nummer += 1;
      }
   }
   
   char lycdq[35];
   for(int tkhlq = 0; tkhlq < 57; tkhlq +=3)
   {
      
      lycdq[tkhlq/3] = ozhau[tkhlq];  
      lycdq[tkhlq/3+1] = '\0'  ;
   }
   
   printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s"", ozhau, lycdq);
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","#include <stdio.h>
#include <stdlib.h>
int main(int ohbqx, char *ysvzi[])
{   
     
    
    
    for (int uaqrm = 1; uaqrm < ohbqx; uaqrm++){
        char * CurrentCommandString = ysvzi[uaqrm];  
        
        
        
        int injze = 0;
        while (CurrentCommandString[injze] != '\0' && CurrentCommandString[injze] != ' ') {
            if (CurrentCommandString[injze] == 'x' 
             || CurrentCommandString[injze] == 'y' 
             || CurrentCommandString[injze] == 'q'
             || CurrentCommandString[injze] == 'X'
             || CurrentCommandString[injze] == 'Y' 
             || CurrentCommandString[injze] == 'Q')
             {   
                 int lhfjv = injze;
                 while (CurrentCommandString[injze] != '\0' && CurrentCommandString[injze] != ' ') {
                    CurrentCommandString[lhfjv] = CurrentCommandString[lhfjv + 1]; 
                    ++lhfjv; 
                 }
             }
            ++injze;
         }
        
    }
    char ybmay[5000];
    int yvoag = 0;
    char gtycn[5000];
    int qjiqt = 0;
    for (int uaqrm = 1; uaqrm < ohbqx; uaqrm++){
        char * CurrentCommandString = ysvzi[uaqrm];  
        
        int xhjvg, lhfjv;
          
          xhjvg = 0;
          while (ybmay[xhjvg] != '\0' && ybmay[xhjvg] != ' ') {
            ++xhjvg;
          }
          
          for (lhfjv = 0; CurrentCommandString[lhfjv] != '\0' && CurrentCommandString[xhjvg] != ' '; ++lhfjv, ++xhjvg) {
            ybmay[xhjvg] = CurrentCommandString[lhfjv];
          }
          
          ybmay[xhjvg] = '\0';       
    }
        
        int xhjvg, lhfjv;
        
        xhjvg = 0;
        while (gtycn[xhjvg] != '\0' && gtycn[xhjvg] != ' ') {
        ++xhjvg;
        }
        
        for (lhfjv = 0; ybmay[lhfjv] != '\0' && ybmay[xhjvg] != ' '; ++xhjvg) {
         gtycn[xhjvg] = ybmay[lhfjv];
         
         lhfjv+=3;
        }
        
        gtycn[xhjvg] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", ybmay);
    printf(""Der neue String lautet: %s"", gtycn);
}",1.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char* argv[]){
char* compactstring = (char*) malloc(400* sizeof(char));
int x = 0;
for(int i=1; i < argc; i++){
	int j = 0;
while(*(argv[i]+j) != '\0'){
if((*(argv[i]+j) != 'x') && (*(argv[i]+j)!= 'y') && (*(argv[i]+j) != 'q')&& (*(argv[i]+j) != 'X')&& (*(argv[i]+j) != 'Y')&& (*(argv[i]+j) != 'Q')){
			*(compactstring+x) = *(argv[i]+j);
			x++;
	}
	j++;
}
}
compactstring = (char*) realloc(compactstring,x+sizeof(char));
int shortendlength=(x+1)/3;
char* shortend = (char*) malloc(shortendlength * sizeof(char));
int y = 0;
for (int i=0;i<x+1;i++){
if((i%3)==0){
	*(shortend+y) = *(compactstring+i);
	y++;
}
}
printf(""x,y,q und X,Y,Q aussortiert: %s\nDer neue String lautet: %s\n"", compactstring,shortend);
}",0.0
"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int sqttf, char* argv[]){
	char upqwf[100]= """";
	char hscvi[100]="""";
	int cuqst=0;
	for(int mrpng=1 ;mrpng<sqttf ;mrpng++){
		for (int iolik=0; argv[mrpng][iolik] != '\0'; iolik++){
			if(argv[mrpng][iolik]== 'cuqst' || argv[mrpng][iolik]== 'sdlnk' || argv[mrpng][iolik]== 'q' || argv[mrpng][iolik]== 'X' || argv[mrpng][iolik]== 'Y' || argv[mrpng][iolik]== 'Q') continue;
			else {
				upqwf[cuqst]=argv[mrpng][iolik];
				cuqst+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", upqwf);
	int sdlnk=0;
	for(int mrpng=0; mrpng<100; mrpng+=3){
		hscvi[sdlnk]=upqwf[mrpng];
		sdlnk++;
	}
	printf(""Der neue String lautet: %s\n"", hscvi);
}",1.0
"int length(char *p)
 int i = 0; 
    while (p[i] != '\0')
      i++;
  return i; 
{  
  int sizeS = length(src);
  int sizeD = length(dest);
 /*     char temp[sizeS]; 
    for (int i = 0; i <= sizeS-1; i++) 
        temp [i] = src[i];
  for (int i = 0; i <= zahl-1; i++)     if (i <= sizeD && i <= sizeS) {
        //dest[i] = temp[i];
        *dest = temp[i]; 
      }*/
  int i = 1;
   while(*src && i <= sizeS && i <= sizeD && i <= zahl) {
    *dest++ = *src++;
    i++;
 }
void swap(char* a, char* b){
    char c = *a;
    *a = *b;
    *b = c;
}
{
    if (!*str) 
        return;
    char* i = str;
    char* j = i + length(str) - 1;
    while (i < j) {
        swap(i, j);
        i++;
        j--;
    }
}
{  
      }","#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}",0.0
"#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}","    for (int i = 0;(i < zahl) && (i < 10) && (src[i] != '\0'); i++)
            dest[i] = src[i];
    {
    int size;
    for (int j = 1; str[j] != '\0'; j++)
    {
        size = j + 2;
        char Kopie[size];
    for (int i = 0; i < (size - 1); i++)
    {
        Kopie[size - 2- i] = str[i];
    }
    for (int i = 0; i < size; i++)
    {
        str[i] = Kopie[i];
    }
}
{  
      }",0.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}",1.0
"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void dugna(char* str)
{
    int bofod = 0;
    char gyftn[50];
    for(int nmjtg = 0; str[nmjtg] != '\0'; nmjtg++)
    {
        int bofod = 0;
        char gyftn[50];
        sooik(str[nmjtg] == 'x'|| str[nmjtg] == 'y'|| str[nmjtg] == 'q');
        else sooik(str[nmjtg] == 'X'|| str[nmjtg] == 'Y'|| str[nmjtg] == 'Q');
        else 
        {
            gyftn[bofod] = str[nmjtg];
            bofod++;
        }
    }
    str = &gyftn;
}
char* sortieren(int länge, char* str[])
{
    int bofod = 0;
    char gyftn[200];
    for(int nmjtg = 0; nmjtg < länge; nmjtg++)
    {
        for(int uotun = 0; uotun != '\0'; uotun++)
        {
            gyftn[bofod] = str[nmjtg+1][uotun];
            bofod++;
        }
    }
}   
int main( int xwbec, char* argv[] )
{  
    int yokmi = sizeof(argv) - 1;
    for(int nmjtg = 1; nmjtg <= yokmi; nmjtg++)
    {
        dugna(argv[nmjtg]);
    }
    char bnevr = sortieren(yokmi, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", bnevr); 
}",1.0
"#include <stdio.h>
#include <stdlib.h>
int main( int argc, char** argv)
{
    char text[100] = ""lasse roland max ivo"";
    char temp[100];
    char NeuString[100];
    int J = 0;
    int K = 0;
    int a = 1;
    int i;
    for ( i = 0; *(argv+i) != '\0'; i++)
    {
        if (*(argv+i) == ' ' || *(argv+i) == 'x' || *(argv+i) == 'y' || *(argv+i) == 'q'|| *(argv+i) == 'X'|| *(argv+i) == 'Y'|| *(argv+i) == 'Q')
            a++;
            continue;
        temp[J++] = *(argv+i);
    }
    temp[J] = 0;
    printf( ""x,y,q und X,Y,Q aussortiert: %s \n"", temp );
    for ( i = 0; temp[i] != '\0'; i++)
    {
        if (i == 0 || i % 3 == 0)
        NeuString[K++] = temp[i];
        continue;
    }
    NeuString[K] = 0;
    printf( ""Der neue String lautet: %s \n"", NeuString);
}","#include <stdio.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{   
     // char *argv[] is a array of strings, each command line arguments
    // int argc is the amount of command line arguments
    //loop through all command line arguements. First command line argument is always taken by default so we start at 1.
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //printf(""Current 2 %c \n"",CurrentCommandString[0]);
        //int LengthOfString = sizeof(CurrentCommandString) / sizeof(char*);
        //printf(""Current Size %i \n"",LengthOfString);
        int i = 0;
        while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
            if (CurrentCommandString[i] == 'x' 
             || CurrentCommandString[i] == 'y' 
             || CurrentCommandString[i] == 'q'
             || CurrentCommandString[i] == 'X'
             || CurrentCommandString[i] == 'Y' 
             || CurrentCommandString[i] == 'Q')
             {   
                 int j = i;
                 while (CurrentCommandString[i] != '\0' && CurrentCommandString[i] != ' ') {
                    CurrentCommandString[j] = CurrentCommandString[j + 1]; 
                    ++j; 
                 }
             }
            ++i;
         }
        //printf(""x,y,q und X,Y,Q aussortiert TEST 1: %s \n"", argv[kk]);
    }
    char StringXYQRemoved[5000];
    int StringXYQRemovedIndex = 0;
    char StringThirdRemoved[5000];
    int StringThirdRemovedIndex = 0;
    for (int kk = 1; kk < argc; kk++){
        char * CurrentCommandString = argv[kk];  
        //String 1 
        int length, j;
          // store length of s1 in the length variable
          length = 0;
          while (StringXYQRemoved[length] != '\0' && StringXYQRemoved[length] != ' ') {
            ++length;
          }
          // concatenate s2 to s1
          for (j = 0; CurrentCommandString[j] != '\0' && CurrentCommandString[length] != ' '; ++j, ++length) {
            StringXYQRemoved[length] = CurrentCommandString[j];
          }
          // terminating the s1 string
          StringXYQRemoved[length] = '\0';       
    }
        //String2
        int length, j;
        // store length of s1 in the length variable
        length = 0;
        while (StringThirdRemoved[length] != '\0' && StringThirdRemoved[length] != ' ') {
        ++length;
        }
        // concatenate s2 to s1
        for (j = 0; StringXYQRemoved[j] != '\0' && StringXYQRemoved[length] != ' '; ++length) {
         StringThirdRemoved[length] = StringXYQRemoved[j];
         //printf(""WTFFFF %c \n"",StringXYQRemoved[j]);
         j+=3;
        }
        // terminating the s1 string
        StringThirdRemoved[length] = '\0';       
    printf(""x,y,q und X,Y,Q aussortiert: %s \n"", StringXYQRemoved);
    printf(""Der neue String lautet: %s"", StringThirdRemoved);
}",0.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","{  
	for(int ozybu = 0; src[ozybu] != '\0' && dest[ozybu] != '\0' && ozybu < zahl; ozybu++)		dest[ozybu] = src[ozybu];
{
	int hzahu = 0;
	for( int ozybu = 0; str[ozybu] != '\0'; ozybu++)
		hzahu = ozybu;
	char pedoi[hzahu];
	for( int ozybu = 0; ozybu <= hzahu; ozybu++)
		pedoi[ozybu] = str[hzahu-ozybu];
	for( int ozybu = 0; ozybu <= hzahu; ozybu++)
		str[ozybu] = pedoi[ozybu];
{  
      }",1.0
"#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}","#include <stdio.h>
#include <stdlib.h>
void xweww(char* str)
{
    int crnix = 0;
    char fkbet[50];
    for(int zidmi = 0; str[zidmi] != '\0'; zidmi++)
    {
        int crnix = 0;
        char fkbet[50];
        cgcvz(str[zidmi] == 'x'|| str[zidmi] == 'y'|| str[zidmi] == 'q');
        else cgcvz(str[zidmi] == 'X'|| str[zidmi] == 'Y'|| str[zidmi] == 'Q');
        else 
        {
            fkbet[crnix] = str[zidmi];
            crnix++;
        }
    }
    str = &fkbet;
}
char* sortieren(int länge, char* str[])
{
    int crnix = 0;
    char fkbet[200];
    for(int zidmi = 0; zidmi < länge; zidmi++)
    {
        for(int iedwk = 0; iedwk != '\0'; iedwk++)
        {
            fkbet[crnix] = str[zidmi+1][iedwk];
            crnix++;
        }
    }
}   
int main( int rhuvd, char* argv[] )
{  
    int icnzg = sizeof(argv) - 1;
    for(int zidmi = 1; zidmi <= icnzg; zidmi++)
    {
        xweww(argv[zidmi]);
    }
    char sudul = sortieren(icnzg, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", sudul); 
}",1.0
"	for (int i=0;((i<zahl)&&((dest[i])!=('\0')))&&((src[i])!=('\0'));i++)
dest[i]=src[i];
{	char temp[30]="""";
	int i=0;
	for(;(str[i+1])!=('\0');i++){	for(int j=0;(str[j])!=('\0');j++) {temp[j]=str[i-j];	for(int j=0;(str[j])!=('\0');j++) {str[j]=temp[(j)];}
}
}","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"#include<stdio.h>
int main(int argc, char* argv[]){
	char a[100]= """";
	char b[100]="""";
	int x=0;
	for(int i=1 ;i<argc ;i++){
		for (int j=0; argv[i][j] != '\0'; j++){
			if(argv[i][j]== 'x' || argv[i][j]== 'y' || argv[i][j]== 'q' || argv[i][j]== 'X' || argv[i][j]== 'Y' || argv[i][j]== 'Q') continue;
			else {
				a[x]=argv[i][j];
				x+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", a);
	int y=0;
	for(int i=0; i<100; i+=3){
		b[y]=a[i];
		y++;
	}
	printf(""Der neue String lautet: %s\n"", b);
}","#include<stdio.h>
int main(int xedir, char* argv[]){
	char uguey[100]= """";
	char jybqu[100]="""";
	int blqgq=0;
	for(int wsaev=1 ;wsaev<xedir ;wsaev++){
		for (int gpkcv=0; argv[wsaev][gpkcv] != '\0'; gpkcv++){
			if(argv[wsaev][gpkcv]== 'blqgq' || argv[wsaev][gpkcv]== 'jkeki' || argv[wsaev][gpkcv]== 'q' || argv[wsaev][gpkcv]== 'X' || argv[wsaev][gpkcv]== 'Y' || argv[wsaev][gpkcv]== 'Q') continue;
			else {
				uguey[blqgq]=argv[wsaev][gpkcv];
				blqgq+=1;
			}
		}
	}
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"", uguey);
	int jkeki=0;
	for(int wsaev=0; wsaev<100; wsaev+=3){
		jybqu[jkeki]=uguey[wsaev];
		jkeki++;
	}
	printf(""Der neue String lautet: %s\n"", jybqu);
}",1.0
"{  
	for(int i = 0; src[i] != '\0' && dest[i] != '\0' && i < zahl; i++)		dest[i] = src[i];
{
	int length_str = 0;
	for( int i = 0; str[i] != '\0'; i++)
		length_str = i;
	char temp_string[length_str];
	for( int i = 0; i <= length_str; i++)
		temp_string[i] = str[length_str-i];
	for( int i = 0; i <= length_str; i++)
		str[i] = temp_string[i];
{  
      }","{  
	for(int bqyld = 0; src[bqyld] != '\0' && dest[bqyld] != '\0' && bqyld < zahl; bqyld++)		dest[bqyld] = src[bqyld];
{
	int odgoi = 0;
	for( int bqyld = 0; str[bqyld] != '\0'; bqyld++)
		odgoi = bqyld;
	char rhvjj[odgoi];
	for( int bqyld = 0; bqyld <= odgoi; bqyld++)
		rhvjj[bqyld] = str[odgoi-bqyld];
	for( int bqyld = 0; bqyld <= odgoi; bqyld++)
		str[bqyld] = rhvjj[bqyld];
{  
      }",1.0
"{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }","#include <stdio.h>
#include <stdlib.h>
void aussortieren(char* str)
{
    int t = 0;
    char temp[50];
    for(int i = 0; str[i] != '\0'; i++)
    {
        int t = 0;
        char temp[50];
        if(str[i] == 'x'|| str[i] == 'y'|| str[i] == 'q');
        else if(str[i] == 'X'|| str[i] == 'Y'|| str[i] == 'Q');
        else 
        {
            temp[t] = str[i];
            t++;
        }
    }
    str = &temp;
}
char* sortieren(int länge, char* str[])
{
    int t = 0;
    char temp[200];
    for(int i = 0; i < länge; i++)
    {
        for(int a = 0; a != '\0'; a++)
        {
            temp[t] = str[i+1][a];
            t++;
        }
    }
}   
int main( int argc, char* argv[] )
{  
    int length = sizeof(argv) - 1;
    for(int i = 1; i <= length; i++)
    {
        aussortieren(argv[i]);
    }
    char zusammen = sortieren(length, argv);
    printf(""x,y,q und X,Y,Q aussortiert: %s"", zusammen); 
}",0.0
"#include <stdio.h>
void aussortieren (char* string)
{
	for(int i = 0; string[i] != '\0'; i++)
	{
		if(string[i] == 'x' || string[i] == 'y' || string[i] == 'q' || string[i] == 'X' || string[i] == 'Y' || string[i] == 'Q' )
		{
			for(int k = i; string[k] != '\0'; k++)
			{
				string[k] = string[k+1];
			}
			i = i -1;
		}
	}
}
void zeichen3 (char* string)
{
	int z = 0;
	while(string[z] != '\0')
	{
	z++;
	}
	char tmp[z]; 
	for(int j = 0; j < z; j++)
	{
		if(j % 3 == 0)
		{
			tmp[j] = string[j];
		}
		else tmp[j] = 0;
	}
	int s =0;
	for(int i = 0; i < z; i++)
	{
		if(tmp[i] != 0)
		{
			string[s] = tmp[i];
			s++;
		}
	}
	string[s] = '\0';
}
int main(int argc, char* argv[])
{
	int z = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			z++;		
		}				
	}
	char string[z+1];
	string[z] = '\0';
	int s = 0;
	for(int k=1; k < argc; k++)
	{
		for(int i = 0; argv[k][i] != '\0'; i++)
		{
			string[s] = argv[k][i];
			s++;
		}
	}
	aussortieren(string);
	printf(""x,y,q und X,Y,Q aussortiert: %s \n"",&string[0]);
	zeichen3(string);
	printf(""Der neue String lautet: %s \n"",&string[0]);
}","{  
	int position = 0;
	while(position < zahl && dest[position] != '\0' && src[position] != '\0')		dest[position] = src[position];
		position ++;
{
	int groesse = 0;
	while(str[groesse] != '\0') groesse++;
	char kopie[groesse];
	for(int i = 0; i < groesse; i++) kopie[i] = str[i];
	for(int i = 0; i < groesse; i++){
		str[i] = kopie[groesse - 1 - i];
}
{  
      }",0.02
"#include <stdio.h>
char aussortieren (char buchstabe)
{if (buchstabe=='x'||buchstabe=='y'||buchstabe=='q'||
     buchstabe=='X'||buchstabe=='Y'||buchstabe=='Q')
    return 1;
else return 0;
}
void ersetzen (char*src)
{char tmp[100]="""";
 int fw=0;
 while (src[fw]!='\0')
    {tmp[fw]=src[fw];fw++;}
    tmp[fw]='\0';
    fw=0;
int fw_mod=0;
while (tmp[fw]!='\0')
    {if (fw%3!=0)
        {fw++;}
    else 
        {src[fw_mod]=tmp[fw];
         fw++;
         fw_mod++;}
    }
src[fw_mod]='\0';
}
int main (int argc,char*argv[])
{char str[100]="""";
int c=1;
int lv_c=0;
int lv_argc=0;
while (c!=argc)
    {while (argv[c][lv_argc]!='\0')
        {if (aussortieren(argv[c][lv_argc])) 
         lv_argc++;
         else
         {str[lv_c]=argv[c][lv_argc];
          lv_c++;
          lv_argc++;}}
    c++;lv_argc=0;}
printf (""x,y,q und X,Y,Q aussortiert: %s\n"",str);
ersetzen(str);
printf (""Der neue String lautet: %s\n"",str);
}","{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }",0.0
"{  
   for(int i=0; i<zahl && *src!='\0' && *dest!='\0'; i++)
        *dest = *src;
      dest++;
      src++;
  } 
{
    char temp[100] = """";
    char* ptemp = temp;
    for(int i=0; str[i]!=0; i++)
        temp[i] = str[i]; 
    while(*ptemp != '\0')
        ptemp++;
    ptemp--;
    while(*str!='\0')
    {
        *str = *ptemp;       
        ptemp--;
        str++;       
    }
{  
      }","{  
    int x;
    for(x = 0; x < zahl && *dest != '\0' && *src != '\0'; x++)
           *dest = *src;
       src++;
       dest++;
    {
    int y = 0;
    int count = 0;
    int tmp = 0;
    for(count=0; str[count] != 0; count++);
    for(y = 0; y <count/2; y++)
    {
        tmp = str[y];
        str[y]=str[count - 1 - y];
        str[count - 1 - y] = tmp;
        for(y = 0; y < count; y++);
}
{  
      }",0.0
"#include <stdio.h>
void xyqentfernen(char* str1){
	int i;
	int j;
	for ( i = 0,  j = 0;j<100; ++j){
	if ((str1[j] != 'x')&&(str1[j] != 'X')&&(str1[j] != 'y')&&(str1[j] != 'Y')&&(str1[j] != 'q')&&(str1[j] != 'Q'))
	str1[i++] = str1[j];
	}
}
void zsmfuegen(char* str1, char* str2){
	int j=0;
	for(;(str2[j])!=('\0');j++){}
	for (int i=0;str1[i]!='\0';i++){
		str2[j+i]=str1[i];
	}	
;}
void neuerstring(char* str1,char* str2){
	for (int i=0;str1[i]!='\0';i++){
		if((i+3)%3==0)str2[((i+3)/3)-1]=str1[i];
	}
}
int main(int argc,char** argv){
	if (argc<2) return 0;
	char zsm[100]="""";
	char neustr[100]="""";
	for(int i=1;i<argc;i++) {
		zsmfuegen(argv[i],zsm);}
		xyqentfernen(zsm);
	neuerstring(zsm,neustr);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",zsm);
	printf(""Der neue String lautet: %s"",neustr);
}","#include <stdio.h>
void lwprg(char* str1){
	int aurmq;
	int xgdyn;
	for ( aurmq = 0,  xgdyn = 0;xgdyn<100; ++xgdyn){
	if ((str1[xgdyn] != 'x')&&(str1[xgdyn] != 'X')&&(str1[xgdyn] != 'y')&&(str1[xgdyn] != 'Y')&&(str1[xgdyn] != 'q')&&(str1[xgdyn] != 'Q'))
	str1[aurmq++] = str1[xgdyn];
	}
}
void hjplw(char* str1, char* str2){
	int xgdyn=0;
	for(;(str2[xgdyn])!=('\0');xgdyn++){}
	for (int aurmq=0;str1[aurmq]!='\0';aurmq++){
		str2[xgdyn+aurmq]=str1[aurmq];
	}	
;}
void lwtxj(char* str1,char* str2){
	for (int aurmq=0;str1[aurmq]!='\0';aurmq++){
		if((aurmq+3)%3==0)str2[((aurmq+3)/3)-1]=str1[aurmq];
	}
}
int main(int bsbda,char** argv){
	if (bsbda<2) return 0;
	char fppku[100]="""";
	char inktv[100]="""";
	for(int aurmq=1;aurmq<bsbda;aurmq++) {
		hjplw(argv[aurmq],fppku);}
		lwprg(fppku);
	lwtxj(fppku,inktv);
	printf(""x,y,q und X,Y,Q aussortiert: %s\n"",fppku);
	printf(""Der neue String lautet: %s"",inktv);
}",1.0
